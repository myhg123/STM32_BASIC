
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006498  08006498  00016498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006558  08006558  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006560  08006560  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006560  08006560  00016560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006564  08006564  00016564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b14  20000010  08006578  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b24  08006578  00024b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c0f  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032fc  00000000  00000000  00036c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00039f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd8  00000000  00000000  0003b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003193  00000000  00000000  0003c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000167b3  00000000  00000000  0003f553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098883  00000000  00000000  00055d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000561c  00000000  00000000  000ee58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f3ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006480 	.word	0x08006480

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006480 	.word	0x08006480

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e0:	f000 fc16 	bl	8000d10 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e4:	f000 f840 	bl	8000568 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e8:	f000 f966 	bl	80007b8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004ec:	f000 f93a 	bl	8000764 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 80004f0:	f000 f898 	bl	8000624 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	initUart(&huart2);
 80004f4:	4811      	ldr	r0, [pc, #68]	; (800053c <main+0x60>)
 80004f6:	f000 fb99 	bl	8000c2c <initUart>
	//SET TIMER1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004fa:	2100      	movs	r1, #0
 80004fc:	4810      	ldr	r0, [pc, #64]	; (8000540 <main+0x64>)
 80004fe:	f001 fcbb 	bl	8001e78 <HAL_TIM_PWM_Start>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000502:	f003 fa33 	bl	800396c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000506:	4a0f      	ldr	r2, [pc, #60]	; (8000544 <main+0x68>)
 8000508:	2100      	movs	r1, #0
 800050a:	480f      	ldr	r0, [pc, #60]	; (8000548 <main+0x6c>)
 800050c:	f003 fa78 	bl	8003a00 <osThreadNew>
 8000510:	4603      	mov	r3, r0
 8000512:	4a0e      	ldr	r2, [pc, #56]	; (800054c <main+0x70>)
 8000514:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of myTask02 */
	myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <main+0x74>)
 8000518:	2100      	movs	r1, #0
 800051a:	480e      	ldr	r0, [pc, #56]	; (8000554 <main+0x78>)
 800051c:	f003 fa70 	bl	8003a00 <osThreadNew>
 8000520:	4603      	mov	r3, r0
 8000522:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <main+0x7c>)
 8000524:	6013      	str	r3, [r2, #0]

	/* creation of myTask03 */
	myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000526:	4a0d      	ldr	r2, [pc, #52]	; (800055c <main+0x80>)
 8000528:	2100      	movs	r1, #0
 800052a:	480d      	ldr	r0, [pc, #52]	; (8000560 <main+0x84>)
 800052c:	f003 fa68 	bl	8003a00 <osThreadNew>
 8000530:	4603      	mov	r3, r0
 8000532:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <main+0x88>)
 8000534:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000536:	f003 fa3d 	bl	80039b4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800053a:	e7fe      	b.n	800053a <main+0x5e>
 800053c:	20000074 	.word	0x20000074
 8000540:	2000002c 	.word	0x2000002c
 8000544:	080064d4 	.word	0x080064d4
 8000548:	080008b1 	.word	0x080008b1
 800054c:	200000bc 	.word	0x200000bc
 8000550:	080064f8 	.word	0x080064f8
 8000554:	08000999 	.word	0x08000999
 8000558:	200000c0 	.word	0x200000c0
 800055c:	0800651c 	.word	0x0800651c
 8000560:	080009e1 	.word	0x080009e1
 8000564:	200000c4 	.word	0x200000c4

08000568 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f005 ff48 	bl	800640c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <SystemClock_Config+0xb4>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a21      	ldr	r2, [pc, #132]	; (800061c <SystemClock_Config+0xb4>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <SystemClock_Config+0xb4>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <SystemClock_Config+0xb8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1b      	ldr	r2, [pc, #108]	; (8000620 <SystemClock_Config+0xb8>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <SystemClock_Config+0xb8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 ff4d 	bl	8001478 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x80>
		Error_Handler();
 80005e4:	f000 fa04 	bl	80009f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f001 f9b0 	bl	8001968 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xaa>
		Error_Handler();
 800060e:	f000 f9ef 	bl	80009f0 <Error_Handler>
	}
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	; 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b096      	sub	sp, #88	; 0x58
 8000628:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800062a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000638:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2220      	movs	r2, #32
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f005 fed5 	bl	800640c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000662:	4b3e      	ldr	r3, [pc, #248]	; (800075c <MX_TIM1_Init+0x138>)
 8000664:	4a3e      	ldr	r2, [pc, #248]	; (8000760 <MX_TIM1_Init+0x13c>)
 8000666:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 16 - 1;
 8000668:	4b3c      	ldr	r3, [pc, #240]	; (800075c <MX_TIM1_Init+0x138>)
 800066a:	220f      	movs	r2, #15
 800066c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066e:	4b3b      	ldr	r3, [pc, #236]	; (800075c <MX_TIM1_Init+0x138>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 8000674:	4b39      	ldr	r3, [pc, #228]	; (800075c <MX_TIM1_Init+0x138>)
 8000676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800067a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067c:	4b37      	ldr	r3, [pc, #220]	; (800075c <MX_TIM1_Init+0x138>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000682:	4b36      	ldr	r3, [pc, #216]	; (800075c <MX_TIM1_Init+0x138>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000688:	4b34      	ldr	r3, [pc, #208]	; (800075c <MX_TIM1_Init+0x138>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800068e:	4833      	ldr	r0, [pc, #204]	; (800075c <MX_TIM1_Init+0x138>)
 8000690:	f001 fb4a 	bl	8001d28 <HAL_TIM_Base_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM1_Init+0x7a>
		Error_Handler();
 800069a:	f000 f9a9 	bl	80009f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80006a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006a8:	4619      	mov	r1, r3
 80006aa:	482c      	ldr	r0, [pc, #176]	; (800075c <MX_TIM1_Init+0x138>)
 80006ac:	f001 fd56 	bl	800215c <HAL_TIM_ConfigClockSource>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM1_Init+0x96>
		Error_Handler();
 80006b6:	f000 f99b 	bl	80009f0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80006ba:	4828      	ldr	r0, [pc, #160]	; (800075c <MX_TIM1_Init+0x138>)
 80006bc:	f001 fb83 	bl	8001dc6 <HAL_TIM_PWM_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM1_Init+0xa6>
		Error_Handler();
 80006c6:	f000 f993 	bl	80009f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ca:	2300      	movs	r3, #0
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80006d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006d6:	4619      	mov	r1, r3
 80006d8:	4820      	ldr	r0, [pc, #128]	; (800075c <MX_TIM1_Init+0x138>)
 80006da:	f002 f8df 	bl	800289c <HAL_TIMEx_MasterConfigSynchronization>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM1_Init+0xc4>
		Error_Handler();
 80006e4:	f000 f984 	bl	80009f0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e8:	2360      	movs	r3, #96	; 0x60
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006f4:	2300      	movs	r3, #0
 80006f6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	2200      	movs	r2, #0
 800070a:	4619      	mov	r1, r3
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <MX_TIM1_Init+0x138>)
 800070e:	f001 fc63 	bl	8001fd8 <HAL_TIM_PWM_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0xf8>
		Error_Handler();
 8000718:	f000 f96a 	bl	80009f0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000734:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <MX_TIM1_Init+0x138>)
 8000740:	f002 f91a 	bl	8002978 <HAL_TIMEx_ConfigBreakDeadTime>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0x12a>
		Error_Handler();
 800074a:	f000 f951 	bl	80009f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <MX_TIM1_Init+0x138>)
 8000750:	f000 f9a2 	bl	8000a98 <HAL_TIM_MspPostInit>

}
 8000754:	bf00      	nop
 8000756:	3758      	adds	r7, #88	; 0x58
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000002c 	.word	0x2000002c
 8000760:	40010000 	.word	0x40010000

08000764 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_USART2_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800079c:	f002 f93e 	bl	8002a1c <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80007a6:	f000 f923 	bl	80009f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000074 	.word	0x20000074
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <MX_GPIO_Init+0xe8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a32      	ldr	r2, [pc, #200]	; (80008a0 <MX_GPIO_Init+0xe8>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <MX_GPIO_Init+0xe8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_GPIO_Init+0xe8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a2b      	ldr	r2, [pc, #172]	; (80008a0 <MX_GPIO_Init+0xe8>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_GPIO_Init+0xe8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_GPIO_Init+0xe8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a24      	ldr	r2, [pc, #144]	; (80008a0 <MX_GPIO_Init+0xe8>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_GPIO_Init+0xe8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ST1_Pin | ST2_Pin | ST3_Pin | ST4_Pin,
 8000822:	2200      	movs	r2, #0
 8000824:	210f      	movs	r1, #15
 8000826:	481f      	ldr	r0, [pc, #124]	; (80008a4 <MX_GPIO_Init+0xec>)
 8000828:	f000 fe0c 	bl	8001444 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2180      	movs	r1, #128	; 0x80
 8000830:	481d      	ldr	r0, [pc, #116]	; (80008a8 <MX_GPIO_Init+0xf0>)
 8000832:	f000 fe07 	bl	8001444 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083c:	481b      	ldr	r0, [pc, #108]	; (80008ac <MX_GPIO_Init+0xf4>)
 800083e:	f000 fe01 	bl	8001444 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ST1_Pin ST2_Pin ST3_Pin ST4_Pin */
	GPIO_InitStruct.Pin = ST1_Pin | ST2_Pin | ST3_Pin | ST4_Pin;
 8000842:	230f      	movs	r3, #15
 8000844:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4619      	mov	r1, r3
 8000858:	4812      	ldr	r0, [pc, #72]	; (80008a4 <MX_GPIO_Init+0xec>)
 800085a:	f000 fc6f 	bl	800113c <HAL_GPIO_Init>

	/*Configure GPIO pin : IN2_Pin */
	GPIO_InitStruct.Pin = IN2_Pin;
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(IN2_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4619      	mov	r1, r3
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_GPIO_Init+0xf0>)
 8000876:	f000 fc61 	bl	800113c <HAL_GPIO_Init>

	/*Configure GPIO pin : IN1_Pin */
	GPIO_InitStruct.Pin = IN1_Pin;
 800087a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_GPIO_Init+0xf4>)
 8000894:	f000 fc52 	bl	800113c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020400 	.word	0x40020400
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020000 	.word	0x40020000

080008b0 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008be:	4833      	ldr	r0, [pc, #204]	; (800098c <StartDefaultTask+0xdc>)
 80008c0:	f000 fdc0 	bl	8001444 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2180      	movs	r1, #128	; 0x80
 80008c8:	4831      	ldr	r0, [pc, #196]	; (8000990 <StartDefaultTask+0xe0>)
 80008ca:	f000 fdbb 	bl	8001444 <HAL_GPIO_WritePin>
		for (int i = 0; i < 1000; i++) {
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	e009      	b.n	80008e8 <StartDefaultTask+0x38>
			htim1.Instance->CCR1 = i;
 80008d4:	4b2f      	ldr	r3, [pc, #188]	; (8000994 <StartDefaultTask+0xe4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
			osDelay(1);
 80008dc:	2001      	movs	r0, #1
 80008de:	f003 f921 	bl	8003b24 <osDelay>
		for (int i = 0; i < 1000; i++) {
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	3301      	adds	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008ee:	dbf1      	blt.n	80008d4 <StartDefaultTask+0x24>
		}

		// 최�? ?��?�� 1�? ?��?��
		osDelay(1000);
 80008f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f4:	f003 f916 	bl	8003b24 <osDelay>

		for (int i = 0; i < 1000; i++) {
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	e00c      	b.n	8000918 <StartDefaultTask+0x68>
			htim1.Instance->CCR1 = 999 - i;
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8000904:	3303      	adds	r3, #3
 8000906:	4a23      	ldr	r2, [pc, #140]	; (8000994 <StartDefaultTask+0xe4>)
 8000908:	6812      	ldr	r2, [r2, #0]
 800090a:	6353      	str	r3, [r2, #52]	; 0x34
			osDelay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f003 f909 	bl	8003b24 <osDelay>
		for (int i = 0; i < 1000; i++) {
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	3301      	adds	r3, #1
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800091e:	dbee      	blt.n	80008fe <StartDefaultTask+0x4e>
		}

		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000926:	4819      	ldr	r0, [pc, #100]	; (800098c <StartDefaultTask+0xdc>)
 8000928:	f000 fd8c 	bl	8001444 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	4817      	ldr	r0, [pc, #92]	; (8000990 <StartDefaultTask+0xe0>)
 8000932:	f000 fd87 	bl	8001444 <HAL_GPIO_WritePin>

		for (int i = 0; i < 1000; i++) {
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	e009      	b.n	8000950 <StartDefaultTask+0xa0>
			htim1.Instance->CCR1 = i;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <StartDefaultTask+0xe4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	635a      	str	r2, [r3, #52]	; 0x34
			osDelay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f003 f8ed 	bl	8003b24 <osDelay>
		for (int i = 0; i < 1000; i++) {
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	3301      	adds	r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000956:	dbf1      	blt.n	800093c <StartDefaultTask+0x8c>
		}

		// 최�? ?��?�� 1�? ?��?��
		osDelay(1000);
 8000958:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095c:	f003 f8e2 	bl	8003b24 <osDelay>

		for (int i = 0; i < 1000; i++) {
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	e00c      	b.n	8000980 <StartDefaultTask+0xd0>
			htim1.Instance->CCR1 = 999 - i;
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 800096c:	3303      	adds	r3, #3
 800096e:	4a09      	ldr	r2, [pc, #36]	; (8000994 <StartDefaultTask+0xe4>)
 8000970:	6812      	ldr	r2, [r2, #0]
 8000972:	6353      	str	r3, [r2, #52]	; 0x34
			osDelay(1);
 8000974:	2001      	movs	r0, #1
 8000976:	f003 f8d5 	bl	8003b24 <osDelay>
		for (int i = 0; i < 1000; i++) {
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	3301      	adds	r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000986:	dbee      	blt.n	8000966 <StartDefaultTask+0xb6>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 8000988:	e796      	b.n	80008b8 <StartDefaultTask+0x8>
 800098a:	bf00      	nop
 800098c:	40020000 	.word	0x40020000
 8000990:	40020800 	.word	0x40020800
 8000994:	2000002c 	.word	0x2000002c

08000998 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	uint8_t step[] = { 0b0101, 0b0110, 0b1010, 0b1001 };
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <StartTask02+0x40>)
 80009a2:	60fb      	str	r3, [r7, #12]

	for (;;) {
		ST1_GPIO_Port->ODR = step[0];
 80009a4:	7b3a      	ldrb	r2, [r7, #12]
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <StartTask02+0x44>)
 80009a8:	615a      	str	r2, [r3, #20]
		osDelay(3);
 80009aa:	2003      	movs	r0, #3
 80009ac:	f003 f8ba 	bl	8003b24 <osDelay>
		ST2_GPIO_Port->ODR = step[1];
 80009b0:	7b7a      	ldrb	r2, [r7, #13]
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <StartTask02+0x44>)
 80009b4:	615a      	str	r2, [r3, #20]
		osDelay(3);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f003 f8b4 	bl	8003b24 <osDelay>
		ST3_GPIO_Port->ODR = step[2];
 80009bc:	7bba      	ldrb	r2, [r7, #14]
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <StartTask02+0x44>)
 80009c0:	615a      	str	r2, [r3, #20]
		osDelay(3);
 80009c2:	2003      	movs	r0, #3
 80009c4:	f003 f8ae 	bl	8003b24 <osDelay>
		ST4_GPIO_Port->ODR = step[3];
 80009c8:	7bfa      	ldrb	r2, [r7, #15]
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <StartTask02+0x44>)
 80009cc:	615a      	str	r2, [r3, #20]
		osDelay(3);
 80009ce:	2003      	movs	r0, #3
 80009d0:	f003 f8a8 	bl	8003b24 <osDelay>
		ST1_GPIO_Port->ODR = step[0];
 80009d4:	e7e6      	b.n	80009a4 <StartTask02+0xc>
 80009d6:	bf00      	nop
 80009d8:	090a0605 	.word	0x090a0605
 80009dc:	40020400 	.word	0x40020400

080009e0 <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f003 f89b 	bl	8003b24 <osDelay>
 80009ee:	e7fb      	b.n	80009e8 <StartTask03+0x8>

080009f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_MspInit+0x54>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <HAL_MspInit+0x54>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x54>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_MspInit+0x54>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_MspInit+0x54>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_MspInit+0x54>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	f06f 0001 	mvn.w	r0, #1
 8000a42:	f000 fab2 	bl	8000faa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <HAL_TIM_Base_MspInit+0x3c>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10d      	bne.n	8000a82 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_TIM_Base_MspInit+0x40>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a09      	ldr	r2, [pc, #36]	; (8000a94 <HAL_TIM_Base_MspInit+0x40>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <HAL_TIM_Base_MspInit+0x40>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40010000 	.word	0x40010000
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <HAL_TIM_MspPostInit+0x68>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d11e      	bne.n	8000af8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_TIM_MspPostInit+0x6c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <HAL_TIM_MspPostInit+0x6c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_TIM_MspPostInit+0x6c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EN_Pin;
 8000ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ada:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	4619      	mov	r1, r3
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_TIM_MspPostInit+0x70>)
 8000af4:	f000 fb22 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000af8:	bf00      	nop
 8000afa:	3720      	adds	r7, #32
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010000 	.word	0x40010000
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <HAL_UART_MspInit+0x94>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d133      	bne.n	8000b96 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <HAL_UART_MspInit+0x98>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a1b      	ldr	r2, [pc, #108]	; (8000ba4 <HAL_UART_MspInit+0x98>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_UART_MspInit+0x98>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_UART_MspInit+0x98>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <HAL_UART_MspInit+0x98>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_UART_MspInit+0x98>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b66:	230c      	movs	r3, #12
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b76:	2307      	movs	r3, #7
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <HAL_UART_MspInit+0x9c>)
 8000b82:	f000 fadb 	bl	800113c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2105      	movs	r1, #5
 8000b8a:	2026      	movs	r0, #38	; 0x26
 8000b8c:	f000 fa0d 	bl	8000faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b90:	2026      	movs	r0, #38	; 0x26
 8000b92:	f000 fa26 	bl	8000fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f8ea 	bl	8000db4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000be0:	f004 fbae 	bl	8005340 <xTaskGetSchedulerState>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d001      	beq.n	8000bee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bea:	f005 f995 	bl	8005f18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <USART2_IRQHandler+0x10>)
 8000bfa:	f001 ff85 	bl	8002b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000074 	.word	0x20000074

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <initUart>:
int rxBufferPp; // put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// init device
void initUart(UART_HandleTypeDef *inHuart){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	myHuart = inHuart;
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <initUart+0x24>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <initUart+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4904      	ldr	r1, [pc, #16]	; (8000c54 <initUart+0x28>)
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 ff3a 	bl	8002abc <HAL_UART_Receive_IT>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200000c8 	.word	0x200000c8
 8000c54:	200001cf 	.word	0x200001cf

08000c58 <HAL_UART_RxCpltCallback>:

// process received charactor
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++]=rxChar;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_UART_RxCpltCallback+0x50>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	4910      	ldr	r1, [pc, #64]	; (8000ca8 <HAL_UART_RxCpltCallback+0x50>)
 8000c68:	600a      	str	r2, [r1, #0]
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_UART_RxCpltCallback+0x54>)
 8000c6c:	7811      	ldrb	r1, [r2, #0]
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <HAL_UART_RxCpltCallback+0x58>)
 8000c70:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <HAL_UART_RxCpltCallback+0x50>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_UART_RxCpltCallback+0x5c>)
 8000c78:	fb83 1302 	smull	r1, r3, r3, r2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	11d9      	asrs	r1, r3, #7
 8000c80:	17d3      	asrs	r3, r2, #31
 8000c82:	1ac9      	subs	r1, r1, r3
 8000c84:	460b      	mov	r3, r1
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	1ad1      	subs	r1, r2, r3
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_UART_RxCpltCallback+0x50>)
 8000c8e:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_UART_RxCpltCallback+0x60>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2201      	movs	r2, #1
 8000c96:	4905      	ldr	r1, [pc, #20]	; (8000cac <HAL_UART_RxCpltCallback+0x54>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 ff0f 	bl	8002abc <HAL_UART_Receive_IT>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200000cc 	.word	0x200000cc
 8000cac:	200001cf 	.word	0x200001cf
 8000cb0:	200000d0 	.word	0x200000d0
 8000cb4:	80808081 	.word	0x80808081
 8000cb8:	200000c8 	.word	0x200000c8

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc0:	f7ff ffa2 	bl	8000c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	; (8000cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	; (8000d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f005 fb97 	bl	800641c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fbf5 	bl	80004dc <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d00:	08006568 	.word	0x08006568
  ldr r2, =_sbss
 8000d04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d08:	20004b24 	.word	0x20004b24

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <HAL_Init+0x40>)
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_Init+0x40>)
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_Init+0x40>)
 8000d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f92b 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	200f      	movs	r0, #15
 8000d40:	f000 f808 	bl	8000d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff fe5a 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x54>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x58>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f943 	bl	8000ffe <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00e      	b.n	8000da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d80a      	bhi.n	8000d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f90b 	bl	8000faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <HAL_InitTick+0x5c>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	200001d0 	.word	0x200001d0

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	200001d0 	.word	0x200001d0

08000df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e26:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	60d3      	str	r3, [r2, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <__NVIC_GetPriorityGrouping+0x18>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	f003 0307 	and.w	r3, r3, #7
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	db0b      	blt.n	8000e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 021f 	and.w	r2, r3, #31
 8000e70:	4907      	ldr	r1, [pc, #28]	; (8000e90 <__NVIC_EnableIRQ+0x38>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	2001      	movs	r0, #1
 8000e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f60:	d301      	bcc.n	8000f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00f      	b.n	8000f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <SysTick_Config+0x40>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f7ff ff8e 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SysTick_Config+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SysTick_Config+0x40>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff29 	bl	8000df4 <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff3e 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff8e 	bl	8000ee8 <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5d 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff31 	bl	8000e58 <__NVIC_EnableIRQ>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffa2 	bl	8000f50 <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff feda 	bl	8000ddc <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d008      	beq.n	8001048 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e052      	b.n	80010ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0216 	bic.w	r2, r2, #22
 8001056:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	695a      	ldr	r2, [r3, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001066:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	2b00      	cmp	r3, #0
 800106e:	d103      	bne.n	8001078 <HAL_DMA_Abort+0x62>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001074:	2b00      	cmp	r3, #0
 8001076:	d007      	beq.n	8001088 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0208 	bic.w	r2, r2, #8
 8001086:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001098:	e013      	b.n	80010c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800109a:	f7ff fe9f 	bl	8000ddc <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d90c      	bls.n	80010c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2220      	movs	r2, #32
 80010ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e015      	b.n	80010ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1e4      	bne.n	800109a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d4:	223f      	movs	r2, #63	; 0x3f
 80010d6:	409a      	lsls	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d004      	beq.n	8001114 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2280      	movs	r2, #128	; 0x80
 800110e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e00c      	b.n	800112e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2205      	movs	r2, #5
 8001118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e159      	b.n	800140c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8148 	bne.w	8001406 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	2b02      	cmp	r3, #2
 800118c:	d130      	bne.n	80011f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 0201 	and.w	r2, r3, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d017      	beq.n	800122c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80a2 	beq.w	8001406 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b57      	ldr	r3, [pc, #348]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a56      	ldr	r2, [pc, #344]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b54      	ldr	r3, [pc, #336]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a52      	ldr	r2, [pc, #328]	; (8001428 <HAL_GPIO_Init+0x2ec>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a49      	ldr	r2, [pc, #292]	; (800142c <HAL_GPIO_Init+0x2f0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x202>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a48      	ldr	r2, [pc, #288]	; (8001430 <HAL_GPIO_Init+0x2f4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x1fe>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a47      	ldr	r2, [pc, #284]	; (8001434 <HAL_GPIO_Init+0x2f8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x1fa>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a46      	ldr	r2, [pc, #280]	; (8001438 <HAL_GPIO_Init+0x2fc>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x1f6>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a45      	ldr	r2, [pc, #276]	; (800143c <HAL_GPIO_Init+0x300>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x1f2>
 800132a:	2304      	movs	r3, #4
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800132e:	2307      	movs	r3, #7
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x204>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x204>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	; (8001428 <HAL_GPIO_Init+0x2ec>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <HAL_GPIO_Init+0x304>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001382:	4a2f      	ldr	r2, [pc, #188]	; (8001440 <HAL_GPIO_Init+0x304>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <HAL_GPIO_Init+0x304>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ac:	4a24      	ldr	r2, [pc, #144]	; (8001440 <HAL_GPIO_Init+0x304>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_GPIO_Init+0x304>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d6:	4a1a      	ldr	r2, [pc, #104]	; (8001440 <HAL_GPIO_Init+0x304>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_GPIO_Init+0x304>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001400:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <HAL_GPIO_Init+0x304>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f aea2 	bls.w	8001158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e267      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d075      	beq.n	8001582 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001496:	4b88      	ldr	r3, [pc, #544]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d00c      	beq.n	80014bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a2:	4b85      	ldr	r3, [pc, #532]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d112      	bne.n	80014d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ae:	4b82      	ldr	r3, [pc, #520]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ba:	d10b      	bne.n	80014d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	4b7e      	ldr	r3, [pc, #504]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d05b      	beq.n	8001580 <HAL_RCC_OscConfig+0x108>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d157      	bne.n	8001580 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e242      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014dc:	d106      	bne.n	80014ec <HAL_RCC_OscConfig+0x74>
 80014de:	4b76      	ldr	r3, [pc, #472]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a75      	ldr	r2, [pc, #468]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e01d      	b.n	8001528 <HAL_RCC_OscConfig+0xb0>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0x98>
 80014f6:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a6f      	ldr	r2, [pc, #444]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b6d      	ldr	r3, [pc, #436]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a6c      	ldr	r2, [pc, #432]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e00b      	b.n	8001528 <HAL_RCC_OscConfig+0xb0>
 8001510:	4b69      	ldr	r3, [pc, #420]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a68      	ldr	r2, [pc, #416]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b66      	ldr	r3, [pc, #408]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a65      	ldr	r2, [pc, #404]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fc54 	bl	8000ddc <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fc50 	bl	8000ddc <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e207      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b5b      	ldr	r3, [pc, #364]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0xc0>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fc40 	bl	8000ddc <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fc3c 	bl	8000ddc <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1f3      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	4b51      	ldr	r3, [pc, #324]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0xe8>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d063      	beq.n	8001656 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800158e:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159a:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d11c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a6:	4b44      	ldr	r3, [pc, #272]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d116      	bne.n	80015e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_RCC_OscConfig+0x152>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e1c7      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4937      	ldr	r1, [pc, #220]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	e03a      	b.n	8001656 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e8:	4b34      	ldr	r3, [pc, #208]	; (80016bc <HAL_RCC_OscConfig+0x244>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff fbf5 	bl	8000ddc <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fbf1 	bl	8000ddc <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1a8      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001608:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4925      	ldr	r1, [pc, #148]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
 8001628:	e015      	b.n	8001656 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_RCC_OscConfig+0x244>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fbd4 	bl	8000ddc <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff fbd0 	bl	8000ddc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e187      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d036      	beq.n	80016d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d016      	beq.n	8001698 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_RCC_OscConfig+0x248>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff fbb4 	bl	8000ddc <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff fbb0 	bl	8000ddc <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e167      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_OscConfig+0x240>)
 800168c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x200>
 8001696:	e01b      	b.n	80016d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_OscConfig+0x248>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff fb9d 	bl	8000ddc <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a4:	e00e      	b.n	80016c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a6:	f7ff fb99 	bl	8000ddc <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d907      	bls.n	80016c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e150      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
 80016b8:	40023800 	.word	0x40023800
 80016bc:	42470000 	.word	0x42470000
 80016c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c4:	4b88      	ldr	r3, [pc, #544]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 80016c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1ea      	bne.n	80016a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 8097 	beq.w	800180c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e2:	4b81      	ldr	r3, [pc, #516]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10f      	bne.n	800170e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	4b7d      	ldr	r3, [pc, #500]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a7c      	ldr	r2, [pc, #496]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b7a      	ldr	r3, [pc, #488]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170a:	2301      	movs	r3, #1
 800170c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170e:	4b77      	ldr	r3, [pc, #476]	; (80018ec <HAL_RCC_OscConfig+0x474>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d118      	bne.n	800174c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171a:	4b74      	ldr	r3, [pc, #464]	; (80018ec <HAL_RCC_OscConfig+0x474>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a73      	ldr	r2, [pc, #460]	; (80018ec <HAL_RCC_OscConfig+0x474>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001726:	f7ff fb59 	bl	8000ddc <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172e:	f7ff fb55 	bl	8000ddc <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e10c      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	4b6a      	ldr	r3, [pc, #424]	; (80018ec <HAL_RCC_OscConfig+0x474>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x2ea>
 8001754:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001758:	4a63      	ldr	r2, [pc, #396]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6713      	str	r3, [r2, #112]	; 0x70
 8001760:	e01c      	b.n	800179c <HAL_RCC_OscConfig+0x324>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b05      	cmp	r3, #5
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x30c>
 800176a:	4b5f      	ldr	r3, [pc, #380]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	4a5e      	ldr	r2, [pc, #376]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6713      	str	r3, [r2, #112]	; 0x70
 8001776:	4b5c      	ldr	r3, [pc, #368]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	4a5b      	ldr	r2, [pc, #364]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6713      	str	r3, [r2, #112]	; 0x70
 8001782:	e00b      	b.n	800179c <HAL_RCC_OscConfig+0x324>
 8001784:	4b58      	ldr	r3, [pc, #352]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001788:	4a57      	ldr	r2, [pc, #348]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	6713      	str	r3, [r2, #112]	; 0x70
 8001790:	4b55      	ldr	r3, [pc, #340]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	4a54      	ldr	r2, [pc, #336]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001796:	f023 0304 	bic.w	r3, r3, #4
 800179a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff fb1a 	bl	8000ddc <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7ff fb16 	bl	8000ddc <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e0cb      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c2:	4b49      	ldr	r3, [pc, #292]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0ee      	beq.n	80017ac <HAL_RCC_OscConfig+0x334>
 80017ce:	e014      	b.n	80017fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7ff fb04 	bl	8000ddc <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff fb00 	bl	8000ddc <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e0b5      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ee:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ee      	bne.n	80017d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001800:	4b39      	ldr	r3, [pc, #228]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	4a38      	ldr	r2, [pc, #224]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800180a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80a1 	beq.w	8001958 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001816:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	d05c      	beq.n	80018dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d141      	bne.n	80018ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <HAL_RCC_OscConfig+0x478>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff fad4 	bl	8000ddc <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff fad0 	bl	8000ddc <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e087      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	019b      	lsls	r3, r3, #6
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	085b      	lsrs	r3, r3, #1
 800186e:	3b01      	subs	r3, #1
 8001870:	041b      	lsls	r3, r3, #16
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	061b      	lsls	r3, r3, #24
 800187a:	491b      	ldr	r1, [pc, #108]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_RCC_OscConfig+0x478>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff faa9 	bl	8000ddc <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff faa5 	bl	8000ddc <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e05c      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x416>
 80018ac:	e054      	b.n	8001958 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_RCC_OscConfig+0x478>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fa92 	bl	8000ddc <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018bc:	f7ff fa8e 	bl	8000ddc <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e045      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_RCC_OscConfig+0x470>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x444>
 80018da:	e03d      	b.n	8001958 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e038      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40007000 	.word	0x40007000
 80018f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_RCC_OscConfig+0x4ec>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d028      	beq.n	8001954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d121      	bne.n	8001954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d11a      	bne.n	8001954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001924:	4013      	ands	r3, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800192a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800192c:	4293      	cmp	r3, r2
 800192e:	d111      	bne.n	8001954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	085b      	lsrs	r3, r3, #1
 800193c:	3b01      	subs	r3, #1
 800193e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d107      	bne.n	8001954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0cc      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d90c      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0b8      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019bc:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a58      	ldr	r2, [pc, #352]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d4:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a52      	ldr	r2, [pc, #328]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e0:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	494d      	ldr	r1, [pc, #308]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d044      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d119      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d003      	beq.n	8001a26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a26:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e06f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a36:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e067      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f023 0203 	bic.w	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4934      	ldr	r1, [pc, #208]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a58:	f7ff f9c0 	bl	8000ddc <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a60:	f7ff f9bc 	bl	8000ddc <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e04f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 020c 	and.w	r2, r3, #12
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d1eb      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d20c      	bcs.n	8001ab0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e032      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4916      	ldr	r1, [pc, #88]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	490e      	ldr	r1, [pc, #56]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aee:	f000 f821 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001af2:	4602      	mov	r2, r0
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	490a      	ldr	r1, [pc, #40]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	5ccb      	ldrb	r3, [r1, r3]
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f920 	bl	8000d54 <HAL_InitTick>

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00
 8001b24:	40023800 	.word	0x40023800
 8001b28:	08006540 	.word	0x08006540
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b38:	b090      	sub	sp, #64	; 0x40
 8001b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b40:	2300      	movs	r3, #0
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b44:	2300      	movs	r3, #0
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b4c:	4b59      	ldr	r3, [pc, #356]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d00d      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x40>
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	f200 80a1 	bhi.w	8001ca0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x34>
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d003      	beq.n	8001b6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b66:	e09b      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b6c:	e09b      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b6e:	4b53      	ldr	r3, [pc, #332]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x188>)
 8001b70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b72:	e098      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b74:	4b4f      	ldr	r3, [pc, #316]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b7e:	4b4d      	ldr	r3, [pc, #308]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d028      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	099b      	lsrs	r3, r3, #6
 8001b90:	2200      	movs	r2, #0
 8001b92:	623b      	str	r3, [r7, #32]
 8001b94:	627a      	str	r2, [r7, #36]	; 0x24
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x188>)
 8001ba0:	fb03 f201 	mul.w	r2, r3, r1
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	fb00 f303 	mul.w	r3, r0, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	4a43      	ldr	r2, [pc, #268]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x188>)
 8001bae:	fba0 1202 	umull	r1, r2, r0, r2
 8001bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bb4:	460a      	mov	r2, r1
 8001bb6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bba:	4413      	add	r3, r2
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	61fa      	str	r2, [r7, #28]
 8001bc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bce:	f7fe fb07 	bl	80001e0 <__aeabi_uldivmod>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bda:	e053      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bdc:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	099b      	lsrs	r3, r3, #6
 8001be2:	2200      	movs	r2, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	617a      	str	r2, [r7, #20]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bee:	f04f 0b00 	mov.w	fp, #0
 8001bf2:	4652      	mov	r2, sl
 8001bf4:	465b      	mov	r3, fp
 8001bf6:	f04f 0000 	mov.w	r0, #0
 8001bfa:	f04f 0100 	mov.w	r1, #0
 8001bfe:	0159      	lsls	r1, r3, #5
 8001c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c04:	0150      	lsls	r0, r2, #5
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	ebb2 080a 	subs.w	r8, r2, sl
 8001c0e:	eb63 090b 	sbc.w	r9, r3, fp
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c26:	ebb2 0408 	subs.w	r4, r2, r8
 8001c2a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	00eb      	lsls	r3, r5, #3
 8001c38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c3c:	00e2      	lsls	r2, r4, #3
 8001c3e:	4614      	mov	r4, r2
 8001c40:	461d      	mov	r5, r3
 8001c42:	eb14 030a 	adds.w	r3, r4, sl
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	eb45 030b 	adc.w	r3, r5, fp
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	028b      	lsls	r3, r1, #10
 8001c5e:	4621      	mov	r1, r4
 8001c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c64:	4621      	mov	r1, r4
 8001c66:	028a      	lsls	r2, r1, #10
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	60fa      	str	r2, [r7, #12]
 8001c74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c78:	f7fe fab2 	bl	80001e0 <__aeabi_uldivmod>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4613      	mov	r3, r2
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	0c1b      	lsrs	r3, r3, #16
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c9e:	e002      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3740      	adds	r7, #64	; 0x40
 8001cac:	46bd      	mov	sp, r7
 8001cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	00f42400 	.word	0x00f42400
 8001cbc:	017d7840 	.word	0x017d7840

08001cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000000 	.word	0x20000000

08001cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cdc:	f7ff fff0 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0a9b      	lsrs	r3, r3, #10
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4903      	ldr	r1, [pc, #12]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	08006550 	.word	0x08006550

08001d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d04:	f7ff ffdc 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0b5b      	lsrs	r3, r3, #13
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4903      	ldr	r1, [pc, #12]	; (8001d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	08006550 	.word	0x08006550

08001d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e041      	b.n	8001dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fe80 	bl	8000a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f000 fac0 	bl	80022ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e041      	b.n	8001e5c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d106      	bne.n	8001df2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f839 	bl	8001e64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3304      	adds	r3, #4
 8001e02:	4619      	mov	r1, r3
 8001e04:	4610      	mov	r0, r2
 8001e06:	f000 fa71 	bl	80022ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_TIM_PWM_Start+0x24>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	bf14      	ite	ne
 8001e94:	2301      	movne	r3, #1
 8001e96:	2300      	moveq	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	e022      	b.n	8001ee2 <HAL_TIM_PWM_Start+0x6a>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d109      	bne.n	8001eb6 <HAL_TIM_PWM_Start+0x3e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	e015      	b.n	8001ee2 <HAL_TIM_PWM_Start+0x6a>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d109      	bne.n	8001ed0 <HAL_TIM_PWM_Start+0x58>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	bf14      	ite	ne
 8001ec8:	2301      	movne	r3, #1
 8001eca:	2300      	moveq	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	e008      	b.n	8001ee2 <HAL_TIM_PWM_Start+0x6a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	bf14      	ite	ne
 8001edc:	2301      	movne	r3, #1
 8001ede:	2300      	moveq	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e068      	b.n	8001fbc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d104      	bne.n	8001efa <HAL_TIM_PWM_Start+0x82>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ef8:	e013      	b.n	8001f22 <HAL_TIM_PWM_Start+0xaa>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d104      	bne.n	8001f0a <HAL_TIM_PWM_Start+0x92>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f08:	e00b      	b.n	8001f22 <HAL_TIM_PWM_Start+0xaa>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d104      	bne.n	8001f1a <HAL_TIM_PWM_Start+0xa2>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f18:	e003      	b.n	8001f22 <HAL_TIM_PWM_Start+0xaa>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2201      	movs	r2, #1
 8001f28:	6839      	ldr	r1, [r7, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fc90 	bl	8002850 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a23      	ldr	r2, [pc, #140]	; (8001fc4 <HAL_TIM_PWM_Start+0x14c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d107      	bne.n	8001f4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <HAL_TIM_PWM_Start+0x14c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d018      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x10e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5c:	d013      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x10e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <HAL_TIM_PWM_Start+0x150>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00e      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x10e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_TIM_PWM_Start+0x154>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d009      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x10e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a16      	ldr	r2, [pc, #88]	; (8001fd0 <HAL_TIM_PWM_Start+0x158>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d004      	beq.n	8001f86 <HAL_TIM_PWM_Start+0x10e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <HAL_TIM_PWM_Start+0x15c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d111      	bne.n	8001faa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b06      	cmp	r3, #6
 8001f96:	d010      	beq.n	8001fba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa8:	e007      	b.n	8001fba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40000800 	.word	0x40000800
 8001fd0:	40000c00 	.word	0x40000c00
 8001fd4:	40014000 	.word	0x40014000

08001fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e0ae      	b.n	8002154 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b0c      	cmp	r3, #12
 8002002:	f200 809f 	bhi.w	8002144 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002006:	a201      	add	r2, pc, #4	; (adr r2, 800200c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200c:	08002041 	.word	0x08002041
 8002010:	08002145 	.word	0x08002145
 8002014:	08002145 	.word	0x08002145
 8002018:	08002145 	.word	0x08002145
 800201c:	08002081 	.word	0x08002081
 8002020:	08002145 	.word	0x08002145
 8002024:	08002145 	.word	0x08002145
 8002028:	08002145 	.word	0x08002145
 800202c:	080020c3 	.word	0x080020c3
 8002030:	08002145 	.word	0x08002145
 8002034:	08002145 	.word	0x08002145
 8002038:	08002145 	.word	0x08002145
 800203c:	08002103 	.word	0x08002103
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f9dc 	bl	8002404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0208 	orr.w	r2, r2, #8
 800205a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0204 	bic.w	r2, r2, #4
 800206a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6999      	ldr	r1, [r3, #24]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	619a      	str	r2, [r3, #24]
      break;
 800207e:	e064      	b.n	800214a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fa22 	bl	80024d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800209a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6999      	ldr	r1, [r3, #24]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	021a      	lsls	r2, r3, #8
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	619a      	str	r2, [r3, #24]
      break;
 80020c0:	e043      	b.n	800214a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fa6d 	bl	80025a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	69da      	ldr	r2, [r3, #28]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0208 	orr.w	r2, r2, #8
 80020dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69da      	ldr	r2, [r3, #28]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0204 	bic.w	r2, r2, #4
 80020ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	69d9      	ldr	r1, [r3, #28]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	61da      	str	r2, [r3, #28]
      break;
 8002100:	e023      	b.n	800214a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fab7 	bl	800267c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800211c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69da      	ldr	r2, [r3, #28]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69d9      	ldr	r1, [r3, #28]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	021a      	lsls	r2, r3, #8
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	61da      	str	r2, [r3, #28]
      break;
 8002142:	e002      	b.n	800214a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	75fb      	strb	r3, [r7, #23]
      break;
 8002148:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002152:	7dfb      	ldrb	r3, [r7, #23]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_TIM_ConfigClockSource+0x1c>
 8002174:	2302      	movs	r3, #2
 8002176:	e0b4      	b.n	80022e2 <HAL_TIM_ConfigClockSource+0x186>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800219e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b0:	d03e      	beq.n	8002230 <HAL_TIM_ConfigClockSource+0xd4>
 80021b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b6:	f200 8087 	bhi.w	80022c8 <HAL_TIM_ConfigClockSource+0x16c>
 80021ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021be:	f000 8086 	beq.w	80022ce <HAL_TIM_ConfigClockSource+0x172>
 80021c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c6:	d87f      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x16c>
 80021c8:	2b70      	cmp	r3, #112	; 0x70
 80021ca:	d01a      	beq.n	8002202 <HAL_TIM_ConfigClockSource+0xa6>
 80021cc:	2b70      	cmp	r3, #112	; 0x70
 80021ce:	d87b      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x16c>
 80021d0:	2b60      	cmp	r3, #96	; 0x60
 80021d2:	d050      	beq.n	8002276 <HAL_TIM_ConfigClockSource+0x11a>
 80021d4:	2b60      	cmp	r3, #96	; 0x60
 80021d6:	d877      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x16c>
 80021d8:	2b50      	cmp	r3, #80	; 0x50
 80021da:	d03c      	beq.n	8002256 <HAL_TIM_ConfigClockSource+0xfa>
 80021dc:	2b50      	cmp	r3, #80	; 0x50
 80021de:	d873      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x16c>
 80021e0:	2b40      	cmp	r3, #64	; 0x40
 80021e2:	d058      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x13a>
 80021e4:	2b40      	cmp	r3, #64	; 0x40
 80021e6:	d86f      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x16c>
 80021e8:	2b30      	cmp	r3, #48	; 0x30
 80021ea:	d064      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0x15a>
 80021ec:	2b30      	cmp	r3, #48	; 0x30
 80021ee:	d86b      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x16c>
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d060      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0x15a>
 80021f4:	2b20      	cmp	r3, #32
 80021f6:	d867      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x16c>
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d05c      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0x15a>
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d05a      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002200:	e062      	b.n	80022c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002212:	f000 fafd 	bl	8002810 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002224:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	609a      	str	r2, [r3, #8]
      break;
 800222e:	e04f      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002240:	f000 fae6 	bl	8002810 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002252:	609a      	str	r2, [r3, #8]
      break;
 8002254:	e03c      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002262:	461a      	mov	r2, r3
 8002264:	f000 fa5a 	bl	800271c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2150      	movs	r1, #80	; 0x50
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fab3 	bl	80027da <TIM_ITRx_SetConfig>
      break;
 8002274:	e02c      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002282:	461a      	mov	r2, r3
 8002284:	f000 fa79 	bl	800277a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2160      	movs	r1, #96	; 0x60
 800228e:	4618      	mov	r0, r3
 8002290:	f000 faa3 	bl	80027da <TIM_ITRx_SetConfig>
      break;
 8002294:	e01c      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022a2:	461a      	mov	r2, r3
 80022a4:	f000 fa3a 	bl	800271c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2140      	movs	r1, #64	; 0x40
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fa93 	bl	80027da <TIM_ITRx_SetConfig>
      break;
 80022b4:	e00c      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4619      	mov	r1, r3
 80022c0:	4610      	mov	r0, r2
 80022c2:	f000 fa8a 	bl	80027da <TIM_ITRx_SetConfig>
      break;
 80022c6:	e003      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
      break;
 80022cc:	e000      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3a      	ldr	r2, [pc, #232]	; (80023e8 <TIM_Base_SetConfig+0xfc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00f      	beq.n	8002324 <TIM_Base_SetConfig+0x38>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d00b      	beq.n	8002324 <TIM_Base_SetConfig+0x38>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a37      	ldr	r2, [pc, #220]	; (80023ec <TIM_Base_SetConfig+0x100>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d007      	beq.n	8002324 <TIM_Base_SetConfig+0x38>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a36      	ldr	r2, [pc, #216]	; (80023f0 <TIM_Base_SetConfig+0x104>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d003      	beq.n	8002324 <TIM_Base_SetConfig+0x38>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a35      	ldr	r2, [pc, #212]	; (80023f4 <TIM_Base_SetConfig+0x108>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d108      	bne.n	8002336 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a2b      	ldr	r2, [pc, #172]	; (80023e8 <TIM_Base_SetConfig+0xfc>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01b      	beq.n	8002376 <TIM_Base_SetConfig+0x8a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002344:	d017      	beq.n	8002376 <TIM_Base_SetConfig+0x8a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a28      	ldr	r2, [pc, #160]	; (80023ec <TIM_Base_SetConfig+0x100>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d013      	beq.n	8002376 <TIM_Base_SetConfig+0x8a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a27      	ldr	r2, [pc, #156]	; (80023f0 <TIM_Base_SetConfig+0x104>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00f      	beq.n	8002376 <TIM_Base_SetConfig+0x8a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a26      	ldr	r2, [pc, #152]	; (80023f4 <TIM_Base_SetConfig+0x108>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00b      	beq.n	8002376 <TIM_Base_SetConfig+0x8a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a25      	ldr	r2, [pc, #148]	; (80023f8 <TIM_Base_SetConfig+0x10c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d007      	beq.n	8002376 <TIM_Base_SetConfig+0x8a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a24      	ldr	r2, [pc, #144]	; (80023fc <TIM_Base_SetConfig+0x110>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d003      	beq.n	8002376 <TIM_Base_SetConfig+0x8a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a23      	ldr	r2, [pc, #140]	; (8002400 <TIM_Base_SetConfig+0x114>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d108      	bne.n	8002388 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800237c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <TIM_Base_SetConfig+0xfc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d103      	bne.n	80023bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d105      	bne.n	80023da <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f023 0201 	bic.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	611a      	str	r2, [r3, #16]
  }
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40010000 	.word	0x40010000
 80023ec:	40000400 	.word	0x40000400
 80023f0:	40000800 	.word	0x40000800
 80023f4:	40000c00 	.word	0x40000c00
 80023f8:	40014000 	.word	0x40014000
 80023fc:	40014400 	.word	0x40014400
 8002400:	40014800 	.word	0x40014800

08002404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f023 0201 	bic.w	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f023 0302 	bic.w	r3, r3, #2
 800244c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <TIM_OC1_SetConfig+0xc8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d10c      	bne.n	800247a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f023 0308 	bic.w	r3, r3, #8
 8002466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	4313      	orrs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a13      	ldr	r2, [pc, #76]	; (80024cc <TIM_OC1_SetConfig+0xc8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d111      	bne.n	80024a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	621a      	str	r2, [r3, #32]
}
 80024c0:	bf00      	nop
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40010000 	.word	0x40010000

080024d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f023 0210 	bic.w	r2, r3, #16
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f023 0320 	bic.w	r3, r3, #32
 800251a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <TIM_OC2_SetConfig+0xd4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d10d      	bne.n	800254c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800254a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <TIM_OC2_SetConfig+0xd4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d113      	bne.n	800257c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800255a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	621a      	str	r2, [r3, #32]
}
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40010000 	.word	0x40010000

080025a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0303 	bic.w	r3, r3, #3
 80025de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a1d      	ldr	r2, [pc, #116]	; (8002678 <TIM_OC3_SetConfig+0xd0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10d      	bne.n	8002622 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800260c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a14      	ldr	r2, [pc, #80]	; (8002678 <TIM_OC3_SetConfig+0xd0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d113      	bne.n	8002652 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	621a      	str	r2, [r3, #32]
}
 800266c:	bf00      	nop
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	40010000 	.word	0x40010000

0800267c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	031b      	lsls	r3, r3, #12
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a10      	ldr	r2, [pc, #64]	; (8002718 <TIM_OC4_SetConfig+0x9c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d109      	bne.n	80026f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	019b      	lsls	r3, r3, #6
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	621a      	str	r2, [r3, #32]
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40010000 	.word	0x40010000

0800271c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f023 0201 	bic.w	r2, r3, #1
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f023 030a 	bic.w	r3, r3, #10
 8002758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	621a      	str	r2, [r3, #32]
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800277a:	b480      	push	{r7}
 800277c:	b087      	sub	sp, #28
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	f023 0210 	bic.w	r2, r3, #16
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	031b      	lsls	r3, r3, #12
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	621a      	str	r2, [r3, #32]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f043 0307 	orr.w	r3, r3, #7
 80027fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800282a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	021a      	lsls	r2, r3, #8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	431a      	orrs	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	609a      	str	r2, [r3, #8]
}
 8002844:	bf00      	nop
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	2201      	movs	r2, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	43db      	mvns	r3, r3
 8002872:	401a      	ands	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1a      	ldr	r2, [r3, #32]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	431a      	orrs	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	621a      	str	r2, [r3, #32]
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e050      	b.n	8002956 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d018      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002900:	d013      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d00e      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a16      	ldr	r2, [pc, #88]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a15      	ldr	r2, [pc, #84]	; (8002970 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d004      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a13      	ldr	r2, [pc, #76]	; (8002974 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d10c      	bne.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	4313      	orrs	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40010000 	.word	0x40010000
 8002968:	40000400 	.word	0x40000400
 800296c:	40000800 	.word	0x40000800
 8002970:	40000c00 	.word	0x40000c00
 8002974:	40014000 	.word	0x40014000

08002978 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002990:	2302      	movs	r3, #2
 8002992:	e03d      	b.n	8002a10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e042      	b.n	8002ab4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe f862 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2224      	movs	r2, #36	; 0x24
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fcdb 	bl	800341c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	d112      	bne.n	8002afc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_UART_Receive_IT+0x26>
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e00b      	b.n	8002afe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 faba 	bl	800306c <UART_Start_Receive_IT>
 8002af8:	4603      	mov	r3, r0
 8002afa:	e000      	b.n	8002afe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b0ba      	sub	sp, #232	; 0xe8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10f      	bne.n	8002b6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_UART_IRQHandler+0x66>
 8002b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fb99 	bl	800329e <UART_Receive_IT>
      return;
 8002b6c:	e25b      	b.n	8003026 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80de 	beq.w	8002d34 <HAL_UART_IRQHandler+0x22c>
 8002b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d106      	bne.n	8002b92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80d1 	beq.w	8002d34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_UART_IRQHandler+0xae>
 8002b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <HAL_UART_IRQHandler+0xd2>
 8002bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	f043 0202 	orr.w	r2, r3, #2
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_UART_IRQHandler+0xf6>
 8002be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f043 0204 	orr.w	r2, r3, #4
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d011      	beq.n	8002c2e <HAL_UART_IRQHandler+0x126>
 8002c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f043 0208 	orr.w	r2, r3, #8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 81f2 	beq.w	800301c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_UART_IRQHandler+0x14e>
 8002c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fb24 	bl	800329e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <HAL_UART_IRQHandler+0x17a>
 8002c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d04f      	beq.n	8002d22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fa2c 	bl	80030e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d141      	bne.n	8002d1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3314      	adds	r3, #20
 8002c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ca4:	e853 3f00 	ldrex	r3, [r3]
 8002ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3314      	adds	r3, #20
 8002cbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cd2:	e841 2300 	strex	r3, r2, [r1]
 8002cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1d9      	bne.n	8002c96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d013      	beq.n	8002d12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	4a7e      	ldr	r2, [pc, #504]	; (8002ee8 <HAL_UART_IRQHandler+0x3e0>)
 8002cf0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe f9fd 	bl	80010f6 <HAL_DMA_Abort_IT>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d016      	beq.n	8002d30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d10:	e00e      	b.n	8002d30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f994 	bl	8003040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	e00a      	b.n	8002d30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f990 	bl	8003040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d20:	e006      	b.n	8002d30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f98c 	bl	8003040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002d2e:	e175      	b.n	800301c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d30:	bf00      	nop
    return;
 8002d32:	e173      	b.n	800301c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	f040 814f 	bne.w	8002fdc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8148 	beq.w	8002fdc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8141 	beq.w	8002fdc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b40      	cmp	r3, #64	; 0x40
 8002d7c:	f040 80b6 	bne.w	8002eec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 8145 	beq.w	8003020 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	f080 813e 	bcs.w	8003020 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002daa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db6:	f000 8088 	beq.w	8002eca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dc8:	e853 3f00 	ldrex	r3, [r3]
 8002dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002de6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002df2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002df6:	e841 2300 	strex	r3, r2, [r1]
 8002dfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1d9      	bne.n	8002dba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3314      	adds	r3, #20
 8002e0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3314      	adds	r3, #20
 8002e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1e1      	bne.n	8002e06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3314      	adds	r3, #20
 8002e48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e4c:	e853 3f00 	ldrex	r3, [r3]
 8002e50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3314      	adds	r3, #20
 8002e62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e6e:	e841 2300 	strex	r3, r2, [r1]
 8002e72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1e3      	bne.n	8002e42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e92:	e853 3f00 	ldrex	r3, [r3]
 8002e96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9a:	f023 0310 	bic.w	r3, r3, #16
 8002e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002eac:	65ba      	str	r2, [r7, #88]	; 0x58
 8002eae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002eb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e3      	bne.n	8002e88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe f8a6 	bl	8001016 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	4619      	mov	r1, r3
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f8b7 	bl	8003054 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ee6:	e09b      	b.n	8003020 <HAL_UART_IRQHandler+0x518>
 8002ee8:	080031a7 	.word	0x080031a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 808e 	beq.w	8003024 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8089 	beq.w	8003024 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	330c      	adds	r3, #12
 8002f32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f36:	647a      	str	r2, [r7, #68]	; 0x44
 8002f38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f3e:	e841 2300 	strex	r3, r2, [r1]
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1e3      	bne.n	8002f12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3314      	adds	r3, #20
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	e853 3f00 	ldrex	r3, [r3]
 8002f58:	623b      	str	r3, [r7, #32]
   return(result);
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3314      	adds	r3, #20
 8002f6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e3      	bne.n	8002f4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	330c      	adds	r3, #12
 8002f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0310 	bic.w	r3, r3, #16
 8002fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002fb4:	61fa      	str	r2, [r7, #28]
 8002fb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	69b9      	ldr	r1, [r7, #24]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	e841 2300 	strex	r3, r2, [r1]
 8002fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e3      	bne.n	8002f90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f83d 	bl	8003054 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fda:	e023      	b.n	8003024 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d009      	beq.n	8002ffc <HAL_UART_IRQHandler+0x4f4>
 8002fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f8ea 	bl	80031ce <UART_Transmit_IT>
    return;
 8002ffa:	e014      	b.n	8003026 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00e      	beq.n	8003026 <HAL_UART_IRQHandler+0x51e>
 8003008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f92a 	bl	800326e <UART_EndTransmit_IT>
    return;
 800301a:	e004      	b.n	8003026 <HAL_UART_IRQHandler+0x51e>
    return;
 800301c:	bf00      	nop
 800301e:	e002      	b.n	8003026 <HAL_UART_IRQHandler+0x51e>
      return;
 8003020:	bf00      	nop
 8003022:	e000      	b.n	8003026 <HAL_UART_IRQHandler+0x51e>
      return;
 8003024:	bf00      	nop
  }
}
 8003026:	37e8      	adds	r7, #232	; 0xe8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	88fa      	ldrh	r2, [r7, #6]
 8003084:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	88fa      	ldrh	r2, [r7, #6]
 800308a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2222      	movs	r2, #34	; 0x22
 8003096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0201 	orr.w	r2, r2, #1
 80030c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0220 	orr.w	r2, r2, #32
 80030d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b095      	sub	sp, #84	; 0x54
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f2:	e853 3f00 	ldrex	r3, [r3]
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	330c      	adds	r3, #12
 8003106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003108:	643a      	str	r2, [r7, #64]	; 0x40
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800310e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003110:	e841 2300 	strex	r3, r2, [r1]
 8003114:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e5      	bne.n	80030e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3314      	adds	r3, #20
 8003122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	e853 3f00 	ldrex	r3, [r3]
 800312a:	61fb      	str	r3, [r7, #28]
   return(result);
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	64bb      	str	r3, [r7, #72]	; 0x48
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3314      	adds	r3, #20
 800313a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800313c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003144:	e841 2300 	strex	r3, r2, [r1]
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e5      	bne.n	800311c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	2b01      	cmp	r3, #1
 8003156:	d119      	bne.n	800318c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	e853 3f00 	ldrex	r3, [r3]
 8003166:	60bb      	str	r3, [r7, #8]
   return(result);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f023 0310 	bic.w	r3, r3, #16
 800316e:	647b      	str	r3, [r7, #68]	; 0x44
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	330c      	adds	r3, #12
 8003176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003178:	61ba      	str	r2, [r7, #24]
 800317a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317c:	6979      	ldr	r1, [r7, #20]
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	e841 2300 	strex	r3, r2, [r1]
 8003184:	613b      	str	r3, [r7, #16]
   return(result);
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1e5      	bne.n	8003158 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
}
 800319a:	bf00      	nop
 800319c:	3754      	adds	r7, #84	; 0x54
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f7ff ff3d 	bl	8003040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b21      	cmp	r3, #33	; 0x21
 80031e0:	d13e      	bne.n	8003260 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ea:	d114      	bne.n	8003216 <UART_Transmit_IT+0x48>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d110      	bne.n	8003216 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003208:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	1c9a      	adds	r2, r3, #2
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	621a      	str	r2, [r3, #32]
 8003214:	e008      	b.n	8003228 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	1c59      	adds	r1, r3, #1
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6211      	str	r1, [r2, #32]
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	4619      	mov	r1, r3
 8003236:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10f      	bne.n	800325c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800324a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800325a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e000      	b.n	8003262 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003260:	2302      	movs	r3, #2
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003284:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff fecc 	bl	800302c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b08c      	sub	sp, #48	; 0x30
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b22      	cmp	r3, #34	; 0x22
 80032b0:	f040 80ae 	bne.w	8003410 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032bc:	d117      	bne.n	80032ee <UART_Receive_IT+0x50>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d113      	bne.n	80032ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032dc:	b29a      	uxth	r2, r3
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	1c9a      	adds	r2, r3, #2
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28
 80032ec:	e026      	b.n	800333c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003300:	d007      	beq.n	8003312 <UART_Receive_IT+0x74>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <UART_Receive_IT+0x82>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e008      	b.n	8003332 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332c:	b2da      	uxtb	r2, r3
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29b      	uxth	r3, r3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4619      	mov	r1, r3
 800334a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800334c:	2b00      	cmp	r3, #0
 800334e:	d15d      	bne.n	800340c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0220 	bic.w	r2, r2, #32
 800335e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800336e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	2b01      	cmp	r3, #1
 8003394:	d135      	bne.n	8003402 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	e853 3f00 	ldrex	r3, [r3]
 80033aa:	613b      	str	r3, [r7, #16]
   return(result);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f023 0310 	bic.w	r3, r3, #16
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	330c      	adds	r3, #12
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	623a      	str	r2, [r7, #32]
 80033be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	69f9      	ldr	r1, [r7, #28]
 80033c2:	6a3a      	ldr	r2, [r7, #32]
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e5      	bne.n	800339c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d10a      	bne.n	80033f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff fe2a 	bl	8003054 <HAL_UARTEx_RxEventCallback>
 8003400:	e002      	b.n	8003408 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fd fc28 	bl	8000c58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	e002      	b.n	8003412 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	e000      	b.n	8003412 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003410:	2302      	movs	r3, #2
  }
}
 8003412:	4618      	mov	r0, r3
 8003414:	3730      	adds	r7, #48	; 0x30
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b0c0      	sub	sp, #256	; 0x100
 8003422:	af00      	add	r7, sp, #0
 8003424:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003438:	68d9      	ldr	r1, [r3, #12]
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	ea40 0301 	orr.w	r3, r0, r1
 8003444:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	431a      	orrs	r2, r3
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	431a      	orrs	r2, r3
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003474:	f021 010c 	bic.w	r1, r1, #12
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003482:	430b      	orrs	r3, r1
 8003484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003496:	6999      	ldr	r1, [r3, #24]
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	ea40 0301 	orr.w	r3, r0, r1
 80034a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b8f      	ldr	r3, [pc, #572]	; (80036e8 <UART_SetConfig+0x2cc>)
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d005      	beq.n	80034bc <UART_SetConfig+0xa0>
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b8d      	ldr	r3, [pc, #564]	; (80036ec <UART_SetConfig+0x2d0>)
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d104      	bne.n	80034c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034bc:	f7fe fc20 	bl	8001d00 <HAL_RCC_GetPCLK2Freq>
 80034c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034c4:	e003      	b.n	80034ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034c6:	f7fe fc07 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 80034ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d8:	f040 810c 	bne.w	80036f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e0:	2200      	movs	r2, #0
 80034e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034ee:	4622      	mov	r2, r4
 80034f0:	462b      	mov	r3, r5
 80034f2:	1891      	adds	r1, r2, r2
 80034f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80034f6:	415b      	adcs	r3, r3
 80034f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034fe:	4621      	mov	r1, r4
 8003500:	eb12 0801 	adds.w	r8, r2, r1
 8003504:	4629      	mov	r1, r5
 8003506:	eb43 0901 	adc.w	r9, r3, r1
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800351a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800351e:	4690      	mov	r8, r2
 8003520:	4699      	mov	r9, r3
 8003522:	4623      	mov	r3, r4
 8003524:	eb18 0303 	adds.w	r3, r8, r3
 8003528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800352c:	462b      	mov	r3, r5
 800352e:	eb49 0303 	adc.w	r3, r9, r3
 8003532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003542:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003546:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800354a:	460b      	mov	r3, r1
 800354c:	18db      	adds	r3, r3, r3
 800354e:	653b      	str	r3, [r7, #80]	; 0x50
 8003550:	4613      	mov	r3, r2
 8003552:	eb42 0303 	adc.w	r3, r2, r3
 8003556:	657b      	str	r3, [r7, #84]	; 0x54
 8003558:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800355c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003560:	f7fc fe3e 	bl	80001e0 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4b61      	ldr	r3, [pc, #388]	; (80036f0 <UART_SetConfig+0x2d4>)
 800356a:	fba3 2302 	umull	r2, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	011c      	lsls	r4, r3, #4
 8003572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003576:	2200      	movs	r2, #0
 8003578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800357c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003580:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003584:	4642      	mov	r2, r8
 8003586:	464b      	mov	r3, r9
 8003588:	1891      	adds	r1, r2, r2
 800358a:	64b9      	str	r1, [r7, #72]	; 0x48
 800358c:	415b      	adcs	r3, r3
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003590:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003594:	4641      	mov	r1, r8
 8003596:	eb12 0a01 	adds.w	sl, r2, r1
 800359a:	4649      	mov	r1, r9
 800359c:	eb43 0b01 	adc.w	fp, r3, r1
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035b4:	4692      	mov	sl, r2
 80035b6:	469b      	mov	fp, r3
 80035b8:	4643      	mov	r3, r8
 80035ba:	eb1a 0303 	adds.w	r3, sl, r3
 80035be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035c2:	464b      	mov	r3, r9
 80035c4:	eb4b 0303 	adc.w	r3, fp, r3
 80035c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035e0:	460b      	mov	r3, r1
 80035e2:	18db      	adds	r3, r3, r3
 80035e4:	643b      	str	r3, [r7, #64]	; 0x40
 80035e6:	4613      	mov	r3, r2
 80035e8:	eb42 0303 	adc.w	r3, r2, r3
 80035ec:	647b      	str	r3, [r7, #68]	; 0x44
 80035ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035f6:	f7fc fdf3 	bl	80001e0 <__aeabi_uldivmod>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	4b3b      	ldr	r3, [pc, #236]	; (80036f0 <UART_SetConfig+0x2d4>)
 8003602:	fba3 2301 	umull	r2, r3, r3, r1
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2264      	movs	r2, #100	; 0x64
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	1acb      	subs	r3, r1, r3
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003616:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <UART_SetConfig+0x2d4>)
 8003618:	fba3 2302 	umull	r2, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003624:	441c      	add	r4, r3
 8003626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003630:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003634:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003638:	4642      	mov	r2, r8
 800363a:	464b      	mov	r3, r9
 800363c:	1891      	adds	r1, r2, r2
 800363e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003640:	415b      	adcs	r3, r3
 8003642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003644:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003648:	4641      	mov	r1, r8
 800364a:	1851      	adds	r1, r2, r1
 800364c:	6339      	str	r1, [r7, #48]	; 0x30
 800364e:	4649      	mov	r1, r9
 8003650:	414b      	adcs	r3, r1
 8003652:	637b      	str	r3, [r7, #52]	; 0x34
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003660:	4659      	mov	r1, fp
 8003662:	00cb      	lsls	r3, r1, #3
 8003664:	4651      	mov	r1, sl
 8003666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800366a:	4651      	mov	r1, sl
 800366c:	00ca      	lsls	r2, r1, #3
 800366e:	4610      	mov	r0, r2
 8003670:	4619      	mov	r1, r3
 8003672:	4603      	mov	r3, r0
 8003674:	4642      	mov	r2, r8
 8003676:	189b      	adds	r3, r3, r2
 8003678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800367c:	464b      	mov	r3, r9
 800367e:	460a      	mov	r2, r1
 8003680:	eb42 0303 	adc.w	r3, r2, r3
 8003684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003694:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003698:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800369c:	460b      	mov	r3, r1
 800369e:	18db      	adds	r3, r3, r3
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a2:	4613      	mov	r3, r2
 80036a4:	eb42 0303 	adc.w	r3, r2, r3
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036b2:	f7fc fd95 	bl	80001e0 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <UART_SetConfig+0x2d4>)
 80036bc:	fba3 1302 	umull	r1, r3, r3, r2
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	2164      	movs	r1, #100	; 0x64
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	3332      	adds	r3, #50	; 0x32
 80036ce:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <UART_SetConfig+0x2d4>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	f003 0207 	and.w	r2, r3, #7
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4422      	add	r2, r4
 80036e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036e4:	e106      	b.n	80038f4 <UART_SetConfig+0x4d8>
 80036e6:	bf00      	nop
 80036e8:	40011000 	.word	0x40011000
 80036ec:	40011400 	.word	0x40011400
 80036f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003702:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003706:	4642      	mov	r2, r8
 8003708:	464b      	mov	r3, r9
 800370a:	1891      	adds	r1, r2, r2
 800370c:	6239      	str	r1, [r7, #32]
 800370e:	415b      	adcs	r3, r3
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
 8003712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003716:	4641      	mov	r1, r8
 8003718:	1854      	adds	r4, r2, r1
 800371a:	4649      	mov	r1, r9
 800371c:	eb43 0501 	adc.w	r5, r3, r1
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	00eb      	lsls	r3, r5, #3
 800372a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800372e:	00e2      	lsls	r2, r4, #3
 8003730:	4614      	mov	r4, r2
 8003732:	461d      	mov	r5, r3
 8003734:	4643      	mov	r3, r8
 8003736:	18e3      	adds	r3, r4, r3
 8003738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800373c:	464b      	mov	r3, r9
 800373e:	eb45 0303 	adc.w	r3, r5, r3
 8003742:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003752:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003762:	4629      	mov	r1, r5
 8003764:	008b      	lsls	r3, r1, #2
 8003766:	4621      	mov	r1, r4
 8003768:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800376c:	4621      	mov	r1, r4
 800376e:	008a      	lsls	r2, r1, #2
 8003770:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003774:	f7fc fd34 	bl	80001e0 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4b60      	ldr	r3, [pc, #384]	; (8003900 <UART_SetConfig+0x4e4>)
 800377e:	fba3 2302 	umull	r2, r3, r3, r2
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	011c      	lsls	r4, r3, #4
 8003786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800378a:	2200      	movs	r2, #0
 800378c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003790:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003794:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003798:	4642      	mov	r2, r8
 800379a:	464b      	mov	r3, r9
 800379c:	1891      	adds	r1, r2, r2
 800379e:	61b9      	str	r1, [r7, #24]
 80037a0:	415b      	adcs	r3, r3
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a8:	4641      	mov	r1, r8
 80037aa:	1851      	adds	r1, r2, r1
 80037ac:	6139      	str	r1, [r7, #16]
 80037ae:	4649      	mov	r1, r9
 80037b0:	414b      	adcs	r3, r1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c0:	4659      	mov	r1, fp
 80037c2:	00cb      	lsls	r3, r1, #3
 80037c4:	4651      	mov	r1, sl
 80037c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ca:	4651      	mov	r1, sl
 80037cc:	00ca      	lsls	r2, r1, #3
 80037ce:	4610      	mov	r0, r2
 80037d0:	4619      	mov	r1, r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	4642      	mov	r2, r8
 80037d6:	189b      	adds	r3, r3, r2
 80037d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037dc:	464b      	mov	r3, r9
 80037de:	460a      	mov	r2, r1
 80037e0:	eb42 0303 	adc.w	r3, r2, r3
 80037e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80037f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003800:	4649      	mov	r1, r9
 8003802:	008b      	lsls	r3, r1, #2
 8003804:	4641      	mov	r1, r8
 8003806:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380a:	4641      	mov	r1, r8
 800380c:	008a      	lsls	r2, r1, #2
 800380e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003812:	f7fc fce5 	bl	80001e0 <__aeabi_uldivmod>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4611      	mov	r1, r2
 800381c:	4b38      	ldr	r3, [pc, #224]	; (8003900 <UART_SetConfig+0x4e4>)
 800381e:	fba3 2301 	umull	r2, r3, r3, r1
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2264      	movs	r2, #100	; 0x64
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	1acb      	subs	r3, r1, r3
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	3332      	adds	r3, #50	; 0x32
 8003830:	4a33      	ldr	r2, [pc, #204]	; (8003900 <UART_SetConfig+0x4e4>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383c:	441c      	add	r4, r3
 800383e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003842:	2200      	movs	r2, #0
 8003844:	673b      	str	r3, [r7, #112]	; 0x70
 8003846:	677a      	str	r2, [r7, #116]	; 0x74
 8003848:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800384c:	4642      	mov	r2, r8
 800384e:	464b      	mov	r3, r9
 8003850:	1891      	adds	r1, r2, r2
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	415b      	adcs	r3, r3
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800385c:	4641      	mov	r1, r8
 800385e:	1851      	adds	r1, r2, r1
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	4649      	mov	r1, r9
 8003864:	414b      	adcs	r3, r1
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003874:	4659      	mov	r1, fp
 8003876:	00cb      	lsls	r3, r1, #3
 8003878:	4651      	mov	r1, sl
 800387a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800387e:	4651      	mov	r1, sl
 8003880:	00ca      	lsls	r2, r1, #3
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	4603      	mov	r3, r0
 8003888:	4642      	mov	r2, r8
 800388a:	189b      	adds	r3, r3, r2
 800388c:	66bb      	str	r3, [r7, #104]	; 0x68
 800388e:	464b      	mov	r3, r9
 8003890:	460a      	mov	r2, r1
 8003892:	eb42 0303 	adc.w	r3, r2, r3
 8003896:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	663b      	str	r3, [r7, #96]	; 0x60
 80038a2:	667a      	str	r2, [r7, #100]	; 0x64
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038b0:	4649      	mov	r1, r9
 80038b2:	008b      	lsls	r3, r1, #2
 80038b4:	4641      	mov	r1, r8
 80038b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ba:	4641      	mov	r1, r8
 80038bc:	008a      	lsls	r2, r1, #2
 80038be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038c2:	f7fc fc8d 	bl	80001e0 <__aeabi_uldivmod>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <UART_SetConfig+0x4e4>)
 80038cc:	fba3 1302 	umull	r1, r3, r3, r2
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	2164      	movs	r1, #100	; 0x64
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	3332      	adds	r3, #50	; 0x32
 80038de:	4a08      	ldr	r2, [pc, #32]	; (8003900 <UART_SetConfig+0x4e4>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	f003 020f 	and.w	r2, r3, #15
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4422      	add	r2, r4
 80038f2:	609a      	str	r2, [r3, #8]
}
 80038f4:	bf00      	nop
 80038f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038fa:	46bd      	mov	sp, r7
 80038fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003900:	51eb851f 	.word	0x51eb851f

08003904 <__NVIC_SetPriority>:
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	6039      	str	r1, [r7, #0]
 800390e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003914:	2b00      	cmp	r3, #0
 8003916:	db0a      	blt.n	800392e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	b2da      	uxtb	r2, r3
 800391c:	490c      	ldr	r1, [pc, #48]	; (8003950 <__NVIC_SetPriority+0x4c>)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	440b      	add	r3, r1
 8003928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800392c:	e00a      	b.n	8003944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4908      	ldr	r1, [pc, #32]	; (8003954 <__NVIC_SetPriority+0x50>)
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	3b04      	subs	r3, #4
 800393c:	0112      	lsls	r2, r2, #4
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	440b      	add	r3, r1
 8003942:	761a      	strb	r2, [r3, #24]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000e100 	.word	0xe000e100
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800395c:	2100      	movs	r1, #0
 800395e:	f06f 0004 	mvn.w	r0, #4
 8003962:	f7ff ffcf 	bl	8003904 <__NVIC_SetPriority>
#endif
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003972:	f3ef 8305 	mrs	r3, IPSR
 8003976:	603b      	str	r3, [r7, #0]
  return(result);
 8003978:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800397e:	f06f 0305 	mvn.w	r3, #5
 8003982:	607b      	str	r3, [r7, #4]
 8003984:	e00c      	b.n	80039a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003986:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <osKernelInitialize+0x44>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d105      	bne.n	800399a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800398e:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <osKernelInitialize+0x44>)
 8003990:	2201      	movs	r2, #1
 8003992:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003994:	2300      	movs	r3, #0
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	e002      	b.n	80039a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
 800399e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039a0:	687b      	ldr	r3, [r7, #4]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	200001d4 	.word	0x200001d4

080039b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039ba:	f3ef 8305 	mrs	r3, IPSR
 80039be:	603b      	str	r3, [r7, #0]
  return(result);
 80039c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80039c6:	f06f 0305 	mvn.w	r3, #5
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	e010      	b.n	80039f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <osKernelStart+0x48>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d109      	bne.n	80039ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039d6:	f7ff ffbf 	bl	8003958 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <osKernelStart+0x48>)
 80039dc:	2202      	movs	r2, #2
 80039de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039e0:	f001 f866 	bl	8004ab0 <vTaskStartScheduler>
      stat = osOK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	e002      	b.n	80039f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
 80039ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039f0:	687b      	ldr	r3, [r7, #4]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200001d4 	.word	0x200001d4

08003a00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08e      	sub	sp, #56	; 0x38
 8003a04:	af04      	add	r7, sp, #16
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a10:	f3ef 8305 	mrs	r3, IPSR
 8003a14:	617b      	str	r3, [r7, #20]
  return(result);
 8003a16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d17e      	bne.n	8003b1a <osThreadNew+0x11a>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d07b      	beq.n	8003b1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a26:	2318      	movs	r3, #24
 8003a28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d045      	beq.n	8003ac6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <osThreadNew+0x48>
        name = attr->name;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <osThreadNew+0x6e>
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2b38      	cmp	r3, #56	; 0x38
 8003a60:	d805      	bhi.n	8003a6e <osThreadNew+0x6e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <osThreadNew+0x72>
        return (NULL);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e054      	b.n	8003b1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00e      	beq.n	8003aa8 <osThreadNew+0xa8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b5b      	cmp	r3, #91	; 0x5b
 8003a90:	d90a      	bls.n	8003aa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <osThreadNew+0xa8>
        mem = 1;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	e010      	b.n	8003aca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10c      	bne.n	8003aca <osThreadNew+0xca>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d108      	bne.n	8003aca <osThreadNew+0xca>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d104      	bne.n	8003aca <osThreadNew+0xca>
          mem = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	e001      	b.n	8003aca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d110      	bne.n	8003af2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ad8:	9202      	str	r2, [sp, #8]
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	6a3a      	ldr	r2, [r7, #32]
 8003ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fe0c 	bl	8004704 <xTaskCreateStatic>
 8003aec:	4603      	mov	r3, r0
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	e013      	b.n	8003b1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d110      	bne.n	8003b1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	f107 0310 	add.w	r3, r7, #16
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 fe57 	bl	80047be <xTaskCreate>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d001      	beq.n	8003b1a <osThreadNew+0x11a>
            hTask = NULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b1a:	693b      	ldr	r3, [r7, #16]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3728      	adds	r7, #40	; 0x28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b2c:	f3ef 8305 	mrs	r3, IPSR
 8003b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <osDelay+0x1c>
    stat = osErrorISR;
 8003b38:	f06f 0305 	mvn.w	r3, #5
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	e007      	b.n	8003b50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 ff7c 	bl	8004a48 <vTaskDelay>
    }
  }

  return (stat);
 8003b50:	68fb      	ldr	r3, [r7, #12]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <vApplicationGetIdleTaskMemory+0x30>)
 8003b72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2280      	movs	r2, #128	; 0x80
 8003b78:	601a      	str	r2, [r3, #0]
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	200001d8 	.word	0x200001d8
 8003b8c:	20000234 	.word	0x20000234

08003b90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4a07      	ldr	r2, [pc, #28]	; (8003bbc <vApplicationGetTimerTaskMemory+0x2c>)
 8003ba0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <vApplicationGetTimerTaskMemory+0x30>)
 8003ba6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bae:	601a      	str	r2, [r3, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	20000434 	.word	0x20000434
 8003bc0:	20000490 	.word	0x20000490

08003bc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f103 0208 	add.w	r2, r3, #8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f103 0208 	add.w	r2, r3, #8
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f103 0208 	add.w	r2, r3, #8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	601a      	str	r2, [r3, #0]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c66:	b480      	push	{r7}
 8003c68:	b085      	sub	sp, #20
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d103      	bne.n	8003c86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	e00c      	b.n	8003ca0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e002      	b.n	8003c94 <vListInsert+0x2e>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d2f6      	bcs.n	8003c8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	601a      	str	r2, [r3, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6892      	ldr	r2, [r2, #8]
 8003cee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6852      	ldr	r2, [r2, #4]
 8003cf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d103      	bne.n	8003d0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	1e5a      	subs	r2, r3, #1
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d56:	f002 f84d 	bl	8005df4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d62:	68f9      	ldr	r1, [r7, #12]
 8003d64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	441a      	add	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	3b01      	subs	r3, #1
 8003d88:	68f9      	ldr	r1, [r7, #12]
 8003d8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	441a      	add	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	22ff      	movs	r2, #255	; 0xff
 8003d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	22ff      	movs	r2, #255	; 0xff
 8003da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d114      	bne.n	8003dd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01a      	beq.n	8003dea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3310      	adds	r3, #16
 8003db8:	4618      	mov	r0, r3
 8003dba:	f001 f903 	bl	8004fc4 <xTaskRemoveFromEventList>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d012      	beq.n	8003dea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <xQueueGenericReset+0xcc>)
 8003dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	e009      	b.n	8003dea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3310      	adds	r3, #16
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fef2 	bl	8003bc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3324      	adds	r3, #36	; 0x24
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff feed 	bl	8003bc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dea:	f002 f833 	bl	8005e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dee:	2301      	movs	r3, #1
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	e000ed04 	.word	0xe000ed04

08003dfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08e      	sub	sp, #56	; 0x38
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <xQueueGenericCreateStatic+0x52>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <xQueueGenericCreateStatic+0x56>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <xQueueGenericCreateStatic+0x58>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	623b      	str	r3, [r7, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <xQueueGenericCreateStatic+0x7e>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <xQueueGenericCreateStatic+0x82>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <xQueueGenericCreateStatic+0x84>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	61fb      	str	r3, [r7, #28]
}
 8003e96:	bf00      	nop
 8003e98:	e7fe      	b.n	8003e98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e9a:	2350      	movs	r3, #80	; 0x50
 8003e9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b50      	cmp	r3, #80	; 0x50
 8003ea2:	d00a      	beq.n	8003eba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	61bb      	str	r3, [r7, #24]
}
 8003eb6:	bf00      	nop
 8003eb8:	e7fe      	b.n	8003eb8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003eba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ece:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f805 	bl	8003eec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3730      	adds	r7, #48	; 0x30
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d103      	bne.n	8003f08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e002      	b.n	8003f0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	69b8      	ldr	r0, [r7, #24]
 8003f1e:	f7ff ff05 	bl	8003d2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08e      	sub	sp, #56	; 0x38
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f42:	2300      	movs	r3, #0
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <xQueueGenericSend+0x32>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f62:	bf00      	nop
 8003f64:	e7fe      	b.n	8003f64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d103      	bne.n	8003f74 <xQueueGenericSend+0x40>
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <xQueueGenericSend+0x44>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <xQueueGenericSend+0x46>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <xQueueGenericSend+0x60>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f90:	bf00      	nop
 8003f92:	e7fe      	b.n	8003f92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d103      	bne.n	8003fa2 <xQueueGenericSend+0x6e>
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <xQueueGenericSend+0x72>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <xQueueGenericSend+0x74>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	623b      	str	r3, [r7, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fc2:	f001 f9bd 	bl	8005340 <xTaskGetSchedulerState>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <xQueueGenericSend+0x9e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <xQueueGenericSend+0xa2>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <xQueueGenericSend+0xa4>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	61fb      	str	r3, [r7, #28]
}
 8003fee:	bf00      	nop
 8003ff0:	e7fe      	b.n	8003ff0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ff2:	f001 feff 	bl	8005df4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <xQueueGenericSend+0xd4>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d129      	bne.n	800405c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800400e:	f000 fa0b 	bl	8004428 <prvCopyDataToQueue>
 8004012:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d010      	beq.n	800403e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	3324      	adds	r3, #36	; 0x24
 8004020:	4618      	mov	r0, r3
 8004022:	f000 ffcf 	bl	8004fc4 <xTaskRemoveFromEventList>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d013      	beq.n	8004054 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800402c:	4b3f      	ldr	r3, [pc, #252]	; (800412c <xQueueGenericSend+0x1f8>)
 800402e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	e00a      	b.n	8004054 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004044:	4b39      	ldr	r3, [pc, #228]	; (800412c <xQueueGenericSend+0x1f8>)
 8004046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004054:	f001 fefe 	bl	8005e54 <vPortExitCritical>
				return pdPASS;
 8004058:	2301      	movs	r3, #1
 800405a:	e063      	b.n	8004124 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004062:	f001 fef7 	bl	8005e54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004066:	2300      	movs	r3, #0
 8004068:	e05c      	b.n	8004124 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406c:	2b00      	cmp	r3, #0
 800406e:	d106      	bne.n	800407e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004070:	f107 0314 	add.w	r3, r7, #20
 8004074:	4618      	mov	r0, r3
 8004076:	f001 f809 	bl	800508c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800407a:	2301      	movs	r3, #1
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800407e:	f001 fee9 	bl	8005e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004082:	f000 fd7b 	bl	8004b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004086:	f001 feb5 	bl	8005df4 <vPortEnterCritical>
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004090:	b25b      	sxtb	r3, r3
 8004092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004096:	d103      	bne.n	80040a0 <xQueueGenericSend+0x16c>
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040a6:	b25b      	sxtb	r3, r3
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d103      	bne.n	80040b6 <xQueueGenericSend+0x182>
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b6:	f001 fecd 	bl	8005e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040ba:	1d3a      	adds	r2, r7, #4
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fff8 	bl	80050b8 <xTaskCheckForTimeOut>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d124      	bne.n	8004118 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040d0:	f000 faa2 	bl	8004618 <prvIsQueueFull>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d018      	beq.n	800410c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	3310      	adds	r3, #16
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 ff1e 	bl	8004f24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040ea:	f000 fa2d 	bl	8004548 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040ee:	f000 fd53 	bl	8004b98 <xTaskResumeAll>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f47f af7c 	bne.w	8003ff2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80040fa:	4b0c      	ldr	r3, [pc, #48]	; (800412c <xQueueGenericSend+0x1f8>)
 80040fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	e772      	b.n	8003ff2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800410c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800410e:	f000 fa1b 	bl	8004548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004112:	f000 fd41 	bl	8004b98 <xTaskResumeAll>
 8004116:	e76c      	b.n	8003ff2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800411a:	f000 fa15 	bl	8004548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800411e:	f000 fd3b 	bl	8004b98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004122:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004124:	4618      	mov	r0, r3
 8004126:	3738      	adds	r7, #56	; 0x38
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b090      	sub	sp, #64	; 0x40
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800415a:	bf00      	nop
 800415c:	e7fe      	b.n	800415c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <xQueueGenericSendFromISR+0x3c>
 8004164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <xQueueGenericSendFromISR+0x40>
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <xQueueGenericSendFromISR+0x42>
 8004170:	2300      	movs	r3, #0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d103      	bne.n	800419a <xQueueGenericSendFromISR+0x6a>
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <xQueueGenericSendFromISR+0x6e>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <xQueueGenericSendFromISR+0x70>
 800419e:	2300      	movs	r3, #0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	623b      	str	r3, [r7, #32]
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041ba:	f001 fefd 	bl	8005fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041be:	f3ef 8211 	mrs	r2, BASEPRI
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	61fa      	str	r2, [r7, #28]
 80041d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d302      	bcc.n	80041ec <xQueueGenericSendFromISR+0xbc>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d12f      	bne.n	800424c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004202:	f000 f911 	bl	8004428 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004206:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d112      	bne.n	8004236 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	d016      	beq.n	8004246 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421a:	3324      	adds	r3, #36	; 0x24
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fed1 	bl	8004fc4 <xTaskRemoveFromEventList>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	e007      	b.n	8004246 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004236:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800423a:	3301      	adds	r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	b25a      	sxtb	r2, r3
 8004240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004246:	2301      	movs	r3, #1
 8004248:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800424a:	e001      	b.n	8004250 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800424c:	2300      	movs	r3, #0
 800424e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004252:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800425a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800425c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800425e:	4618      	mov	r0, r3
 8004260:	3740      	adds	r7, #64	; 0x40
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08c      	sub	sp, #48	; 0x30
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004274:	2300      	movs	r3, #0
 8004276:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <xQueueReceive+0x30>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	623b      	str	r3, [r7, #32]
}
 8004294:	bf00      	nop
 8004296:	e7fe      	b.n	8004296 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <xQueueReceive+0x3e>
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <xQueueReceive+0x42>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <xQueueReceive+0x44>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <xQueueReceive+0x5e>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	61fb      	str	r3, [r7, #28]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042c6:	f001 f83b 	bl	8005340 <xTaskGetSchedulerState>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <xQueueReceive+0x6e>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <xQueueReceive+0x72>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <xQueueReceive+0x74>
 80042da:	2300      	movs	r3, #0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <xQueueReceive+0x8e>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	61bb      	str	r3, [r7, #24]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042f6:	f001 fd7d 	bl	8005df4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01f      	beq.n	8004346 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800430a:	f000 f8f7 	bl	80044fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	1e5a      	subs	r2, r3, #1
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00f      	beq.n	800433e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	3310      	adds	r3, #16
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fe4e 	bl	8004fc4 <xTaskRemoveFromEventList>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800432e:	4b3d      	ldr	r3, [pc, #244]	; (8004424 <xQueueReceive+0x1bc>)
 8004330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800433e:	f001 fd89 	bl	8005e54 <vPortExitCritical>
				return pdPASS;
 8004342:	2301      	movs	r3, #1
 8004344:	e069      	b.n	800441a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d103      	bne.n	8004354 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800434c:	f001 fd82 	bl	8005e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004350:	2300      	movs	r3, #0
 8004352:	e062      	b.n	800441a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800435a:	f107 0310 	add.w	r3, r7, #16
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fe94 	bl	800508c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004364:	2301      	movs	r3, #1
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004368:	f001 fd74 	bl	8005e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800436c:	f000 fc06 	bl	8004b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004370:	f001 fd40 	bl	8005df4 <vPortEnterCritical>
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800437a:	b25b      	sxtb	r3, r3
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d103      	bne.n	800438a <xQueueReceive+0x122>
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004390:	b25b      	sxtb	r3, r3
 8004392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004396:	d103      	bne.n	80043a0 <xQueueReceive+0x138>
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043a0:	f001 fd58 	bl	8005e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043a4:	1d3a      	adds	r2, r7, #4
 80043a6:	f107 0310 	add.w	r3, r7, #16
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fe83 	bl	80050b8 <xTaskCheckForTimeOut>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d123      	bne.n	8004400 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ba:	f000 f917 	bl	80045ec <prvIsQueueEmpty>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d017      	beq.n	80043f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	3324      	adds	r3, #36	; 0x24
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4611      	mov	r1, r2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fda9 	bl	8004f24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043d4:	f000 f8b8 	bl	8004548 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043d8:	f000 fbde 	bl	8004b98 <xTaskResumeAll>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d189      	bne.n	80042f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80043e2:	4b10      	ldr	r3, [pc, #64]	; (8004424 <xQueueReceive+0x1bc>)
 80043e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	e780      	b.n	80042f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043f6:	f000 f8a7 	bl	8004548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043fa:	f000 fbcd 	bl	8004b98 <xTaskResumeAll>
 80043fe:	e77a      	b.n	80042f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004402:	f000 f8a1 	bl	8004548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004406:	f000 fbc7 	bl	8004b98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800440a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800440c:	f000 f8ee 	bl	80045ec <prvIsQueueEmpty>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	f43f af6f 	beq.w	80042f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800441a:	4618      	mov	r0, r3
 800441c:	3730      	adds	r7, #48	; 0x30
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10d      	bne.n	8004462 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d14d      	bne.n	80044ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4618      	mov	r0, r3
 8004454:	f000 ff92 	bl	800537c <xTaskPriorityDisinherit>
 8004458:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	e043      	b.n	80044ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d119      	bne.n	800449c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6858      	ldr	r0, [r3, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	461a      	mov	r2, r3
 8004472:	68b9      	ldr	r1, [r7, #8]
 8004474:	f001 fff6 	bl	8006464 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	441a      	add	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	d32b      	bcc.n	80044ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	e026      	b.n	80044ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	68d8      	ldr	r0, [r3, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	461a      	mov	r2, r3
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	f001 ffdc 	bl	8006464 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	425b      	negs	r3, r3
 80044b6:	441a      	add	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d207      	bcs.n	80044d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	425b      	negs	r3, r3
 80044d2:	441a      	add	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d105      	bne.n	80044ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044f2:	697b      	ldr	r3, [r7, #20]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d018      	beq.n	8004540 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	441a      	add	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	429a      	cmp	r2, r3
 8004526:	d303      	bcc.n	8004530 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68d9      	ldr	r1, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	461a      	mov	r2, r3
 800453a:	6838      	ldr	r0, [r7, #0]
 800453c:	f001 ff92 	bl	8006464 <memcpy>
	}
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004550:	f001 fc50 	bl	8005df4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800455a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800455c:	e011      	b.n	8004582 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	2b00      	cmp	r3, #0
 8004564:	d012      	beq.n	800458c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3324      	adds	r3, #36	; 0x24
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fd2a 	bl	8004fc4 <xTaskRemoveFromEventList>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004576:	f000 fe01 	bl	800517c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	3b01      	subs	r3, #1
 800457e:	b2db      	uxtb	r3, r3
 8004580:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004586:	2b00      	cmp	r3, #0
 8004588:	dce9      	bgt.n	800455e <prvUnlockQueue+0x16>
 800458a:	e000      	b.n	800458e <prvUnlockQueue+0x46>
					break;
 800458c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	22ff      	movs	r2, #255	; 0xff
 8004592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004596:	f001 fc5d 	bl	8005e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800459a:	f001 fc2b 	bl	8005df4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045a6:	e011      	b.n	80045cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d012      	beq.n	80045d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3310      	adds	r3, #16
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fd05 	bl	8004fc4 <xTaskRemoveFromEventList>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045c0:	f000 fddc 	bl	800517c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045c4:	7bbb      	ldrb	r3, [r7, #14]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	dce9      	bgt.n	80045a8 <prvUnlockQueue+0x60>
 80045d4:	e000      	b.n	80045d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	22ff      	movs	r2, #255	; 0xff
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045e0:	f001 fc38 	bl	8005e54 <vPortExitCritical>
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045f4:	f001 fbfe 	bl	8005df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004600:	2301      	movs	r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e001      	b.n	800460a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800460a:	f001 fc23 	bl	8005e54 <vPortExitCritical>

	return xReturn;
 800460e:	68fb      	ldr	r3, [r7, #12]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004620:	f001 fbe8 	bl	8005df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	429a      	cmp	r2, r3
 800462e:	d102      	bne.n	8004636 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004630:	2301      	movs	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e001      	b.n	800463a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800463a:	f001 fc0b 	bl	8005e54 <vPortExitCritical>

	return xReturn;
 800463e:	68fb      	ldr	r3, [r7, #12]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	e014      	b.n	8004682 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004658:	4a0f      	ldr	r2, [pc, #60]	; (8004698 <vQueueAddToRegistry+0x50>)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10b      	bne.n	800467c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004664:	490c      	ldr	r1, [pc, #48]	; (8004698 <vQueueAddToRegistry+0x50>)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <vQueueAddToRegistry+0x50>)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800467a:	e006      	b.n	800468a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3301      	adds	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b07      	cmp	r3, #7
 8004686:	d9e7      	bls.n	8004658 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000890 	.word	0x20000890

0800469c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046ac:	f001 fba2 	bl	8005df4 <vPortEnterCritical>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046b6:	b25b      	sxtb	r3, r3
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d103      	bne.n	80046c6 <vQueueWaitForMessageRestricted+0x2a>
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046cc:	b25b      	sxtb	r3, r3
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d103      	bne.n	80046dc <vQueueWaitForMessageRestricted+0x40>
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046dc:	f001 fbba 	bl	8005e54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d106      	bne.n	80046f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3324      	adds	r3, #36	; 0x24
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fc3b 	bl	8004f6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046f6:	6978      	ldr	r0, [r7, #20]
 80046f8:	f7ff ff26 	bl	8004548 <prvUnlockQueue>
	}
 80046fc:	bf00      	nop
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08e      	sub	sp, #56	; 0x38
 8004708:	af04      	add	r7, sp, #16
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	623b      	str	r3, [r7, #32]
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <xTaskCreateStatic+0x46>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	61fb      	str	r3, [r7, #28]
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800474a:	235c      	movs	r3, #92	; 0x5c
 800474c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b5c      	cmp	r3, #92	; 0x5c
 8004752:	d00a      	beq.n	800476a <xTaskCreateStatic+0x66>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	61bb      	str	r3, [r7, #24]
}
 8004766:	bf00      	nop
 8004768:	e7fe      	b.n	8004768 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800476a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476e:	2b00      	cmp	r3, #0
 8004770:	d01e      	beq.n	80047b0 <xTaskCreateStatic+0xac>
 8004772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01b      	beq.n	80047b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004780:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	2202      	movs	r2, #2
 8004786:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800478a:	2300      	movs	r3, #0
 800478c:	9303      	str	r3, [sp, #12]
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	9302      	str	r3, [sp, #8]
 8004792:	f107 0314 	add.w	r3, r7, #20
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f850 	bl	8004848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047aa:	f000 f8dd 	bl	8004968 <prvAddNewTaskToReadyList>
 80047ae:	e001      	b.n	80047b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047b4:	697b      	ldr	r3, [r7, #20]
	}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3728      	adds	r7, #40	; 0x28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b08c      	sub	sp, #48	; 0x30
 80047c2:	af04      	add	r7, sp, #16
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	603b      	str	r3, [r7, #0]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 fc30 	bl	8006038 <pvPortMalloc>
 80047d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00e      	beq.n	80047fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047e0:	205c      	movs	r0, #92	; 0x5c
 80047e2:	f001 fc29 	bl	8006038 <pvPortMalloc>
 80047e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
 80047f4:	e005      	b.n	8004802 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047f6:	6978      	ldr	r0, [r7, #20]
 80047f8:	f001 fcea 	bl	80061d0 <vPortFree>
 80047fc:	e001      	b.n	8004802 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d017      	beq.n	8004838 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004810:	88fa      	ldrh	r2, [r7, #6]
 8004812:	2300      	movs	r3, #0
 8004814:	9303      	str	r3, [sp, #12]
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	9302      	str	r3, [sp, #8]
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	9301      	str	r3, [sp, #4]
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f80e 	bl	8004848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800482c:	69f8      	ldr	r0, [r7, #28]
 800482e:	f000 f89b 	bl	8004968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004832:	2301      	movs	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	e002      	b.n	800483e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004838:	f04f 33ff 	mov.w	r3, #4294967295
 800483c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800483e:	69bb      	ldr	r3, [r7, #24]
	}
 8004840:	4618      	mov	r0, r3
 8004842:	3720      	adds	r7, #32
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	461a      	mov	r2, r3
 8004860:	21a5      	movs	r1, #165	; 0xa5
 8004862:	f001 fdd3 	bl	800640c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004870:	3b01      	subs	r3, #1
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f023 0307 	bic.w	r3, r3, #7
 800487e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	617b      	str	r3, [r7, #20]
}
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01f      	beq.n	80048e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	e012      	b.n	80048d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	4413      	add	r3, r2
 80048b2:	7819      	ldrb	r1, [r3, #0]
 80048b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	4413      	add	r3, r2
 80048ba:	3334      	adds	r3, #52	; 0x34
 80048bc:	460a      	mov	r2, r1
 80048be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d006      	beq.n	80048da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	3301      	adds	r3, #1
 80048d0:	61fb      	str	r3, [r7, #28]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	2b0f      	cmp	r3, #15
 80048d6:	d9e9      	bls.n	80048ac <prvInitialiseNewTask+0x64>
 80048d8:	e000      	b.n	80048dc <prvInitialiseNewTask+0x94>
			{
				break;
 80048da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048e4:	e003      	b.n	80048ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	2b37      	cmp	r3, #55	; 0x37
 80048f2:	d901      	bls.n	80048f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048f4:	2337      	movs	r3, #55	; 0x37
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004902:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	2200      	movs	r2, #0
 8004908:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	3304      	adds	r3, #4
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff f978 	bl	8003c04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	3318      	adds	r3, #24
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff f973 	bl	8003c04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004922:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004932:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	2200      	movs	r2, #0
 8004938:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	68f9      	ldr	r1, [r7, #12]
 8004946:	69b8      	ldr	r0, [r7, #24]
 8004948:	f001 f928 	bl	8005b9c <pxPortInitialiseStack>
 800494c:	4602      	mov	r2, r0
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800495e:	bf00      	nop
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004970:	f001 fa40 	bl	8005df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004974:	4b2d      	ldr	r3, [pc, #180]	; (8004a2c <prvAddNewTaskToReadyList+0xc4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3301      	adds	r3, #1
 800497a:	4a2c      	ldr	r2, [pc, #176]	; (8004a2c <prvAddNewTaskToReadyList+0xc4>)
 800497c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800497e:	4b2c      	ldr	r3, [pc, #176]	; (8004a30 <prvAddNewTaskToReadyList+0xc8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004986:	4a2a      	ldr	r2, [pc, #168]	; (8004a30 <prvAddNewTaskToReadyList+0xc8>)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800498c:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <prvAddNewTaskToReadyList+0xc4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d110      	bne.n	80049b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004994:	f000 fc16 	bl	80051c4 <prvInitialiseTaskLists>
 8004998:	e00d      	b.n	80049b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800499a:	4b26      	ldr	r3, [pc, #152]	; (8004a34 <prvAddNewTaskToReadyList+0xcc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049a2:	4b23      	ldr	r3, [pc, #140]	; (8004a30 <prvAddNewTaskToReadyList+0xc8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d802      	bhi.n	80049b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049b0:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <prvAddNewTaskToReadyList+0xc8>)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049b6:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <prvAddNewTaskToReadyList+0xd0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3301      	adds	r3, #1
 80049bc:	4a1e      	ldr	r2, [pc, #120]	; (8004a38 <prvAddNewTaskToReadyList+0xd0>)
 80049be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049c0:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <prvAddNewTaskToReadyList+0xd0>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049cc:	4b1b      	ldr	r3, [pc, #108]	; (8004a3c <prvAddNewTaskToReadyList+0xd4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d903      	bls.n	80049dc <prvAddNewTaskToReadyList+0x74>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	4a18      	ldr	r2, [pc, #96]	; (8004a3c <prvAddNewTaskToReadyList+0xd4>)
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <prvAddNewTaskToReadyList+0xd8>)
 80049ea:	441a      	add	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f7ff f913 	bl	8003c1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049f8:	f001 fa2c 	bl	8005e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <prvAddNewTaskToReadyList+0xcc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00e      	beq.n	8004a22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a04:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <prvAddNewTaskToReadyList+0xc8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d207      	bcs.n	8004a22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a12:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <prvAddNewTaskToReadyList+0xdc>)
 8004a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000da4 	.word	0x20000da4
 8004a30:	200008d0 	.word	0x200008d0
 8004a34:	20000db0 	.word	0x20000db0
 8004a38:	20000dc0 	.word	0x20000dc0
 8004a3c:	20000dac 	.word	0x20000dac
 8004a40:	200008d4 	.word	0x200008d4
 8004a44:	e000ed04 	.word	0xe000ed04

08004a48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d017      	beq.n	8004a8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a5a:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <vTaskDelay+0x60>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <vTaskDelay+0x30>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	60bb      	str	r3, [r7, #8]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a78:	f000 f880 	bl	8004b7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fcea 	bl	8005458 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a84:	f000 f888 	bl	8004b98 <xTaskResumeAll>
 8004a88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d107      	bne.n	8004aa0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <vTaskDelay+0x64>)
 8004a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000dcc 	.word	0x20000dcc
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004abe:	463a      	mov	r2, r7
 8004ac0:	1d39      	adds	r1, r7, #4
 8004ac2:	f107 0308 	add.w	r3, r7, #8
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff f848 	bl	8003b5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	9202      	str	r2, [sp, #8]
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	2300      	movs	r3, #0
 8004adc:	460a      	mov	r2, r1
 8004ade:	4921      	ldr	r1, [pc, #132]	; (8004b64 <vTaskStartScheduler+0xb4>)
 8004ae0:	4821      	ldr	r0, [pc, #132]	; (8004b68 <vTaskStartScheduler+0xb8>)
 8004ae2:	f7ff fe0f 	bl	8004704 <xTaskCreateStatic>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	4a20      	ldr	r2, [pc, #128]	; (8004b6c <vTaskStartScheduler+0xbc>)
 8004aea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004aec:	4b1f      	ldr	r3, [pc, #124]	; (8004b6c <vTaskStartScheduler+0xbc>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004af4:	2301      	movs	r3, #1
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	e001      	b.n	8004afe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d102      	bne.n	8004b0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b04:	f000 fcfc 	bl	8005500 <xTimerCreateTimerTask>
 8004b08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d116      	bne.n	8004b3e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	613b      	str	r3, [r7, #16]
}
 8004b22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b24:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <vTaskStartScheduler+0xc0>)
 8004b26:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b2c:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <vTaskStartScheduler+0xc4>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <vTaskStartScheduler+0xc8>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b38:	f001 f8ba 	bl	8005cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b3c:	e00e      	b.n	8004b5c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d10a      	bne.n	8004b5c <vTaskStartScheduler+0xac>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	60fb      	str	r3, [r7, #12]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <vTaskStartScheduler+0xaa>
}
 8004b5c:	bf00      	nop
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	080064bc 	.word	0x080064bc
 8004b68:	08005195 	.word	0x08005195
 8004b6c:	20000dc8 	.word	0x20000dc8
 8004b70:	20000dc4 	.word	0x20000dc4
 8004b74:	20000db0 	.word	0x20000db0
 8004b78:	20000da8 	.word	0x20000da8

08004b7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <vTaskSuspendAll+0x18>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	4a03      	ldr	r2, [pc, #12]	; (8004b94 <vTaskSuspendAll+0x18>)
 8004b88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b8a:	bf00      	nop
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	20000dcc 	.word	0x20000dcc

08004b98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ba6:	4b42      	ldr	r3, [pc, #264]	; (8004cb0 <xTaskResumeAll+0x118>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	603b      	str	r3, [r7, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bc4:	f001 f916 	bl	8005df4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004bc8:	4b39      	ldr	r3, [pc, #228]	; (8004cb0 <xTaskResumeAll+0x118>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	4a38      	ldr	r2, [pc, #224]	; (8004cb0 <xTaskResumeAll+0x118>)
 8004bd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bd2:	4b37      	ldr	r3, [pc, #220]	; (8004cb0 <xTaskResumeAll+0x118>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d162      	bne.n	8004ca0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bda:	4b36      	ldr	r3, [pc, #216]	; (8004cb4 <xTaskResumeAll+0x11c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d05e      	beq.n	8004ca0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004be2:	e02f      	b.n	8004c44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004be4:	4b34      	ldr	r3, [pc, #208]	; (8004cb8 <xTaskResumeAll+0x120>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3318      	adds	r3, #24
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff f871 	bl	8003cd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff f86c 	bl	8003cd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c04:	4b2d      	ldr	r3, [pc, #180]	; (8004cbc <xTaskResumeAll+0x124>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d903      	bls.n	8004c14 <xTaskResumeAll+0x7c>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	4a2a      	ldr	r2, [pc, #168]	; (8004cbc <xTaskResumeAll+0x124>)
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4a27      	ldr	r2, [pc, #156]	; (8004cc0 <xTaskResumeAll+0x128>)
 8004c22:	441a      	add	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3304      	adds	r3, #4
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	f7fe fff7 	bl	8003c1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c34:	4b23      	ldr	r3, [pc, #140]	; (8004cc4 <xTaskResumeAll+0x12c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d302      	bcc.n	8004c44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004c3e:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <xTaskResumeAll+0x130>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c44:	4b1c      	ldr	r3, [pc, #112]	; (8004cb8 <xTaskResumeAll+0x120>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1cb      	bne.n	8004be4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c52:	f000 fb55 	bl	8005300 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c56:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <xTaskResumeAll+0x134>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d010      	beq.n	8004c84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c62:	f000 f847 	bl	8004cf4 <xTaskIncrementTick>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c6c:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <xTaskResumeAll+0x130>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f1      	bne.n	8004c62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c7e:	4b13      	ldr	r3, [pc, #76]	; (8004ccc <xTaskResumeAll+0x134>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c84:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <xTaskResumeAll+0x130>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d009      	beq.n	8004ca0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c90:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <xTaskResumeAll+0x138>)
 8004c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ca0:	f001 f8d8 	bl	8005e54 <vPortExitCritical>

	return xAlreadyYielded;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000dcc 	.word	0x20000dcc
 8004cb4:	20000da4 	.word	0x20000da4
 8004cb8:	20000d64 	.word	0x20000d64
 8004cbc:	20000dac 	.word	0x20000dac
 8004cc0:	200008d4 	.word	0x200008d4
 8004cc4:	200008d0 	.word	0x200008d0
 8004cc8:	20000db8 	.word	0x20000db8
 8004ccc:	20000db4 	.word	0x20000db4
 8004cd0:	e000ed04 	.word	0xe000ed04

08004cd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <xTaskGetTickCount+0x1c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ce0:	687b      	ldr	r3, [r7, #4]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000da8 	.word	0x20000da8

08004cf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cfe:	4b4f      	ldr	r3, [pc, #316]	; (8004e3c <xTaskIncrementTick+0x148>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f040 808f 	bne.w	8004e26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d08:	4b4d      	ldr	r3, [pc, #308]	; (8004e40 <xTaskIncrementTick+0x14c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d10:	4a4b      	ldr	r2, [pc, #300]	; (8004e40 <xTaskIncrementTick+0x14c>)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d120      	bne.n	8004d5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d1c:	4b49      	ldr	r3, [pc, #292]	; (8004e44 <xTaskIncrementTick+0x150>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <xTaskIncrementTick+0x48>
	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	603b      	str	r3, [r7, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	e7fe      	b.n	8004d3a <xTaskIncrementTick+0x46>
 8004d3c:	4b41      	ldr	r3, [pc, #260]	; (8004e44 <xTaskIncrementTick+0x150>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <xTaskIncrementTick+0x154>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a3f      	ldr	r2, [pc, #252]	; (8004e44 <xTaskIncrementTick+0x150>)
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	4a3f      	ldr	r2, [pc, #252]	; (8004e48 <xTaskIncrementTick+0x154>)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4b3e      	ldr	r3, [pc, #248]	; (8004e4c <xTaskIncrementTick+0x158>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	4a3d      	ldr	r2, [pc, #244]	; (8004e4c <xTaskIncrementTick+0x158>)
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	f000 fad1 	bl	8005300 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d5e:	4b3c      	ldr	r3, [pc, #240]	; (8004e50 <xTaskIncrementTick+0x15c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d349      	bcc.n	8004dfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d68:	4b36      	ldr	r3, [pc, #216]	; (8004e44 <xTaskIncrementTick+0x150>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d104      	bne.n	8004d7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d72:	4b37      	ldr	r3, [pc, #220]	; (8004e50 <xTaskIncrementTick+0x15c>)
 8004d74:	f04f 32ff 	mov.w	r2, #4294967295
 8004d78:	601a      	str	r2, [r3, #0]
					break;
 8004d7a:	e03f      	b.n	8004dfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d7c:	4b31      	ldr	r3, [pc, #196]	; (8004e44 <xTaskIncrementTick+0x150>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d203      	bcs.n	8004d9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d94:	4a2e      	ldr	r2, [pc, #184]	; (8004e50 <xTaskIncrementTick+0x15c>)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d9a:	e02f      	b.n	8004dfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe ff99 	bl	8003cd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d004      	beq.n	8004db8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	3318      	adds	r3, #24
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe ff90 	bl	8003cd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbc:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <xTaskIncrementTick+0x160>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d903      	bls.n	8004dcc <xTaskIncrementTick+0xd8>
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <xTaskIncrementTick+0x160>)
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4a1f      	ldr	r2, [pc, #124]	; (8004e58 <xTaskIncrementTick+0x164>)
 8004dda:	441a      	add	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f7fe ff1b 	bl	8003c1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <xTaskIncrementTick+0x168>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d3b8      	bcc.n	8004d68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004df6:	2301      	movs	r3, #1
 8004df8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dfa:	e7b5      	b.n	8004d68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004dfc:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <xTaskIncrementTick+0x168>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e02:	4915      	ldr	r1, [pc, #84]	; (8004e58 <xTaskIncrementTick+0x164>)
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d901      	bls.n	8004e18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004e14:	2301      	movs	r3, #1
 8004e16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e18:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <xTaskIncrementTick+0x16c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004e20:	2301      	movs	r3, #1
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e004      	b.n	8004e30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e26:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <xTaskIncrementTick+0x170>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	4a0d      	ldr	r2, [pc, #52]	; (8004e64 <xTaskIncrementTick+0x170>)
 8004e2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e30:	697b      	ldr	r3, [r7, #20]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000dcc 	.word	0x20000dcc
 8004e40:	20000da8 	.word	0x20000da8
 8004e44:	20000d5c 	.word	0x20000d5c
 8004e48:	20000d60 	.word	0x20000d60
 8004e4c:	20000dbc 	.word	0x20000dbc
 8004e50:	20000dc4 	.word	0x20000dc4
 8004e54:	20000dac 	.word	0x20000dac
 8004e58:	200008d4 	.word	0x200008d4
 8004e5c:	200008d0 	.word	0x200008d0
 8004e60:	20000db8 	.word	0x20000db8
 8004e64:	20000db4 	.word	0x20000db4

08004e68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e6e:	4b28      	ldr	r3, [pc, #160]	; (8004f10 <vTaskSwitchContext+0xa8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e76:	4b27      	ldr	r3, [pc, #156]	; (8004f14 <vTaskSwitchContext+0xac>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e7c:	e041      	b.n	8004f02 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004e7e:	4b25      	ldr	r3, [pc, #148]	; (8004f14 <vTaskSwitchContext+0xac>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e84:	4b24      	ldr	r3, [pc, #144]	; (8004f18 <vTaskSwitchContext+0xb0>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e010      	b.n	8004eae <vTaskSwitchContext+0x46>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10a      	bne.n	8004ea8 <vTaskSwitchContext+0x40>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	607b      	str	r3, [r7, #4]
}
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <vTaskSwitchContext+0x3e>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	491b      	ldr	r1, [pc, #108]	; (8004f1c <vTaskSwitchContext+0xb4>)
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0e4      	beq.n	8004e8c <vTaskSwitchContext+0x24>
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <vTaskSwitchContext+0xb4>)
 8004ece:	4413      	add	r3, r2
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	605a      	str	r2, [r3, #4]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d104      	bne.n	8004ef2 <vTaskSwitchContext+0x8a>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <vTaskSwitchContext+0xb8>)
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4a06      	ldr	r2, [pc, #24]	; (8004f18 <vTaskSwitchContext+0xb0>)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6013      	str	r3, [r2, #0]
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	20000dcc 	.word	0x20000dcc
 8004f14:	20000db8 	.word	0x20000db8
 8004f18:	20000dac 	.word	0x20000dac
 8004f1c:	200008d4 	.word	0x200008d4
 8004f20:	200008d0 	.word	0x200008d0

08004f24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10a      	bne.n	8004f4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	60fb      	str	r3, [r7, #12]
}
 8004f46:	bf00      	nop
 8004f48:	e7fe      	b.n	8004f48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f4a:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <vTaskPlaceOnEventList+0x44>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3318      	adds	r3, #24
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fe fe87 	bl	8003c66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f58:	2101      	movs	r1, #1
 8004f5a:	6838      	ldr	r0, [r7, #0]
 8004f5c:	f000 fa7c 	bl	8005458 <prvAddCurrentTaskToDelayedList>
}
 8004f60:	bf00      	nop
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	200008d0 	.word	0x200008d0

08004f6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	617b      	str	r3, [r7, #20]
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f94:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3318      	adds	r3, #24
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f7fe fe3e 	bl	8003c1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	68b8      	ldr	r0, [r7, #8]
 8004fb2:	f000 fa51 	bl	8005458 <prvAddCurrentTaskToDelayedList>
	}
 8004fb6:	bf00      	nop
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	200008d0 	.word	0x200008d0

08004fc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10a      	bne.n	8004ff0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	60fb      	str	r3, [r7, #12]
}
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	3318      	adds	r3, #24
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe fe6f 	bl	8003cd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ffa:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <xTaskRemoveFromEventList+0xb0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d11d      	bne.n	800503e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	3304      	adds	r3, #4
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe fe66 	bl	8003cd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	4b19      	ldr	r3, [pc, #100]	; (8005078 <xTaskRemoveFromEventList+0xb4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d903      	bls.n	8005020 <xTaskRemoveFromEventList+0x5c>
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	4a16      	ldr	r2, [pc, #88]	; (8005078 <xTaskRemoveFromEventList+0xb4>)
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4a13      	ldr	r2, [pc, #76]	; (800507c <xTaskRemoveFromEventList+0xb8>)
 800502e:	441a      	add	r2, r3
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	3304      	adds	r3, #4
 8005034:	4619      	mov	r1, r3
 8005036:	4610      	mov	r0, r2
 8005038:	f7fe fdf1 	bl	8003c1e <vListInsertEnd>
 800503c:	e005      	b.n	800504a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	3318      	adds	r3, #24
 8005042:	4619      	mov	r1, r3
 8005044:	480e      	ldr	r0, [pc, #56]	; (8005080 <xTaskRemoveFromEventList+0xbc>)
 8005046:	f7fe fdea 	bl	8003c1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504e:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <xTaskRemoveFromEventList+0xc0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	429a      	cmp	r2, r3
 8005056:	d905      	bls.n	8005064 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005058:	2301      	movs	r3, #1
 800505a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800505c:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <xTaskRemoveFromEventList+0xc4>)
 800505e:	2201      	movs	r2, #1
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e001      	b.n	8005068 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005068:	697b      	ldr	r3, [r7, #20]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000dcc 	.word	0x20000dcc
 8005078:	20000dac 	.word	0x20000dac
 800507c:	200008d4 	.word	0x200008d4
 8005080:	20000d64 	.word	0x20000d64
 8005084:	200008d0 	.word	0x200008d0
 8005088:	20000db8 	.word	0x20000db8

0800508c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005094:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <vTaskInternalSetTimeOutState+0x24>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <vTaskInternalSetTimeOutState+0x28>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	605a      	str	r2, [r3, #4]
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	20000dbc 	.word	0x20000dbc
 80050b4:	20000da8 	.word	0x20000da8

080050b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10a      	bne.n	80050de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	613b      	str	r3, [r7, #16]
}
 80050da:	bf00      	nop
 80050dc:	e7fe      	b.n	80050dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	60fb      	str	r3, [r7, #12]
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80050fa:	f000 fe7b 	bl	8005df4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050fe:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <xTaskCheckForTimeOut+0xbc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005116:	d102      	bne.n	800511e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005118:	2300      	movs	r3, #0
 800511a:	61fb      	str	r3, [r7, #28]
 800511c:	e023      	b.n	8005166 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4b15      	ldr	r3, [pc, #84]	; (8005178 <xTaskCheckForTimeOut+0xc0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d007      	beq.n	800513a <xTaskCheckForTimeOut+0x82>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	429a      	cmp	r2, r3
 8005132:	d302      	bcc.n	800513a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005134:	2301      	movs	r3, #1
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	e015      	b.n	8005166 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	429a      	cmp	r2, r3
 8005142:	d20b      	bcs.n	800515c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	1ad2      	subs	r2, r2, r3
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ff9b 	bl	800508c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	e004      	b.n	8005166 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005162:	2301      	movs	r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005166:	f000 fe75 	bl	8005e54 <vPortExitCritical>

	return xReturn;
 800516a:	69fb      	ldr	r3, [r7, #28]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3720      	adds	r7, #32
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20000da8 	.word	0x20000da8
 8005178:	20000dbc 	.word	0x20000dbc

0800517c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005180:	4b03      	ldr	r3, [pc, #12]	; (8005190 <vTaskMissedYield+0x14>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]
}
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	20000db8 	.word	0x20000db8

08005194 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800519c:	f000 f852 	bl	8005244 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <prvIdleTask+0x28>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d9f9      	bls.n	800519c <prvIdleTask+0x8>
			{
				taskYIELD();
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <prvIdleTask+0x2c>)
 80051aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051b8:	e7f0      	b.n	800519c <prvIdleTask+0x8>
 80051ba:	bf00      	nop
 80051bc:	200008d4 	.word	0x200008d4
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051ca:	2300      	movs	r3, #0
 80051cc:	607b      	str	r3, [r7, #4]
 80051ce:	e00c      	b.n	80051ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4a12      	ldr	r2, [pc, #72]	; (8005224 <prvInitialiseTaskLists+0x60>)
 80051dc:	4413      	add	r3, r2
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe fcf0 	bl	8003bc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3301      	adds	r3, #1
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b37      	cmp	r3, #55	; 0x37
 80051ee:	d9ef      	bls.n	80051d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051f0:	480d      	ldr	r0, [pc, #52]	; (8005228 <prvInitialiseTaskLists+0x64>)
 80051f2:	f7fe fce7 	bl	8003bc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051f6:	480d      	ldr	r0, [pc, #52]	; (800522c <prvInitialiseTaskLists+0x68>)
 80051f8:	f7fe fce4 	bl	8003bc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051fc:	480c      	ldr	r0, [pc, #48]	; (8005230 <prvInitialiseTaskLists+0x6c>)
 80051fe:	f7fe fce1 	bl	8003bc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005202:	480c      	ldr	r0, [pc, #48]	; (8005234 <prvInitialiseTaskLists+0x70>)
 8005204:	f7fe fcde 	bl	8003bc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005208:	480b      	ldr	r0, [pc, #44]	; (8005238 <prvInitialiseTaskLists+0x74>)
 800520a:	f7fe fcdb 	bl	8003bc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <prvInitialiseTaskLists+0x78>)
 8005210:	4a05      	ldr	r2, [pc, #20]	; (8005228 <prvInitialiseTaskLists+0x64>)
 8005212:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005214:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <prvInitialiseTaskLists+0x7c>)
 8005216:	4a05      	ldr	r2, [pc, #20]	; (800522c <prvInitialiseTaskLists+0x68>)
 8005218:	601a      	str	r2, [r3, #0]
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	200008d4 	.word	0x200008d4
 8005228:	20000d34 	.word	0x20000d34
 800522c:	20000d48 	.word	0x20000d48
 8005230:	20000d64 	.word	0x20000d64
 8005234:	20000d78 	.word	0x20000d78
 8005238:	20000d90 	.word	0x20000d90
 800523c:	20000d5c 	.word	0x20000d5c
 8005240:	20000d60 	.word	0x20000d60

08005244 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800524a:	e019      	b.n	8005280 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800524c:	f000 fdd2 	bl	8005df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005250:	4b10      	ldr	r3, [pc, #64]	; (8005294 <prvCheckTasksWaitingTermination+0x50>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe fd3b 	bl	8003cd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <prvCheckTasksWaitingTermination+0x54>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3b01      	subs	r3, #1
 8005268:	4a0b      	ldr	r2, [pc, #44]	; (8005298 <prvCheckTasksWaitingTermination+0x54>)
 800526a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <prvCheckTasksWaitingTermination+0x58>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3b01      	subs	r3, #1
 8005272:	4a0a      	ldr	r2, [pc, #40]	; (800529c <prvCheckTasksWaitingTermination+0x58>)
 8005274:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005276:	f000 fded 	bl	8005e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f810 	bl	80052a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <prvCheckTasksWaitingTermination+0x58>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e1      	bne.n	800524c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000d78 	.word	0x20000d78
 8005298:	20000da4 	.word	0x20000da4
 800529c:	20000d8c 	.word	0x20000d8c

080052a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d108      	bne.n	80052c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 ff8a 	bl	80061d0 <vPortFree>
				vPortFree( pxTCB );
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 ff87 	bl	80061d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052c2:	e018      	b.n	80052f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d103      	bne.n	80052d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 ff7e 	bl	80061d0 <vPortFree>
	}
 80052d4:	e00f      	b.n	80052f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d00a      	beq.n	80052f6 <prvDeleteTCB+0x56>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	60fb      	str	r3, [r7, #12]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <prvDeleteTCB+0x54>
	}
 80052f6:	bf00      	nop
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005306:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <prvResetNextTaskUnblockTime+0x38>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d104      	bne.n	800531a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <prvResetNextTaskUnblockTime+0x3c>)
 8005312:	f04f 32ff 	mov.w	r2, #4294967295
 8005316:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005318:	e008      	b.n	800532c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800531a:	4b07      	ldr	r3, [pc, #28]	; (8005338 <prvResetNextTaskUnblockTime+0x38>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	4a04      	ldr	r2, [pc, #16]	; (800533c <prvResetNextTaskUnblockTime+0x3c>)
 800532a:	6013      	str	r3, [r2, #0]
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	20000d5c 	.word	0x20000d5c
 800533c:	20000dc4 	.word	0x20000dc4

08005340 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005346:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <xTaskGetSchedulerState+0x34>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800534e:	2301      	movs	r3, #1
 8005350:	607b      	str	r3, [r7, #4]
 8005352:	e008      	b.n	8005366 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005354:	4b08      	ldr	r3, [pc, #32]	; (8005378 <xTaskGetSchedulerState+0x38>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d102      	bne.n	8005362 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800535c:	2302      	movs	r3, #2
 800535e:	607b      	str	r3, [r7, #4]
 8005360:	e001      	b.n	8005366 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005366:	687b      	ldr	r3, [r7, #4]
	}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	20000db0 	.word	0x20000db0
 8005378:	20000dcc 	.word	0x20000dcc

0800537c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d056      	beq.n	8005440 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005392:	4b2e      	ldr	r3, [pc, #184]	; (800544c <xTaskPriorityDisinherit+0xd0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	429a      	cmp	r2, r3
 800539a:	d00a      	beq.n	80053b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	60fb      	str	r3, [r7, #12]
}
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	60bb      	str	r3, [r7, #8]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	1e5a      	subs	r2, r3, #1
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d02c      	beq.n	8005440 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d128      	bne.n	8005440 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	3304      	adds	r3, #4
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe fc70 	bl	8003cd8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <xTaskPriorityDisinherit+0xd4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d903      	bls.n	8005420 <xTaskPriorityDisinherit+0xa4>
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <xTaskPriorityDisinherit+0xd4>)
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4a09      	ldr	r2, [pc, #36]	; (8005454 <xTaskPriorityDisinherit+0xd8>)
 800542e:	441a      	add	r2, r3
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7fe fbf1 	bl	8003c1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800543c:	2301      	movs	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005440:	697b      	ldr	r3, [r7, #20]
	}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	200008d0 	.word	0x200008d0
 8005450:	20000dac 	.word	0x20000dac
 8005454:	200008d4 	.word	0x200008d4

08005458 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005462:	4b21      	ldr	r3, [pc, #132]	; (80054e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005468:	4b20      	ldr	r3, [pc, #128]	; (80054ec <prvAddCurrentTaskToDelayedList+0x94>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3304      	adds	r3, #4
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe fc32 	bl	8003cd8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d10a      	bne.n	8005492 <prvAddCurrentTaskToDelayedList+0x3a>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005482:	4b1a      	ldr	r3, [pc, #104]	; (80054ec <prvAddCurrentTaskToDelayedList+0x94>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4819      	ldr	r0, [pc, #100]	; (80054f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800548c:	f7fe fbc7 	bl	8003c1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005490:	e026      	b.n	80054e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4413      	add	r3, r2
 8005498:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800549a:	4b14      	ldr	r3, [pc, #80]	; (80054ec <prvAddCurrentTaskToDelayedList+0x94>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d209      	bcs.n	80054be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054aa:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <prvAddCurrentTaskToDelayedList+0x94>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f7fe fbd5 	bl	8003c66 <vListInsert>
}
 80054bc:	e010      	b.n	80054e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054be:	4b0e      	ldr	r3, [pc, #56]	; (80054f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <prvAddCurrentTaskToDelayedList+0x94>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4619      	mov	r1, r3
 80054ca:	4610      	mov	r0, r2
 80054cc:	f7fe fbcb 	bl	8003c66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054d0:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d202      	bcs.n	80054e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80054da:	4a08      	ldr	r2, [pc, #32]	; (80054fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	6013      	str	r3, [r2, #0]
}
 80054e0:	bf00      	nop
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20000da8 	.word	0x20000da8
 80054ec:	200008d0 	.word	0x200008d0
 80054f0:	20000d90 	.word	0x20000d90
 80054f4:	20000d60 	.word	0x20000d60
 80054f8:	20000d5c 	.word	0x20000d5c
 80054fc:	20000dc4 	.word	0x20000dc4

08005500 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	; 0x28
 8005504:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800550a:	f000 fb07 	bl	8005b1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800550e:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <xTimerCreateTimerTask+0x80>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d021      	beq.n	800555a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800551e:	1d3a      	adds	r2, r7, #4
 8005520:	f107 0108 	add.w	r1, r7, #8
 8005524:	f107 030c 	add.w	r3, r7, #12
 8005528:	4618      	mov	r0, r3
 800552a:	f7fe fb31 	bl	8003b90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	9202      	str	r2, [sp, #8]
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	2302      	movs	r3, #2
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	2300      	movs	r3, #0
 800553e:	460a      	mov	r2, r1
 8005540:	4910      	ldr	r1, [pc, #64]	; (8005584 <xTimerCreateTimerTask+0x84>)
 8005542:	4811      	ldr	r0, [pc, #68]	; (8005588 <xTimerCreateTimerTask+0x88>)
 8005544:	f7ff f8de 	bl	8004704 <xTaskCreateStatic>
 8005548:	4603      	mov	r3, r0
 800554a:	4a10      	ldr	r2, [pc, #64]	; (800558c <xTimerCreateTimerTask+0x8c>)
 800554c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800554e:	4b0f      	ldr	r3, [pc, #60]	; (800558c <xTimerCreateTimerTask+0x8c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005556:	2301      	movs	r3, #1
 8005558:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	613b      	str	r3, [r7, #16]
}
 8005572:	bf00      	nop
 8005574:	e7fe      	b.n	8005574 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005576:	697b      	ldr	r3, [r7, #20]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000e00 	.word	0x20000e00
 8005584:	080064c4 	.word	0x080064c4
 8005588:	080056c5 	.word	0x080056c5
 800558c:	20000e04 	.word	0x20000e04

08005590 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08a      	sub	sp, #40	; 0x28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800559e:	2300      	movs	r3, #0
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <xTimerGenericCommand+0x2e>
	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	623b      	str	r3, [r7, #32]
}
 80055ba:	bf00      	nop
 80055bc:	e7fe      	b.n	80055bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055be:	4b1a      	ldr	r3, [pc, #104]	; (8005628 <xTimerGenericCommand+0x98>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d02a      	beq.n	800561c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b05      	cmp	r3, #5
 80055d6:	dc18      	bgt.n	800560a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055d8:	f7ff feb2 	bl	8005340 <xTaskGetSchedulerState>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d109      	bne.n	80055f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055e2:	4b11      	ldr	r3, [pc, #68]	; (8005628 <xTimerGenericCommand+0x98>)
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	f107 0110 	add.w	r1, r7, #16
 80055ea:	2300      	movs	r3, #0
 80055ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ee:	f7fe fca1 	bl	8003f34 <xQueueGenericSend>
 80055f2:	6278      	str	r0, [r7, #36]	; 0x24
 80055f4:	e012      	b.n	800561c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <xTimerGenericCommand+0x98>)
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	f107 0110 	add.w	r1, r7, #16
 80055fe:	2300      	movs	r3, #0
 8005600:	2200      	movs	r2, #0
 8005602:	f7fe fc97 	bl	8003f34 <xQueueGenericSend>
 8005606:	6278      	str	r0, [r7, #36]	; 0x24
 8005608:	e008      	b.n	800561c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800560a:	4b07      	ldr	r3, [pc, #28]	; (8005628 <xTimerGenericCommand+0x98>)
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	f107 0110 	add.w	r1, r7, #16
 8005612:	2300      	movs	r3, #0
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	f7fe fd8b 	bl	8004130 <xQueueGenericSendFromISR>
 800561a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800561e:	4618      	mov	r0, r3
 8005620:	3728      	adds	r7, #40	; 0x28
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000e00 	.word	0x20000e00

0800562c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af02      	add	r7, sp, #8
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005636:	4b22      	ldr	r3, [pc, #136]	; (80056c0 <prvProcessExpiredTimer+0x94>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	3304      	adds	r3, #4
 8005644:	4618      	mov	r0, r3
 8005646:	f7fe fb47 	bl	8003cd8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d022      	beq.n	800569e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	699a      	ldr	r2, [r3, #24]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	18d1      	adds	r1, r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	6978      	ldr	r0, [r7, #20]
 8005666:	f000 f8d1 	bl	800580c <prvInsertTimerInActiveList>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01f      	beq.n	80056b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005670:	2300      	movs	r3, #0
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	2300      	movs	r3, #0
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	2100      	movs	r1, #0
 800567a:	6978      	ldr	r0, [r7, #20]
 800567c:	f7ff ff88 	bl	8005590 <xTimerGenericCommand>
 8005680:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d113      	bne.n	80056b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	60fb      	str	r3, [r7, #12]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	6978      	ldr	r0, [r7, #20]
 80056b6:	4798      	blx	r3
}
 80056b8:	bf00      	nop
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20000df8 	.word	0x20000df8

080056c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056cc:	f107 0308 	add.w	r3, r7, #8
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 f857 	bl	8005784 <prvGetNextExpireTime>
 80056d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4619      	mov	r1, r3
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f803 	bl	80056e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056e2:	f000 f8d5 	bl	8005890 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056e6:	e7f1      	b.n	80056cc <prvTimerTask+0x8>

080056e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80056f2:	f7ff fa43 	bl	8004b7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056f6:	f107 0308 	add.w	r3, r7, #8
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 f866 	bl	80057cc <prvSampleTimeNow>
 8005700:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d130      	bne.n	800576a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <prvProcessTimerOrBlockTask+0x3c>
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	429a      	cmp	r2, r3
 8005714:	d806      	bhi.n	8005724 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005716:	f7ff fa3f 	bl	8004b98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff ff85 	bl	800562c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005722:	e024      	b.n	800576e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d008      	beq.n	800573c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800572a:	4b13      	ldr	r3, [pc, #76]	; (8005778 <prvProcessTimerOrBlockTask+0x90>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <prvProcessTimerOrBlockTask+0x50>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <prvProcessTimerOrBlockTask+0x52>
 8005738:	2300      	movs	r3, #0
 800573a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800573c:	4b0f      	ldr	r3, [pc, #60]	; (800577c <prvProcessTimerOrBlockTask+0x94>)
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	4619      	mov	r1, r3
 800574a:	f7fe ffa7 	bl	800469c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800574e:	f7ff fa23 	bl	8004b98 <xTaskResumeAll>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005758:	4b09      	ldr	r3, [pc, #36]	; (8005780 <prvProcessTimerOrBlockTask+0x98>)
 800575a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	f3bf 8f6f 	isb	sy
}
 8005768:	e001      	b.n	800576e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800576a:	f7ff fa15 	bl	8004b98 <xTaskResumeAll>
}
 800576e:	bf00      	nop
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000dfc 	.word	0x20000dfc
 800577c:	20000e00 	.word	0x20000e00
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800578c:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <prvGetNextExpireTime+0x44>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <prvGetNextExpireTime+0x16>
 8005796:	2201      	movs	r2, #1
 8005798:	e000      	b.n	800579c <prvGetNextExpireTime+0x18>
 800579a:	2200      	movs	r2, #0
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d105      	bne.n	80057b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057a8:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <prvGetNextExpireTime+0x44>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	e001      	b.n	80057b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057b8:	68fb      	ldr	r3, [r7, #12]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000df8 	.word	0x20000df8

080057cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057d4:	f7ff fa7e 	bl	8004cd4 <xTaskGetTickCount>
 80057d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80057da:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <prvSampleTimeNow+0x3c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d205      	bcs.n	80057f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80057e4:	f000 f936 	bl	8005a54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	e002      	b.n	80057f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057f6:	4a04      	ldr	r2, [pc, #16]	; (8005808 <prvSampleTimeNow+0x3c>)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057fc:	68fb      	ldr	r3, [r7, #12]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000e08 	.word	0x20000e08

0800580c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	429a      	cmp	r2, r3
 8005830:	d812      	bhi.n	8005858 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	1ad2      	subs	r2, r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	429a      	cmp	r2, r3
 800583e:	d302      	bcc.n	8005846 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005840:	2301      	movs	r3, #1
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e01b      	b.n	800587e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <prvInsertTimerInActiveList+0x7c>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3304      	adds	r3, #4
 800584e:	4619      	mov	r1, r3
 8005850:	4610      	mov	r0, r2
 8005852:	f7fe fa08 	bl	8003c66 <vListInsert>
 8005856:	e012      	b.n	800587e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d206      	bcs.n	800586e <prvInsertTimerInActiveList+0x62>
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e007      	b.n	800587e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800586e:	4b07      	ldr	r3, [pc, #28]	; (800588c <prvInsertTimerInActiveList+0x80>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3304      	adds	r3, #4
 8005876:	4619      	mov	r1, r3
 8005878:	4610      	mov	r0, r2
 800587a:	f7fe f9f4 	bl	8003c66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800587e:	697b      	ldr	r3, [r7, #20]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20000dfc 	.word	0x20000dfc
 800588c:	20000df8 	.word	0x20000df8

08005890 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08e      	sub	sp, #56	; 0x38
 8005894:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005896:	e0ca      	b.n	8005a2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	da18      	bge.n	80058d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800589e:	1d3b      	adds	r3, r7, #4
 80058a0:	3304      	adds	r3, #4
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	61fb      	str	r3, [r7, #28]
}
 80058bc:	bf00      	nop
 80058be:	e7fe      	b.n	80058be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058c6:	6850      	ldr	r0, [r2, #4]
 80058c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ca:	6892      	ldr	r2, [r2, #8]
 80058cc:	4611      	mov	r1, r2
 80058ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f2c0 80ab 	blt.w	8005a2e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d004      	beq.n	80058ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	3304      	adds	r3, #4
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fe f9f5 	bl	8003cd8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058ee:	463b      	mov	r3, r7
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff ff6b 	bl	80057cc <prvSampleTimeNow>
 80058f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b09      	cmp	r3, #9
 80058fc:	f200 8096 	bhi.w	8005a2c <prvProcessReceivedCommands+0x19c>
 8005900:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <prvProcessReceivedCommands+0x78>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	08005931 	.word	0x08005931
 800590c:	08005931 	.word	0x08005931
 8005910:	08005931 	.word	0x08005931
 8005914:	080059a5 	.word	0x080059a5
 8005918:	080059b9 	.word	0x080059b9
 800591c:	08005a03 	.word	0x08005a03
 8005920:	08005931 	.word	0x08005931
 8005924:	08005931 	.word	0x08005931
 8005928:	080059a5 	.word	0x080059a5
 800592c:	080059b9 	.word	0x080059b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	b2da      	uxtb	r2, r3
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	18d1      	adds	r1, r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005950:	f7ff ff5c 	bl	800580c <prvInsertTimerInActiveList>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d069      	beq.n	8005a2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005960:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d05e      	beq.n	8005a2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	441a      	add	r2, r3
 8005978:	2300      	movs	r3, #0
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	2300      	movs	r3, #0
 800597e:	2100      	movs	r1, #0
 8005980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005982:	f7ff fe05 	bl	8005590 <xTimerGenericCommand>
 8005986:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d14f      	bne.n	8005a2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	61bb      	str	r3, [r7, #24]
}
 80059a0:	bf00      	nop
 80059a2:	e7fe      	b.n	80059a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80059b6:	e03a      	b.n	8005a2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	617b      	str	r3, [r7, #20]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	18d1      	adds	r1, r2, r3
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059fc:	f7ff ff06 	bl	800580c <prvInsertTimerInActiveList>
					break;
 8005a00:	e015      	b.n	8005a2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d103      	bne.n	8005a18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a12:	f000 fbdd 	bl	80061d0 <vPortFree>
 8005a16:	e00a      	b.n	8005a2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a1e:	f023 0301 	bic.w	r3, r3, #1
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a2a:	e000      	b.n	8005a2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005a2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a2e:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <prvProcessReceivedCommands+0x1c0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	1d39      	adds	r1, r7, #4
 8005a34:	2200      	movs	r2, #0
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe fc16 	bl	8004268 <xQueueReceive>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f47f af2a 	bne.w	8005898 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	3730      	adds	r7, #48	; 0x30
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000e00 	.word	0x20000e00

08005a54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a5a:	e048      	b.n	8005aee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a5c:	4b2d      	ldr	r3, [pc, #180]	; (8005b14 <prvSwitchTimerLists+0xc0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a66:	4b2b      	ldr	r3, [pc, #172]	; (8005b14 <prvSwitchTimerLists+0xc0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fe f92f 	bl	8003cd8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d02e      	beq.n	8005aee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4413      	add	r3, r2
 8005a98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d90e      	bls.n	8005ac0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005aae:	4b19      	ldr	r3, [pc, #100]	; (8005b14 <prvSwitchTimerLists+0xc0>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4610      	mov	r0, r2
 8005aba:	f7fe f8d4 	bl	8003c66 <vListInsert>
 8005abe:	e016      	b.n	8005aee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	2100      	movs	r1, #0
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7ff fd60 	bl	8005590 <xTimerGenericCommand>
 8005ad0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	603b      	str	r3, [r7, #0]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005aee:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <prvSwitchTimerLists+0xc0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1b1      	bne.n	8005a5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <prvSwitchTimerLists+0xc0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <prvSwitchTimerLists+0xc4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a04      	ldr	r2, [pc, #16]	; (8005b14 <prvSwitchTimerLists+0xc0>)
 8005b04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b06:	4a04      	ldr	r2, [pc, #16]	; (8005b18 <prvSwitchTimerLists+0xc4>)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	6013      	str	r3, [r2, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20000df8 	.word	0x20000df8
 8005b18:	20000dfc 	.word	0x20000dfc

08005b1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b22:	f000 f967 	bl	8005df4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b26:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <prvCheckForValidListAndQueue+0x60>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d120      	bne.n	8005b70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b2e:	4814      	ldr	r0, [pc, #80]	; (8005b80 <prvCheckForValidListAndQueue+0x64>)
 8005b30:	f7fe f848 	bl	8003bc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b34:	4813      	ldr	r0, [pc, #76]	; (8005b84 <prvCheckForValidListAndQueue+0x68>)
 8005b36:	f7fe f845 	bl	8003bc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b3a:	4b13      	ldr	r3, [pc, #76]	; (8005b88 <prvCheckForValidListAndQueue+0x6c>)
 8005b3c:	4a10      	ldr	r2, [pc, #64]	; (8005b80 <prvCheckForValidListAndQueue+0x64>)
 8005b3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b40:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <prvCheckForValidListAndQueue+0x70>)
 8005b42:	4a10      	ldr	r2, [pc, #64]	; (8005b84 <prvCheckForValidListAndQueue+0x68>)
 8005b44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b46:	2300      	movs	r3, #0
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <prvCheckForValidListAndQueue+0x74>)
 8005b4c:	4a11      	ldr	r2, [pc, #68]	; (8005b94 <prvCheckForValidListAndQueue+0x78>)
 8005b4e:	2110      	movs	r1, #16
 8005b50:	200a      	movs	r0, #10
 8005b52:	f7fe f953 	bl	8003dfc <xQueueGenericCreateStatic>
 8005b56:	4603      	mov	r3, r0
 8005b58:	4a08      	ldr	r2, [pc, #32]	; (8005b7c <prvCheckForValidListAndQueue+0x60>)
 8005b5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b5c:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <prvCheckForValidListAndQueue+0x60>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b64:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <prvCheckForValidListAndQueue+0x60>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	490b      	ldr	r1, [pc, #44]	; (8005b98 <prvCheckForValidListAndQueue+0x7c>)
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fd6c 	bl	8004648 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b70:	f000 f970 	bl	8005e54 <vPortExitCritical>
}
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000e00 	.word	0x20000e00
 8005b80:	20000dd0 	.word	0x20000dd0
 8005b84:	20000de4 	.word	0x20000de4
 8005b88:	20000df8 	.word	0x20000df8
 8005b8c:	20000dfc 	.word	0x20000dfc
 8005b90:	20000eac 	.word	0x20000eac
 8005b94:	20000e0c 	.word	0x20000e0c
 8005b98:	080064cc 	.word	0x080064cc

08005b9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3b04      	subs	r3, #4
 8005bac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3b04      	subs	r3, #4
 8005bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f023 0201 	bic.w	r2, r3, #1
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3b04      	subs	r3, #4
 8005bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bcc:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <pxPortInitialiseStack+0x64>)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3b14      	subs	r3, #20
 8005bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3b04      	subs	r3, #4
 8005be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f06f 0202 	mvn.w	r2, #2
 8005bea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3b20      	subs	r3, #32
 8005bf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	08005c05 	.word	0x08005c05

08005c04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c0e:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <prvTaskExitError+0x54>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c16:	d00a      	beq.n	8005c2e <prvTaskExitError+0x2a>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	60fb      	str	r3, [r7, #12]
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <prvTaskExitError+0x28>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	60bb      	str	r3, [r7, #8]
}
 8005c40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c42:	bf00      	nop
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0fc      	beq.n	8005c44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c4a:	bf00      	nop
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	2000000c 	.word	0x2000000c
 8005c5c:	00000000 	.word	0x00000000

08005c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <pxCurrentTCBConst2>)
 8005c62:	6819      	ldr	r1, [r3, #0]
 8005c64:	6808      	ldr	r0, [r1, #0]
 8005c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6a:	f380 8809 	msr	PSP, r0
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f04f 0000 	mov.w	r0, #0
 8005c76:	f380 8811 	msr	BASEPRI, r0
 8005c7a:	4770      	bx	lr
 8005c7c:	f3af 8000 	nop.w

08005c80 <pxCurrentTCBConst2>:
 8005c80:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop

08005c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c88:	4808      	ldr	r0, [pc, #32]	; (8005cac <prvPortStartFirstTask+0x24>)
 8005c8a:	6800      	ldr	r0, [r0, #0]
 8005c8c:	6800      	ldr	r0, [r0, #0]
 8005c8e:	f380 8808 	msr	MSP, r0
 8005c92:	f04f 0000 	mov.w	r0, #0
 8005c96:	f380 8814 	msr	CONTROL, r0
 8005c9a:	b662      	cpsie	i
 8005c9c:	b661      	cpsie	f
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	df00      	svc	0
 8005ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005caa:	bf00      	nop
 8005cac:	e000ed08 	.word	0xe000ed08

08005cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cb6:	4b46      	ldr	r3, [pc, #280]	; (8005dd0 <xPortStartScheduler+0x120>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a46      	ldr	r2, [pc, #280]	; (8005dd4 <xPortStartScheduler+0x124>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10a      	bne.n	8005cd6 <xPortStartScheduler+0x26>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	613b      	str	r3, [r7, #16]
}
 8005cd2:	bf00      	nop
 8005cd4:	e7fe      	b.n	8005cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cd6:	4b3e      	ldr	r3, [pc, #248]	; (8005dd0 <xPortStartScheduler+0x120>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a3f      	ldr	r2, [pc, #252]	; (8005dd8 <xPortStartScheduler+0x128>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d10a      	bne.n	8005cf6 <xPortStartScheduler+0x46>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	60fb      	str	r3, [r7, #12]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cf6:	4b39      	ldr	r3, [pc, #228]	; (8005ddc <xPortStartScheduler+0x12c>)
 8005cf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	22ff      	movs	r2, #255	; 0xff
 8005d06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	4b31      	ldr	r3, [pc, #196]	; (8005de0 <xPortStartScheduler+0x130>)
 8005d1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d1e:	4b31      	ldr	r3, [pc, #196]	; (8005de4 <xPortStartScheduler+0x134>)
 8005d20:	2207      	movs	r2, #7
 8005d22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d24:	e009      	b.n	8005d3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d26:	4b2f      	ldr	r3, [pc, #188]	; (8005de4 <xPortStartScheduler+0x134>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	4a2d      	ldr	r2, [pc, #180]	; (8005de4 <xPortStartScheduler+0x134>)
 8005d2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d42:	2b80      	cmp	r3, #128	; 0x80
 8005d44:	d0ef      	beq.n	8005d26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d46:	4b27      	ldr	r3, [pc, #156]	; (8005de4 <xPortStartScheduler+0x134>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f1c3 0307 	rsb	r3, r3, #7
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d00a      	beq.n	8005d68 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	60bb      	str	r3, [r7, #8]
}
 8005d64:	bf00      	nop
 8005d66:	e7fe      	b.n	8005d66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d68:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <xPortStartScheduler+0x134>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	4a1d      	ldr	r2, [pc, #116]	; (8005de4 <xPortStartScheduler+0x134>)
 8005d70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d72:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <xPortStartScheduler+0x134>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d7a:	4a1a      	ldr	r2, [pc, #104]	; (8005de4 <xPortStartScheduler+0x134>)
 8005d7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d86:	4b18      	ldr	r3, [pc, #96]	; (8005de8 <xPortStartScheduler+0x138>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <xPortStartScheduler+0x138>)
 8005d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <xPortStartScheduler+0x138>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a14      	ldr	r2, [pc, #80]	; (8005de8 <xPortStartScheduler+0x138>)
 8005d98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d9e:	f000 f8dd 	bl	8005f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005da2:	4b12      	ldr	r3, [pc, #72]	; (8005dec <xPortStartScheduler+0x13c>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005da8:	f000 f8fc 	bl	8005fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005dac:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <xPortStartScheduler+0x140>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a0f      	ldr	r2, [pc, #60]	; (8005df0 <xPortStartScheduler+0x140>)
 8005db2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005db6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005db8:	f7ff ff66 	bl	8005c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dbc:	f7ff f854 	bl	8004e68 <vTaskSwitchContext>
	prvTaskExitError();
 8005dc0:	f7ff ff20 	bl	8005c04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	e000ed00 	.word	0xe000ed00
 8005dd4:	410fc271 	.word	0x410fc271
 8005dd8:	410fc270 	.word	0x410fc270
 8005ddc:	e000e400 	.word	0xe000e400
 8005de0:	20000efc 	.word	0x20000efc
 8005de4:	20000f00 	.word	0x20000f00
 8005de8:	e000ed20 	.word	0xe000ed20
 8005dec:	2000000c 	.word	0x2000000c
 8005df0:	e000ef34 	.word	0xe000ef34

08005df4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	607b      	str	r3, [r7, #4]
}
 8005e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e0e:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <vPortEnterCritical+0x58>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3301      	adds	r3, #1
 8005e14:	4a0d      	ldr	r2, [pc, #52]	; (8005e4c <vPortEnterCritical+0x58>)
 8005e16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e18:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <vPortEnterCritical+0x58>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d10f      	bne.n	8005e40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e20:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <vPortEnterCritical+0x5c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	603b      	str	r3, [r7, #0]
}
 8005e3c:	bf00      	nop
 8005e3e:	e7fe      	b.n	8005e3e <vPortEnterCritical+0x4a>
	}
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	2000000c 	.word	0x2000000c
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e5a:	4b12      	ldr	r3, [pc, #72]	; (8005ea4 <vPortExitCritical+0x50>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <vPortExitCritical+0x24>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	607b      	str	r3, [r7, #4]
}
 8005e74:	bf00      	nop
 8005e76:	e7fe      	b.n	8005e76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e78:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <vPortExitCritical+0x50>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	4a09      	ldr	r2, [pc, #36]	; (8005ea4 <vPortExitCritical+0x50>)
 8005e80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e82:	4b08      	ldr	r3, [pc, #32]	; (8005ea4 <vPortExitCritical+0x50>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d105      	bne.n	8005e96 <vPortExitCritical+0x42>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	f383 8811 	msr	BASEPRI, r3
}
 8005e94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	2000000c 	.word	0x2000000c
	...

08005eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005eb0:	f3ef 8009 	mrs	r0, PSP
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	4b15      	ldr	r3, [pc, #84]	; (8005f10 <pxCurrentTCBConst>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	f01e 0f10 	tst.w	lr, #16
 8005ec0:	bf08      	it	eq
 8005ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eca:	6010      	str	r0, [r2, #0]
 8005ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ed4:	f380 8811 	msr	BASEPRI, r0
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f7fe ffc2 	bl	8004e68 <vTaskSwitchContext>
 8005ee4:	f04f 0000 	mov.w	r0, #0
 8005ee8:	f380 8811 	msr	BASEPRI, r0
 8005eec:	bc09      	pop	{r0, r3}
 8005eee:	6819      	ldr	r1, [r3, #0]
 8005ef0:	6808      	ldr	r0, [r1, #0]
 8005ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef6:	f01e 0f10 	tst.w	lr, #16
 8005efa:	bf08      	it	eq
 8005efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f00:	f380 8809 	msr	PSP, r0
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	f3af 8000 	nop.w

08005f10 <pxCurrentTCBConst>:
 8005f10:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop

08005f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	607b      	str	r3, [r7, #4]
}
 8005f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f32:	f7fe fedf 	bl	8004cf4 <xTaskIncrementTick>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f3c:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <xPortSysTickHandler+0x40>)
 8005f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	2300      	movs	r3, #0
 8005f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	f383 8811 	msr	BASEPRI, r3
}
 8005f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	e000ed04 	.word	0xe000ed04

08005f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <vPortSetupTimerInterrupt+0x34>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f66:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <vPortSetupTimerInterrupt+0x38>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <vPortSetupTimerInterrupt+0x3c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a0a      	ldr	r2, [pc, #40]	; (8005f9c <vPortSetupTimerInterrupt+0x40>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	099b      	lsrs	r3, r3, #6
 8005f78:	4a09      	ldr	r2, [pc, #36]	; (8005fa0 <vPortSetupTimerInterrupt+0x44>)
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f7e:	4b04      	ldr	r3, [pc, #16]	; (8005f90 <vPortSetupTimerInterrupt+0x34>)
 8005f80:	2207      	movs	r2, #7
 8005f82:	601a      	str	r2, [r3, #0]
}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	e000e010 	.word	0xe000e010
 8005f94:	e000e018 	.word	0xe000e018
 8005f98:	20000000 	.word	0x20000000
 8005f9c:	10624dd3 	.word	0x10624dd3
 8005fa0:	e000e014 	.word	0xe000e014

08005fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005fb4 <vPortEnableVFP+0x10>
 8005fa8:	6801      	ldr	r1, [r0, #0]
 8005faa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fae:	6001      	str	r1, [r0, #0]
 8005fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fb2:	bf00      	nop
 8005fb4:	e000ed88 	.word	0xe000ed88

08005fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fbe:	f3ef 8305 	mrs	r3, IPSR
 8005fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b0f      	cmp	r3, #15
 8005fc8:	d914      	bls.n	8005ff4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fca:	4a17      	ldr	r2, [pc, #92]	; (8006028 <vPortValidateInterruptPriority+0x70>)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fd4:	4b15      	ldr	r3, [pc, #84]	; (800602c <vPortValidateInterruptPriority+0x74>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	7afa      	ldrb	r2, [r7, #11]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d20a      	bcs.n	8005ff4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	607b      	str	r3, [r7, #4]
}
 8005ff0:	bf00      	nop
 8005ff2:	e7fe      	b.n	8005ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ff4:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <vPortValidateInterruptPriority+0x78>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ffc:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <vPortValidateInterruptPriority+0x7c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d90a      	bls.n	800601a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	603b      	str	r3, [r7, #0]
}
 8006016:	bf00      	nop
 8006018:	e7fe      	b.n	8006018 <vPortValidateInterruptPriority+0x60>
	}
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	e000e3f0 	.word	0xe000e3f0
 800602c:	20000efc 	.word	0x20000efc
 8006030:	e000ed0c 	.word	0xe000ed0c
 8006034:	20000f00 	.word	0x20000f00

08006038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	; 0x28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006040:	2300      	movs	r3, #0
 8006042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006044:	f7fe fd9a 	bl	8004b7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006048:	4b5b      	ldr	r3, [pc, #364]	; (80061b8 <pvPortMalloc+0x180>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006050:	f000 f920 	bl	8006294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006054:	4b59      	ldr	r3, [pc, #356]	; (80061bc <pvPortMalloc+0x184>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	f040 8093 	bne.w	8006188 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01d      	beq.n	80060a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006068:	2208      	movs	r2, #8
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4413      	add	r3, r2
 800606e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	2b00      	cmp	r3, #0
 8006078:	d014      	beq.n	80060a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f023 0307 	bic.w	r3, r3, #7
 8006080:	3308      	adds	r3, #8
 8006082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <pvPortMalloc+0x6c>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	617b      	str	r3, [r7, #20]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d06e      	beq.n	8006188 <pvPortMalloc+0x150>
 80060aa:	4b45      	ldr	r3, [pc, #276]	; (80061c0 <pvPortMalloc+0x188>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d869      	bhi.n	8006188 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060b4:	4b43      	ldr	r3, [pc, #268]	; (80061c4 <pvPortMalloc+0x18c>)
 80060b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060b8:	4b42      	ldr	r3, [pc, #264]	; (80061c4 <pvPortMalloc+0x18c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060be:	e004      	b.n	80060ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d903      	bls.n	80060dc <pvPortMalloc+0xa4>
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f1      	bne.n	80060c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060dc:	4b36      	ldr	r3, [pc, #216]	; (80061b8 <pvPortMalloc+0x180>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d050      	beq.n	8006188 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2208      	movs	r2, #8
 80060ec:	4413      	add	r3, r2
 80060ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	1ad2      	subs	r2, r2, r3
 8006100:	2308      	movs	r3, #8
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	429a      	cmp	r2, r3
 8006106:	d91f      	bls.n	8006148 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4413      	add	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <pvPortMalloc+0xf8>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	613b      	str	r3, [r7, #16]
}
 800612c:	bf00      	nop
 800612e:	e7fe      	b.n	800612e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	1ad2      	subs	r2, r2, r3
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006142:	69b8      	ldr	r0, [r7, #24]
 8006144:	f000 f908 	bl	8006358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <pvPortMalloc+0x188>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	4a1b      	ldr	r2, [pc, #108]	; (80061c0 <pvPortMalloc+0x188>)
 8006154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006156:	4b1a      	ldr	r3, [pc, #104]	; (80061c0 <pvPortMalloc+0x188>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <pvPortMalloc+0x190>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d203      	bcs.n	800616a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006162:	4b17      	ldr	r3, [pc, #92]	; (80061c0 <pvPortMalloc+0x188>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a18      	ldr	r2, [pc, #96]	; (80061c8 <pvPortMalloc+0x190>)
 8006168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	4b13      	ldr	r3, [pc, #76]	; (80061bc <pvPortMalloc+0x184>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	431a      	orrs	r2, r3
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800617e:	4b13      	ldr	r3, [pc, #76]	; (80061cc <pvPortMalloc+0x194>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3301      	adds	r3, #1
 8006184:	4a11      	ldr	r2, [pc, #68]	; (80061cc <pvPortMalloc+0x194>)
 8006186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006188:	f7fe fd06 	bl	8004b98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <pvPortMalloc+0x174>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	60fb      	str	r3, [r7, #12]
}
 80061a8:	bf00      	nop
 80061aa:	e7fe      	b.n	80061aa <pvPortMalloc+0x172>
	return pvReturn;
 80061ac:	69fb      	ldr	r3, [r7, #28]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3728      	adds	r7, #40	; 0x28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20004b0c 	.word	0x20004b0c
 80061bc:	20004b20 	.word	0x20004b20
 80061c0:	20004b10 	.word	0x20004b10
 80061c4:	20004b04 	.word	0x20004b04
 80061c8:	20004b14 	.word	0x20004b14
 80061cc:	20004b18 	.word	0x20004b18

080061d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d04d      	beq.n	800627e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061e2:	2308      	movs	r3, #8
 80061e4:	425b      	negs	r3, r3
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4413      	add	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	4b24      	ldr	r3, [pc, #144]	; (8006288 <vPortFree+0xb8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4013      	ands	r3, r2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <vPortFree+0x44>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	60fb      	str	r3, [r7, #12]
}
 8006210:	bf00      	nop
 8006212:	e7fe      	b.n	8006212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <vPortFree+0x62>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	60bb      	str	r3, [r7, #8]
}
 800622e:	bf00      	nop
 8006230:	e7fe      	b.n	8006230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	4b14      	ldr	r3, [pc, #80]	; (8006288 <vPortFree+0xb8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01e      	beq.n	800627e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d11a      	bne.n	800627e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	4b0e      	ldr	r3, [pc, #56]	; (8006288 <vPortFree+0xb8>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	43db      	mvns	r3, r3
 8006252:	401a      	ands	r2, r3
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006258:	f7fe fc90 	bl	8004b7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	4b0a      	ldr	r3, [pc, #40]	; (800628c <vPortFree+0xbc>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4413      	add	r3, r2
 8006266:	4a09      	ldr	r2, [pc, #36]	; (800628c <vPortFree+0xbc>)
 8006268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800626a:	6938      	ldr	r0, [r7, #16]
 800626c:	f000 f874 	bl	8006358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006270:	4b07      	ldr	r3, [pc, #28]	; (8006290 <vPortFree+0xc0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	4a06      	ldr	r2, [pc, #24]	; (8006290 <vPortFree+0xc0>)
 8006278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800627a:	f7fe fc8d 	bl	8004b98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800627e:	bf00      	nop
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20004b20 	.word	0x20004b20
 800628c:	20004b10 	.word	0x20004b10
 8006290:	20004b1c 	.word	0x20004b1c

08006294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800629a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800629e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062a0:	4b27      	ldr	r3, [pc, #156]	; (8006340 <prvHeapInit+0xac>)
 80062a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00c      	beq.n	80062c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3307      	adds	r3, #7
 80062b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0307 	bic.w	r3, r3, #7
 80062ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	4a1f      	ldr	r2, [pc, #124]	; (8006340 <prvHeapInit+0xac>)
 80062c4:	4413      	add	r3, r2
 80062c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062cc:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <prvHeapInit+0xb0>)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062d2:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <prvHeapInit+0xb0>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	4413      	add	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062e0:	2208      	movs	r2, #8
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0307 	bic.w	r3, r3, #7
 80062ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4a15      	ldr	r2, [pc, #84]	; (8006348 <prvHeapInit+0xb4>)
 80062f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062f6:	4b14      	ldr	r3, [pc, #80]	; (8006348 <prvHeapInit+0xb4>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2200      	movs	r2, #0
 80062fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062fe:	4b12      	ldr	r3, [pc, #72]	; (8006348 <prvHeapInit+0xb4>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	1ad2      	subs	r2, r2, r3
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006314:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <prvHeapInit+0xb4>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	4a0a      	ldr	r2, [pc, #40]	; (800634c <prvHeapInit+0xb8>)
 8006322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	4a09      	ldr	r2, [pc, #36]	; (8006350 <prvHeapInit+0xbc>)
 800632a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800632c:	4b09      	ldr	r3, [pc, #36]	; (8006354 <prvHeapInit+0xc0>)
 800632e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006332:	601a      	str	r2, [r3, #0]
}
 8006334:	bf00      	nop
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	20000f04 	.word	0x20000f04
 8006344:	20004b04 	.word	0x20004b04
 8006348:	20004b0c 	.word	0x20004b0c
 800634c:	20004b14 	.word	0x20004b14
 8006350:	20004b10 	.word	0x20004b10
 8006354:	20004b20 	.word	0x20004b20

08006358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006360:	4b28      	ldr	r3, [pc, #160]	; (8006404 <prvInsertBlockIntoFreeList+0xac>)
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	e002      	b.n	800636c <prvInsertBlockIntoFreeList+0x14>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	429a      	cmp	r2, r3
 8006374:	d8f7      	bhi.n	8006366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	4413      	add	r3, r2
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	429a      	cmp	r2, r3
 8006386:	d108      	bne.n	800639a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	441a      	add	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	441a      	add	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d118      	bne.n	80063e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4b15      	ldr	r3, [pc, #84]	; (8006408 <prvInsertBlockIntoFreeList+0xb0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d00d      	beq.n	80063d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	441a      	add	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	e008      	b.n	80063e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063d6:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <prvInsertBlockIntoFreeList+0xb0>)
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	e003      	b.n	80063e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d002      	beq.n	80063f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063f6:	bf00      	nop
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20004b04 	.word	0x20004b04
 8006408:	20004b0c 	.word	0x20004b0c

0800640c <memset>:
 800640c:	4402      	add	r2, r0
 800640e:	4603      	mov	r3, r0
 8006410:	4293      	cmp	r3, r2
 8006412:	d100      	bne.n	8006416 <memset+0xa>
 8006414:	4770      	bx	lr
 8006416:	f803 1b01 	strb.w	r1, [r3], #1
 800641a:	e7f9      	b.n	8006410 <memset+0x4>

0800641c <__libc_init_array>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	4d0d      	ldr	r5, [pc, #52]	; (8006454 <__libc_init_array+0x38>)
 8006420:	4c0d      	ldr	r4, [pc, #52]	; (8006458 <__libc_init_array+0x3c>)
 8006422:	1b64      	subs	r4, r4, r5
 8006424:	10a4      	asrs	r4, r4, #2
 8006426:	2600      	movs	r6, #0
 8006428:	42a6      	cmp	r6, r4
 800642a:	d109      	bne.n	8006440 <__libc_init_array+0x24>
 800642c:	4d0b      	ldr	r5, [pc, #44]	; (800645c <__libc_init_array+0x40>)
 800642e:	4c0c      	ldr	r4, [pc, #48]	; (8006460 <__libc_init_array+0x44>)
 8006430:	f000 f826 	bl	8006480 <_init>
 8006434:	1b64      	subs	r4, r4, r5
 8006436:	10a4      	asrs	r4, r4, #2
 8006438:	2600      	movs	r6, #0
 800643a:	42a6      	cmp	r6, r4
 800643c:	d105      	bne.n	800644a <__libc_init_array+0x2e>
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	f855 3b04 	ldr.w	r3, [r5], #4
 8006444:	4798      	blx	r3
 8006446:	3601      	adds	r6, #1
 8006448:	e7ee      	b.n	8006428 <__libc_init_array+0xc>
 800644a:	f855 3b04 	ldr.w	r3, [r5], #4
 800644e:	4798      	blx	r3
 8006450:	3601      	adds	r6, #1
 8006452:	e7f2      	b.n	800643a <__libc_init_array+0x1e>
 8006454:	08006560 	.word	0x08006560
 8006458:	08006560 	.word	0x08006560
 800645c:	08006560 	.word	0x08006560
 8006460:	08006564 	.word	0x08006564

08006464 <memcpy>:
 8006464:	440a      	add	r2, r1
 8006466:	4291      	cmp	r1, r2
 8006468:	f100 33ff 	add.w	r3, r0, #4294967295
 800646c:	d100      	bne.n	8006470 <memcpy+0xc>
 800646e:	4770      	bx	lr
 8006470:	b510      	push	{r4, lr}
 8006472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800647a:	4291      	cmp	r1, r2
 800647c:	d1f9      	bne.n	8006472 <memcpy+0xe>
 800647e:	bd10      	pop	{r4, pc}

08006480 <_init>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	bf00      	nop
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr

0800648c <_fini>:
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	bf00      	nop
 8006490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006492:	bc08      	pop	{r3}
 8006494:	469e      	mov	lr, r3
 8006496:	4770      	bx	lr
