
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000629c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013470  08006434  08006434  00016434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080198a4  080198a4  00030014  2**0
                  CONTENTS
  4 .ARM          00000008  080198a4  080198a4  000298a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080198ac  080198ac  00030014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080198ac  080198ac  000298ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080198b0  080198b0  000298b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080198b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001258  20000014  080198c8  00030014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000126c  080198c8  0003126c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030014  2**0
                  CONTENTS, READONLY
 12 .comment      000000b1  00000000  00000000  00030044  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101e8  00000000  00000000  000300f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002755  00000000  00000000  000402dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  00042a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af7  00000000  00000000  00043930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c9a  00000000  00000000  00044427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001129d  00000000  00000000  0005c0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a95c  00000000  00000000  0006d35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d94  00000000  00000000  00107cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010ba50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a9c  00000000  00000000  0010bab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  0010e54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800641c 	.word	0x0800641c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	0800641c 	.word	0x0800641c

080001d8 <arm_bitreversal_32>:
 80001d8:	1c4b      	adds	r3, r1, #1
 80001da:	2b01      	cmp	r3, #1
 80001dc:	bf98      	it	ls
 80001de:	4770      	bxls	lr
 80001e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001e4:	1c91      	adds	r1, r2, #2
 80001e6:	089b      	lsrs	r3, r3, #2

080001e8 <arm_bitreversal_32_0>:
 80001e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f0:	880a      	ldrh	r2, [r1, #0]
 80001f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001f6:	4480      	add	r8, r0
 80001f8:	4481      	add	r9, r0
 80001fa:	4402      	add	r2, r0
 80001fc:	4484      	add	ip, r0
 80001fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000202:	f8d8 6000 	ldr.w	r6, [r8]
 8000206:	6815      	ldr	r5, [r2, #0]
 8000208:	f8dc 4000 	ldr.w	r4, [ip]
 800020c:	f8c9 6000 	str.w	r6, [r9]
 8000210:	f8c8 7000 	str.w	r7, [r8]
 8000214:	f8cc 5000 	str.w	r5, [ip]
 8000218:	6014      	str	r4, [r2, #0]
 800021a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800021e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000222:	6855      	ldr	r5, [r2, #4]
 8000224:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000228:	f8c9 6004 	str.w	r6, [r9, #4]
 800022c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000230:	f8cc 5004 	str.w	r5, [ip, #4]
 8000234:	6054      	str	r4, [r2, #4]
 8000236:	3108      	adds	r1, #8
 8000238:	3b01      	subs	r3, #1
 800023a:	d1d5      	bne.n	80001e8 <arm_bitreversal_32_0>
 800023c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000240:	4770      	bx	lr

08000242 <arm_bitreversal_16>:
 8000242:	1c4b      	adds	r3, r1, #1
 8000244:	2b01      	cmp	r3, #1
 8000246:	bf98      	it	ls
 8000248:	4770      	bxls	lr
 800024a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024e:	1c91      	adds	r1, r2, #2
 8000250:	089b      	lsrs	r3, r3, #2

08000252 <arm_bitreversal_16_0>:
 8000252:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000256:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800025a:	880a      	ldrh	r2, [r1, #0]
 800025c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000260:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000264:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000268:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800026c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000270:	f8d9 7000 	ldr.w	r7, [r9]
 8000274:	f8d8 6000 	ldr.w	r6, [r8]
 8000278:	6815      	ldr	r5, [r2, #0]
 800027a:	f8dc 4000 	ldr.w	r4, [ip]
 800027e:	f8c9 6000 	str.w	r6, [r9]
 8000282:	f8c8 7000 	str.w	r7, [r8]
 8000286:	f8cc 5000 	str.w	r5, [ip]
 800028a:	6014      	str	r4, [r2, #0]
 800028c:	3108      	adds	r1, #8
 800028e:	3b01      	subs	r3, #1
 8000290:	d1df      	bne.n	8000252 <arm_bitreversal_16_0>
 8000292:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	4770      	bx	lr

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b970 	b.w	8000590 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002cc:	9e08      	ldr	r6, [sp, #32]
 80002ce:	460d      	mov	r5, r1
 80002d0:	4604      	mov	r4, r0
 80002d2:	460f      	mov	r7, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14a      	bne.n	800036e <__udivmoddi4+0xa6>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4694      	mov	ip, r2
 80002dc:	d965      	bls.n	80003aa <__udivmoddi4+0xe2>
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	b143      	cbz	r3, 80002f6 <__udivmoddi4+0x2e>
 80002e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa20 f202 	lsr.w	r2, r0, r2
 80002f2:	4317      	orrs	r7, r2
 80002f4:	409c      	lsls	r4, r3
 80002f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fa:	fa1f f58c 	uxth.w	r5, ip
 80002fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000302:	0c22      	lsrs	r2, r4, #16
 8000304:	fb0e 7711 	mls	r7, lr, r1, r7
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	fb01 f005 	mul.w	r0, r1, r5
 8000310:	4290      	cmp	r0, r2
 8000312:	d90a      	bls.n	800032a <__udivmoddi4+0x62>
 8000314:	eb1c 0202 	adds.w	r2, ip, r2
 8000318:	f101 37ff 	add.w	r7, r1, #4294967295
 800031c:	f080 811c 	bcs.w	8000558 <__udivmoddi4+0x290>
 8000320:	4290      	cmp	r0, r2
 8000322:	f240 8119 	bls.w	8000558 <__udivmoddi4+0x290>
 8000326:	3902      	subs	r1, #2
 8000328:	4462      	add	r2, ip
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	b2a4      	uxth	r4, r4
 800032e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000332:	fb0e 2210 	mls	r2, lr, r0, r2
 8000336:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033a:	fb00 f505 	mul.w	r5, r0, r5
 800033e:	42a5      	cmp	r5, r4
 8000340:	d90a      	bls.n	8000358 <__udivmoddi4+0x90>
 8000342:	eb1c 0404 	adds.w	r4, ip, r4
 8000346:	f100 32ff 	add.w	r2, r0, #4294967295
 800034a:	f080 8107 	bcs.w	800055c <__udivmoddi4+0x294>
 800034e:	42a5      	cmp	r5, r4
 8000350:	f240 8104 	bls.w	800055c <__udivmoddi4+0x294>
 8000354:	4464      	add	r4, ip
 8000356:	3802      	subs	r0, #2
 8000358:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	2100      	movs	r1, #0
 8000360:	b11e      	cbz	r6, 800036a <__udivmoddi4+0xa2>
 8000362:	40dc      	lsrs	r4, r3
 8000364:	2300      	movs	r3, #0
 8000366:	e9c6 4300 	strd	r4, r3, [r6]
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	428b      	cmp	r3, r1
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0xbc>
 8000372:	2e00      	cmp	r6, #0
 8000374:	f000 80ed 	beq.w	8000552 <__udivmoddi4+0x28a>
 8000378:	2100      	movs	r1, #0
 800037a:	e9c6 0500 	strd	r0, r5, [r6]
 800037e:	4608      	mov	r0, r1
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d149      	bne.n	8000420 <__udivmoddi4+0x158>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d302      	bcc.n	8000396 <__udivmoddi4+0xce>
 8000390:	4282      	cmp	r2, r0
 8000392:	f200 80f8 	bhi.w	8000586 <__udivmoddi4+0x2be>
 8000396:	1a84      	subs	r4, r0, r2
 8000398:	eb65 0203 	sbc.w	r2, r5, r3
 800039c:	2001      	movs	r0, #1
 800039e:	4617      	mov	r7, r2
 80003a0:	2e00      	cmp	r6, #0
 80003a2:	d0e2      	beq.n	800036a <__udivmoddi4+0xa2>
 80003a4:	e9c6 4700 	strd	r4, r7, [r6]
 80003a8:	e7df      	b.n	800036a <__udivmoddi4+0xa2>
 80003aa:	b902      	cbnz	r2, 80003ae <__udivmoddi4+0xe6>
 80003ac:	deff      	udf	#255	; 0xff
 80003ae:	fab2 f382 	clz	r3, r2
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	f040 8090 	bne.w	80004d8 <__udivmoddi4+0x210>
 80003b8:	1a8a      	subs	r2, r1, r2
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2101      	movs	r1, #1
 80003c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c8:	fb07 2015 	mls	r0, r7, r5, r2
 80003cc:	0c22      	lsrs	r2, r4, #16
 80003ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003d2:	fb0e f005 	mul.w	r0, lr, r5
 80003d6:	4290      	cmp	r0, r2
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x124>
 80003da:	eb1c 0202 	adds.w	r2, ip, r2
 80003de:	f105 38ff 	add.w	r8, r5, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x122>
 80003e4:	4290      	cmp	r0, r2
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2b8>
 80003ea:	4645      	mov	r5, r8
 80003ec:	1a12      	subs	r2, r2, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f4:	fb07 2210 	mls	r2, r7, r0, r2
 80003f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x14e>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 32ff 	add.w	r2, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x14c>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2c2>
 8000414:	4610      	mov	r0, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800041e:	e79f      	b.n	8000360 <__udivmoddi4+0x98>
 8000420:	f1c1 0720 	rsb	r7, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa05 f401 	lsl.w	r4, r5, r1
 8000432:	fa20 f307 	lsr.w	r3, r0, r7
 8000436:	40fd      	lsrs	r5, r7
 8000438:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043c:	4323      	orrs	r3, r4
 800043e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000442:	fa1f fe8c 	uxth.w	lr, ip
 8000446:	fb09 5518 	mls	r5, r9, r8, r5
 800044a:	0c1c      	lsrs	r4, r3, #16
 800044c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000450:	fb08 f50e 	mul.w	r5, r8, lr
 8000454:	42a5      	cmp	r5, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	fa00 f001 	lsl.w	r0, r0, r1
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b0>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2b4>
 800046c:	42a5      	cmp	r5, r4
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2b4>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4464      	add	r4, ip
 8000478:	1b64      	subs	r4, r4, r5
 800047a:	b29d      	uxth	r5, r3
 800047c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000480:	fb09 4413 	mls	r4, r9, r3, r4
 8000484:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000488:	fb03 fe0e 	mul.w	lr, r3, lr
 800048c:	45a6      	cmp	lr, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1da>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f103 35ff 	add.w	r5, r3, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2ac>
 800049a:	45a6      	cmp	lr, r4
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2ac>
 800049e:	3b02      	subs	r3, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004a6:	fba3 9502 	umull	r9, r5, r3, r2
 80004aa:	eba4 040e 	sub.w	r4, r4, lr
 80004ae:	42ac      	cmp	r4, r5
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46ae      	mov	lr, r5
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x29c>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x298>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x208>
 80004ba:	ebb0 0208 	subs.w	r2, r0, r8
 80004be:	eb64 040e 	sbc.w	r4, r4, lr
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40ca      	lsrs	r2, r1
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	4317      	orrs	r7, r2
 80004cc:	e9c6 7400 	strd	r7, r4, [r6]
 80004d0:	4618      	mov	r0, r3
 80004d2:	2100      	movs	r1, #0
 80004d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d8:	f1c3 0120 	rsb	r1, r3, #32
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	fa20 f201 	lsr.w	r2, r0, r1
 80004e4:	fa25 f101 	lsr.w	r1, r5, r1
 80004e8:	409d      	lsls	r5, r3
 80004ea:	432a      	orrs	r2, r5
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f8:	fb07 1510 	mls	r5, r7, r0, r1
 80004fc:	0c11      	lsrs	r1, r2, #16
 80004fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000502:	fb00 f50e 	mul.w	r5, r0, lr
 8000506:	428d      	cmp	r5, r1
 8000508:	fa04 f403 	lsl.w	r4, r4, r3
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x258>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b0>
 8000518:	428d      	cmp	r5, r1
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b0>
 800051c:	3802      	subs	r0, #2
 800051e:	4461      	add	r1, ip
 8000520:	1b49      	subs	r1, r1, r5
 8000522:	b292      	uxth	r2, r2
 8000524:	fbb1 f5f7 	udiv	r5, r1, r7
 8000528:	fb07 1115 	mls	r1, r7, r5, r1
 800052c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000530:	fb05 f10e 	mul.w	r1, r5, lr
 8000534:	4291      	cmp	r1, r2
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x282>
 8000538:	eb1c 0202 	adds.w	r2, ip, r2
 800053c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2a8>
 8000542:	4291      	cmp	r1, r2
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2a8>
 8000546:	3d02      	subs	r5, #2
 8000548:	4462      	add	r2, ip
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0xfc>
 8000552:	4631      	mov	r1, r6
 8000554:	4630      	mov	r0, r6
 8000556:	e708      	b.n	800036a <__udivmoddi4+0xa2>
 8000558:	4639      	mov	r1, r7
 800055a:	e6e6      	b.n	800032a <__udivmoddi4+0x62>
 800055c:	4610      	mov	r0, r2
 800055e:	e6fb      	b.n	8000358 <__udivmoddi4+0x90>
 8000560:	4548      	cmp	r0, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f0>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb65 0e0c 	sbc.w	lr, r5, ip
 800056c:	3b01      	subs	r3, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f0>
 8000570:	4645      	mov	r5, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x282>
 8000574:	462b      	mov	r3, r5
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1da>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x258>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b0>
 8000580:	3d02      	subs	r5, #2
 8000582:	4462      	add	r2, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x124>
 8000586:	4608      	mov	r0, r1
 8000588:	e70a      	b.n	80003a0 <__udivmoddi4+0xd8>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x14e>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ILI9341_DrawLine>:
    b = t;                                                                     \
  }

//곡선 표현
void ILI9341_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
		uint16_t color) {
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b089      	sub	sp, #36	; 0x24
 8000598:	af00      	add	r7, sp, #0
 800059a:	4604      	mov	r4, r0
 800059c:	4608      	mov	r0, r1
 800059e:	4611      	mov	r1, r2
 80005a0:	461a      	mov	r2, r3
 80005a2:	4623      	mov	r3, r4
 80005a4:	80fb      	strh	r3, [r7, #6]
 80005a6:	4603      	mov	r3, r0
 80005a8:	80bb      	strh	r3, [r7, #4]
 80005aa:	460b      	mov	r3, r1
 80005ac:	807b      	strh	r3, [r7, #2]
 80005ae:	4613      	mov	r3, r2
 80005b0:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80005b2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80005b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005c4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80005c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005cc:	1acb      	subs	r3, r1, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bfb8      	it	lt
 80005d2:	425b      	neglt	r3, r3
 80005d4:	429a      	cmp	r2, r3
 80005d6:	bfcc      	ite	gt
 80005d8:	2301      	movgt	r3, #1
 80005da:	2300      	movle	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	837b      	strh	r3, [r7, #26]
	if (steep) {
 80005e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d00b      	beq.n	8000600 <ILI9341_DrawLine+0x6c>
		_swap_int16_t(x0, y0);
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	833b      	strh	r3, [r7, #24]
 80005ec:	88bb      	ldrh	r3, [r7, #4]
 80005ee:	80fb      	strh	r3, [r7, #6]
 80005f0:	8b3b      	ldrh	r3, [r7, #24]
 80005f2:	80bb      	strh	r3, [r7, #4]
		_swap_int16_t(x1, y1);
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	82fb      	strh	r3, [r7, #22]
 80005f8:	883b      	ldrh	r3, [r7, #0]
 80005fa:	807b      	strh	r3, [r7, #2]
 80005fc:	8afb      	ldrh	r3, [r7, #22]
 80005fe:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1) {
 8000600:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000604:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000608:	429a      	cmp	r2, r3
 800060a:	dd0b      	ble.n	8000624 <ILI9341_DrawLine+0x90>
		_swap_int16_t(x0, x1);
 800060c:	88fb      	ldrh	r3, [r7, #6]
 800060e:	82bb      	strh	r3, [r7, #20]
 8000610:	887b      	ldrh	r3, [r7, #2]
 8000612:	80fb      	strh	r3, [r7, #6]
 8000614:	8abb      	ldrh	r3, [r7, #20]
 8000616:	807b      	strh	r3, [r7, #2]
		_swap_int16_t(y0, y1);
 8000618:	88bb      	ldrh	r3, [r7, #4]
 800061a:	827b      	strh	r3, [r7, #18]
 800061c:	883b      	ldrh	r3, [r7, #0]
 800061e:	80bb      	strh	r3, [r7, #4]
 8000620:	8a7b      	ldrh	r3, [r7, #18]
 8000622:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8000624:	887a      	ldrh	r2, [r7, #2]
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	b29b      	uxth	r3, r3
 800062c:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 800062e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000632:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	bfb8      	it	lt
 800063c:	425b      	neglt	r3, r3
 800063e:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8000640:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000644:	0fda      	lsrs	r2, r3, #31
 8000646:	4413      	add	r3, r2
 8000648:	105b      	asrs	r3, r3, #1
 800064a:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1) {
 800064c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000650:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000654:	429a      	cmp	r2, r3
 8000656:	da02      	bge.n	800065e <ILI9341_DrawLine+0xca>
		ystep = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	83bb      	strh	r3, [r7, #28]
 800065c:	e02d      	b.n	80006ba <ILI9341_DrawLine+0x126>
	} else {
		ystep = -1;
 800065e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000662:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++) {
 8000664:	e029      	b.n	80006ba <ILI9341_DrawLine+0x126>
		if (steep) {
 8000666:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <ILI9341_DrawLine+0xe8>
			ILI9341_DrawPixel(y0, x0, color);
 800066e:	88bb      	ldrh	r3, [r7, #4]
 8000670:	88f9      	ldrh	r1, [r7, #6]
 8000672:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fb53 	bl	8000d20 <ILI9341_DrawPixel>
 800067a:	e005      	b.n	8000688 <ILI9341_DrawLine+0xf4>
		} else {
			ILI9341_DrawPixel(x0, y0, color);
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	88b9      	ldrh	r1, [r7, #4]
 8000680:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fb4c 	bl	8000d20 <ILI9341_DrawPixel>
		}
		err -= dy;
 8000688:	8bfa      	ldrh	r2, [r7, #30]
 800068a:	89fb      	ldrh	r3, [r7, #14]
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	b29b      	uxth	r3, r3
 8000690:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 8000692:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000696:	2b00      	cmp	r3, #0
 8000698:	da09      	bge.n	80006ae <ILI9341_DrawLine+0x11a>
			y0 += ystep;
 800069a:	88ba      	ldrh	r2, [r7, #4]
 800069c:	8bbb      	ldrh	r3, [r7, #28]
 800069e:	4413      	add	r3, r2
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	80bb      	strh	r3, [r7, #4]
			err += dx;
 80006a4:	8bfa      	ldrh	r2, [r7, #30]
 80006a6:	8a3b      	ldrh	r3, [r7, #16]
 80006a8:	4413      	add	r3, r2
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++) {
 80006ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	3301      	adds	r3, #1
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	80fb      	strh	r3, [r7, #6]
 80006ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	ddcf      	ble.n	8000666 <ILI9341_DrawLine+0xd2>
//			for (int i = 0; i <= deltaY; i++) {
//				ILI9341_DrawPixel(x0+(i*slope), y0 - i, color);
//			}
//		}
//	}
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3724      	adds	r7, #36	; 0x24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}

080006d0 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <HAL_SPI_TxCpltCallback+0x24>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d104      	bne.n	80006ea <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2102      	movs	r1, #2
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <HAL_SPI_TxCpltCallback+0x28>)
 80006e6:	f002 fc19 	bl	8002f1c <HAL_GPIO_WritePin>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000d8 	.word	0x200000d8
 80006f8:	40020800 	.word	0x40020800

080006fc <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000706:	bf00      	nop
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <ILI9341_SPI_Tx+0x30>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	2b02      	cmp	r3, #2
 8000714:	d1f8      	bne.n	8000708 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	2201      	movs	r2, #1
 800071a:	4619      	mov	r1, r3
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <ILI9341_SPI_Tx+0x30>)
 800071e:	f003 fa07 	bl	8003b30 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000d8 	.word	0x200000d8

08000730 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800073c:	bf00      	nop
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <ILI9341_SPI_TxBuffer+0x30>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f003 0302 	and.w	r3, r3, #2
 8000748:	2b02      	cmp	r3, #2
 800074a:	d1f8      	bne.n	800073e <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 800074c:	887b      	ldrh	r3, [r7, #2]
 800074e:	461a      	mov	r2, r3
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	4803      	ldr	r0, [pc, #12]	; (8000760 <ILI9341_SPI_TxBuffer+0x30>)
 8000754:	f003 f9ec 	bl	8003b30 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000d8 	.word	0x200000d8

08000764 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 800076e:	2200      	movs	r2, #0
 8000770:	2104      	movs	r1, #4
 8000772:	4808      	ldr	r0, [pc, #32]	; (8000794 <ILI9341_WriteCommand+0x30>)
 8000774:	f002 fbd2 	bl	8002f1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000778:	2200      	movs	r2, #0
 800077a:	2102      	movs	r1, #2
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <ILI9341_WriteCommand+0x30>)
 800077e:	f002 fbcd 	bl	8002f1c <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ffb9 	bl	80006fc <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020800 	.word	0x40020800

08000798 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80007a2:	2201      	movs	r2, #1
 80007a4:	2104      	movs	r1, #4
 80007a6:	4808      	ldr	r0, [pc, #32]	; (80007c8 <ILI9341_WriteData+0x30>)
 80007a8:	f002 fbb8 	bl	8002f1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007ac:	2200      	movs	r2, #0
 80007ae:	2102      	movs	r1, #2
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <ILI9341_WriteData+0x30>)
 80007b2:	f002 fbb3 	bl	8002f1c <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff9f 	bl	80006fc <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40020800 	.word	0x40020800

080007cc <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80007d8:	2201      	movs	r2, #1
 80007da:	2104      	movs	r1, #4
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <ILI9341_WriteBuffer+0x34>)
 80007de:	f002 fb9d 	bl	8002f1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007e2:	2200      	movs	r2, #0
 80007e4:	2102      	movs	r1, #2
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <ILI9341_WriteBuffer+0x34>)
 80007e8:	f002 fb98 	bl	8002f1c <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80007ec:	887b      	ldrh	r3, [r7, #2]
 80007ee:	4619      	mov	r1, r3
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff9d 	bl	8000730 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40020800 	.word	0x40020800

08000804 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4604      	mov	r4, r0
 800080c:	4608      	mov	r0, r1
 800080e:	4611      	mov	r1, r2
 8000810:	461a      	mov	r2, r3
 8000812:	4623      	mov	r3, r4
 8000814:	80fb      	strh	r3, [r7, #6]
 8000816:	4603      	mov	r3, r0
 8000818:	80bb      	strh	r3, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	807b      	strh	r3, [r7, #2]
 800081e:	4613      	mov	r3, r2
 8000820:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	b29b      	uxth	r3, r3
 8000828:	b2db      	uxtb	r3, r3
 800082a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000832:	887b      	ldrh	r3, [r7, #2]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	b29b      	uxth	r3, r3
 8000838:	b2db      	uxtb	r3, r3
 800083a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 800083c:	887b      	ldrh	r3, [r7, #2]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000842:	202a      	movs	r0, #42	; 0x2a
 8000844:	f7ff ff8e 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2104      	movs	r1, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ffbc 	bl	80007cc <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000854:	88bb      	ldrh	r3, [r7, #4]
 8000856:	0a1b      	lsrs	r3, r3, #8
 8000858:	b29b      	uxth	r3, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 800085e:	88bb      	ldrh	r3, [r7, #4]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000864:	883b      	ldrh	r3, [r7, #0]
 8000866:	0a1b      	lsrs	r3, r3, #8
 8000868:	b29b      	uxth	r3, r3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 800086e:	883b      	ldrh	r3, [r7, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000874:	202b      	movs	r0, #43	; 0x2b
 8000876:	f7ff ff75 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2104      	movs	r1, #4
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffa3 	bl	80007cc <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000886:	202c      	movs	r0, #44	; 0x2c
 8000888:	f7ff ff6c 	bl	8000764 <ILI9341_WriteCommand>
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bd90      	pop	{r4, r7, pc}

08000894 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000898:	2200      	movs	r2, #0
 800089a:	2108      	movs	r1, #8
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <ILI9341_Reset+0x3c>)
 800089e:	f002 fb3d 	bl	8002f1c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f001 f8ec 	bl	8001a80 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80008a8:	2200      	movs	r2, #0
 80008aa:	2102      	movs	r1, #2
 80008ac:	4808      	ldr	r0, [pc, #32]	; (80008d0 <ILI9341_Reset+0x3c>)
 80008ae:	f002 fb35 	bl	8002f1c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80008b2:	200a      	movs	r0, #10
 80008b4:	f001 f8e4 	bl	8001a80 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80008b8:	2201      	movs	r2, #1
 80008ba:	2108      	movs	r1, #8
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <ILI9341_Reset+0x3c>)
 80008be:	f002 fb2d 	bl	8002f1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 80008c2:	2201      	movs	r2, #1
 80008c4:	2102      	movs	r1, #2
 80008c6:	4802      	ldr	r0, [pc, #8]	; (80008d0 <ILI9341_Reset+0x3c>)
 80008c8:	f002 fb28 	bl	8002f1c <HAL_GPIO_WritePin>
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40020800 	.word	0x40020800

080008d4 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80008d8:	2201      	movs	r2, #1
 80008da:	2108      	movs	r1, #8
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <ILI9341_Enable+0x14>)
 80008de:	f002 fb1d 	bl	8002f1c <HAL_GPIO_WritePin>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40020800 	.word	0x40020800

080008ec <ILI9341_Init>:

void ILI9341_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 80008f0:	f7ff fff0 	bl	80008d4 <ILI9341_Enable>
	ILI9341_Reset();
 80008f4:	f7ff ffce 	bl	8000894 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff ff33 	bl	8000764 <ILI9341_WriteCommand>
	HAL_Delay(10);
 80008fe:	200a      	movs	r0, #10
 8000900:	f001 f8be 	bl	8001a80 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000904:	20cb      	movs	r0, #203	; 0xcb
 8000906:	f7ff ff2d 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800090a:	2039      	movs	r0, #57	; 0x39
 800090c:	f7ff ff44 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000910:	202c      	movs	r0, #44	; 0x2c
 8000912:	f7ff ff41 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff ff3e 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 800091c:	2034      	movs	r0, #52	; 0x34
 800091e:	f7ff ff3b 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000922:	2002      	movs	r0, #2
 8000924:	f7ff ff38 	bl	8000798 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000928:	20cf      	movs	r0, #207	; 0xcf
 800092a:	f7ff ff1b 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff ff32 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000934:	20c1      	movs	r0, #193	; 0xc1
 8000936:	f7ff ff2f 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 800093a:	2030      	movs	r0, #48	; 0x30
 800093c:	f7ff ff2c 	bl	8000798 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000940:	20e8      	movs	r0, #232	; 0xe8
 8000942:	f7ff ff0f 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000946:	2085      	movs	r0, #133	; 0x85
 8000948:	f7ff ff26 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff ff23 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000952:	2078      	movs	r0, #120	; 0x78
 8000954:	f7ff ff20 	bl	8000798 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000958:	20ea      	movs	r0, #234	; 0xea
 800095a:	f7ff ff03 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ff1a 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff ff17 	bl	8000798 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800096a:	20ed      	movs	r0, #237	; 0xed
 800096c:	f7ff fefa 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000970:	2064      	movs	r0, #100	; 0x64
 8000972:	f7ff ff11 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000976:	2003      	movs	r0, #3
 8000978:	f7ff ff0e 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 800097c:	2012      	movs	r0, #18
 800097e:	f7ff ff0b 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000982:	2081      	movs	r0, #129	; 0x81
 8000984:	f7ff ff08 	bl	8000798 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000988:	20f7      	movs	r0, #247	; 0xf7
 800098a:	f7ff feeb 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800098e:	2020      	movs	r0, #32
 8000990:	f7ff ff02 	bl	8000798 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000994:	20c0      	movs	r0, #192	; 0xc0
 8000996:	f7ff fee5 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800099a:	2023      	movs	r0, #35	; 0x23
 800099c:	f7ff fefc 	bl	8000798 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80009a0:	20c1      	movs	r0, #193	; 0xc1
 80009a2:	f7ff fedf 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80009a6:	2010      	movs	r0, #16
 80009a8:	f7ff fef6 	bl	8000798 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 80009ac:	20c5      	movs	r0, #197	; 0xc5
 80009ae:	f7ff fed9 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 80009b2:	203e      	movs	r0, #62	; 0x3e
 80009b4:	f7ff fef0 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 80009b8:	2028      	movs	r0, #40	; 0x28
 80009ba:	f7ff feed 	bl	8000798 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80009be:	20c7      	movs	r0, #199	; 0xc7
 80009c0:	f7ff fed0 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 80009c4:	2086      	movs	r0, #134	; 0x86
 80009c6:	f7ff fee7 	bl	8000798 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80009ca:	2036      	movs	r0, #54	; 0x36
 80009cc:	f7ff feca 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 80009d0:	2048      	movs	r0, #72	; 0x48
 80009d2:	f7ff fee1 	bl	8000798 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80009d6:	203a      	movs	r0, #58	; 0x3a
 80009d8:	f7ff fec4 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 80009dc:	2055      	movs	r0, #85	; 0x55
 80009de:	f7ff fedb 	bl	8000798 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80009e2:	20b1      	movs	r0, #177	; 0xb1
 80009e4:	f7ff febe 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff fed5 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 80009ee:	2018      	movs	r0, #24
 80009f0:	f7ff fed2 	bl	8000798 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80009f4:	20b6      	movs	r0, #182	; 0xb6
 80009f6:	f7ff feb5 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80009fa:	2008      	movs	r0, #8
 80009fc:	f7ff fecc 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000a00:	2082      	movs	r0, #130	; 0x82
 8000a02:	f7ff fec9 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000a06:	2027      	movs	r0, #39	; 0x27
 8000a08:	f7ff fec6 	bl	8000798 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000a0c:	20f2      	movs	r0, #242	; 0xf2
 8000a0e:	f7ff fea9 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fec0 	bl	8000798 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000a18:	2026      	movs	r0, #38	; 0x26
 8000a1a:	f7ff fea3 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f7ff feba 	bl	8000798 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000a24:	20e0      	movs	r0, #224	; 0xe0
 8000a26:	f7ff fe9d 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f7ff feb4 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000a30:	2031      	movs	r0, #49	; 0x31
 8000a32:	f7ff feb1 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000a36:	202b      	movs	r0, #43	; 0x2b
 8000a38:	f7ff feae 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000a3c:	200c      	movs	r0, #12
 8000a3e:	f7ff feab 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000a42:	200e      	movs	r0, #14
 8000a44:	f7ff fea8 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000a48:	2008      	movs	r0, #8
 8000a4a:	f7ff fea5 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000a4e:	204e      	movs	r0, #78	; 0x4e
 8000a50:	f7ff fea2 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000a54:	20f1      	movs	r0, #241	; 0xf1
 8000a56:	f7ff fe9f 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000a5a:	2037      	movs	r0, #55	; 0x37
 8000a5c:	f7ff fe9c 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000a60:	2007      	movs	r0, #7
 8000a62:	f7ff fe99 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000a66:	2010      	movs	r0, #16
 8000a68:	f7ff fe96 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f7ff fe93 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000a72:	200e      	movs	r0, #14
 8000a74:	f7ff fe90 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000a78:	2009      	movs	r0, #9
 8000a7a:	f7ff fe8d 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff fe8a 	bl	8000798 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000a84:	20e1      	movs	r0, #225	; 0xe1
 8000a86:	f7ff fe6d 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff fe84 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000a90:	200e      	movs	r0, #14
 8000a92:	f7ff fe81 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000a96:	2014      	movs	r0, #20
 8000a98:	f7ff fe7e 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f7ff fe7b 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000aa2:	2011      	movs	r0, #17
 8000aa4:	f7ff fe78 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000aa8:	2007      	movs	r0, #7
 8000aaa:	f7ff fe75 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000aae:	2031      	movs	r0, #49	; 0x31
 8000ab0:	f7ff fe72 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000ab4:	20c1      	movs	r0, #193	; 0xc1
 8000ab6:	f7ff fe6f 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000aba:	2048      	movs	r0, #72	; 0x48
 8000abc:	f7ff fe6c 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000ac0:	2008      	movs	r0, #8
 8000ac2:	f7ff fe69 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f7ff fe66 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000acc:	200c      	movs	r0, #12
 8000ace:	f7ff fe63 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000ad2:	2031      	movs	r0, #49	; 0x31
 8000ad4:	f7ff fe60 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000ad8:	2036      	movs	r0, #54	; 0x36
 8000ada:	f7ff fe5d 	bl	8000798 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000ade:	200f      	movs	r0, #15
 8000ae0:	f7ff fe5a 	bl	8000798 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000ae4:	2011      	movs	r0, #17
 8000ae6:	f7ff fe3d 	bl	8000764 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f000 ffc8 	bl	8001a80 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000af0:	2029      	movs	r0, #41	; 0x29
 8000af2:	f7ff fe37 	bl	8000764 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 f802 	bl	8000b00 <ILI9341_SetRotation>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000b0a:	2036      	movs	r0, #54	; 0x36
 8000b0c:	f7ff fe2a 	bl	8000764 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000b10:	2001      	movs	r0, #1
 8000b12:	f000 ffb5 	bl	8001a80 <HAL_Delay>

	switch(rotation)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	d837      	bhi.n	8000b8c <ILI9341_SetRotation+0x8c>
 8000b1c:	a201      	add	r2, pc, #4	; (adr r2, 8000b24 <ILI9341_SetRotation+0x24>)
 8000b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	08000b35 	.word	0x08000b35
 8000b28:	08000b4b 	.word	0x08000b4b
 8000b2c:	08000b61 	.word	0x08000b61
 8000b30:	08000b77 	.word	0x08000b77
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000b34:	2048      	movs	r0, #72	; 0x48
 8000b36:	f7ff fe2f 	bl	8000798 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <ILI9341_SetRotation+0x98>)
 8000b3c:	22f0      	movs	r2, #240	; 0xf0
 8000b3e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <ILI9341_SetRotation+0x9c>)
 8000b42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b46:	801a      	strh	r2, [r3, #0]
		break;
 8000b48:	e021      	b.n	8000b8e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000b4a:	2028      	movs	r0, #40	; 0x28
 8000b4c:	f7ff fe24 	bl	8000798 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <ILI9341_SetRotation+0x98>)
 8000b52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b56:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <ILI9341_SetRotation+0x9c>)
 8000b5a:	22f0      	movs	r2, #240	; 0xf0
 8000b5c:	801a      	strh	r2, [r3, #0]
		break;
 8000b5e:	e016      	b.n	8000b8e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000b60:	2088      	movs	r0, #136	; 0x88
 8000b62:	f7ff fe19 	bl	8000798 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <ILI9341_SetRotation+0x98>)
 8000b68:	22f0      	movs	r2, #240	; 0xf0
 8000b6a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <ILI9341_SetRotation+0x9c>)
 8000b6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b72:	801a      	strh	r2, [r3, #0]
		break;
 8000b74:	e00b      	b.n	8000b8e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000b76:	20e8      	movs	r0, #232	; 0xe8
 8000b78:	f7ff fe0e 	bl	8000798 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <ILI9341_SetRotation+0x98>)
 8000b7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b82:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <ILI9341_SetRotation+0x9c>)
 8000b86:	22f0      	movs	r2, #240	; 0xf0
 8000b88:	801a      	strh	r2, [r3, #0]
		break;
 8000b8a:	e000      	b.n	8000b8e <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000b8c:	bf00      	nop
	}
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000002 	.word	0x20000002
 8000b9c:	20000000 	.word	0x20000000

08000ba0 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ba4:	b08d      	sub	sp, #52	; 0x34
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	6039      	str	r1, [r7, #0]
 8000bac:	80fb      	strh	r3, [r7, #6]
 8000bae:	466b      	mov	r3, sp
 8000bb0:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bbe:	d202      	bcs.n	8000bc6 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bc4:	e002      	b.n	8000bcc <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000bc6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2104      	movs	r1, #4
 8000bd0:	483e      	ldr	r0, [pc, #248]	; (8000ccc <ILI9341_DrawColorBurst+0x12c>)
 8000bd2:	f002 f9a3 	bl	8002f1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2102      	movs	r1, #2
 8000bda:	483c      	ldr	r0, [pc, #240]	; (8000ccc <ILI9341_DrawColorBurst+0x12c>)
 8000bdc:	f002 f99e 	bl	8002f1c <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000bec:	460b      	mov	r3, r1
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	61fb      	str	r3, [r7, #28]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	4688      	mov	r8, r1
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	460c      	mov	r4, r1
 8000c10:	461d      	mov	r5, r3
 8000c12:	f04f 0200 	mov.w	r2, #0
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	00eb      	lsls	r3, r5, #3
 8000c1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c20:	00e2      	lsls	r2, r4, #3
 8000c22:	1dcb      	adds	r3, r1, #7
 8000c24:	08db      	lsrs	r3, r3, #3
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	ebad 0d03 	sub.w	sp, sp, r3
 8000c2c:	466b      	mov	r3, sp
 8000c2e:	3300      	adds	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c36:	e00e      	b.n	8000c56 <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c3c:	4413      	add	r3, r2
 8000c3e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c42:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c46:	3301      	adds	r3, #1
 8000c48:	88fa      	ldrh	r2, [r7, #6]
 8000c4a:	b2d1      	uxtb	r1, r2
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c52:	3302      	adds	r3, #2
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d3ec      	bcc.n	8000c38 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6c:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c72:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c78:	fb01 f202 	mul.w	r2, r1, r2
 8000c7c:	1a9b      	subs	r3, r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d010      	beq.n	8000ca8 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
 8000c8a:	e009      	b.n	8000ca0 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	230a      	movs	r3, #10
 8000c92:	69b9      	ldr	r1, [r7, #24]
 8000c94:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <ILI9341_DrawColorBurst+0x130>)
 8000c96:	f002 fe08 	bl	80038aa <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d3f1      	bcc.n	8000c8c <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	230a      	movs	r3, #10
 8000cae:	69b9      	ldr	r1, [r7, #24]
 8000cb0:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <ILI9341_DrawColorBurst+0x130>)
 8000cb2:	f002 fdfa 	bl	80038aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2102      	movs	r1, #2
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <ILI9341_DrawColorBurst+0x12c>)
 8000cbc:	f002 f92e 	bl	8002f1c <HAL_GPIO_WritePin>
 8000cc0:	46b5      	mov	sp, r6
}
 8000cc2:	bf00      	nop
 8000cc4:	3734      	adds	r7, #52	; 0x34
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ccc:	40020800 	.word	0x40020800
 8000cd0:	200000d8 	.word	0x200000d8

08000cd4 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <ILI9341_FillScreen+0x44>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <ILI9341_FillScreen+0x48>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff fd89 	bl	8000804 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <ILI9341_FillScreen+0x44>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <ILI9341_FillScreen+0x48>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	fb02 f303 	mul.w	r3, r2, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff48 	bl	8000ba0 <ILI9341_DrawColorBurst>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000002 	.word	0x20000002
 8000d1c:	20000000 	.word	0x20000000

08000d20 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	80fb      	strh	r3, [r7, #6]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	80bb      	strh	r3, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <ILI9341_DrawPixel+0xc4>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	88fa      	ldrh	r2, [r7, #6]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d24d      	bcs.n	8000dda <ILI9341_DrawPixel+0xba>
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <ILI9341_DrawPixel+0xc8>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	88ba      	ldrh	r2, [r7, #4]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d247      	bcs.n	8000dda <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	753b      	strb	r3, [r7, #20]
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	757b      	strb	r3, [r7, #21]
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	121b      	asrs	r3, r3, #8
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	75bb      	strb	r3, [r7, #22]
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000d6e:	88bb      	ldrh	r3, [r7, #4]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	743b      	strb	r3, [r7, #16]
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	747b      	strb	r3, [r7, #17]
 8000d7e:	88bb      	ldrh	r3, [r7, #4]
 8000d80:	3301      	adds	r3, #1
 8000d82:	121b      	asrs	r3, r3, #8
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	74bb      	strb	r3, [r7, #18]
 8000d88:	88bb      	ldrh	r3, [r7, #4]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000d92:	887b      	ldrh	r3, [r7, #2]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	733b      	strb	r3, [r7, #12]
 8000d9c:	887b      	ldrh	r3, [r7, #2]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000da2:	202a      	movs	r0, #42	; 0x2a
 8000da4:	f7ff fcde 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2104      	movs	r1, #4
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fd0c 	bl	80007cc <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000db4:	202b      	movs	r0, #43	; 0x2b
 8000db6:	f7ff fcd5 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fd03 	bl	80007cc <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000dc6:	202c      	movs	r0, #44	; 0x2c
 8000dc8:	f7ff fccc 	bl	8000764 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fcfa 	bl	80007cc <ILI9341_WriteBuffer>
 8000dd8:	e000      	b.n	8000ddc <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000dda:	bf00      	nop
}
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000002 	.word	0x20000002
 8000de8:	20000000 	.word	0x20000000

08000dec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d109      	bne.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x24>
		if (doConvert > 0)
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d005      	beq.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x24>
			doConvert--;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e0e:	801a      	strh	r2, [r3, #0]

	}
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	200001d8 	.word	0x200001d8
 8000e20:	20000004 	.word	0x20000004

08000e24 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e2a:	f000 fdb7 	bl	800199c <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e2e:	f000 f8a5 	bl	8000f7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e32:	f000 fafd 	bl	8001430 <MX_GPIO_Init>
	MX_DMA_Init();
 8000e36:	f000 fad3 	bl	80013e0 <MX_DMA_Init>
	MX_SPI1_Init();
 8000e3a:	f000 f959 	bl	80010f0 <MX_SPI1_Init>
	MX_TIM3_Init();
 8000e3e:	f000 fa7b 	bl	8001338 <MX_TIM3_Init>
	MX_ADC1_Init();
 8000e42:	f000 f903 	bl	800104c <MX_ADC1_Init>
	MX_TIM1_Init();
 8000e46:	f000 f989 	bl	800115c <MX_TIM1_Init>
	MX_TIM2_Init();
 8000e4a:	f000 fa29 	bl	80012a0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	// setup OSC
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4841      	ldr	r0, [pc, #260]	; (8000f58 <main+0x134>)
 8000e52:	f003 faa5 	bl	80043a0 <HAL_TIM_PWM_Start>

	//setup adc
	HAL_TIM_Base_Start_IT(&htim2);
 8000e56:	4841      	ldr	r0, [pc, #260]	; (8000f5c <main+0x138>)
 8000e58:	f003 f9e6 	bl	8004228 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t) adcValue, 512);
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	493f      	ldr	r1, [pc, #252]	; (8000f60 <main+0x13c>)
 8000e62:	4840      	ldr	r0, [pc, #256]	; (8000f64 <main+0x140>)
 8000e64:	f000 fe74 	bl	8001b50 <HAL_ADC_Start_DMA>

	//setup encoder
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000e68:	213c      	movs	r1, #60	; 0x3c
 8000e6a:	483f      	ldr	r0, [pc, #252]	; (8000f68 <main+0x144>)
 8000e6c:	f003 fbee 	bl	800464c <HAL_TIM_Encoder_Start>
	//setup color LCD
	ILI9341_Init();
 8000e70:	f7ff fd3c 	bl	80008ec <ILI9341_Init>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f7ff fe43 	bl	8000b00 <ILI9341_SetRotation>
	ILI9341_FillScreen(WHITE);
 8000e7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e7e:	f7ff ff29 	bl	8000cd4 <ILI9341_FillScreen>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (doConvert == 0) {
 8000e82:	4b3a      	ldr	r3, [pc, #232]	; (8000f6c <main+0x148>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d158      	bne.n	8000f3c <main+0x118>
			doConvert=SamplesFFT;
 8000e8a:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <main+0x148>)
 8000e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e90:	801a      	strh	r2, [r3, #0]
			ILI9341_FillScreen(WHITE);
 8000e92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e96:	f7ff ff1d 	bl	8000cd4 <ILI9341_FillScreen>
			for(int i = 0; i<SamplesFFT; i+=2){
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	e01c      	b.n	8000eda <main+0xb6>
				input[i] = (float32_t)adcValue[i/2];
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	0fda      	lsrs	r2, r3, #31
 8000ea4:	4413      	add	r3, r2
 8000ea6:	105b      	asrs	r3, r3, #1
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <main+0x13c>)
 8000eac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000eb0:	ee07 3a90 	vmov	s15, r3
 8000eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb8:	4a2d      	ldr	r2, [pc, #180]	; (8000f70 <main+0x14c>)
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	edc3 7a00 	vstr	s15, [r3]
				input[i+1] = 0;
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <main+0x14c>)
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
			for(int i = 0; i<SamplesFFT; i+=2){
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ee0:	dbde      	blt.n	8000ea0 <main+0x7c>
			}

			arm_rfft_fast_init_f32(&fftInstance, SamplesFFT);
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f004 fa8b 	bl	8005404 <arm_rfft_fast_init_f32>
			arm_rfft_fast_f32(&fftInstance, input, output, 0);
 8000eee:	4638      	mov	r0, r7
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4a20      	ldr	r2, [pc, #128]	; (8000f74 <main+0x150>)
 8000ef4:	491e      	ldr	r1, [pc, #120]	; (8000f70 <main+0x14c>)
 8000ef6:	f004 fb07 	bl	8005508 <arm_rfft_fast_f32>

			// show data
			for(int i=0;i<256;i++){
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	e01a      	b.n	8000f36 <main+0x112>
				ILI9341_DrawLine(i, 239, i, 239-output[i], BLACK);
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	b218      	sxth	r0, r3
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	491a      	ldr	r1, [pc, #104]	; (8000f74 <main+0x150>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	440b      	add	r3, r1
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000f78 <main+0x154>
 8000f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f20:	ee17 3a90 	vmov	r3, s15
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	2100      	movs	r1, #0
 8000f28:	9100      	str	r1, [sp, #0]
 8000f2a:	21ef      	movs	r1, #239	; 0xef
 8000f2c:	f7ff fb32 	bl	8000594 <ILI9341_DrawLine>
			for(int i=0;i<256;i++){
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	3301      	adds	r3, #1
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2bff      	cmp	r3, #255	; 0xff
 8000f3a:	dde1      	ble.n	8000f00 <main+0xdc>
//			}

			//HAL_Delay(100);
		}
		//Change freq
		htim1.Instance->ARR = htim3.Instance->CNT;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <main+0x144>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <main+0x134>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1.Instance->CCR1 = htim1.Instance->ARR / 2;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <main+0x134>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f4e:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <main+0x134>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	0852      	lsrs	r2, r2, #1
 8000f54:	635a      	str	r2, [r3, #52]	; 0x34
		if (doConvert == 0) {
 8000f56:	e794      	b.n	8000e82 <main+0x5e>
 8000f58:	20000190 	.word	0x20000190
 8000f5c:	200001d8 	.word	0x200001d8
 8000f60:	20000268 	.word	0x20000268
 8000f64:	20000030 	.word	0x20000030
 8000f68:	20000220 	.word	0x20000220
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	20000668 	.word	0x20000668
 8000f74:	20000e68 	.word	0x20000e68
 8000f78:	436f0000 	.word	0x436f0000

08000f7c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	; 0x50
 8000f80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	2230      	movs	r2, #48	; 0x30
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 fa1a 	bl	80063c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <SystemClock_Config+0xc8>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	4a26      	ldr	r2, [pc, #152]	; (8001044 <SystemClock_Config+0xc8>)
 8000faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fae:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb0:	4b24      	ldr	r3, [pc, #144]	; (8001044 <SystemClock_Config+0xc8>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <SystemClock_Config+0xcc>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a20      	ldr	r2, [pc, #128]	; (8001048 <SystemClock_Config+0xcc>)
 8000fc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <SystemClock_Config+0xcc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000fec:	2308      	movs	r3, #8
 8000fee:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000ff0:	2364      	movs	r3, #100	; 0x64
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ffc:	f107 0320 	add.w	r3, r7, #32
 8001000:	4618      	mov	r0, r3
 8001002:	f001 ffa5 	bl	8002f50 <HAL_RCC_OscConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x94>
		Error_Handler();
 800100c:	f000 fa52 	bl	80014b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001010:	230f      	movs	r3, #15
 8001012:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001020:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	2103      	movs	r1, #3
 800102c:	4618      	mov	r0, r3
 800102e:	f002 fa07 	bl	8003440 <HAL_RCC_ClockConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0xc0>
		Error_Handler();
 8001038:	f000 fa3c 	bl	80014b4 <Error_Handler>
	}
}
 800103c:	bf00      	nop
 800103e:	3750      	adds	r7, #80	; 0x50
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000

0800104c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001052:	463b      	mov	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_ADC1_Init+0x9c>)
 8001060:	4a22      	ldr	r2, [pc, #136]	; (80010ec <MX_ADC1_Init+0xa0>)
 8001062:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001064:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <MX_ADC1_Init+0x9c>)
 8001066:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800106a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <MX_ADC1_Init+0x9c>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_ADC1_Init+0x9c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_ADC1_Init+0x9c>)
 800107a:	2200      	movs	r2, #0
 800107c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_ADC1_Init+0x9c>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_ADC1_Init+0x9c>)
 8001088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800108c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_ADC1_Init+0x9c>)
 8001090:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_ADC1_Init+0x9c>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_ADC1_Init+0x9c>)
 800109e:	2201      	movs	r2, #1
 80010a0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_ADC1_Init+0x9c>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_ADC1_Init+0x9c>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_ADC1_Init+0x9c>)
 80010b2:	f000 fd09 	bl	8001ac8 <HAL_ADC_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x74>
		Error_Handler();
 80010bc:	f000 f9fa 	bl	80014b4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_ADC1_Init+0x9c>)
 80010d2:	f000 fe4b 	bl	8001d6c <HAL_ADC_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x94>
		Error_Handler();
 80010dc:	f000 f9ea 	bl	80014b4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000030 	.word	0x20000030
 80010ec:	40012000 	.word	0x40012000

080010f0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_SPI1_Init+0x64>)
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <MX_SPI1_Init+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_SPI1_Init+0x64>)
 80010fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001100:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_SPI1_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_SPI1_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_SPI1_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_SPI1_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_SPI1_Init+0x64>)
 800111c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001120:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_SPI1_Init+0x64>)
 8001124:	2208      	movs	r2, #8
 8001126:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_SPI1_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_SPI1_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <MX_SPI1_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_SPI1_Init+0x64>)
 800113c:	220a      	movs	r2, #10
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_SPI1_Init+0x64>)
 8001142:	f002 fb29 	bl	8003798 <HAL_SPI_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_SPI1_Init+0x60>
		Error_Handler();
 800114c:	f000 f9b2 	bl	80014b4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200000d8 	.word	0x200000d8
 8001158:	40013000 	.word	0x40013000

0800115c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b096      	sub	sp, #88	; 0x58
 8001160:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001162:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001170:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2220      	movs	r2, #32
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f005 f915 	bl	80063c4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800119a:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <MX_TIM1_Init+0x13c>)
 800119c:	4a3f      	ldr	r2, [pc, #252]	; (800129c <MX_TIM1_Init+0x140>)
 800119e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 100 - 1;
 80011a0:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <MX_TIM1_Init+0x13c>)
 80011a2:	2263      	movs	r2, #99	; 0x63
 80011a4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <MX_TIM1_Init+0x13c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 80011ac:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <MX_TIM1_Init+0x13c>)
 80011ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011b2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b38      	ldr	r3, [pc, #224]	; (8001298 <MX_TIM1_Init+0x13c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <MX_TIM1_Init+0x13c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b35      	ldr	r3, [pc, #212]	; (8001298 <MX_TIM1_Init+0x13c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011c6:	4834      	ldr	r0, [pc, #208]	; (8001298 <MX_TIM1_Init+0x13c>)
 80011c8:	f002 ffde 	bl	8004188 <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0x7a>
		Error_Handler();
 80011d2:	f000 f96f 	bl	80014b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011da:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80011dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011e0:	4619      	mov	r1, r3
 80011e2:	482d      	ldr	r0, [pc, #180]	; (8001298 <MX_TIM1_Init+0x13c>)
 80011e4:	f003 fc72 	bl	8004acc <HAL_TIM_ConfigClockSource>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM1_Init+0x96>
		Error_Handler();
 80011ee:	f000 f961 	bl	80014b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80011f2:	4829      	ldr	r0, [pc, #164]	; (8001298 <MX_TIM1_Init+0x13c>)
 80011f4:	f003 f87a 	bl	80042ec <HAL_TIM_PWM_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0xa6>
		Error_Handler();
 80011fe:	f000 f959 	bl	80014b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800120a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800120e:	4619      	mov	r1, r3
 8001210:	4821      	ldr	r0, [pc, #132]	; (8001298 <MX_TIM1_Init+0x13c>)
 8001212:	f004 f823 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0xc4>
		Error_Handler();
 800121c:	f000 f94a 	bl	80014b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001220:	2360      	movs	r3, #96	; 0x60
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 500 - 1;
 8001224:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	2200      	movs	r2, #0
 8001244:	4619      	mov	r1, r3
 8001246:	4814      	ldr	r0, [pc, #80]	; (8001298 <MX_TIM1_Init+0x13c>)
 8001248:	f003 fb7e 	bl	8004948 <HAL_TIM_PWM_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM1_Init+0xfa>
		Error_Handler();
 8001252:	f000 f92f 	bl	80014b4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800126a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4619      	mov	r1, r3
 8001278:	4807      	ldr	r0, [pc, #28]	; (8001298 <MX_TIM1_Init+0x13c>)
 800127a:	f004 f85d 	bl	8005338 <HAL_TIMEx_ConfigBreakDeadTime>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0x12c>
		Error_Handler();
 8001284:	f000 f916 	bl	80014b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <MX_TIM1_Init+0x13c>)
 800128a:	f000 fabf 	bl	800180c <HAL_TIM_MspPostInit>

}
 800128e:	bf00      	nop
 8001290:	3758      	adds	r7, #88	; 0x58
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000190 	.word	0x20000190
 800129c:	40010000 	.word	0x40010000

080012a0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_TIM2_Init+0x94>)
 80012be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 100 - 1;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_TIM2_Init+0x94>)
 80012c6:	2263      	movs	r2, #99	; 0x63
 80012c8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_TIM2_Init+0x94>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 5 - 1;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_TIM2_Init+0x94>)
 80012d2:	2204      	movs	r2, #4
 80012d4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_TIM2_Init+0x94>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_TIM2_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80012e2:	4814      	ldr	r0, [pc, #80]	; (8001334 <MX_TIM2_Init+0x94>)
 80012e4:	f002 ff50 	bl	8004188 <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x52>
		Error_Handler();
 80012ee:	f000 f8e1 	bl	80014b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4619      	mov	r1, r3
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_TIM2_Init+0x94>)
 8001300:	f003 fbe4 	bl	8004acc <HAL_TIM_ConfigClockSource>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM2_Init+0x6e>
		Error_Handler();
 800130a:	f000 f8d3 	bl	80014b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800130e:	2320      	movs	r3, #32
 8001310:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <MX_TIM2_Init+0x94>)
 800131c:	f003 ff9e 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x8a>
		Error_Handler();
 8001326:	f000 f8c5 	bl	80014b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200001d8 	.word	0x200001d8

08001338 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	; 0x30
 800133c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	2224      	movs	r2, #36	; 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f005 f83c 	bl	80063c4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <MX_TIM3_Init+0xa0>)
 8001356:	4a21      	ldr	r2, [pc, #132]	; (80013dc <MX_TIM3_Init+0xa4>)
 8001358:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800135a:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <MX_TIM3_Init+0xa0>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <MX_TIM3_Init+0xa0>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 20000 - 1;
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <MX_TIM3_Init+0xa0>)
 8001368:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800136c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_TIM3_Init+0xa0>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_TIM3_Init+0xa0>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800137a:	2303      	movs	r3, #3
 800137c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001382:	2301      	movs	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001392:	2301      	movs	r3, #1
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4619      	mov	r1, r3
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <MX_TIM3_Init+0xa0>)
 80013a6:	f003 f8ab 	bl	8004500 <HAL_TIM_Encoder_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0x7c>
		Error_Handler();
 80013b0:	f000 f880 	bl	80014b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_TIM3_Init+0xa0>)
 80013c2:	f003 ff4b 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0x98>
		Error_Handler();
 80013cc:	f000 f872 	bl	80014b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000220 	.word	0x20000220
 80013dc:	40000400 	.word	0x40000400

080013e0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_DMA_Init+0x4c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a0f      	ldr	r2, [pc, #60]	; (800142c <MX_DMA_Init+0x4c>)
 80013f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <MX_DMA_Init+0x4c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2038      	movs	r0, #56	; 0x38
 8001408:	f001 f83b 	bl	8002482 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800140c:	2038      	movs	r0, #56	; 0x38
 800140e:	f001 f854 	bl	80024ba <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	203a      	movs	r0, #58	; 0x3a
 8001418:	f001 f833 	bl	8002482 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800141c:	203a      	movs	r0, #58	; 0x3a
 800141e:	f001 f84c 	bl	80024ba <HAL_NVIC_EnableIRQ>

}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_GPIO_Init+0x7c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a17      	ldr	r2, [pc, #92]	; (80014ac <MX_GPIO_Init+0x7c>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_GPIO_Init+0x7c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_GPIO_Init+0x7c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a10      	ldr	r2, [pc, #64]	; (80014ac <MX_GPIO_Init+0x7c>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_GPIO_Init+0x7c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin | LCD_DC_Pin | LCD_RST_Pin,
 800147e:	2200      	movs	r2, #0
 8001480:	210e      	movs	r1, #14
 8001482:	480b      	ldr	r0, [pc, #44]	; (80014b0 <MX_GPIO_Init+0x80>)
 8001484:	f001 fd4a 	bl	8002f1c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin | LCD_DC_Pin | LCD_RST_Pin;
 8001488:	230e      	movs	r3, #14
 800148a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	4619      	mov	r1, r3
 800149e:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_GPIO_Init+0x80>)
 80014a0:	f001 fbb8 	bl	8002c14 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020800 	.word	0x40020800

080014b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014bc:	e7fe      	b.n	80014bc <Error_Handler+0x8>
	...

080014c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_MspInit+0x4c>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_MspInit+0x4c>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <HAL_MspInit+0x4c>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800

08001510 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a2f      	ldr	r2, [pc, #188]	; (80015ec <HAL_ADC_MspInit+0xdc>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d157      	bne.n	80015e2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <HAL_ADC_MspInit+0xe0>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a2d      	ldr	r2, [pc, #180]	; (80015f0 <HAL_ADC_MspInit+0xe0>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <HAL_ADC_MspInit+0xe0>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_ADC_MspInit+0xe0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a26      	ldr	r2, [pc, #152]	; (80015f0 <HAL_ADC_MspInit+0xe0>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_ADC_MspInit+0xe0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800156a:	2301      	movs	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156e:	2303      	movs	r3, #3
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	481d      	ldr	r0, [pc, #116]	; (80015f4 <HAL_ADC_MspInit+0xe4>)
 800157e:	f001 fb49 	bl	8002c14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 8001584:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <HAL_ADC_MspInit+0xec>)
 8001586:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 800159c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015c6:	480c      	ldr	r0, [pc, #48]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015c8:	f000 ff92 	bl	80024f0 <HAL_DMA_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80015d2:	f7ff ff6f 	bl	80014b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015da:	639a      	str	r2, [r3, #56]	; 0x38
 80015dc:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <HAL_ADC_MspInit+0xe8>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40012000 	.word	0x40012000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	20000078 	.word	0x20000078
 80015fc:	40026410 	.word	0x40026410

08001600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a34      	ldr	r2, [pc, #208]	; (80016f0 <HAL_SPI_MspInit+0xf0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d161      	bne.n	80016e6 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <HAL_SPI_MspInit+0xf4>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a32      	ldr	r2, [pc, #200]	; (80016f4 <HAL_SPI_MspInit+0xf4>)
 800162c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_SPI_MspInit+0xf4>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <HAL_SPI_MspInit+0xf4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a2b      	ldr	r2, [pc, #172]	; (80016f4 <HAL_SPI_MspInit+0xf4>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <HAL_SPI_MspInit+0xf4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800165a:	23e0      	movs	r3, #224	; 0xe0
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800166a:	2305      	movs	r3, #5
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4820      	ldr	r0, [pc, #128]	; (80016f8 <HAL_SPI_MspInit+0xf8>)
 8001676:	f001 facd 	bl	8002c14 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 800167c:	4a20      	ldr	r2, [pc, #128]	; (8001700 <HAL_SPI_MspInit+0x100>)
 800167e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 8001682:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001686:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 800168a:	2240      	movs	r2, #64	; 0x40
 800168c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 8001696:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800169a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80016ba:	4810      	ldr	r0, [pc, #64]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 80016bc:	f000 ff18 	bl	80024f0 <HAL_DMA_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80016c6:	f7ff fef5 	bl	80014b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 80016ce:	649a      	str	r2, [r3, #72]	; 0x48
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_SPI_MspInit+0xfc>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2023      	movs	r0, #35	; 0x23
 80016dc:	f000 fed1 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80016e0:	2023      	movs	r0, #35	; 0x23
 80016e2:	f000 feea 	bl	80024ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40013000 	.word	0x40013000
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000
 80016fc:	20000130 	.word	0x20000130
 8001700:	40026440 	.word	0x40026440

08001704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a18      	ldr	r2, [pc, #96]	; (8001774 <HAL_TIM_Base_MspInit+0x70>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d10e      	bne.n	8001734 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_TIM_Base_MspInit+0x74>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a16      	ldr	r2, [pc, #88]	; (8001778 <HAL_TIM_Base_MspInit+0x74>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_TIM_Base_MspInit+0x74>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001732:	e01a      	b.n	800176a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800173c:	d115      	bne.n	800176a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_TIM_Base_MspInit+0x74>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <HAL_TIM_Base_MspInit+0x74>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_TIM_Base_MspInit+0x74>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	201c      	movs	r0, #28
 8001760:	f000 fe8f 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001764:	201c      	movs	r0, #28
 8001766:	f000 fea8 	bl	80024ba <HAL_NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40010000 	.word	0x40010000
 8001778:	40023800 	.word	0x40023800

0800177c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a19      	ldr	r2, [pc, #100]	; (8001800 <HAL_TIM_Encoder_MspInit+0x84>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d12b      	bne.n	80017f6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_TIM_Encoder_MspInit+0x88>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_TIM_Encoder_MspInit+0x88>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_TIM_Encoder_MspInit+0x88>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_TIM_Encoder_MspInit+0x88>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <HAL_TIM_Encoder_MspInit+0x88>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_TIM_Encoder_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EN_A_Pin|EN_B_Pin;
 80017d6:	23c0      	movs	r3, #192	; 0xc0
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017e6:	2302      	movs	r3, #2
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <HAL_TIM_Encoder_MspInit+0x8c>)
 80017f2:	f001 fa0f 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017f6:	bf00      	nop
 80017f8:	3728      	adds	r7, #40	; 0x28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40000400 	.word	0x40000400
 8001804:	40023800 	.word	0x40023800
 8001808:	40020800 	.word	0x40020800

0800180c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <HAL_TIM_MspPostInit+0x68>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d11e      	bne.n	800186c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_TIM_MspPostInit+0x6c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <HAL_TIM_MspPostInit+0x6c>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_TIM_MspPostInit+0x6c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = OSC_Pin;
 800184a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800185c:	2301      	movs	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OSC_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4619      	mov	r1, r3
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <HAL_TIM_MspPostInit+0x70>)
 8001868:	f001 f9d4 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800186c:	bf00      	nop
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40010000 	.word	0x40010000
 8001878:	40023800 	.word	0x40023800
 800187c:	40020000 	.word	0x40020000

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001884:	e7fe      	b.n	8001884 <NMI_Handler+0x4>

08001886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <MemManage_Handler+0x4>

08001892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018cc:	f000 f8b8 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <TIM2_IRQHandler+0x10>)
 80018da:	f002 ff45 	bl	8004768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200001d8 	.word	0x200001d8

080018e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <SPI1_IRQHandler+0x10>)
 80018ee:	f002 f9d1 	bl	8003c94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200000d8 	.word	0x200000d8

080018fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <DMA2_Stream0_IRQHandler+0x10>)
 8001902:	f000 ff1d 	bl	8002740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000078 	.word	0x20000078

08001910 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <DMA2_Stream2_IRQHandler+0x10>)
 8001916:	f000 ff13 	bl	8002740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000130 	.word	0x20000130

08001924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <SystemInit+0x20>)
 800192a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <SystemInit+0x20>)
 8001930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001980 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800194c:	f7ff ffea 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001952:	490d      	ldr	r1, [pc, #52]	; (8001988 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001958:	e002      	b.n	8001960 <LoopCopyDataInit>

0800195a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195e:	3304      	adds	r3, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001964:	d3f9      	bcc.n	800195a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001968:	4c0a      	ldr	r4, [pc, #40]	; (8001994 <LoopFillZerobss+0x22>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800196c:	e001      	b.n	8001972 <LoopFillZerobss>

0800196e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001970:	3204      	adds	r2, #4

08001972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001974:	d3fb      	bcc.n	800196e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001976:	f004 fd2d 	bl	80063d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197a:	f7ff fa53 	bl	8000e24 <main>
  bx  lr    
 800197e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800198c:	080198b4 	.word	0x080198b4
  ldr r2, =_sbss
 8001990:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001994:	2000126c 	.word	0x2000126c

08001998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC_IRQHandler>
	...

0800199c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <HAL_Init+0x40>)
 80019a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_Init+0x40>)
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_Init+0x40>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 fd51 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	200f      	movs	r0, #15
 80019cc:	f000 f808 	bl	80019e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff fd76 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_InitTick+0x54>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_InitTick+0x58>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fd69 	bl	80024d6 <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00e      	b.n	8001a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d80a      	bhi.n	8001a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f000 fd31 	bl	8002482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a20:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_InitTick+0x5c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000010 	.word	0x20000010
 8001a3c:	2000000c 	.word	0x2000000c

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000010 	.word	0x20000010
 8001a64:	20001268 	.word	0x20001268

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20001268 	.word	0x20001268

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff ffee 	bl	8001a68 <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d005      	beq.n	8001aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_Delay+0x44>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aa6:	bf00      	nop
 8001aa8:	f7ff ffde 	bl	8001a68 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f7      	bhi.n	8001aa8 <HAL_Delay+0x28>
  {
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000010 	.word	0x20000010

08001ac8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e033      	b.n	8001b46 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d109      	bne.n	8001afa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fd12 	bl	8001510 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d118      	bne.n	8001b38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b0e:	f023 0302 	bic.w	r3, r3, #2
 8001b12:	f043 0202 	orr.w	r2, r3, #2
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fa58 	bl	8001fd0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f023 0303 	bic.w	r3, r3, #3
 8001b2e:	f043 0201 	orr.w	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40
 8001b36:	e001      	b.n	8001b3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_Start_DMA+0x1e>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e0ce      	b.n	8001d0c <HAL_ADC_Start_DMA+0x1bc>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d018      	beq.n	8001bb6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b94:	4b5f      	ldr	r3, [pc, #380]	; (8001d14 <HAL_ADC_Start_DMA+0x1c4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a5f      	ldr	r2, [pc, #380]	; (8001d18 <HAL_ADC_Start_DMA+0x1c8>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	0c9a      	lsrs	r2, r3, #18
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001ba8:	e002      	b.n	8001bb0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f9      	bne.n	8001baa <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bc4:	d107      	bne.n	8001bd6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bd4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	f040 8086 	bne.w	8001cf2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c24:	d106      	bne.n	8001c34 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f023 0206 	bic.w	r2, r3, #6
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	645a      	str	r2, [r3, #68]	; 0x44
 8001c32:	e002      	b.n	8001c3a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c42:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <HAL_ADC_Start_DMA+0x1cc>)
 8001c44:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4a:	4a35      	ldr	r2, [pc, #212]	; (8001d20 <HAL_ADC_Start_DMA+0x1d0>)
 8001c4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	4a34      	ldr	r2, [pc, #208]	; (8001d24 <HAL_ADC_Start_DMA+0x1d4>)
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5a:	4a33      	ldr	r2, [pc, #204]	; (8001d28 <HAL_ADC_Start_DMA+0x1d8>)
 8001c5c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c76:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c86:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	334c      	adds	r3, #76	; 0x4c
 8001c92:	4619      	mov	r1, r3
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f000 fcd8 	bl	800264c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10f      	bne.n	8001cc8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d129      	bne.n	8001d0a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	e020      	b.n	8001d0a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_ADC_Start_DMA+0x1dc>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d11b      	bne.n	8001d0a <HAL_ADC_Start_DMA+0x1ba>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d114      	bne.n	8001d0a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	e00b      	b.n	8001d0a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f043 0210 	orr.w	r2, r3, #16
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f043 0201 	orr.w	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000008 	.word	0x20000008
 8001d18:	431bde83 	.word	0x431bde83
 8001d1c:	40012300 	.word	0x40012300
 8001d20:	080021c9 	.word	0x080021c9
 8001d24:	08002283 	.word	0x08002283
 8001d28:	0800229f 	.word	0x0800229f
 8001d2c:	40012000 	.word	0x40012000

08001d30 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x1c>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e113      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x244>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b09      	cmp	r3, #9
 8001d96:	d925      	bls.n	8001de4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68d9      	ldr	r1, [r3, #12]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	3b1e      	subs	r3, #30
 8001dae:	2207      	movs	r2, #7
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43da      	mvns	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	400a      	ands	r2, r1
 8001dbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68d9      	ldr	r1, [r3, #12]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4403      	add	r3, r0
 8001dd6:	3b1e      	subs	r3, #30
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	e022      	b.n	8001e2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6919      	ldr	r1, [r3, #16]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	2207      	movs	r2, #7
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	400a      	ands	r2, r1
 8001e06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6919      	ldr	r1, [r3, #16]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4403      	add	r3, r0
 8001e20:	409a      	lsls	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d824      	bhi.n	8001e7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	3b05      	subs	r3, #5
 8001e44:	221f      	movs	r2, #31
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	400a      	ands	r2, r1
 8001e52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b05      	subs	r3, #5
 8001e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	635a      	str	r2, [r3, #52]	; 0x34
 8001e7a:	e04c      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	d824      	bhi.n	8001ece <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	3b23      	subs	r3, #35	; 0x23
 8001e96:	221f      	movs	r2, #31
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	400a      	ands	r2, r1
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3b23      	subs	r3, #35	; 0x23
 8001ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
 8001ecc:	e023      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	3b41      	subs	r3, #65	; 0x41
 8001ee0:	221f      	movs	r2, #31
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	400a      	ands	r2, r1
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	4618      	mov	r0, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b41      	subs	r3, #65	; 0x41
 8001f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f16:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_ADC_ConfigChannel+0x250>)
 8001f18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <HAL_ADC_ConfigChannel+0x254>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d10f      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x1d8>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b12      	cmp	r3, #18
 8001f2a:	d10b      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <HAL_ADC_ConfigChannel+0x254>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d12b      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x23a>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_ADC_ConfigChannel+0x258>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <HAL_ADC_ConfigChannel+0x1f4>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b11      	cmp	r3, #17
 8001f5e:	d122      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <HAL_ADC_ConfigChannel+0x258>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d111      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_ADC_ConfigChannel+0x25c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_ADC_ConfigChannel+0x260>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	0c9a      	lsrs	r2, r3, #18
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f98:	e002      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f9      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40012300 	.word	0x40012300
 8001fc0:	40012000 	.word	0x40012000
 8001fc4:	10000012 	.word	0x10000012
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	431bde83 	.word	0x431bde83

08001fd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd8:	4b79      	ldr	r3, [pc, #484]	; (80021c0 <ADC_Init+0x1f0>)
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	021a      	lsls	r2, r3, #8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <ADC_Init+0x1f4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d022      	beq.n	80020ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002076:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002098:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6899      	ldr	r1, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	e00f      	b.n	80020ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0202 	bic.w	r2, r2, #2
 80020dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6899      	ldr	r1, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7e1b      	ldrb	r3, [r3, #24]
 80020e8:	005a      	lsls	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01b      	beq.n	8002134 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800210a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800211a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	3b01      	subs	r3, #1
 8002128:	035a      	lsls	r2, r3, #13
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	e007      	b.n	8002144 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002142:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	3b01      	subs	r3, #1
 8002160:	051a      	lsls	r2, r3, #20
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002186:	025a      	lsls	r2, r3, #9
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6899      	ldr	r1, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	029a      	lsls	r2, r3, #10
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40012300 	.word	0x40012300
 80021c4:	0f000001 	.word	0x0f000001

080021c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d13c      	bne.n	800225c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d12b      	bne.n	8002254 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002200:	2b00      	cmp	r3, #0
 8002202:	d127      	bne.n	8002254 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800221c:	2b00      	cmp	r3, #0
 800221e:	d119      	bne.n	8002254 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0220 	bic.w	r2, r2, #32
 800222e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d105      	bne.n	8002254 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f043 0201 	orr.w	r2, r3, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff fd6b 	bl	8001d30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800225a:	e00e      	b.n	800227a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7ff fd75 	bl	8001d58 <HAL_ADC_ErrorCallback>
}
 800226e:	e004      	b.n	800227a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7ff fd57 	bl	8001d44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2240      	movs	r2, #64	; 0x40
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f043 0204 	orr.w	r2, r3, #4
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f7ff fd4a 	bl	8001d58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fe:	4a04      	ldr	r2, [pc, #16]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	60d3      	str	r3, [r2, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <__NVIC_GetPriorityGrouping+0x18>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	f003 0307 	and.w	r3, r3, #7
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db0b      	blt.n	800235a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4907      	ldr	r1, [pc, #28]	; (8002368 <__NVIC_EnableIRQ+0x38>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db0a      	blt.n	8002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <__NVIC_SetPriority+0x4c>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002394:	e00a      	b.n	80023ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4908      	ldr	r1, [pc, #32]	; (80023bc <__NVIC_SetPriority+0x50>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3b04      	subs	r3, #4
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	440b      	add	r3, r1
 80023aa:	761a      	strb	r2, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43d9      	mvns	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	4313      	orrs	r3, r2
         );
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f7ff ff8e 	bl	800236c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff29 	bl	80022cc <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002494:	f7ff ff3e 	bl	8002314 <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff8e 	bl	80023c0 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5d 	bl	800236c <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff31 	bl	8002330 <__NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffa2 	bl	8002428 <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff fab4 	bl	8001a68 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e099      	b.n	8002640 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252c:	e00f      	b.n	800254e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800252e:	f7ff fa9b 	bl	8001a68 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b05      	cmp	r3, #5
 800253a:	d908      	bls.n	800254e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2203      	movs	r2, #3
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e078      	b.n	8002640 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e8      	bne.n	800252e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <HAL_DMA_Init+0x158>)
 8002568:	4013      	ands	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800257a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d107      	bne.n	80025b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	4313      	orrs	r3, r2
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f023 0307 	bic.w	r3, r3, #7
 80025ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d117      	bne.n	8002612 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00e      	beq.n	8002612 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fa91 	bl	8002b1c <DMA_CheckFifoParam>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800260e:	2301      	movs	r3, #1
 8002610:	e016      	b.n	8002640 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fa48 	bl	8002ab0 <DMA_CalcBaseAndBitshift>
 8002620:	4603      	mov	r3, r0
 8002622:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	223f      	movs	r2, #63	; 0x3f
 800262a:	409a      	lsls	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	f010803f 	.word	0xf010803f

0800264c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_DMA_Start_IT+0x26>
 800266e:	2302      	movs	r3, #2
 8002670:	e040      	b.n	80026f4 <HAL_DMA_Start_IT+0xa8>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d12f      	bne.n	80026e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2202      	movs	r2, #2
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f9da 	bl	8002a54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	223f      	movs	r2, #63	; 0x3f
 80026a6:	409a      	lsls	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0216 	orr.w	r2, r2, #22
 80026ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d007      	beq.n	80026d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0208 	orr.w	r2, r2, #8
 80026d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e005      	b.n	80026f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026ee:	2302      	movs	r3, #2
 80026f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d004      	beq.n	800271a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e00c      	b.n	8002734 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2205      	movs	r2, #5
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800274c:	4b8e      	ldr	r3, [pc, #568]	; (8002988 <HAL_DMA_IRQHandler+0x248>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a8e      	ldr	r2, [pc, #568]	; (800298c <HAL_DMA_IRQHandler+0x24c>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0a9b      	lsrs	r3, r3, #10
 8002758:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	2208      	movs	r2, #8
 800276c:	409a      	lsls	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d01a      	beq.n	80027ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0204 	bic.w	r2, r2, #4
 8002792:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	2208      	movs	r2, #8
 800279a:	409a      	lsls	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0201 	orr.w	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2201      	movs	r2, #1
 80027b2:	409a      	lsls	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d012      	beq.n	80027e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2201      	movs	r2, #1
 80027d0:	409a      	lsls	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f043 0202 	orr.w	r2, r3, #2
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	2204      	movs	r2, #4
 80027e8:	409a      	lsls	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d012      	beq.n	8002818 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00b      	beq.n	8002818 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	2204      	movs	r2, #4
 8002806:	409a      	lsls	r2, r3
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	f043 0204 	orr.w	r2, r3, #4
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	2210      	movs	r2, #16
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d043      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d03c      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	2210      	movs	r2, #16
 800283c:	409a      	lsls	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d018      	beq.n	8002882 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d108      	bne.n	8002870 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d024      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
 800286e:	e01f      	b.n	80028b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01b      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
 8002880:	e016      	b.n	80028b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0208 	bic.w	r2, r2, #8
 800289e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	2220      	movs	r2, #32
 80028b6:	409a      	lsls	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 808f 	beq.w	80029e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8087 	beq.w	80029e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d6:	2220      	movs	r2, #32
 80028d8:	409a      	lsls	r2, r3
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d136      	bne.n	8002958 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0216 	bic.w	r2, r2, #22
 80028f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002908:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <HAL_DMA_IRQHandler+0x1da>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0208 	bic.w	r2, r2, #8
 8002928:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292e:	223f      	movs	r2, #63	; 0x3f
 8002930:	409a      	lsls	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294a:	2b00      	cmp	r3, #0
 800294c:	d07e      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	4798      	blx	r3
        }
        return;
 8002956:	e079      	b.n	8002a4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d01d      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10d      	bne.n	8002990 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	2b00      	cmp	r3, #0
 800297a:	d031      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	4798      	blx	r3
 8002984:	e02c      	b.n	80029e0 <HAL_DMA_IRQHandler+0x2a0>
 8002986:	bf00      	nop
 8002988:	20000008 	.word	0x20000008
 800298c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d023      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
 80029a0:	e01e      	b.n	80029e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10f      	bne.n	80029d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0210 	bic.w	r2, r2, #16
 80029be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d032      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d022      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2205      	movs	r2, #5
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d307      	bcc.n	8002a28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f2      	bne.n	8002a0c <HAL_DMA_IRQHandler+0x2cc>
 8002a26:	e000      	b.n	8002a2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
 8002a4a:	e000      	b.n	8002a4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a4c:	bf00      	nop
    }
  }
}
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b40      	cmp	r3, #64	; 0x40
 8002a80:	d108      	bne.n	8002a94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a92:	e007      	b.n	8002aa4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	60da      	str	r2, [r3, #12]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3b10      	subs	r3, #16
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <DMA_CalcBaseAndBitshift+0x64>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002aca:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <DMA_CalcBaseAndBitshift+0x68>)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d909      	bls.n	8002af2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	1d1a      	adds	r2, r3, #4
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	659a      	str	r2, [r3, #88]	; 0x58
 8002af0:	e007      	b.n	8002b02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002afa:	f023 0303 	bic.w	r3, r3, #3
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	aaaaaaab 	.word	0xaaaaaaab
 8002b18:	08006444 	.word	0x08006444

08002b1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d11f      	bne.n	8002b76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d856      	bhi.n	8002bea <DMA_CheckFifoParam+0xce>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <DMA_CheckFifoParam+0x28>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b55 	.word	0x08002b55
 8002b48:	08002b67 	.word	0x08002b67
 8002b4c:	08002b55 	.word	0x08002b55
 8002b50:	08002beb 	.word	0x08002beb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d046      	beq.n	8002bee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b64:	e043      	b.n	8002bee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b6e:	d140      	bne.n	8002bf2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b74:	e03d      	b.n	8002bf2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7e:	d121      	bne.n	8002bc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d837      	bhi.n	8002bf6 <DMA_CheckFifoParam+0xda>
 8002b86:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <DMA_CheckFifoParam+0x70>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002b9d 	.word	0x08002b9d
 8002b90:	08002ba3 	.word	0x08002ba3
 8002b94:	08002b9d 	.word	0x08002b9d
 8002b98:	08002bb5 	.word	0x08002bb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba0:	e030      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d025      	beq.n	8002bfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb2:	e022      	b.n	8002bfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bbc:	d11f      	bne.n	8002bfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bc2:	e01c      	b.n	8002bfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d903      	bls.n	8002bd2 <DMA_CheckFifoParam+0xb6>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d003      	beq.n	8002bd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bd0:	e018      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd6:	e015      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00e      	beq.n	8002c02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      break;
 8002be8:	e00b      	b.n	8002c02 <DMA_CheckFifoParam+0xe6>
      break;
 8002bea:	bf00      	nop
 8002bec:	e00a      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e008      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e006      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e004      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e002      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bfe:	bf00      	nop
 8002c00:	e000      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      break;
 8002c02:	bf00      	nop
    }
  } 
  
  return status; 
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop

08002c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	e159      	b.n	8002ee4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c30:	2201      	movs	r2, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	f040 8148 	bne.w	8002ede <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d005      	beq.n	8002c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d130      	bne.n	8002cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	2203      	movs	r2, #3
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 0201 	and.w	r2, r3, #1
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d017      	beq.n	8002d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d123      	bne.n	8002d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	08da      	lsrs	r2, r3, #3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3208      	adds	r2, #8
 8002d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	220f      	movs	r2, #15
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	08da      	lsrs	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3208      	adds	r2, #8
 8002d52:	69b9      	ldr	r1, [r7, #24]
 8002d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	2203      	movs	r2, #3
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0203 	and.w	r2, r3, #3
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80a2 	beq.w	8002ede <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b57      	ldr	r3, [pc, #348]	; (8002efc <HAL_GPIO_Init+0x2e8>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	4a56      	ldr	r2, [pc, #344]	; (8002efc <HAL_GPIO_Init+0x2e8>)
 8002da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da8:	6453      	str	r3, [r2, #68]	; 0x44
 8002daa:	4b54      	ldr	r3, [pc, #336]	; (8002efc <HAL_GPIO_Init+0x2e8>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db6:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <HAL_GPIO_Init+0x2ec>)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	220f      	movs	r2, #15
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a49      	ldr	r2, [pc, #292]	; (8002f04 <HAL_GPIO_Init+0x2f0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d019      	beq.n	8002e16 <HAL_GPIO_Init+0x202>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a48      	ldr	r2, [pc, #288]	; (8002f08 <HAL_GPIO_Init+0x2f4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_GPIO_Init+0x1fe>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a47      	ldr	r2, [pc, #284]	; (8002f0c <HAL_GPIO_Init+0x2f8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00d      	beq.n	8002e0e <HAL_GPIO_Init+0x1fa>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a46      	ldr	r2, [pc, #280]	; (8002f10 <HAL_GPIO_Init+0x2fc>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d007      	beq.n	8002e0a <HAL_GPIO_Init+0x1f6>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a45      	ldr	r2, [pc, #276]	; (8002f14 <HAL_GPIO_Init+0x300>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d101      	bne.n	8002e06 <HAL_GPIO_Init+0x1f2>
 8002e02:	2304      	movs	r3, #4
 8002e04:	e008      	b.n	8002e18 <HAL_GPIO_Init+0x204>
 8002e06:	2307      	movs	r3, #7
 8002e08:	e006      	b.n	8002e18 <HAL_GPIO_Init+0x204>
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e004      	b.n	8002e18 <HAL_GPIO_Init+0x204>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e002      	b.n	8002e18 <HAL_GPIO_Init+0x204>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_GPIO_Init+0x204>
 8002e16:	2300      	movs	r3, #0
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	f002 0203 	and.w	r2, r2, #3
 8002e1e:	0092      	lsls	r2, r2, #2
 8002e20:	4093      	lsls	r3, r2
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e28:	4935      	ldr	r1, [pc, #212]	; (8002f00 <HAL_GPIO_Init+0x2ec>)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	089b      	lsrs	r3, r3, #2
 8002e2e:	3302      	adds	r3, #2
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e36:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e5a:	4a2f      	ldr	r2, [pc, #188]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e60:	4b2d      	ldr	r3, [pc, #180]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e84:	4a24      	ldr	r2, [pc, #144]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e8a:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eae:	4a1a      	ldr	r2, [pc, #104]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eb4:	4b18      	ldr	r3, [pc, #96]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ed8:	4a0f      	ldr	r2, [pc, #60]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b0f      	cmp	r3, #15
 8002ee8:	f67f aea2 	bls.w	8002c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3724      	adds	r7, #36	; 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40013800 	.word	0x40013800
 8002f04:	40020000 	.word	0x40020000
 8002f08:	40020400 	.word	0x40020400
 8002f0c:	40020800 	.word	0x40020800
 8002f10:	40020c00 	.word	0x40020c00
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40013c00 	.word	0x40013c00

08002f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f2c:	787b      	ldrb	r3, [r7, #1]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f38:	e003      	b.n	8002f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	041a      	lsls	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	619a      	str	r2, [r3, #24]
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e267      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d075      	beq.n	800305a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f6e:	4b88      	ldr	r3, [pc, #544]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d00c      	beq.n	8002f94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7a:	4b85      	ldr	r3, [pc, #532]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d112      	bne.n	8002fac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f86:	4b82      	ldr	r3, [pc, #520]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f92:	d10b      	bne.n	8002fac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	4b7e      	ldr	r3, [pc, #504]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d05b      	beq.n	8003058 <HAL_RCC_OscConfig+0x108>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d157      	bne.n	8003058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e242      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x74>
 8002fb6:	4b76      	ldr	r3, [pc, #472]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a75      	ldr	r2, [pc, #468]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e01d      	b.n	8003000 <HAL_RCC_OscConfig+0xb0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x98>
 8002fce:	4b70      	ldr	r3, [pc, #448]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a6f      	ldr	r2, [pc, #444]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b6d      	ldr	r3, [pc, #436]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a6c      	ldr	r2, [pc, #432]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0xb0>
 8002fe8:	4b69      	ldr	r3, [pc, #420]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a68      	ldr	r2, [pc, #416]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b66      	ldr	r3, [pc, #408]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a65      	ldr	r2, [pc, #404]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe fd2e 	bl	8001a68 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fd2a 	bl	8001a68 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e207      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b5b      	ldr	r3, [pc, #364]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0xc0>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fe fd1a 	bl	8001a68 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe fd16 	bl	8001a68 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e1f3      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	4b51      	ldr	r3, [pc, #324]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0xe8>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d063      	beq.n	800312e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003066:	4b4a      	ldr	r3, [pc, #296]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800307a:	2b08      	cmp	r3, #8
 800307c:	d11c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307e:	4b44      	ldr	r3, [pc, #272]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d116      	bne.n	80030b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	4b41      	ldr	r3, [pc, #260]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_RCC_OscConfig+0x152>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e1c7      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a2:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4937      	ldr	r1, [pc, #220]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	e03a      	b.n	800312e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c0:	4b34      	ldr	r3, [pc, #208]	; (8003194 <HAL_RCC_OscConfig+0x244>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7fe fccf 	bl	8001a68 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ce:	f7fe fccb 	bl	8001a68 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e1a8      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ec:	4b28      	ldr	r3, [pc, #160]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4925      	ldr	r1, [pc, #148]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
 8003100:	e015      	b.n	800312e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003102:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_RCC_OscConfig+0x244>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fe fcae 	bl	8001a68 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003110:	f7fe fcaa 	bl	8001a68 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e187      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003122:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d036      	beq.n	80031a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d016      	beq.n	8003170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <HAL_RCC_OscConfig+0x248>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe fc8e 	bl	8001a68 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003150:	f7fe fc8a 	bl	8001a68 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e167      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8003164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x200>
 800316e:	e01b      	b.n	80031a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCC_OscConfig+0x248>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7fe fc77 	bl	8001a68 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317c:	e00e      	b.n	800319c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317e:	f7fe fc73 	bl	8001a68 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d907      	bls.n	800319c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e150      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
 8003190:	40023800 	.word	0x40023800
 8003194:	42470000 	.word	0x42470000
 8003198:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319c:	4b88      	ldr	r3, [pc, #544]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800319e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ea      	bne.n	800317e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8097 	beq.w	80032e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ba:	4b81      	ldr	r3, [pc, #516]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10f      	bne.n	80031e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	4b7d      	ldr	r3, [pc, #500]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	4a7c      	ldr	r2, [pc, #496]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6413      	str	r3, [r2, #64]	; 0x40
 80031d6:	4b7a      	ldr	r3, [pc, #488]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e2:	2301      	movs	r3, #1
 80031e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e6:	4b77      	ldr	r3, [pc, #476]	; (80033c4 <HAL_RCC_OscConfig+0x474>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d118      	bne.n	8003224 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f2:	4b74      	ldr	r3, [pc, #464]	; (80033c4 <HAL_RCC_OscConfig+0x474>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a73      	ldr	r2, [pc, #460]	; (80033c4 <HAL_RCC_OscConfig+0x474>)
 80031f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fe:	f7fe fc33 	bl	8001a68 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003206:	f7fe fc2f 	bl	8001a68 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e10c      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003218:	4b6a      	ldr	r3, [pc, #424]	; (80033c4 <HAL_RCC_OscConfig+0x474>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x2ea>
 800322c:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	4a63      	ldr	r2, [pc, #396]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	6713      	str	r3, [r2, #112]	; 0x70
 8003238:	e01c      	b.n	8003274 <HAL_RCC_OscConfig+0x324>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b05      	cmp	r3, #5
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0x30c>
 8003242:	4b5f      	ldr	r3, [pc, #380]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	4a5e      	ldr	r2, [pc, #376]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	6713      	str	r3, [r2, #112]	; 0x70
 800324e:	4b5c      	ldr	r3, [pc, #368]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	4a5b      	ldr	r2, [pc, #364]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6713      	str	r3, [r2, #112]	; 0x70
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0x324>
 800325c:	4b58      	ldr	r3, [pc, #352]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	4a57      	ldr	r2, [pc, #348]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	6713      	str	r3, [r2, #112]	; 0x70
 8003268:	4b55      	ldr	r3, [pc, #340]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	4a54      	ldr	r2, [pc, #336]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800326e:	f023 0304 	bic.w	r3, r3, #4
 8003272:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d015      	beq.n	80032a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fe fbf4 	bl	8001a68 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003282:	e00a      	b.n	800329a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003284:	f7fe fbf0 	bl	8001a68 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e0cb      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329a:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0ee      	beq.n	8003284 <HAL_RCC_OscConfig+0x334>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a8:	f7fe fbde 	bl	8001a68 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ae:	e00a      	b.n	80032c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b0:	f7fe fbda 	bl	8001a68 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80032be:	4293      	cmp	r3, r2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e0b5      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c6:	4b3e      	ldr	r3, [pc, #248]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1ee      	bne.n	80032b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d8:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	4a38      	ldr	r2, [pc, #224]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80032de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80a1 	beq.w	8003430 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ee:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d05c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d141      	bne.n	8003386 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003302:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <HAL_RCC_OscConfig+0x478>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe fbae 	bl	8001a68 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe fbaa 	bl	8001a68 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e087      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69da      	ldr	r2, [r3, #28]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	019b      	lsls	r3, r3, #6
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	3b01      	subs	r3, #1
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	491b      	ldr	r1, [pc, #108]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x478>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fe fb83 	bl	8001a68 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003366:	f7fe fb7f 	bl	8001a68 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e05c      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x416>
 8003384:	e054      	b.n	8003430 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_RCC_OscConfig+0x478>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fe fb6c 	bl	8001a68 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003394:	f7fe fb68 	bl	8001a68 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e045      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x444>
 80033b2:	e03d      	b.n	8003430 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e038      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40007000 	.word	0x40007000
 80033c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033cc:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_RCC_OscConfig+0x4ec>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d028      	beq.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d121      	bne.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d11a      	bne.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033fc:	4013      	ands	r3, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003404:	4293      	cmp	r3, r2
 8003406:	d111      	bne.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	3b01      	subs	r3, #1
 8003416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d107      	bne.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800

08003440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0cc      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003454:	4b68      	ldr	r3, [pc, #416]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d90c      	bls.n	800347c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b65      	ldr	r3, [pc, #404]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0b8      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d020      	beq.n	80034ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003494:	4b59      	ldr	r3, [pc, #356]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a58      	ldr	r2, [pc, #352]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800349e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034ac:	4b53      	ldr	r3, [pc, #332]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4a52      	ldr	r2, [pc, #328]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b8:	4b50      	ldr	r3, [pc, #320]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	494d      	ldr	r1, [pc, #308]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d044      	beq.n	8003560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	4b47      	ldr	r3, [pc, #284]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d119      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e07f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d003      	beq.n	80034fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d107      	bne.n	800350e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fe:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e06f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e067      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351e:	4b37      	ldr	r3, [pc, #220]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f023 0203 	bic.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4934      	ldr	r1, [pc, #208]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	4313      	orrs	r3, r2
 800352e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003530:	f7fe fa9a 	bl	8001a68 <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	e00a      	b.n	800354e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003538:	f7fe fa96 	bl	8001a68 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e04f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 020c 	and.w	r2, r3, #12
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	429a      	cmp	r2, r3
 800355e:	d1eb      	bne.n	8003538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003560:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d20c      	bcs.n	8003588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e032      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4916      	ldr	r1, [pc, #88]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	490e      	ldr	r1, [pc, #56]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035c6:	f000 f821 	bl	800360c <HAL_RCC_GetSysClockFreq>
 80035ca:	4602      	mov	r2, r0
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	490a      	ldr	r1, [pc, #40]	; (8003600 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	5ccb      	ldrb	r3, [r1, r3]
 80035da:	fa22 f303 	lsr.w	r3, r2, r3
 80035de:	4a09      	ldr	r2, [pc, #36]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_RCC_ClockConfig+0x1c8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe f9fa 	bl	80019e0 <HAL_InitTick>

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023c00 	.word	0x40023c00
 80035fc:	40023800 	.word	0x40023800
 8003600:	08006434 	.word	0x08006434
 8003604:	20000008 	.word	0x20000008
 8003608:	2000000c 	.word	0x2000000c

0800360c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800360c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003610:	b090      	sub	sp, #64	; 0x40
 8003612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	637b      	str	r3, [r7, #52]	; 0x34
 8003618:	2300      	movs	r3, #0
 800361a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800361c:	2300      	movs	r3, #0
 800361e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003624:	4b59      	ldr	r3, [pc, #356]	; (800378c <HAL_RCC_GetSysClockFreq+0x180>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b08      	cmp	r3, #8
 800362e:	d00d      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x40>
 8003630:	2b08      	cmp	r3, #8
 8003632:	f200 80a1 	bhi.w	8003778 <HAL_RCC_GetSysClockFreq+0x16c>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x34>
 800363a:	2b04      	cmp	r3, #4
 800363c:	d003      	beq.n	8003646 <HAL_RCC_GetSysClockFreq+0x3a>
 800363e:	e09b      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003640:	4b53      	ldr	r3, [pc, #332]	; (8003790 <HAL_RCC_GetSysClockFreq+0x184>)
 8003642:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003644:	e09b      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003646:	4b53      	ldr	r3, [pc, #332]	; (8003794 <HAL_RCC_GetSysClockFreq+0x188>)
 8003648:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800364a:	e098      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800364c:	4b4f      	ldr	r3, [pc, #316]	; (800378c <HAL_RCC_GetSysClockFreq+0x180>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003656:	4b4d      	ldr	r3, [pc, #308]	; (800378c <HAL_RCC_GetSysClockFreq+0x180>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d028      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003662:	4b4a      	ldr	r3, [pc, #296]	; (800378c <HAL_RCC_GetSysClockFreq+0x180>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	099b      	lsrs	r3, r3, #6
 8003668:	2200      	movs	r2, #0
 800366a:	623b      	str	r3, [r7, #32]
 800366c:	627a      	str	r2, [r7, #36]	; 0x24
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003674:	2100      	movs	r1, #0
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCC_GetSysClockFreq+0x188>)
 8003678:	fb03 f201 	mul.w	r2, r3, r1
 800367c:	2300      	movs	r3, #0
 800367e:	fb00 f303 	mul.w	r3, r0, r3
 8003682:	4413      	add	r3, r2
 8003684:	4a43      	ldr	r2, [pc, #268]	; (8003794 <HAL_RCC_GetSysClockFreq+0x188>)
 8003686:	fba0 1202 	umull	r1, r2, r0, r2
 800368a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800368c:	460a      	mov	r2, r1
 800368e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003692:	4413      	add	r3, r2
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003698:	2200      	movs	r2, #0
 800369a:	61bb      	str	r3, [r7, #24]
 800369c:	61fa      	str	r2, [r7, #28]
 800369e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036a6:	f7fc fdf7 	bl	8000298 <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4613      	mov	r3, r2
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b2:	e053      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b4:	4b35      	ldr	r3, [pc, #212]	; (800378c <HAL_RCC_GetSysClockFreq+0x180>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	099b      	lsrs	r3, r3, #6
 80036ba:	2200      	movs	r2, #0
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	617a      	str	r2, [r7, #20]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036c6:	f04f 0b00 	mov.w	fp, #0
 80036ca:	4652      	mov	r2, sl
 80036cc:	465b      	mov	r3, fp
 80036ce:	f04f 0000 	mov.w	r0, #0
 80036d2:	f04f 0100 	mov.w	r1, #0
 80036d6:	0159      	lsls	r1, r3, #5
 80036d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036dc:	0150      	lsls	r0, r2, #5
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	ebb2 080a 	subs.w	r8, r2, sl
 80036e6:	eb63 090b 	sbc.w	r9, r3, fp
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036fe:	ebb2 0408 	subs.w	r4, r2, r8
 8003702:	eb63 0509 	sbc.w	r5, r3, r9
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	00eb      	lsls	r3, r5, #3
 8003710:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003714:	00e2      	lsls	r2, r4, #3
 8003716:	4614      	mov	r4, r2
 8003718:	461d      	mov	r5, r3
 800371a:	eb14 030a 	adds.w	r3, r4, sl
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	eb45 030b 	adc.w	r3, r5, fp
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003732:	4629      	mov	r1, r5
 8003734:	028b      	lsls	r3, r1, #10
 8003736:	4621      	mov	r1, r4
 8003738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800373c:	4621      	mov	r1, r4
 800373e:	028a      	lsls	r2, r1, #10
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	2200      	movs	r2, #0
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	60fa      	str	r2, [r7, #12]
 800374c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003750:	f7fc fda2 	bl	8000298 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4613      	mov	r3, r2
 800375a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_GetSysClockFreq+0x180>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	3301      	adds	r3, #1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800376c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003776:	e002      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_RCC_GetSysClockFreq+0x184>)
 800377a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800377c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003780:	4618      	mov	r0, r3
 8003782:	3740      	adds	r7, #64	; 0x40
 8003784:	46bd      	mov	sp, r7
 8003786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800
 8003790:	00f42400 	.word	0x00f42400
 8003794:	017d7840 	.word	0x017d7840

08003798 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e07b      	b.n	80038a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d108      	bne.n	80037c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ba:	d009      	beq.n	80037d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	61da      	str	r2, [r3, #28]
 80037c2:	e005      	b.n	80037d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd ff08 	bl	8001600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003806:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	ea42 0103 	orr.w	r1, r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	f003 0104 	and.w	r1, r3, #4
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f003 0210 	and.w	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003890:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b088      	sub	sp, #32
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	4613      	mov	r3, r2
 80038b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_SPI_Transmit+0x22>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e12d      	b.n	8003b28 <HAL_SPI_Transmit+0x27e>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038d4:	f7fe f8c8 	bl	8001a68 <HAL_GetTick>
 80038d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d002      	beq.n	80038f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
 80038ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038ee:	e116      	b.n	8003b1e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_SPI_Transmit+0x52>
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003900:	e10d      	b.n	8003b1e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2203      	movs	r2, #3
 8003906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	88fa      	ldrh	r2, [r7, #6]
 800391a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003948:	d10f      	bne.n	800396a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003958:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003968:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b40      	cmp	r3, #64	; 0x40
 8003976:	d007      	beq.n	8003988 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003986:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003990:	d14f      	bne.n	8003a32 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_SPI_Transmit+0xf6>
 800399a:	8afb      	ldrh	r3, [r7, #22]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d142      	bne.n	8003a26 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	881a      	ldrh	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	1c9a      	adds	r2, r3, #2
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039c4:	e02f      	b.n	8003a26 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d112      	bne.n	80039fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	881a      	ldrh	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	1c9a      	adds	r2, r3, #2
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80039f8:	e015      	b.n	8003a26 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039fa:	f7fe f835 	bl	8001a68 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d803      	bhi.n	8003a12 <HAL_SPI_Transmit+0x168>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d102      	bne.n	8003a18 <HAL_SPI_Transmit+0x16e>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003a24:	e07b      	b.n	8003b1e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ca      	bne.n	80039c6 <HAL_SPI_Transmit+0x11c>
 8003a30:	e050      	b.n	8003ad4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_SPI_Transmit+0x196>
 8003a3a:	8afb      	ldrh	r3, [r7, #22]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d144      	bne.n	8003aca <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	7812      	ldrb	r2, [r2, #0]
 8003a4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a66:	e030      	b.n	8003aca <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d113      	bne.n	8003a9e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a9c:	e015      	b.n	8003aca <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a9e:	f7fd ffe3 	bl	8001a68 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d803      	bhi.n	8003ab6 <HAL_SPI_Transmit+0x20c>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d102      	bne.n	8003abc <HAL_SPI_Transmit+0x212>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d106      	bne.n	8003aca <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ac8:	e029      	b.n	8003b1e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1c9      	bne.n	8003a68 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	6839      	ldr	r1, [r7, #0]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fb01 	bl	80040e0 <SPI_EndRxTxTransaction>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e003      	b.n	8003b1e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b26:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_SPI_Transmit_DMA+0x20>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e097      	b.n	8003c80 <HAL_SPI_Transmit_DMA+0x150>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d002      	beq.n	8003b6a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
 8003b66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b68:	e085      	b.n	8003c76 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_SPI_Transmit_DMA+0x46>
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b7a:	e07c      	b.n	8003c76 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	88fa      	ldrh	r2, [r7, #6]
 8003b94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	88fa      	ldrh	r2, [r7, #6]
 8003b9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc2:	d10f      	bne.n	8003be4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be8:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <HAL_SPI_Transmit_DMA+0x158>)
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf0:	4a26      	ldr	r2, [pc, #152]	; (8003c8c <HAL_SPI_Transmit_DMA+0x15c>)
 8003bf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf8:	4a25      	ldr	r2, [pc, #148]	; (8003c90 <HAL_SPI_Transmit_DMA+0x160>)
 8003bfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c00:	2200      	movs	r2, #0
 8003c02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c1c:	f7fe fd16 	bl	800264c <HAL_DMA_Start_IT>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2a:	f043 0210 	orr.w	r2, r3, #16
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003c36:	e01e      	b.n	8003c76 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d007      	beq.n	8003c56 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c54:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0220 	orr.w	r2, r2, #32
 8003c64:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0202 	orr.w	r2, r2, #2
 8003c74:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	08003f4d 	.word	0x08003f4d
 8003c8c:	08003ea5 	.word	0x08003ea5
 8003c90:	08003f69 	.word	0x08003f69

08003c94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10e      	bne.n	8003cd4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d009      	beq.n	8003cd4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	4798      	blx	r3
    return;
 8003cd2:	e0ce      	b.n	8003e72 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_SPI_IRQHandler+0x5e>
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
    return;
 8003cf0:	e0bf      	b.n	8003e72 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <HAL_SPI_IRQHandler+0x7e>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d105      	bne.n	8003d12 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80b0 	beq.w	8003e72 <HAL_SPI_IRQHandler+0x1de>
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80aa 	beq.w	8003e72 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d023      	beq.n	8003d70 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d011      	beq.n	8003d58 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f043 0204 	orr.w	r2, r3, #4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	e00b      	b.n	8003d70 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]
        return;
 8003d6e:	e080      	b.n	8003e72 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d014      	beq.n	8003da4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	f043 0201 	orr.w	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00c      	beq.n	8003dc8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db2:	f043 0208 	orr.w	r2, r3, #8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d04f      	beq.n	8003e70 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dde:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d104      	bne.n	8003dfc <HAL_SPI_IRQHandler+0x168>
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d034      	beq.n	8003e66 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0203 	bic.w	r2, r2, #3
 8003e0a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d011      	beq.n	8003e38 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e18:	4a17      	ldr	r2, [pc, #92]	; (8003e78 <HAL_SPI_IRQHandler+0x1e4>)
 8003e1a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe fc6b 	bl	80026fc <HAL_DMA_Abort_IT>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d016      	beq.n	8003e6e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e44:	4a0c      	ldr	r2, [pc, #48]	; (8003e78 <HAL_SPI_IRQHandler+0x1e4>)
 8003e46:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe fc55 	bl	80026fc <HAL_DMA_Abort_IT>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003e64:	e003      	b.n	8003e6e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f812 	bl	8003e90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e6c:	e000      	b.n	8003e70 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003e6e:	bf00      	nop
    return;
 8003e70:	bf00      	nop
  }
}
 8003e72:	3720      	adds	r7, #32
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	08003fa9 	.word	0x08003fa9

08003e7c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eb2:	f7fd fdd9 	bl	8001a68 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec6:	d03b      	beq.n	8003f40 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0220 	bic.w	r2, r2, #32
 8003ed6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0202 	bic.w	r2, r2, #2
 8003ee6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	2164      	movs	r1, #100	; 0x64
 8003eec:	6978      	ldr	r0, [r7, #20]
 8003eee:	f000 f8f7 	bl	80040e0 <SPI_EndRxTxTransaction>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efc:	f043 0220 	orr.w	r2, r3, #32
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2200      	movs	r2, #0
 8003f26:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003f38:	6978      	ldr	r0, [r7, #20]
 8003f3a:	f7ff ffa9 	bl	8003e90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003f3e:	e002      	b.n	8003f46 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003f40:	6978      	ldr	r0, [r7, #20]
 8003f42:	f7fc fbc5 	bl	80006d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff ff8e 	bl	8003e7c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f60:	bf00      	nop
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0203 	bic.w	r2, r2, #3
 8003f84:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f043 0210 	orr.w	r2, r3, #16
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff ff78 	bl	8003e90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff ff64 	bl	8003e90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fe0:	f7fd fd42 	bl	8001a68 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	4413      	add	r3, r2
 8003fee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ff0:	f7fd fd3a 	bl	8001a68 <HAL_GetTick>
 8003ff4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ff6:	4b39      	ldr	r3, [pc, #228]	; (80040dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	015b      	lsls	r3, r3, #5
 8003ffc:	0d1b      	lsrs	r3, r3, #20
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004006:	e054      	b.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d050      	beq.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004010:	f7fd fd2a 	bl	8001a68 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	429a      	cmp	r2, r3
 800401e:	d902      	bls.n	8004026 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d13d      	bne.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403e:	d111      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004048:	d004      	beq.n	8004054 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004052:	d107      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406c:	d10f      	bne.n	800408e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800408c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e017      	b.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	429a      	cmp	r2, r3
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d19b      	bne.n	8004008 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000008 	.word	0x20000008

080040e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2201      	movs	r2, #1
 80040f4:	2102      	movs	r1, #2
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff ff6a 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e032      	b.n	8004178 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004112:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <SPI_EndRxTxTransaction+0xa0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <SPI_EndRxTxTransaction+0xa4>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	0d5b      	lsrs	r3, r3, #21
 800411e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004130:	d112      	bne.n	8004158 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2200      	movs	r2, #0
 800413a:	2180      	movs	r1, #128	; 0x80
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f7ff ff47 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d016      	beq.n	8004176 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e00f      	b.n	8004178 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	3b01      	subs	r3, #1
 8004162:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d0f2      	beq.n	8004158 <SPI_EndRxTxTransaction+0x78>
 8004172:	e000      	b.n	8004176 <SPI_EndRxTxTransaction+0x96>
        break;
 8004174:	bf00      	nop
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000008 	.word	0x20000008
 8004184:	165e9f81 	.word	0x165e9f81

08004188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e041      	b.n	800421e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fd faa8 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f000 fd70 	bl	8004cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d001      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e044      	b.n	80042ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d018      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426a:	d013      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1a      	ldr	r2, [pc, #104]	; (80042dc <HAL_TIM_Base_Start_IT+0xb4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00e      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d009      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a17      	ldr	r2, [pc, #92]	; (80042e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x6c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d111      	bne.n	80042b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d010      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	e007      	b.n	80042c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40014000 	.word	0x40014000

080042ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e041      	b.n	8004382 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f839 	bl	800438a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 fcbe 	bl	8004cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
	...

080043a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d109      	bne.n	80043c4 <HAL_TIM_PWM_Start+0x24>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	bf14      	ite	ne
 80043bc:	2301      	movne	r3, #1
 80043be:	2300      	moveq	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	e022      	b.n	800440a <HAL_TIM_PWM_Start+0x6a>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d109      	bne.n	80043de <HAL_TIM_PWM_Start+0x3e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	e015      	b.n	800440a <HAL_TIM_PWM_Start+0x6a>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d109      	bne.n	80043f8 <HAL_TIM_PWM_Start+0x58>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	bf14      	ite	ne
 80043f0:	2301      	movne	r3, #1
 80043f2:	2300      	moveq	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	e008      	b.n	800440a <HAL_TIM_PWM_Start+0x6a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	bf14      	ite	ne
 8004404:	2301      	movne	r3, #1
 8004406:	2300      	moveq	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e068      	b.n	80044e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <HAL_TIM_PWM_Start+0x82>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004420:	e013      	b.n	800444a <HAL_TIM_PWM_Start+0xaa>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d104      	bne.n	8004432 <HAL_TIM_PWM_Start+0x92>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004430:	e00b      	b.n	800444a <HAL_TIM_PWM_Start+0xaa>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d104      	bne.n	8004442 <HAL_TIM_PWM_Start+0xa2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004440:	e003      	b.n	800444a <HAL_TIM_PWM_Start+0xaa>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2201      	movs	r2, #1
 8004450:	6839      	ldr	r1, [r7, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fedc 	bl	8005210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a23      	ldr	r2, [pc, #140]	; (80044ec <HAL_TIM_PWM_Start+0x14c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d107      	bne.n	8004472 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004470:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <HAL_TIM_PWM_Start+0x14c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d018      	beq.n	80044ae <HAL_TIM_PWM_Start+0x10e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d013      	beq.n	80044ae <HAL_TIM_PWM_Start+0x10e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <HAL_TIM_PWM_Start+0x150>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00e      	beq.n	80044ae <HAL_TIM_PWM_Start+0x10e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a17      	ldr	r2, [pc, #92]	; (80044f4 <HAL_TIM_PWM_Start+0x154>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d009      	beq.n	80044ae <HAL_TIM_PWM_Start+0x10e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <HAL_TIM_PWM_Start+0x158>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d004      	beq.n	80044ae <HAL_TIM_PWM_Start+0x10e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a14      	ldr	r2, [pc, #80]	; (80044fc <HAL_TIM_PWM_Start+0x15c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d111      	bne.n	80044d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b06      	cmp	r3, #6
 80044be:	d010      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d0:	e007      	b.n	80044e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0201 	orr.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40010000 	.word	0x40010000
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40000800 	.word	0x40000800
 80044f8:	40000c00 	.word	0x40000c00
 80044fc:	40014000 	.word	0x40014000

08004500 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e097      	b.n	8004644 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7fd f927 	bl	800177c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004544:	f023 0307 	bic.w	r3, r3, #7
 8004548:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f000 fba9 	bl	8004cac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004582:	f023 0303 	bic.w	r3, r3, #3
 8004586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	4313      	orrs	r3, r2
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045a0:	f023 030c 	bic.w	r3, r3, #12
 80045a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	4313      	orrs	r3, r2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	011a      	lsls	r2, r3, #4
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	031b      	lsls	r3, r3, #12
 80045d0:	4313      	orrs	r3, r2
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	4313      	orrs	r3, r2
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800465c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004664:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800466c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004674:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d110      	bne.n	800469e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d102      	bne.n	8004688 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004682:	7b7b      	ldrb	r3, [r7, #13]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d001      	beq.n	800468c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e069      	b.n	8004760 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800469c:	e031      	b.n	8004702 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d110      	bne.n	80046c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046a4:	7bbb      	ldrb	r3, [r7, #14]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d102      	bne.n	80046b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046aa:	7b3b      	ldrb	r3, [r7, #12]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d001      	beq.n	80046b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e055      	b.n	8004760 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046c4:	e01d      	b.n	8004702 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d108      	bne.n	80046de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046cc:	7bbb      	ldrb	r3, [r7, #14]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d105      	bne.n	80046de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046d2:	7b7b      	ldrb	r3, [r7, #13]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d102      	bne.n	80046de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046d8:	7b3b      	ldrb	r3, [r7, #12]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d001      	beq.n	80046e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e03e      	b.n	8004760 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2202      	movs	r2, #2
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2202      	movs	r2, #2
 80046ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_TIM_Encoder_Start+0xc4>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b04      	cmp	r3, #4
 800470c:	d008      	beq.n	8004720 <HAL_TIM_Encoder_Start+0xd4>
 800470e:	e00f      	b.n	8004730 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2201      	movs	r2, #1
 8004716:	2100      	movs	r1, #0
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fd79 	bl	8005210 <TIM_CCxChannelCmd>
      break;
 800471e:	e016      	b.n	800474e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2201      	movs	r2, #1
 8004726:	2104      	movs	r1, #4
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fd71 	bl	8005210 <TIM_CCxChannelCmd>
      break;
 800472e:	e00e      	b.n	800474e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2201      	movs	r2, #1
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fd69 	bl	8005210 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2201      	movs	r2, #1
 8004744:	2104      	movs	r1, #4
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fd62 	bl	8005210 <TIM_CCxChannelCmd>
      break;
 800474c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0201 	orr.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d020      	beq.n	80047cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01b      	beq.n	80047cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0202 	mvn.w	r2, #2
 800479c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa5b 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa4d 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fa5e 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d020      	beq.n	8004818 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01b      	beq.n	8004818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0204 	mvn.w	r2, #4
 80047e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fa35 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 8004804:	e005      	b.n	8004812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa27 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fa38 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d020      	beq.n	8004864 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01b      	beq.n	8004864 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0208 	mvn.w	r2, #8
 8004834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2204      	movs	r2, #4
 800483a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa0f 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 8004850:	e005      	b.n	800485e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fa01 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fa12 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b00      	cmp	r3, #0
 800486c:	d020      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01b      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0210 	mvn.w	r2, #16
 8004880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2208      	movs	r2, #8
 8004886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f9e9 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f9db 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f9ec 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0201 	mvn.w	r2, #1
 80048cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fc fa8c 	bl	8000dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00c      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fd7c 	bl	80053f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00c      	beq.n	800491c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f9bd 	bl	8004c96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00c      	beq.n	8004940 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0220 	mvn.w	r2, #32
 8004938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fd4e 	bl	80053dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004962:	2302      	movs	r3, #2
 8004964:	e0ae      	b.n	8004ac4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b0c      	cmp	r3, #12
 8004972:	f200 809f 	bhi.w	8004ab4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004976:	a201      	add	r2, pc, #4	; (adr r2, 800497c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049b1 	.word	0x080049b1
 8004980:	08004ab5 	.word	0x08004ab5
 8004984:	08004ab5 	.word	0x08004ab5
 8004988:	08004ab5 	.word	0x08004ab5
 800498c:	080049f1 	.word	0x080049f1
 8004990:	08004ab5 	.word	0x08004ab5
 8004994:	08004ab5 	.word	0x08004ab5
 8004998:	08004ab5 	.word	0x08004ab5
 800499c:	08004a33 	.word	0x08004a33
 80049a0:	08004ab5 	.word	0x08004ab5
 80049a4:	08004ab5 	.word	0x08004ab5
 80049a8:	08004ab5 	.word	0x08004ab5
 80049ac:	08004a73 	.word	0x08004a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fa04 	bl	8004dc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0208 	orr.w	r2, r2, #8
 80049ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0204 	bic.w	r2, r2, #4
 80049da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6999      	ldr	r1, [r3, #24]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	619a      	str	r2, [r3, #24]
      break;
 80049ee:	e064      	b.n	8004aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fa4a 	bl	8004e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6999      	ldr	r1, [r3, #24]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	021a      	lsls	r2, r3, #8
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	619a      	str	r2, [r3, #24]
      break;
 8004a30:	e043      	b.n	8004aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fa95 	bl	8004f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0208 	orr.w	r2, r2, #8
 8004a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0204 	bic.w	r2, r2, #4
 8004a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69d9      	ldr	r1, [r3, #28]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	61da      	str	r2, [r3, #28]
      break;
 8004a70:	e023      	b.n	8004aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fadf 	bl	800503c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69d9      	ldr	r1, [r3, #28]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	021a      	lsls	r2, r3, #8
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	61da      	str	r2, [r3, #28]
      break;
 8004ab2:	e002      	b.n	8004aba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e0b4      	b.n	8004c52 <HAL_TIM_ConfigClockSource+0x186>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b20:	d03e      	beq.n	8004ba0 <HAL_TIM_ConfigClockSource+0xd4>
 8004b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b26:	f200 8087 	bhi.w	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	f000 8086 	beq.w	8004c3e <HAL_TIM_ConfigClockSource+0x172>
 8004b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b36:	d87f      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b70      	cmp	r3, #112	; 0x70
 8004b3a:	d01a      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0xa6>
 8004b3c:	2b70      	cmp	r3, #112	; 0x70
 8004b3e:	d87b      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b60      	cmp	r3, #96	; 0x60
 8004b42:	d050      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x11a>
 8004b44:	2b60      	cmp	r3, #96	; 0x60
 8004b46:	d877      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b48:	2b50      	cmp	r3, #80	; 0x50
 8004b4a:	d03c      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0xfa>
 8004b4c:	2b50      	cmp	r3, #80	; 0x50
 8004b4e:	d873      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b40      	cmp	r3, #64	; 0x40
 8004b52:	d058      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x13a>
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d86f      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b30      	cmp	r3, #48	; 0x30
 8004b5a:	d064      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15a>
 8004b5c:	2b30      	cmp	r3, #48	; 0x30
 8004b5e:	d86b      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d060      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15a>
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d867      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d05c      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15a>
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d05a      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15a>
 8004b70:	e062      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b82:	f000 fb25 	bl	80051d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	609a      	str	r2, [r3, #8]
      break;
 8004b9e:	e04f      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bb0:	f000 fb0e 	bl	80051d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bc2:	609a      	str	r2, [r3, #8]
      break;
 8004bc4:	e03c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f000 fa82 	bl	80050dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2150      	movs	r1, #80	; 0x50
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fadb 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 8004be4:	e02c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f000 faa1 	bl	800513a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2160      	movs	r1, #96	; 0x60
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 facb 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 8004c04:	e01c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c12:	461a      	mov	r2, r3
 8004c14:	f000 fa62 	bl	80050dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2140      	movs	r1, #64	; 0x40
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fabb 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 8004c24:	e00c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4610      	mov	r0, r2
 8004c32:	f000 fab2 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 8004c36:	e003      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3c:	e000      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3a      	ldr	r2, [pc, #232]	; (8004da8 <TIM_Base_SetConfig+0xfc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_Base_SetConfig+0x38>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cca:	d00b      	beq.n	8004ce4 <TIM_Base_SetConfig+0x38>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a37      	ldr	r2, [pc, #220]	; (8004dac <TIM_Base_SetConfig+0x100>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_Base_SetConfig+0x38>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a36      	ldr	r2, [pc, #216]	; (8004db0 <TIM_Base_SetConfig+0x104>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0x38>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a35      	ldr	r2, [pc, #212]	; (8004db4 <TIM_Base_SetConfig+0x108>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d108      	bne.n	8004cf6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2b      	ldr	r2, [pc, #172]	; (8004da8 <TIM_Base_SetConfig+0xfc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01b      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d04:	d017      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a28      	ldr	r2, [pc, #160]	; (8004dac <TIM_Base_SetConfig+0x100>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <TIM_Base_SetConfig+0x104>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00f      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <TIM_Base_SetConfig+0x108>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00b      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a25      	ldr	r2, [pc, #148]	; (8004db8 <TIM_Base_SetConfig+0x10c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d007      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a24      	ldr	r2, [pc, #144]	; (8004dbc <TIM_Base_SetConfig+0x110>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a23      	ldr	r2, [pc, #140]	; (8004dc0 <TIM_Base_SetConfig+0x114>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d108      	bne.n	8004d48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a0e      	ldr	r2, [pc, #56]	; (8004da8 <TIM_Base_SetConfig+0xfc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d103      	bne.n	8004d7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f023 0201 	bic.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	611a      	str	r2, [r3, #16]
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40010000 	.word	0x40010000
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800
 8004db4:	40000c00 	.word	0x40000c00
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800

08004dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f023 0201 	bic.w	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0303 	bic.w	r3, r3, #3
 8004dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f023 0302 	bic.w	r3, r3, #2
 8004e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <TIM_OC1_SetConfig+0xc8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d10c      	bne.n	8004e3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f023 0308 	bic.w	r3, r3, #8
 8004e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 0304 	bic.w	r3, r3, #4
 8004e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a13      	ldr	r2, [pc, #76]	; (8004e8c <TIM_OC1_SetConfig+0xc8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d111      	bne.n	8004e66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	621a      	str	r2, [r3, #32]
}
 8004e80:	bf00      	nop
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	40010000 	.word	0x40010000

08004e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	f023 0210 	bic.w	r2, r3, #16
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f023 0320 	bic.w	r3, r3, #32
 8004eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <TIM_OC2_SetConfig+0xd4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d10d      	bne.n	8004f0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a15      	ldr	r2, [pc, #84]	; (8004f64 <TIM_OC2_SetConfig+0xd4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d113      	bne.n	8004f3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000

08004f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <TIM_OC3_SetConfig+0xd0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d10d      	bne.n	8004fe2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a14      	ldr	r2, [pc, #80]	; (8005038 <TIM_OC3_SetConfig+0xd0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d113      	bne.n	8005012 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	621a      	str	r2, [r3, #32]
}
 800502c:	bf00      	nop
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40010000 	.word	0x40010000

0800503c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	031b      	lsls	r3, r3, #12
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a10      	ldr	r2, [pc, #64]	; (80050d8 <TIM_OC4_SetConfig+0x9c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d109      	bne.n	80050b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	019b      	lsls	r3, r3, #6
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40010000 	.word	0x40010000

080050dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f023 0201 	bic.w	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f023 030a 	bic.w	r3, r3, #10
 8005118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800513a:	b480      	push	{r7}
 800513c:	b087      	sub	sp, #28
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f023 0210 	bic.w	r2, r3, #16
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	031b      	lsls	r3, r3, #12
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005176:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f043 0307 	orr.w	r3, r3, #7
 80051bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	609a      	str	r2, [r3, #8]
}
 80051c4:	bf00      	nop
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	021a      	lsls	r2, r3, #8
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	609a      	str	r2, [r3, #8]
}
 8005204:	bf00      	nop
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	2201      	movs	r2, #1
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a1a      	ldr	r2, [r3, #32]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	43db      	mvns	r3, r3
 8005232:	401a      	ands	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	fa01 f303 	lsl.w	r3, r1, r3
 8005248:	431a      	orrs	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005270:	2302      	movs	r3, #2
 8005272:	e050      	b.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1c      	ldr	r2, [pc, #112]	; (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d018      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c0:	d013      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a18      	ldr	r2, [pc, #96]	; (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00e      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a16      	ldr	r2, [pc, #88]	; (800532c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d009      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a15      	ldr	r2, [pc, #84]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d004      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a13      	ldr	r2, [pc, #76]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d10c      	bne.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40010000 	.word	0x40010000
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800
 8005330:	40000c00 	.word	0x40000c00
 8005334:	40014000 	.word	0x40014000

08005338 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005350:	2302      	movs	r3, #2
 8005352:	e03d      	b.n	80053d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <arm_rfft_fast_init_f32>:
 8005404:	084b      	lsrs	r3, r1, #1
 8005406:	2b80      	cmp	r3, #128	; 0x80
 8005408:	b410      	push	{r4}
 800540a:	8201      	strh	r1, [r0, #16]
 800540c:	8003      	strh	r3, [r0, #0]
 800540e:	d046      	beq.n	800549e <arm_rfft_fast_init_f32+0x9a>
 8005410:	d916      	bls.n	8005440 <arm_rfft_fast_init_f32+0x3c>
 8005412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005416:	d03c      	beq.n	8005492 <arm_rfft_fast_init_f32+0x8e>
 8005418:	d928      	bls.n	800546c <arm_rfft_fast_init_f32+0x68>
 800541a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541e:	d01f      	beq.n	8005460 <arm_rfft_fast_init_f32+0x5c>
 8005420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005424:	d112      	bne.n	800544c <arm_rfft_fast_init_f32+0x48>
 8005426:	4920      	ldr	r1, [pc, #128]	; (80054a8 <arm_rfft_fast_init_f32+0xa4>)
 8005428:	4a20      	ldr	r2, [pc, #128]	; (80054ac <arm_rfft_fast_init_f32+0xa8>)
 800542a:	4b21      	ldr	r3, [pc, #132]	; (80054b0 <arm_rfft_fast_init_f32+0xac>)
 800542c:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8005430:	8184      	strh	r4, [r0, #12]
 8005432:	6081      	str	r1, [r0, #8]
 8005434:	6042      	str	r2, [r0, #4]
 8005436:	6143      	str	r3, [r0, #20]
 8005438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800543c:	2000      	movs	r0, #0
 800543e:	4770      	bx	lr
 8005440:	2b20      	cmp	r3, #32
 8005442:	d01c      	beq.n	800547e <arm_rfft_fast_init_f32+0x7a>
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d006      	beq.n	8005456 <arm_rfft_fast_init_f32+0x52>
 8005448:	2b10      	cmp	r3, #16
 800544a:	d01d      	beq.n	8005488 <arm_rfft_fast_init_f32+0x84>
 800544c:	f04f 30ff 	mov.w	r0, #4294967295
 8005450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	2438      	movs	r4, #56	; 0x38
 8005458:	4916      	ldr	r1, [pc, #88]	; (80054b4 <arm_rfft_fast_init_f32+0xb0>)
 800545a:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <arm_rfft_fast_init_f32+0xb4>)
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <arm_rfft_fast_init_f32+0xb8>)
 800545e:	e7e7      	b.n	8005430 <arm_rfft_fast_init_f32+0x2c>
 8005460:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8005464:	4916      	ldr	r1, [pc, #88]	; (80054c0 <arm_rfft_fast_init_f32+0xbc>)
 8005466:	4a17      	ldr	r2, [pc, #92]	; (80054c4 <arm_rfft_fast_init_f32+0xc0>)
 8005468:	4b17      	ldr	r3, [pc, #92]	; (80054c8 <arm_rfft_fast_init_f32+0xc4>)
 800546a:	e7e1      	b.n	8005430 <arm_rfft_fast_init_f32+0x2c>
 800546c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005470:	d1ec      	bne.n	800544c <arm_rfft_fast_init_f32+0x48>
 8005472:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8005476:	4915      	ldr	r1, [pc, #84]	; (80054cc <arm_rfft_fast_init_f32+0xc8>)
 8005478:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <arm_rfft_fast_init_f32+0xcc>)
 800547a:	4b16      	ldr	r3, [pc, #88]	; (80054d4 <arm_rfft_fast_init_f32+0xd0>)
 800547c:	e7d8      	b.n	8005430 <arm_rfft_fast_init_f32+0x2c>
 800547e:	2430      	movs	r4, #48	; 0x30
 8005480:	4915      	ldr	r1, [pc, #84]	; (80054d8 <arm_rfft_fast_init_f32+0xd4>)
 8005482:	4a16      	ldr	r2, [pc, #88]	; (80054dc <arm_rfft_fast_init_f32+0xd8>)
 8005484:	4b16      	ldr	r3, [pc, #88]	; (80054e0 <arm_rfft_fast_init_f32+0xdc>)
 8005486:	e7d3      	b.n	8005430 <arm_rfft_fast_init_f32+0x2c>
 8005488:	2414      	movs	r4, #20
 800548a:	4916      	ldr	r1, [pc, #88]	; (80054e4 <arm_rfft_fast_init_f32+0xe0>)
 800548c:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <arm_rfft_fast_init_f32+0xe4>)
 800548e:	4b17      	ldr	r3, [pc, #92]	; (80054ec <arm_rfft_fast_init_f32+0xe8>)
 8005490:	e7ce      	b.n	8005430 <arm_rfft_fast_init_f32+0x2c>
 8005492:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8005496:	4916      	ldr	r1, [pc, #88]	; (80054f0 <arm_rfft_fast_init_f32+0xec>)
 8005498:	4a16      	ldr	r2, [pc, #88]	; (80054f4 <arm_rfft_fast_init_f32+0xf0>)
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <arm_rfft_fast_init_f32+0xf4>)
 800549c:	e7c8      	b.n	8005430 <arm_rfft_fast_init_f32+0x2c>
 800549e:	24d0      	movs	r4, #208	; 0xd0
 80054a0:	4916      	ldr	r1, [pc, #88]	; (80054fc <arm_rfft_fast_init_f32+0xf8>)
 80054a2:	4a17      	ldr	r2, [pc, #92]	; (8005500 <arm_rfft_fast_init_f32+0xfc>)
 80054a4:	4b17      	ldr	r3, [pc, #92]	; (8005504 <arm_rfft_fast_init_f32+0x100>)
 80054a6:	e7c3      	b.n	8005430 <arm_rfft_fast_init_f32+0x2c>
 80054a8:	08015254 	.word	0x08015254
 80054ac:	0800644c 	.word	0x0800644c
 80054b0:	0800c5bc 	.word	0x0800c5bc
 80054b4:	0800a54c 	.word	0x0800a54c
 80054b8:	08017014 	.word	0x08017014
 80054bc:	08019504 	.word	0x08019504
 80054c0:	08012f3c 	.word	0x08012f3c
 80054c4:	08010e3c 	.word	0x08010e3c
 80054c8:	0800a5bc 	.word	0x0800a5bc
 80054cc:	08019194 	.word	0x08019194
 80054d0:	080105bc 	.word	0x080105bc
 80054d4:	08017214 	.word	0x08017214
 80054d8:	08013df4 	.word	0x08013df4
 80054dc:	08012e3c 	.word	0x08012e3c
 80054e0:	0800a44c 	.word	0x0800a44c
 80054e4:	08013d4c 	.word	0x08013d4c
 80054e8:	08010dbc 	.word	0x08010dbc
 80054ec:	08013d74 	.word	0x08013d74
 80054f0:	08017a14 	.word	0x08017a14
 80054f4:	08014254 	.word	0x08014254
 80054f8:	08017d94 	.word	0x08017d94
 80054fc:	08019704 	.word	0x08019704
 8005500:	08013e54 	.word	0x08013e54
 8005504:	08018d94 	.word	0x08018d94

08005508 <arm_rfft_fast_f32>:
 8005508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550c:	8a06      	ldrh	r6, [r0, #16]
 800550e:	0876      	lsrs	r6, r6, #1
 8005510:	4607      	mov	r7, r0
 8005512:	4615      	mov	r5, r2
 8005514:	8006      	strh	r6, [r0, #0]
 8005516:	460c      	mov	r4, r1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d15c      	bne.n	80055d6 <arm_rfft_fast_f32+0xce>
 800551c:	461a      	mov	r2, r3
 800551e:	2301      	movs	r3, #1
 8005520:	f000 fbe4 	bl	8005cec <arm_cfft_f32>
 8005524:	edd4 7a00 	vldr	s15, [r4]
 8005528:	ed94 7a01 	vldr	s14, [r4, #4]
 800552c:	883e      	ldrh	r6, [r7, #0]
 800552e:	6978      	ldr	r0, [r7, #20]
 8005530:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005534:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005538:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 800553c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005540:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005544:	3e01      	subs	r6, #1
 8005546:	ee26 7a83 	vmul.f32	s14, s13, s6
 800554a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800554e:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8005552:	ed85 7a00 	vstr	s14, [r5]
 8005556:	edc5 7a01 	vstr	s15, [r5, #4]
 800555a:	3010      	adds	r0, #16
 800555c:	f105 0210 	add.w	r2, r5, #16
 8005560:	3b08      	subs	r3, #8
 8005562:	f104 0110 	add.w	r1, r4, #16
 8005566:	ed93 7a02 	vldr	s14, [r3, #8]
 800556a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800556e:	ed10 6a02 	vldr	s12, [r0, #-8]
 8005572:	edd3 3a03 	vldr	s7, [r3, #12]
 8005576:	ed11 5a01 	vldr	s10, [r1, #-4]
 800557a:	ed50 5a01 	vldr	s11, [r0, #-4]
 800557e:	ee77 7a66 	vsub.f32	s15, s14, s13
 8005582:	ee77 4a26 	vadd.f32	s9, s14, s13
 8005586:	ee33 4a85 	vadd.f32	s8, s7, s10
 800558a:	ee66 6a27 	vmul.f32	s13, s12, s15
 800558e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005592:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005596:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800559a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800559e:	ee26 6a04 	vmul.f32	s12, s12, s8
 80055a2:	ee65 5a84 	vmul.f32	s11, s11, s8
 80055a6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80055aa:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80055ae:	ee67 7a83 	vmul.f32	s15, s15, s6
 80055b2:	ee27 7a03 	vmul.f32	s14, s14, s6
 80055b6:	3e01      	subs	r6, #1
 80055b8:	ed02 7a02 	vstr	s14, [r2, #-8]
 80055bc:	ed42 7a01 	vstr	s15, [r2, #-4]
 80055c0:	f1a3 0308 	sub.w	r3, r3, #8
 80055c4:	f101 0108 	add.w	r1, r1, #8
 80055c8:	f100 0008 	add.w	r0, r0, #8
 80055cc:	f102 0208 	add.w	r2, r2, #8
 80055d0:	d1c9      	bne.n	8005566 <arm_rfft_fast_f32+0x5e>
 80055d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d6:	edd1 7a00 	vldr	s15, [r1]
 80055da:	edd1 6a01 	vldr	s13, [r1, #4]
 80055de:	6941      	ldr	r1, [r0, #20]
 80055e0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80055e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055e8:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80055ec:	ee27 7a23 	vmul.f32	s14, s14, s7
 80055f0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80055f4:	3e01      	subs	r6, #1
 80055f6:	ed82 7a00 	vstr	s14, [r2]
 80055fa:	edc2 7a01 	vstr	s15, [r2, #4]
 80055fe:	00f0      	lsls	r0, r6, #3
 8005600:	b3ee      	cbz	r6, 800567e <arm_rfft_fast_f32+0x176>
 8005602:	3808      	subs	r0, #8
 8005604:	f101 0e10 	add.w	lr, r1, #16
 8005608:	4420      	add	r0, r4
 800560a:	f104 0110 	add.w	r1, r4, #16
 800560e:	f102 0c10 	add.w	ip, r2, #16
 8005612:	ed90 7a02 	vldr	s14, [r0, #8]
 8005616:	ed51 6a02 	vldr	s13, [r1, #-8]
 800561a:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800561e:	ed90 4a03 	vldr	s8, [r0, #12]
 8005622:	ed11 5a01 	vldr	s10, [r1, #-4]
 8005626:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800562a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800562e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005632:	ee26 3a27 	vmul.f32	s6, s12, s15
 8005636:	ee77 6a26 	vadd.f32	s13, s14, s13
 800563a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800563e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005642:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005646:	ee77 7a05 	vadd.f32	s15, s14, s10
 800564a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800564e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005652:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005656:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800565a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800565e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005662:	3e01      	subs	r6, #1
 8005664:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8005668:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800566c:	f1a0 0008 	sub.w	r0, r0, #8
 8005670:	f101 0108 	add.w	r1, r1, #8
 8005674:	f10e 0e08 	add.w	lr, lr, #8
 8005678:	f10c 0c08 	add.w	ip, ip, #8
 800567c:	d1c9      	bne.n	8005612 <arm_rfft_fast_f32+0x10a>
 800567e:	461a      	mov	r2, r3
 8005680:	4629      	mov	r1, r5
 8005682:	4638      	mov	r0, r7
 8005684:	2301      	movs	r3, #1
 8005686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800568a:	f000 bb2f 	b.w	8005cec <arm_cfft_f32>
 800568e:	bf00      	nop

08005690 <arm_cfft_radix8by2_f32>:
 8005690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005694:	ed2d 8b08 	vpush	{d8-d11}
 8005698:	4607      	mov	r7, r0
 800569a:	4608      	mov	r0, r1
 800569c:	f8b7 e000 	ldrh.w	lr, [r7]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80056a6:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80056aa:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80056ae:	f000 80b0 	beq.w	8005812 <arm_cfft_radix8by2_f32+0x182>
 80056b2:	008b      	lsls	r3, r1, #2
 80056b4:	3310      	adds	r3, #16
 80056b6:	18c6      	adds	r6, r0, r3
 80056b8:	3210      	adds	r2, #16
 80056ba:	4443      	add	r3, r8
 80056bc:	f100 0510 	add.w	r5, r0, #16
 80056c0:	f108 0410 	add.w	r4, r8, #16
 80056c4:	ed54 1a04 	vldr	s3, [r4, #-16]
 80056c8:	ed54 6a03 	vldr	s13, [r4, #-12]
 80056cc:	ed13 4a04 	vldr	s8, [r3, #-16]
 80056d0:	ed53 3a03 	vldr	s7, [r3, #-12]
 80056d4:	ed53 5a02 	vldr	s11, [r3, #-8]
 80056d8:	ed13 5a01 	vldr	s10, [r3, #-4]
 80056dc:	ed14 0a02 	vldr	s0, [r4, #-8]
 80056e0:	ed54 7a01 	vldr	s15, [r4, #-4]
 80056e4:	ed16 2a04 	vldr	s4, [r6, #-16]
 80056e8:	ed56 2a03 	vldr	s5, [r6, #-12]
 80056ec:	ed15 6a03 	vldr	s12, [r5, #-12]
 80056f0:	ed15 7a01 	vldr	s14, [r5, #-4]
 80056f4:	ed15 3a04 	vldr	s6, [r5, #-16]
 80056f8:	ed56 0a02 	vldr	s1, [r6, #-8]
 80056fc:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005700:	ed55 4a02 	vldr	s9, [r5, #-8]
 8005704:	ee73 ba21 	vadd.f32	s23, s6, s3
 8005708:	ee36 ba26 	vadd.f32	s22, s12, s13
 800570c:	ee37 aa27 	vadd.f32	s20, s14, s15
 8005710:	ee72 9a04 	vadd.f32	s19, s4, s8
 8005714:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8005718:	ee31 8a05 	vadd.f32	s16, s2, s10
 800571c:	ee74 aa80 	vadd.f32	s21, s9, s0
 8005720:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8005724:	ed45 ba04 	vstr	s23, [r5, #-16]
 8005728:	ed05 ba03 	vstr	s22, [r5, #-12]
 800572c:	ed45 aa02 	vstr	s21, [r5, #-8]
 8005730:	ed05 aa01 	vstr	s20, [r5, #-4]
 8005734:	ed06 8a01 	vstr	s16, [r6, #-4]
 8005738:	ed46 9a04 	vstr	s19, [r6, #-16]
 800573c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005740:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005744:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005748:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800574c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005750:	ed52 2a04 	vldr	s5, [r2, #-16]
 8005754:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005758:	ee34 4a42 	vsub.f32	s8, s8, s4
 800575c:	ee26 8a86 	vmul.f32	s16, s13, s12
 8005760:	ee24 2a06 	vmul.f32	s4, s8, s12
 8005764:	ee63 1a22 	vmul.f32	s3, s6, s5
 8005768:	ee24 4a22 	vmul.f32	s8, s8, s5
 800576c:	ee23 3a06 	vmul.f32	s6, s6, s12
 8005770:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8005774:	ee23 6a86 	vmul.f32	s12, s7, s12
 8005778:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800577c:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005780:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005784:	ee72 3a63 	vsub.f32	s7, s4, s7
 8005788:	ee71 2a88 	vadd.f32	s5, s3, s16
 800578c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005790:	ed44 2a04 	vstr	s5, [r4, #-16]
 8005794:	ed43 3a04 	vstr	s7, [r3, #-16]
 8005798:	ed03 6a03 	vstr	s12, [r3, #-12]
 800579c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057a0:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80057a4:	ed12 7a01 	vldr	s14, [r2, #-4]
 80057a8:	ed52 5a02 	vldr	s11, [r2, #-8]
 80057ac:	ee35 6a41 	vsub.f32	s12, s10, s2
 80057b0:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80057b4:	ee67 3a87 	vmul.f32	s7, s15, s14
 80057b8:	ee26 5a87 	vmul.f32	s10, s13, s14
 80057bc:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80057c0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80057c4:	ee64 4a87 	vmul.f32	s9, s9, s14
 80057c8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80057cc:	ee26 7a07 	vmul.f32	s14, s12, s14
 80057d0:	ee26 6a25 	vmul.f32	s12, s12, s11
 80057d4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80057d8:	ee74 5a23 	vadd.f32	s11, s8, s7
 80057dc:	ee35 6a46 	vsub.f32	s12, s10, s12
 80057e0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80057e4:	f1be 0e01 	subs.w	lr, lr, #1
 80057e8:	ed44 5a02 	vstr	s11, [r4, #-8]
 80057ec:	f105 0510 	add.w	r5, r5, #16
 80057f0:	ed44 7a01 	vstr	s15, [r4, #-4]
 80057f4:	f106 0610 	add.w	r6, r6, #16
 80057f8:	ed03 6a02 	vstr	s12, [r3, #-8]
 80057fc:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005800:	f102 0210 	add.w	r2, r2, #16
 8005804:	f104 0410 	add.w	r4, r4, #16
 8005808:	f103 0310 	add.w	r3, r3, #16
 800580c:	f47f af5a 	bne.w	80056c4 <arm_cfft_radix8by2_f32+0x34>
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	b28c      	uxth	r4, r1
 8005814:	4621      	mov	r1, r4
 8005816:	2302      	movs	r3, #2
 8005818:	f000 fae2 	bl	8005de0 <arm_radix8_butterfly_f32>
 800581c:	ecbd 8b08 	vpop	{d8-d11}
 8005820:	4621      	mov	r1, r4
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	4640      	mov	r0, r8
 8005826:	2302      	movs	r3, #2
 8005828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800582c:	f000 bad8 	b.w	8005de0 <arm_radix8_butterfly_f32>

08005830 <arm_cfft_radix8by4_f32>:
 8005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	ed2d 8b0a 	vpush	{d8-d12}
 8005838:	8802      	ldrh	r2, [r0, #0]
 800583a:	ed91 6a00 	vldr	s12, [r1]
 800583e:	b08f      	sub	sp, #60	; 0x3c
 8005840:	460f      	mov	r7, r1
 8005842:	0852      	lsrs	r2, r2, #1
 8005844:	6841      	ldr	r1, [r0, #4]
 8005846:	900c      	str	r0, [sp, #48]	; 0x30
 8005848:	0093      	lsls	r3, r2, #2
 800584a:	4638      	mov	r0, r7
 800584c:	4418      	add	r0, r3
 800584e:	4606      	mov	r6, r0
 8005850:	9009      	str	r0, [sp, #36]	; 0x24
 8005852:	4418      	add	r0, r3
 8005854:	edd0 6a00 	vldr	s13, [r0]
 8005858:	ed96 4a00 	vldr	s8, [r6]
 800585c:	edd6 2a01 	vldr	s5, [r6, #4]
 8005860:	edd0 7a01 	vldr	s15, [r0, #4]
 8005864:	900a      	str	r0, [sp, #40]	; 0x28
 8005866:	ee76 5a26 	vadd.f32	s11, s12, s13
 800586a:	4604      	mov	r4, r0
 800586c:	4625      	mov	r5, r4
 800586e:	441c      	add	r4, r3
 8005870:	edd4 4a00 	vldr	s9, [r4]
 8005874:	ed97 7a01 	vldr	s14, [r7, #4]
 8005878:	ed94 3a01 	vldr	s6, [r4, #4]
 800587c:	9401      	str	r4, [sp, #4]
 800587e:	ee35 5a84 	vadd.f32	s10, s11, s8
 8005882:	4630      	mov	r0, r6
 8005884:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005888:	463e      	mov	r6, r7
 800588a:	ee15 ea10 	vmov	lr, s10
 800588e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005892:	f846 eb08 	str.w	lr, [r6], #8
 8005896:	ee37 6a27 	vadd.f32	s12, s14, s15
 800589a:	ed90 5a01 	vldr	s10, [r0, #4]
 800589e:	9605      	str	r6, [sp, #20]
 80058a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058a4:	9e01      	ldr	r6, [sp, #4]
 80058a6:	9707      	str	r7, [sp, #28]
 80058a8:	ee76 3aa2 	vadd.f32	s7, s13, s5
 80058ac:	ed96 2a01 	vldr	s4, [r6, #4]
 80058b0:	ee36 7a05 	vadd.f32	s14, s12, s10
 80058b4:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80058b8:	ee37 5ac4 	vsub.f32	s10, s15, s8
 80058bc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80058c0:	ee33 4ac3 	vsub.f32	s8, s7, s6
 80058c4:	4604      	mov	r4, r0
 80058c6:	46a3      	mov	fp, r4
 80058c8:	ee37 7a02 	vadd.f32	s14, s14, s4
 80058cc:	ee35 5a24 	vadd.f32	s10, s10, s9
 80058d0:	ee14 8a10 	vmov	r8, s8
 80058d4:	46a4      	mov	ip, r4
 80058d6:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80058da:	ed87 7a01 	vstr	s14, [r7, #4]
 80058de:	f84b 8b08 	str.w	r8, [fp], #8
 80058e2:	f1ac 0704 	sub.w	r7, ip, #4
 80058e6:	ed8c 5a01 	vstr	s10, [ip, #4]
 80058ea:	f101 0c08 	add.w	ip, r1, #8
 80058ee:	462c      	mov	r4, r5
 80058f0:	f8cd c010 	str.w	ip, [sp, #16]
 80058f4:	ee15 ca90 	vmov	ip, s11
 80058f8:	ee36 6a62 	vsub.f32	s12, s12, s5
 80058fc:	f844 cb08 	str.w	ip, [r4], #8
 8005900:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005904:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005908:	9406      	str	r4, [sp, #24]
 800590a:	ee76 6a83 	vadd.f32	s13, s13, s6
 800590e:	f101 0410 	add.w	r4, r1, #16
 8005912:	0852      	lsrs	r2, r2, #1
 8005914:	9402      	str	r4, [sp, #8]
 8005916:	ed85 6a01 	vstr	s12, [r5, #4]
 800591a:	462c      	mov	r4, r5
 800591c:	f101 0518 	add.w	r5, r1, #24
 8005920:	920b      	str	r2, [sp, #44]	; 0x2c
 8005922:	46b2      	mov	sl, r6
 8005924:	9503      	str	r5, [sp, #12]
 8005926:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800592a:	3a02      	subs	r2, #2
 800592c:	ee16 5a90 	vmov	r5, s13
 8005930:	46b6      	mov	lr, r6
 8005932:	4630      	mov	r0, r6
 8005934:	0852      	lsrs	r2, r2, #1
 8005936:	f84a 5b08 	str.w	r5, [sl], #8
 800593a:	f1a0 0604 	sub.w	r6, r0, #4
 800593e:	edce 7a01 	vstr	s15, [lr, #4]
 8005942:	9208      	str	r2, [sp, #32]
 8005944:	f000 8130 	beq.w	8005ba8 <arm_cfft_radix8by4_f32+0x378>
 8005948:	4691      	mov	r9, r2
 800594a:	9a07      	ldr	r2, [sp, #28]
 800594c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005950:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005954:	3b08      	subs	r3, #8
 8005956:	f102 0510 	add.w	r5, r2, #16
 800595a:	f101 0c20 	add.w	ip, r1, #32
 800595e:	f1a4 020c 	sub.w	r2, r4, #12
 8005962:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8005966:	4433      	add	r3, r6
 8005968:	3410      	adds	r4, #16
 800596a:	4650      	mov	r0, sl
 800596c:	4659      	mov	r1, fp
 800596e:	ed55 3a02 	vldr	s7, [r5, #-8]
 8005972:	ed14 5a02 	vldr	s10, [r4, #-8]
 8005976:	ed91 7a00 	vldr	s14, [r1]
 800597a:	edd0 7a00 	vldr	s15, [r0]
 800597e:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005982:	ed15 4a01 	vldr	s8, [r5, #-4]
 8005986:	edd0 6a01 	vldr	s13, [r0, #4]
 800598a:	ed91 6a01 	vldr	s12, [r1, #4]
 800598e:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005992:	ee34 0a25 	vadd.f32	s0, s8, s11
 8005996:	ee78 4a07 	vadd.f32	s9, s16, s14
 800599a:	ee74 5a65 	vsub.f32	s11, s8, s11
 800599e:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80059a2:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80059a6:	ed45 4a02 	vstr	s9, [r5, #-8]
 80059aa:	edd1 4a01 	vldr	s9, [r1, #4]
 80059ae:	ed90 4a01 	vldr	s8, [r0, #4]
 80059b2:	ee70 4a24 	vadd.f32	s9, s0, s9
 80059b6:	ee75 aa06 	vadd.f32	s21, s10, s12
 80059ba:	ee74 4a84 	vadd.f32	s9, s9, s8
 80059be:	ee35 aac7 	vsub.f32	s20, s11, s14
 80059c2:	ed45 4a01 	vstr	s9, [r5, #-4]
 80059c6:	edd6 1a00 	vldr	s3, [r6]
 80059ca:	edd7 0a00 	vldr	s1, [r7]
 80059ce:	ed92 4a02 	vldr	s8, [r2, #8]
 80059d2:	edd3 3a02 	vldr	s7, [r3, #8]
 80059d6:	ed93 2a01 	vldr	s4, [r3, #4]
 80059da:	ed16 1a01 	vldr	s2, [r6, #-4]
 80059de:	edd2 2a01 	vldr	s5, [r2, #4]
 80059e2:	ed57 9a01 	vldr	s19, [r7, #-4]
 80059e6:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80059ea:	ee39 3a81 	vadd.f32	s6, s19, s2
 80059ee:	ee74 8a84 	vadd.f32	s17, s9, s8
 80059f2:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80059f6:	ee78 8aa3 	vadd.f32	s17, s17, s7
 80059fa:	ee7a aae6 	vsub.f32	s21, s21, s13
 80059fe:	ee18 aa90 	vmov	sl, s17
 8005a02:	f847 a908 	str.w	sl, [r7], #-8
 8005a06:	edd2 8a01 	vldr	s17, [r2, #4]
 8005a0a:	ed93 9a01 	vldr	s18, [r3, #4]
 8005a0e:	ee73 8a28 	vadd.f32	s17, s6, s17
 8005a12:	ee3a aa27 	vadd.f32	s20, s20, s15
 8005a16:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005a1a:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005a1e:	edc7 8a01 	vstr	s17, [r7, #4]
 8005a22:	ed18 ba02 	vldr	s22, [r8, #-8]
 8005a26:	ed58 8a01 	vldr	s17, [r8, #-4]
 8005a2a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005a2e:	ee6a ba28 	vmul.f32	s23, s20, s17
 8005a32:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8005a36:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8005a3a:	ee31 9a20 	vadd.f32	s18, s2, s1
 8005a3e:	ee79 9a82 	vadd.f32	s19, s19, s4
 8005a42:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8005a46:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005a4a:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005a4e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8005a52:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8005a56:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005a5a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8005a5e:	ee1c aa10 	vmov	sl, s24
 8005a62:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8005a66:	f841 ab08 	str.w	sl, [r1], #8
 8005a6a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8005a6e:	ee3b bacb 	vsub.f32	s22, s23, s22
 8005a72:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8005a76:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005a7a:	ed01 aa01 	vstr	s20, [r1, #-4]
 8005a7e:	edc2 8a01 	vstr	s17, [r2, #4]
 8005a82:	ed82 ba02 	vstr	s22, [r2, #8]
 8005a86:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8005a8a:	ee74 3a63 	vsub.f32	s7, s8, s7
 8005a8e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8005a92:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8005a96:	ee30 0a46 	vsub.f32	s0, s0, s12
 8005a9a:	ee33 3a42 	vsub.f32	s6, s6, s4
 8005a9e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005aa2:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005aa6:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8005aaa:	ee63 8a04 	vmul.f32	s17, s6, s8
 8005aae:	ee28 aa24 	vmul.f32	s20, s16, s9
 8005ab2:	ee60 9a04 	vmul.f32	s19, s0, s8
 8005ab6:	ee28 8a04 	vmul.f32	s16, s16, s8
 8005aba:	ee20 0a24 	vmul.f32	s0, s0, s9
 8005abe:	ee63 3a84 	vmul.f32	s7, s7, s8
 8005ac2:	ee39 4a68 	vsub.f32	s8, s18, s17
 8005ac6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005aca:	ee14 aa10 	vmov	sl, s8
 8005ace:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005ad2:	ee63 4a24 	vmul.f32	s9, s6, s9
 8005ad6:	ed44 9a02 	vstr	s19, [r4, #-8]
 8005ada:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8005ade:	ed04 0a01 	vstr	s0, [r4, #-4]
 8005ae2:	f846 a908 	str.w	sl, [r6], #-8
 8005ae6:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005aea:	ee35 7a87 	vadd.f32	s14, s11, s14
 8005aee:	edc6 3a01 	vstr	s7, [r6, #4]
 8005af2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8005af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005afa:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8005afe:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8005b02:	ee67 5a86 	vmul.f32	s11, s15, s12
 8005b06:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005b0a:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005b0e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005b12:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8005b16:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005b1a:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005b1e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b26:	ee21 6a06 	vmul.f32	s12, s2, s12
 8005b2a:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005b2e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8005b32:	ee15 aa90 	vmov	sl, s11
 8005b36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b3a:	f840 ab08 	str.w	sl, [r0], #8
 8005b3e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005b42:	ee76 2a22 	vadd.f32	s5, s12, s5
 8005b46:	f1b9 0901 	subs.w	r9, r9, #1
 8005b4a:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005b4e:	f105 0508 	add.w	r5, r5, #8
 8005b52:	ed83 1a02 	vstr	s2, [r3, #8]
 8005b56:	edc3 2a01 	vstr	s5, [r3, #4]
 8005b5a:	f108 0808 	add.w	r8, r8, #8
 8005b5e:	f1a2 0208 	sub.w	r2, r2, #8
 8005b62:	f10c 0c10 	add.w	ip, ip, #16
 8005b66:	f104 0408 	add.w	r4, r4, #8
 8005b6a:	f10e 0e18 	add.w	lr, lr, #24
 8005b6e:	f1a3 0308 	sub.w	r3, r3, #8
 8005b72:	f47f aefc 	bne.w	800596e <arm_cfft_radix8by4_f32+0x13e>
 8005b76:	9908      	ldr	r1, [sp, #32]
 8005b78:	9802      	ldr	r0, [sp, #8]
 8005b7a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8005b7e:	00cb      	lsls	r3, r1, #3
 8005b80:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005b84:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005b88:	9102      	str	r1, [sp, #8]
 8005b8a:	9905      	ldr	r1, [sp, #20]
 8005b8c:	4419      	add	r1, r3
 8005b8e:	9105      	str	r1, [sp, #20]
 8005b90:	9904      	ldr	r1, [sp, #16]
 8005b92:	4419      	add	r1, r3
 8005b94:	9104      	str	r1, [sp, #16]
 8005b96:	9906      	ldr	r1, [sp, #24]
 8005b98:	449b      	add	fp, r3
 8005b9a:	4419      	add	r1, r3
 8005b9c:	449a      	add	sl, r3
 8005b9e:	9b03      	ldr	r3, [sp, #12]
 8005ba0:	9106      	str	r1, [sp, #24]
 8005ba2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ba6:	9303      	str	r3, [sp, #12]
 8005ba8:	9a05      	ldr	r2, [sp, #20]
 8005baa:	9806      	ldr	r0, [sp, #24]
 8005bac:	ed92 4a00 	vldr	s8, [r2]
 8005bb0:	ed90 7a00 	vldr	s14, [r0]
 8005bb4:	ed9b 3a00 	vldr	s6, [fp]
 8005bb8:	edda 3a00 	vldr	s7, [sl]
 8005bbc:	edd2 4a01 	vldr	s9, [r2, #4]
 8005bc0:	edd0 6a01 	vldr	s13, [r0, #4]
 8005bc4:	ed9a 2a01 	vldr	s4, [sl, #4]
 8005bc8:	eddb 7a01 	vldr	s15, [fp, #4]
 8005bcc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8005bd0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005bd2:	ee34 6a07 	vadd.f32	s12, s8, s14
 8005bd6:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8005bda:	ee36 5a03 	vadd.f32	s10, s12, s6
 8005bde:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8005be2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005be6:	ee34 7a47 	vsub.f32	s14, s8, s14
 8005bea:	ed82 5a00 	vstr	s10, [r2]
 8005bee:	ed9b 5a01 	vldr	s10, [fp, #4]
 8005bf2:	edda 4a01 	vldr	s9, [sl, #4]
 8005bf6:	ee35 5a85 	vadd.f32	s10, s11, s10
 8005bfa:	ee37 4a27 	vadd.f32	s8, s14, s15
 8005bfe:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005c02:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8005c06:	ed82 5a01 	vstr	s10, [r2, #4]
 8005c0a:	9a04      	ldr	r2, [sp, #16]
 8005c0c:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8005c10:	edd2 1a00 	vldr	s3, [r2]
 8005c14:	edd2 2a01 	vldr	s5, [r2, #4]
 8005c18:	9a02      	ldr	r2, [sp, #8]
 8005c1a:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005c1e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005c22:	ee64 4a21 	vmul.f32	s9, s8, s3
 8005c26:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005c2a:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005c2e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8005c32:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8005c36:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005c3a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005c3e:	edcb 2a00 	vstr	s5, [fp]
 8005c42:	ed8b 5a01 	vstr	s10, [fp, #4]
 8005c46:	ed92 4a01 	vldr	s8, [r2, #4]
 8005c4a:	ed92 5a00 	vldr	s10, [r2]
 8005c4e:	9a03      	ldr	r2, [sp, #12]
 8005c50:	ee36 6a63 	vsub.f32	s12, s12, s7
 8005c54:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005c58:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005c5c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005c60:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005c64:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005c68:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005c6c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8005c70:	ee76 6a83 	vadd.f32	s13, s13, s6
 8005c74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c78:	ed80 6a01 	vstr	s12, [r0, #4]
 8005c7c:	edc0 5a00 	vstr	s11, [r0]
 8005c80:	edd2 5a01 	vldr	s11, [r2, #4]
 8005c84:	9807      	ldr	r0, [sp, #28]
 8005c86:	ee77 7a02 	vadd.f32	s15, s14, s4
 8005c8a:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8005c8e:	edd2 6a00 	vldr	s13, [r2]
 8005c92:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8005c96:	ee67 6a26 	vmul.f32	s13, s14, s13
 8005c9a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005c9e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005ca2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ca6:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005caa:	edca 7a01 	vstr	s15, [sl, #4]
 8005cae:	ed8a 7a00 	vstr	s14, [sl]
 8005cb2:	6872      	ldr	r2, [r6, #4]
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	2304      	movs	r3, #4
 8005cb8:	f000 f892 	bl	8005de0 <arm_radix8_butterfly_f32>
 8005cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cbe:	6872      	ldr	r2, [r6, #4]
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	2304      	movs	r3, #4
 8005cc4:	f000 f88c 	bl	8005de0 <arm_radix8_butterfly_f32>
 8005cc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005cca:	6872      	ldr	r2, [r6, #4]
 8005ccc:	4621      	mov	r1, r4
 8005cce:	2304      	movs	r3, #4
 8005cd0:	f000 f886 	bl	8005de0 <arm_radix8_butterfly_f32>
 8005cd4:	6872      	ldr	r2, [r6, #4]
 8005cd6:	9801      	ldr	r0, [sp, #4]
 8005cd8:	4621      	mov	r1, r4
 8005cda:	2304      	movs	r3, #4
 8005cdc:	b00f      	add	sp, #60	; 0x3c
 8005cde:	ecbd 8b0a 	vpop	{d8-d12}
 8005ce2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce6:	f000 b87b 	b.w	8005de0 <arm_radix8_butterfly_f32>
 8005cea:	bf00      	nop

08005cec <arm_cfft_f32>:
 8005cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf0:	2a01      	cmp	r2, #1
 8005cf2:	4606      	mov	r6, r0
 8005cf4:	4617      	mov	r7, r2
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	4698      	mov	r8, r3
 8005cfa:	8805      	ldrh	r5, [r0, #0]
 8005cfc:	d054      	beq.n	8005da8 <arm_cfft_f32+0xbc>
 8005cfe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005d02:	d04c      	beq.n	8005d9e <arm_cfft_f32+0xb2>
 8005d04:	d916      	bls.n	8005d34 <arm_cfft_f32+0x48>
 8005d06:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005d0a:	d01a      	beq.n	8005d42 <arm_cfft_f32+0x56>
 8005d0c:	d95c      	bls.n	8005dc8 <arm_cfft_f32+0xdc>
 8005d0e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8005d12:	d044      	beq.n	8005d9e <arm_cfft_f32+0xb2>
 8005d14:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005d18:	d105      	bne.n	8005d26 <arm_cfft_f32+0x3a>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	6872      	ldr	r2, [r6, #4]
 8005d1e:	4629      	mov	r1, r5
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 f85d 	bl	8005de0 <arm_radix8_butterfly_f32>
 8005d26:	f1b8 0f00 	cmp.w	r8, #0
 8005d2a:	d111      	bne.n	8005d50 <arm_cfft_f32+0x64>
 8005d2c:	2f01      	cmp	r7, #1
 8005d2e:	d016      	beq.n	8005d5e <arm_cfft_f32+0x72>
 8005d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d34:	2d20      	cmp	r5, #32
 8005d36:	d032      	beq.n	8005d9e <arm_cfft_f32+0xb2>
 8005d38:	d94a      	bls.n	8005dd0 <arm_cfft_f32+0xe4>
 8005d3a:	2d40      	cmp	r5, #64	; 0x40
 8005d3c:	d0ed      	beq.n	8005d1a <arm_cfft_f32+0x2e>
 8005d3e:	2d80      	cmp	r5, #128	; 0x80
 8005d40:	d1f1      	bne.n	8005d26 <arm_cfft_f32+0x3a>
 8005d42:	4621      	mov	r1, r4
 8005d44:	4630      	mov	r0, r6
 8005d46:	f7ff fca3 	bl	8005690 <arm_cfft_radix8by2_f32>
 8005d4a:	f1b8 0f00 	cmp.w	r8, #0
 8005d4e:	d0ed      	beq.n	8005d2c <arm_cfft_f32+0x40>
 8005d50:	68b2      	ldr	r2, [r6, #8]
 8005d52:	89b1      	ldrh	r1, [r6, #12]
 8005d54:	4620      	mov	r0, r4
 8005d56:	f7fa fa3f 	bl	80001d8 <arm_bitreversal_32>
 8005d5a:	2f01      	cmp	r7, #1
 8005d5c:	d1e8      	bne.n	8005d30 <arm_cfft_f32+0x44>
 8005d5e:	ee07 5a90 	vmov	s15, r5
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d6e:	2d00      	cmp	r5, #0
 8005d70:	d0de      	beq.n	8005d30 <arm_cfft_f32+0x44>
 8005d72:	f104 0108 	add.w	r1, r4, #8
 8005d76:	2300      	movs	r3, #0
 8005d78:	3301      	adds	r3, #1
 8005d7a:	429d      	cmp	r5, r3
 8005d7c:	f101 0108 	add.w	r1, r1, #8
 8005d80:	ed11 7a04 	vldr	s14, [r1, #-16]
 8005d84:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005d88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005d8c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005d90:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005d94:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005d98:	d1ee      	bne.n	8005d78 <arm_cfft_f32+0x8c>
 8005d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d9e:	4621      	mov	r1, r4
 8005da0:	4630      	mov	r0, r6
 8005da2:	f7ff fd45 	bl	8005830 <arm_cfft_radix8by4_f32>
 8005da6:	e7be      	b.n	8005d26 <arm_cfft_f32+0x3a>
 8005da8:	b1ad      	cbz	r5, 8005dd6 <arm_cfft_f32+0xea>
 8005daa:	f101 030c 	add.w	r3, r1, #12
 8005dae:	2200      	movs	r2, #0
 8005db0:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005db4:	3201      	adds	r2, #1
 8005db6:	eef1 7a67 	vneg.f32	s15, s15
 8005dba:	4295      	cmp	r5, r2
 8005dbc:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005dc0:	f103 0308 	add.w	r3, r3, #8
 8005dc4:	d1f4      	bne.n	8005db0 <arm_cfft_f32+0xc4>
 8005dc6:	e79a      	b.n	8005cfe <arm_cfft_f32+0x12>
 8005dc8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8005dcc:	d0a5      	beq.n	8005d1a <arm_cfft_f32+0x2e>
 8005dce:	e7aa      	b.n	8005d26 <arm_cfft_f32+0x3a>
 8005dd0:	2d10      	cmp	r5, #16
 8005dd2:	d0b6      	beq.n	8005d42 <arm_cfft_f32+0x56>
 8005dd4:	e7a7      	b.n	8005d26 <arm_cfft_f32+0x3a>
 8005dd6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005dda:	d894      	bhi.n	8005d06 <arm_cfft_f32+0x1a>
 8005ddc:	e7aa      	b.n	8005d34 <arm_cfft_f32+0x48>
 8005dde:	bf00      	nop

08005de0 <arm_radix8_butterfly_f32>:
 8005de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de4:	ed2d 8b10 	vpush	{d8-d15}
 8005de8:	461c      	mov	r4, r3
 8005dea:	b09d      	sub	sp, #116	; 0x74
 8005dec:	4603      	mov	r3, r0
 8005dee:	3304      	adds	r3, #4
 8005df0:	ed9f bac4 	vldr	s22, [pc, #784]	; 8006104 <arm_radix8_butterfly_f32+0x324>
 8005df4:	9019      	str	r0, [sp, #100]	; 0x64
 8005df6:	921a      	str	r2, [sp, #104]	; 0x68
 8005df8:	468b      	mov	fp, r1
 8005dfa:	931b      	str	r3, [sp, #108]	; 0x6c
 8005dfc:	468a      	mov	sl, r1
 8005dfe:	46a1      	mov	r9, r4
 8005e00:	4607      	mov	r7, r0
 8005e02:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8005e06:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005e0a:	eb03 0508 	add.w	r5, r3, r8
 8005e0e:	195c      	adds	r4, r3, r5
 8005e10:	00de      	lsls	r6, r3, #3
 8005e12:	191a      	adds	r2, r3, r4
 8005e14:	9600      	str	r6, [sp, #0]
 8005e16:	1898      	adds	r0, r3, r2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	9e00      	ldr	r6, [sp, #0]
 8005e1c:	9311      	str	r3, [sp, #68]	; 0x44
 8005e1e:	4401      	add	r1, r0
 8005e20:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8005e24:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8005e28:	19be      	adds	r6, r7, r6
 8005e2a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8005e2e:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8005e32:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8005e36:	9f00      	ldr	r7, [sp, #0]
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	eb06 0e07 	add.w	lr, r6, r7
 8005e3e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8005e40:	9302      	str	r3, [sp, #8]
 8005e42:	3204      	adds	r2, #4
 8005e44:	3104      	adds	r1, #4
 8005e46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e4a:	f04f 0c00 	mov.w	ip, #0
 8005e4e:	edde 7a00 	vldr	s15, [lr]
 8005e52:	edd6 6a00 	vldr	s13, [r6]
 8005e56:	ed95 2a00 	vldr	s4, [r5]
 8005e5a:	ed17 aa01 	vldr	s20, [r7, #-4]
 8005e5e:	edd4 4a00 	vldr	s9, [r4]
 8005e62:	ed90 5a00 	vldr	s10, [r0]
 8005e66:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005e6a:	ed51 0a01 	vldr	s1, [r1, #-4]
 8005e6e:	ee77 8a85 	vadd.f32	s17, s15, s10
 8005e72:	ee76 3a87 	vadd.f32	s7, s13, s14
 8005e76:	ee32 4a20 	vadd.f32	s8, s4, s1
 8005e7a:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8005e7e:	ee33 6a84 	vadd.f32	s12, s7, s8
 8005e82:	ee73 5a28 	vadd.f32	s11, s6, s17
 8005e86:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005e8a:	ee75 6a86 	vadd.f32	s13, s11, s12
 8005e8e:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8005e92:	ed47 6a01 	vstr	s13, [r7, #-4]
 8005e96:	edc4 5a00 	vstr	s11, [r4]
 8005e9a:	ed92 9a00 	vldr	s18, [r2]
 8005e9e:	ed95 1a01 	vldr	s2, [r5, #4]
 8005ea2:	edd6 5a01 	vldr	s11, [r6, #4]
 8005ea6:	ed91 6a00 	vldr	s12, [r1]
 8005eaa:	edd7 2a00 	vldr	s5, [r7]
 8005eae:	edd4 1a01 	vldr	s3, [r4, #4]
 8005eb2:	edde 6a01 	vldr	s13, [lr, #4]
 8005eb6:	edd0 9a01 	vldr	s19, [r0, #4]
 8005eba:	ee72 0a60 	vsub.f32	s1, s4, s1
 8005ebe:	ee71 aa46 	vsub.f32	s21, s2, s12
 8005ec2:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8005ec6:	ee37 0a60 	vsub.f32	s0, s14, s1
 8005eca:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8005ece:	ee37 7a20 	vadd.f32	s14, s14, s1
 8005ed2:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8005ed6:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8005eda:	ee75 5a89 	vadd.f32	s11, s11, s18
 8005ede:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8005ee2:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8005ee6:	ee31 6a06 	vadd.f32	s12, s2, s12
 8005eea:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8005eee:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8005ef2:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8005ef6:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8005efa:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8005efe:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8005f02:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8005f06:	ee33 3a68 	vsub.f32	s6, s6, s17
 8005f0a:	ee36 0a88 	vadd.f32	s0, s13, s16
 8005f0e:	ee75 8a86 	vadd.f32	s17, s11, s12
 8005f12:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8005f16:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8005f1a:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8005f1e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8005f22:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005f26:	ee75 4a27 	vadd.f32	s9, s10, s15
 8005f2a:	ee71 5a49 	vsub.f32	s11, s2, s18
 8005f2e:	ee31 2a09 	vadd.f32	s4, s2, s18
 8005f32:	ee75 7a67 	vsub.f32	s15, s10, s15
 8005f36:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8005f3a:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8005f3e:	ee73 0a06 	vadd.f32	s1, s6, s12
 8005f42:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8005f46:	ee36 5a87 	vadd.f32	s10, s13, s14
 8005f4a:	ee32 8a28 	vadd.f32	s16, s4, s17
 8005f4e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8005f52:	ee34 4a25 	vadd.f32	s8, s8, s11
 8005f56:	ee33 3a80 	vadd.f32	s6, s7, s0
 8005f5a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005f5e:	ee71 5a64 	vsub.f32	s11, s2, s9
 8005f62:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8005f66:	ee32 2a68 	vsub.f32	s4, s4, s17
 8005f6a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8005f6e:	ee74 4a81 	vadd.f32	s9, s9, s2
 8005f72:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8005f76:	44dc      	add	ip, fp
 8005f78:	45e2      	cmp	sl, ip
 8005f7a:	ed87 8a00 	vstr	s16, [r7]
 8005f7e:	ed84 2a01 	vstr	s4, [r4, #4]
 8005f82:	441f      	add	r7, r3
 8005f84:	edce 0a00 	vstr	s1, [lr]
 8005f88:	441c      	add	r4, r3
 8005f8a:	ed80 6a00 	vstr	s12, [r0]
 8005f8e:	edce 1a01 	vstr	s3, [lr, #4]
 8005f92:	ed80 4a01 	vstr	s8, [r0, #4]
 8005f96:	449e      	add	lr, r3
 8005f98:	ed86 3a00 	vstr	s6, [r6]
 8005f9c:	4418      	add	r0, r3
 8005f9e:	ed41 3a01 	vstr	s7, [r1, #-4]
 8005fa2:	ed02 5a01 	vstr	s10, [r2, #-4]
 8005fa6:	ed85 7a00 	vstr	s14, [r5]
 8005faa:	edc6 5a01 	vstr	s11, [r6, #4]
 8005fae:	edc1 4a00 	vstr	s9, [r1]
 8005fb2:	441e      	add	r6, r3
 8005fb4:	edc2 6a00 	vstr	s13, [r2]
 8005fb8:	4419      	add	r1, r3
 8005fba:	edc5 7a01 	vstr	s15, [r5, #4]
 8005fbe:	441a      	add	r2, r3
 8005fc0:	441d      	add	r5, r3
 8005fc2:	f63f af44 	bhi.w	8005e4e <arm_radix8_butterfly_f32+0x6e>
 8005fc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005fc8:	2a07      	cmp	r2, #7
 8005fca:	f240 81f5 	bls.w	80063b8 <arm_radix8_butterfly_f32+0x5d8>
 8005fce:	f108 0101 	add.w	r1, r8, #1
 8005fd2:	188f      	adds	r7, r1, r2
 8005fd4:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8005fd8:	19d6      	adds	r6, r2, r7
 8005fda:	eb08 0c09 	add.w	ip, r8, r9
 8005fde:	1994      	adds	r4, r2, r6
 8005fe0:	eb0c 0e09 	add.w	lr, ip, r9
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	9701      	str	r7, [sp, #4]
 8005fe8:	4420      	add	r0, r4
 8005fea:	eb0e 0709 	add.w	r7, lr, r9
 8005fee:	1815      	adds	r5, r2, r0
 8005ff0:	eb07 0209 	add.w	r2, r7, r9
 8005ff4:	9203      	str	r2, [sp, #12]
 8005ff6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005ff8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ffc:	9117      	str	r1, [sp, #92]	; 0x5c
 8005ffe:	440a      	add	r2, r1
 8006000:	9900      	ldr	r1, [sp, #0]
 8006002:	3108      	adds	r1, #8
 8006004:	9100      	str	r1, [sp, #0]
 8006006:	9902      	ldr	r1, [sp, #8]
 8006008:	3108      	adds	r1, #8
 800600a:	9102      	str	r1, [sp, #8]
 800600c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800600e:	00ff      	lsls	r7, r7, #3
 8006010:	9715      	str	r7, [sp, #84]	; 0x54
 8006012:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8006016:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800601a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800601e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8006020:	9903      	ldr	r1, [sp, #12]
 8006022:	19d7      	adds	r7, r2, r7
 8006024:	00c9      	lsls	r1, r1, #3
 8006026:	9114      	str	r1, [sp, #80]	; 0x50
 8006028:	9710      	str	r7, [sp, #64]	; 0x40
 800602a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800602c:	9f00      	ldr	r7, [sp, #0]
 800602e:	19cf      	adds	r7, r1, r7
 8006030:	970d      	str	r7, [sp, #52]	; 0x34
 8006032:	9f02      	ldr	r7, [sp, #8]
 8006034:	19cf      	adds	r7, r1, r7
 8006036:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800603a:	970c      	str	r7, [sp, #48]	; 0x30
 800603c:	9f01      	ldr	r7, [sp, #4]
 800603e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8006042:	3504      	adds	r5, #4
 8006044:	3004      	adds	r0, #4
 8006046:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800604a:	9508      	str	r5, [sp, #32]
 800604c:	9009      	str	r0, [sp, #36]	; 0x24
 800604e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8006050:	981a      	ldr	r0, [sp, #104]	; 0x68
 8006052:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8006056:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800605a:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800605e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006060:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8006064:	1945      	adds	r5, r0, r5
 8006066:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800606a:	460f      	mov	r7, r1
 800606c:	3404      	adds	r4, #4
 800606e:	4641      	mov	r1, r8
 8006070:	1841      	adds	r1, r0, r1
 8006072:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8006076:	940a      	str	r4, [sp, #40]	; 0x28
 8006078:	eb00 0c06 	add.w	ip, r0, r6
 800607c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006080:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006082:	9506      	str	r5, [sp, #24]
 8006084:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006086:	9105      	str	r1, [sp, #20]
 8006088:	4639      	mov	r1, r7
 800608a:	1905      	adds	r5, r0, r4
 800608c:	3108      	adds	r1, #8
 800608e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8006090:	9507      	str	r5, [sp, #28]
 8006092:	910f      	str	r1, [sp, #60]	; 0x3c
 8006094:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8006098:	2101      	movs	r1, #1
 800609a:	eb00 0e06 	add.w	lr, r0, r6
 800609e:	9518      	str	r5, [sp, #96]	; 0x60
 80060a0:	9404      	str	r4, [sp, #16]
 80060a2:	9103      	str	r1, [sp, #12]
 80060a4:	4620      	mov	r0, r4
 80060a6:	4689      	mov	r9, r1
 80060a8:	9e06      	ldr	r6, [sp, #24]
 80060aa:	ed90 fa00 	vldr	s30, [r0]
 80060ae:	edd6 7a01 	vldr	s15, [r6, #4]
 80060b2:	edd0 ba01 	vldr	s23, [r0, #4]
 80060b6:	edcd 7a00 	vstr	s15, [sp]
 80060ba:	a80d      	add	r0, sp, #52	; 0x34
 80060bc:	edde 7a01 	vldr	s15, [lr, #4]
 80060c0:	9c05      	ldr	r4, [sp, #20]
 80060c2:	9d07      	ldr	r5, [sp, #28]
 80060c4:	edd2 fa00 	vldr	s31, [r2]
 80060c8:	ed92 ca01 	vldr	s24, [r2, #4]
 80060cc:	edcd 7a01 	vstr	s15, [sp, #4]
 80060d0:	c807      	ldmia	r0, {r0, r1, r2}
 80060d2:	eddc 7a01 	vldr	s15, [ip, #4]
 80060d6:	edd4 ea00 	vldr	s29, [r4]
 80060da:	ed95 ea00 	vldr	s28, [r5]
 80060de:	edd6 da00 	vldr	s27, [r6]
 80060e2:	edd4 aa01 	vldr	s21, [r4, #4]
 80060e6:	ed95 aa01 	vldr	s20, [r5, #4]
 80060ea:	ed9e da00 	vldr	s26, [lr]
 80060ee:	eddc ca00 	vldr	s25, [ip]
 80060f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80060f8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80060fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80060fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80060fe:	edcd 7a02 	vstr	s15, [sp, #8]
 8006102:	e001      	b.n	8006108 <arm_radix8_butterfly_f32+0x328>
 8006104:	3f3504f3 	.word	0x3f3504f3
 8006108:	ed16 6a01 	vldr	s12, [r6, #-4]
 800610c:	ed91 5a00 	vldr	s10, [r1]
 8006110:	ed57 9a01 	vldr	s19, [r7, #-4]
 8006114:	edd5 7a00 	vldr	s15, [r5]
 8006118:	ed18 7a01 	vldr	s14, [r8, #-4]
 800611c:	edd2 3a00 	vldr	s7, [r2]
 8006120:	ed94 3a00 	vldr	s6, [r4]
 8006124:	ed90 2a00 	vldr	s4, [r0]
 8006128:	ed92 0a01 	vldr	s0, [r2, #4]
 800612c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006130:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006134:	ee33 4a29 	vadd.f32	s8, s6, s19
 8006138:	ee77 4a87 	vadd.f32	s9, s15, s14
 800613c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006140:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006144:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006148:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800614c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006150:	ed82 6a00 	vstr	s12, [r2]
 8006154:	edd5 8a01 	vldr	s17, [r5, #4]
 8006158:	ed90 9a01 	vldr	s18, [r0, #4]
 800615c:	edd6 2a00 	vldr	s5, [r6]
 8006160:	ed98 7a00 	vldr	s14, [r8]
 8006164:	edd4 0a01 	vldr	s1, [r4, #4]
 8006168:	ed91 6a01 	vldr	s12, [r1, #4]
 800616c:	edd7 5a00 	vldr	s11, [r7]
 8006170:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006174:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006178:	ee39 5a62 	vsub.f32	s10, s18, s5
 800617c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8006180:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006184:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006188:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800618c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006190:	ee75 8a69 	vsub.f32	s17, s10, s19
 8006194:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006198:	ee35 5a29 	vadd.f32	s10, s10, s19
 800619c:	ee72 7a67 	vsub.f32	s15, s4, s15
 80061a0:	ee30 2a06 	vadd.f32	s4, s0, s12
 80061a4:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80061a8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80061ac:	ee32 9a08 	vadd.f32	s18, s4, s16
 80061b0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80061b4:	ee32 2a48 	vsub.f32	s4, s4, s16
 80061b8:	ee71 4a64 	vsub.f32	s9, s2, s9
 80061bc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80061c0:	ee32 1a87 	vadd.f32	s2, s5, s14
 80061c4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80061c8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80061cc:	ee30 6a46 	vsub.f32	s12, s0, s12
 80061d0:	ee73 0a29 	vadd.f32	s1, s6, s19
 80061d4:	ee36 0a28 	vadd.f32	s0, s12, s17
 80061d8:	ee33 3a69 	vsub.f32	s6, s6, s19
 80061dc:	ee32 7a64 	vsub.f32	s14, s4, s9
 80061e0:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80061e4:	ee36 6a68 	vsub.f32	s12, s12, s17
 80061e8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80061ec:	ee75 8a85 	vadd.f32	s17, s11, s10
 80061f0:	ee74 3a22 	vadd.f32	s7, s8, s5
 80061f4:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80061f8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80061fc:	ee79 1a41 	vsub.f32	s3, s18, s2
 8006200:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8006204:	ee76 5a43 	vsub.f32	s11, s12, s6
 8006208:	ee74 2a62 	vsub.f32	s5, s8, s5
 800620c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006210:	ee30 4a60 	vsub.f32	s8, s0, s1
 8006214:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8006218:	ee30 0a80 	vadd.f32	s0, s1, s0
 800621c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8006220:	ee33 6a06 	vadd.f32	s12, s6, s12
 8006224:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006228:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800622c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8006230:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8006234:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8006238:	ee39 1a01 	vadd.f32	s2, s18, s2
 800623c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8006240:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8006244:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8006248:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800624c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8006250:	ee35 3a03 	vadd.f32	s6, s10, s6
 8006254:	ee72 6a66 	vsub.f32	s13, s4, s13
 8006258:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800625c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8006260:	ed9d 4a02 	vldr	s8, [sp, #8]
 8006264:	ed82 1a01 	vstr	s2, [r2, #4]
 8006268:	ee77 3a63 	vsub.f32	s7, s14, s7
 800626c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006270:	ed9d 7a01 	vldr	s14, [sp, #4]
 8006274:	ed81 3a00 	vstr	s6, [r1]
 8006278:	ee30 9a89 	vadd.f32	s18, s1, s18
 800627c:	ee32 2a05 	vadd.f32	s4, s4, s10
 8006280:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8006284:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8006288:	ee67 2a22 	vmul.f32	s5, s14, s5
 800628c:	ee64 1a00 	vmul.f32	s3, s8, s0
 8006290:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006294:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8006298:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800629c:	ee64 8a28 	vmul.f32	s17, s8, s17
 80062a0:	ed9d 4a00 	vldr	s8, [sp]
 80062a4:	edc1 6a01 	vstr	s13, [r1, #4]
 80062a8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80062ac:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80062b0:	ee64 9a29 	vmul.f32	s19, s8, s19
 80062b4:	ee24 4a25 	vmul.f32	s8, s8, s11
 80062b8:	ee30 7a87 	vadd.f32	s14, s1, s14
 80062bc:	ee74 4a84 	vadd.f32	s9, s9, s8
 80062c0:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80062c4:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80062c8:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80062cc:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80062d0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80062d4:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80062d8:	ee75 1a21 	vadd.f32	s3, s10, s3
 80062dc:	ee30 0a68 	vsub.f32	s0, s0, s17
 80062e0:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80062e4:	ee70 0a84 	vadd.f32	s1, s1, s8
 80062e8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80062ec:	44d9      	add	r9, fp
 80062ee:	45ca      	cmp	sl, r9
 80062f0:	ed84 9a00 	vstr	s18, [r4]
 80062f4:	edc4 3a01 	vstr	s7, [r4, #4]
 80062f8:	441a      	add	r2, r3
 80062fa:	ed07 7a01 	vstr	s14, [r7, #-4]
 80062fe:	edc7 2a00 	vstr	s5, [r7]
 8006302:	4419      	add	r1, r3
 8006304:	ed80 2a00 	vstr	s4, [r0]
 8006308:	ed80 8a01 	vstr	s16, [r0, #4]
 800630c:	441c      	add	r4, r3
 800630e:	ed48 1a01 	vstr	s3, [r8, #-4]
 8006312:	ed88 0a00 	vstr	s0, [r8]
 8006316:	441f      	add	r7, r3
 8006318:	ed46 4a01 	vstr	s9, [r6, #-4]
 800631c:	4418      	add	r0, r3
 800631e:	edc6 9a00 	vstr	s19, [r6]
 8006322:	4498      	add	r8, r3
 8006324:	edc5 0a00 	vstr	s1, [r5]
 8006328:	ed85 6a01 	vstr	s12, [r5, #4]
 800632c:	441e      	add	r6, r3
 800632e:	441d      	add	r5, r3
 8006330:	f63f aeea 	bhi.w	8006108 <arm_radix8_butterfly_f32+0x328>
 8006334:	9a03      	ldr	r2, [sp, #12]
 8006336:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006338:	3201      	adds	r2, #1
 800633a:	4611      	mov	r1, r2
 800633c:	9203      	str	r2, [sp, #12]
 800633e:	9a04      	ldr	r2, [sp, #16]
 8006340:	4402      	add	r2, r0
 8006342:	9204      	str	r2, [sp, #16]
 8006344:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006346:	9a05      	ldr	r2, [sp, #20]
 8006348:	4402      	add	r2, r0
 800634a:	9205      	str	r2, [sp, #20]
 800634c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800634e:	9a07      	ldr	r2, [sp, #28]
 8006350:	4402      	add	r2, r0
 8006352:	9207      	str	r2, [sp, #28]
 8006354:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006356:	9a06      	ldr	r2, [sp, #24]
 8006358:	4402      	add	r2, r0
 800635a:	9206      	str	r2, [sp, #24]
 800635c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800635e:	4496      	add	lr, r2
 8006360:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006362:	4494      	add	ip, r2
 8006364:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006366:	3208      	adds	r2, #8
 8006368:	920f      	str	r2, [sp, #60]	; 0x3c
 800636a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800636c:	3208      	adds	r2, #8
 800636e:	920e      	str	r2, [sp, #56]	; 0x38
 8006370:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006372:	3208      	adds	r2, #8
 8006374:	920d      	str	r2, [sp, #52]	; 0x34
 8006376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006378:	3208      	adds	r2, #8
 800637a:	920c      	str	r2, [sp, #48]	; 0x30
 800637c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800637e:	3208      	adds	r2, #8
 8006380:	920b      	str	r2, [sp, #44]	; 0x2c
 8006382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006384:	3208      	adds	r2, #8
 8006386:	920a      	str	r2, [sp, #40]	; 0x28
 8006388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800638a:	3208      	adds	r2, #8
 800638c:	9209      	str	r2, [sp, #36]	; 0x24
 800638e:	9a08      	ldr	r2, [sp, #32]
 8006390:	3208      	adds	r2, #8
 8006392:	9208      	str	r2, [sp, #32]
 8006394:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8006396:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006398:	4288      	cmp	r0, r1
 800639a:	4622      	mov	r2, r4
 800639c:	d007      	beq.n	80063ae <arm_radix8_butterfly_f32+0x5ce>
 800639e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80063a0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80063a4:	4621      	mov	r1, r4
 80063a6:	4401      	add	r1, r0
 80063a8:	9110      	str	r1, [sp, #64]	; 0x40
 80063aa:	9804      	ldr	r0, [sp, #16]
 80063ac:	e67c      	b.n	80060a8 <arm_radix8_butterfly_f32+0x2c8>
 80063ae:	4683      	mov	fp, r0
 80063b0:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80063b4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80063b6:	e524      	b.n	8005e02 <arm_radix8_butterfly_f32+0x22>
 80063b8:	b01d      	add	sp, #116	; 0x74
 80063ba:	ecbd 8b10 	vpop	{d8-d15}
 80063be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c2:	bf00      	nop

080063c4 <memset>:
 80063c4:	4402      	add	r2, r0
 80063c6:	4603      	mov	r3, r0
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d100      	bne.n	80063ce <memset+0xa>
 80063cc:	4770      	bx	lr
 80063ce:	f803 1b01 	strb.w	r1, [r3], #1
 80063d2:	e7f9      	b.n	80063c8 <memset+0x4>

080063d4 <__libc_init_array>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	4d0d      	ldr	r5, [pc, #52]	; (800640c <__libc_init_array+0x38>)
 80063d8:	4c0d      	ldr	r4, [pc, #52]	; (8006410 <__libc_init_array+0x3c>)
 80063da:	1b64      	subs	r4, r4, r5
 80063dc:	10a4      	asrs	r4, r4, #2
 80063de:	2600      	movs	r6, #0
 80063e0:	42a6      	cmp	r6, r4
 80063e2:	d109      	bne.n	80063f8 <__libc_init_array+0x24>
 80063e4:	4d0b      	ldr	r5, [pc, #44]	; (8006414 <__libc_init_array+0x40>)
 80063e6:	4c0c      	ldr	r4, [pc, #48]	; (8006418 <__libc_init_array+0x44>)
 80063e8:	f000 f818 	bl	800641c <_init>
 80063ec:	1b64      	subs	r4, r4, r5
 80063ee:	10a4      	asrs	r4, r4, #2
 80063f0:	2600      	movs	r6, #0
 80063f2:	42a6      	cmp	r6, r4
 80063f4:	d105      	bne.n	8006402 <__libc_init_array+0x2e>
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
 80063f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063fc:	4798      	blx	r3
 80063fe:	3601      	adds	r6, #1
 8006400:	e7ee      	b.n	80063e0 <__libc_init_array+0xc>
 8006402:	f855 3b04 	ldr.w	r3, [r5], #4
 8006406:	4798      	blx	r3
 8006408:	3601      	adds	r6, #1
 800640a:	e7f2      	b.n	80063f2 <__libc_init_array+0x1e>
 800640c:	080198ac 	.word	0x080198ac
 8006410:	080198ac 	.word	0x080198ac
 8006414:	080198ac 	.word	0x080198ac
 8006418:	080198b0 	.word	0x080198b0

0800641c <_init>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	bf00      	nop
 8006420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006422:	bc08      	pop	{r3}
 8006424:	469e      	mov	lr, r3
 8006426:	4770      	bx	lr

08006428 <_fini>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	bf00      	nop
 800642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642e:	bc08      	pop	{r3}
 8006430:	469e      	mov	lr, r3
 8006432:	4770      	bx	lr
