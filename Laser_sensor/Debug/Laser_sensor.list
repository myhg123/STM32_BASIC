
Laser_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003720  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080038c0  080038c0  000138c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003918  08003918  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003920  08003920  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000068  08003990  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08003990  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000088d9  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c2  00000000  00000000  000289b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  0002a278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b5  00000000  00000000  0002aa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000162aa  00000000  00000000  0002afb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000095d7  00000000  00000000  0004125f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000877a9  00000000  00000000  0004a836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000250c  00000000  00000000  000d1fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d44ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080038a8 	.word	0x080038a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080038a8 	.word	0x080038a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *p, int len) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, p, len);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	b29b      	uxth	r3, r3
 800058c:	461a      	mov	r2, r3
 800058e:	68b9      	ldr	r1, [r7, #8]
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <_write+0x24>)
 8000592:	f001 faf7 	bl	8001b84 <HAL_UART_Transmit_IT>
	return len;
 8000596:	687b      	ldr	r3, [r7, #4]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000084 	.word	0x20000084

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fa92 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f83e 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f8ce 	bl	8000750 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f8a2 	bl	80006fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, &uart2_rxData, 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	4915      	ldr	r1, [pc, #84]	; (8000610 <main+0x6c>)
 80005bc:	4815      	ldr	r0, [pc, #84]	; (8000614 <main+0x70>)
 80005be:	f001 fb17 	bl	8001bf0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		Left = HAL_GPIO_ReadPin(L_Laser_GPIO_Port, L_Laser_Pin);
 80005c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c6:	4814      	ldr	r0, [pc, #80]	; (8000618 <main+0x74>)
 80005c8:	f000 fe1c 	bl	8001204 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <main+0x78>)
 80005d2:	701a      	strb	r2, [r3, #0]
		Center =  HAL_GPIO_ReadPin(C_Laser_GPIO_Port, C_Laser_Pin);
 80005d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d8:	480f      	ldr	r0, [pc, #60]	; (8000618 <main+0x74>)
 80005da:	f000 fe13 	bl	8001204 <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <main+0x7c>)
 80005e4:	701a      	strb	r2, [r3, #0]
		Right =  HAL_GPIO_ReadPin(R_Laser_GPIO_Port, R_Laser_Pin);
 80005e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <main+0x74>)
 80005ec:	f000 fe0a 	bl	8001204 <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <main+0x80>)
 80005f6:	701a      	strb	r2, [r3, #0]
		printf("%x,%x,%x",Left,Center,Right);
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <main+0x78>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <main+0x7c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <main+0x80>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4807      	ldr	r0, [pc, #28]	; (8000628 <main+0x84>)
 800060a:	f002 fad7 	bl	8002bbc <iprintf>
	while (1) {
 800060e:	e7d8      	b.n	80005c2 <main+0x1e>
 8000610:	200000cc 	.word	0x200000cc
 8000614:	20000084 	.word	0x20000084
 8000618:	40020000 	.word	0x40020000
 800061c:	200000cd 	.word	0x200000cd
 8000620:	200000ce 	.word	0x200000ce
 8000624:	200000cf 	.word	0x200000cf
 8000628:	080038c0 	.word	0x080038c0

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fb13 	bl	8002c66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <SystemClock_Config+0xc8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <SystemClock_Config+0xc8>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <SystemClock_Config+0xc8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <SystemClock_Config+0xcc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SystemClock_Config+0xcc>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <SystemClock_Config+0xcc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fdbf 	bl	8001234 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006bc:	f000 f892 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2103      	movs	r1, #3
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 f821 	bl	8001724 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006e8:	f000 f87c 	bl	80007e4 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3750      	adds	r7, #80	; 0x50
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART2_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000734:	f001 f9d6 	bl	8001ae4 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f851 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000084 	.word	0x20000084
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_GPIO_Init+0x50>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <MX_GPIO_Init+0x50>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	6313      	str	r3, [r2, #48]	; 0x30
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_GPIO_Init+0x50>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : L_Laser_Pin C_Laser_Pin R_Laser_Pin */
  GPIO_InitStruct.Pin = L_Laser_Pin|C_Laser_Pin|R_Laser_Pin;
 8000780:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000784:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0x54>)
 8000794:	f000 fbb2 	bl	8000efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020000 	.word	0x40020000

080007a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_UART_RxCpltCallback+0x30>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d109      	bne.n	80007ce <HAL_UART_RxCpltCallback+0x26>
		HAL_UART_Receive_IT(&huart2, &uart2_rxData, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	4907      	ldr	r1, [pc, #28]	; (80007dc <HAL_UART_RxCpltCallback+0x34>)
 80007be:	4808      	ldr	r0, [pc, #32]	; (80007e0 <HAL_UART_RxCpltCallback+0x38>)
 80007c0:	f001 fa16 	bl	8001bf0 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart2, &uart2_rxData, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	4905      	ldr	r1, [pc, #20]	; (80007dc <HAL_UART_RxCpltCallback+0x34>)
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <HAL_UART_RxCpltCallback+0x38>)
 80007ca:	f001 f9db 	bl	8001b84 <HAL_UART_Transmit_IT>
	}
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40004400 	.word	0x40004400
 80007dc:	200000cc 	.word	0x200000cc
 80007e0:	20000084 	.word	0x20000084

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <HAL_MspInit+0x4c>)
 8000800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <HAL_MspInit+0x4c>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_MspInit+0x4c>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_MspInit+0x4c>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <HAL_UART_MspInit+0x94>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d133      	bne.n	80008ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <HAL_UART_MspInit+0x98>)
 800086c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_UART_MspInit+0x98>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089a:	230c      	movs	r3, #12
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <HAL_UART_MspInit+0x9c>)
 80008b6:	f000 fb21 	bl	8000efc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	2026      	movs	r0, #38	; 0x26
 80008c0:	f000 fa53 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c4:	2026      	movs	r0, #38	; 0x26
 80008c6:	f000 fa6c 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f922 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <USART2_IRQHandler+0x10>)
 800093a:	f001 f97f 	bl	8001c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000084 	.word	0x20000084

08000948 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e00a      	b.n	8000970 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800095a:	f3af 8000 	nop.w
 800095e:	4601      	mov	r1, r0
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	60ba      	str	r2, [r7, #8]
 8000966:	b2ca      	uxtb	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbf0      	blt.n	800095a <_read+0x12>
  }

  return len;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009aa:	605a      	str	r2, [r3, #4]
  return 0;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <_isatty>:

int _isatty(int file)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f002 f972 	bl	8002d04 <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20020000 	.word	0x20020000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	200000d0 	.word	0x200000d0
 8000a54:	20000228 	.word	0x20000228

08000a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a80:	f7ff ffea 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f002 f931 	bl	8002d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aae:	f7ff fd79 	bl	80005a4 <main>
  bx  lr    
 8000ab2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ac0:	08003928 	.word	0x08003928
  ldr r2, =_sbss
 8000ac4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ac8:	20000224 	.word	0x20000224

08000acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <HAL_Init+0x40>)
 8000ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_Init+0x40>)
 8000ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_Init+0x40>)
 8000af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f92b 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff fe74 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023c00 	.word	0x40023c00

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f943 	bl	8000dbe <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f90b 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000004 	.word	0x20000004

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	200000d4 	.word	0x200000d4

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200000d4 	.word	0x200000d4

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db0b      	blt.n	8000c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 021f 	and.w	r2, r3, #31
 8000c30:	4907      	ldr	r1, [pc, #28]	; (8000c50 <__NVIC_EnableIRQ+0x38>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2001      	movs	r0, #1
 8000c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff8e 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff29 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff3e 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff8e 	bl	8000ca8 <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5d 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff31 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffa2 	bl	8000d10 <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff feda 	bl	8000b9c <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d008      	beq.n	8000e08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e052      	b.n	8000eae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0216 	bic.w	r2, r2, #22
 8000e16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	695a      	ldr	r2, [r3, #20]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d103      	bne.n	8000e38 <HAL_DMA_Abort+0x62>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d007      	beq.n	8000e48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0208 	bic.w	r2, r2, #8
 8000e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0201 	bic.w	r2, r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e58:	e013      	b.n	8000e82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e5a:	f7ff fe9f 	bl	8000b9c <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d90c      	bls.n	8000e82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2220      	movs	r2, #32
 8000e6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2203      	movs	r2, #3
 8000e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e015      	b.n	8000eae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1e4      	bne.n	8000e5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e94:	223f      	movs	r2, #63	; 0x3f
 8000e96:	409a      	lsls	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d004      	beq.n	8000ed4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e00c      	b.n	8000eee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0201 	bic.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	e159      	b.n	80011cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	f040 8148 	bne.w	80011c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d005      	beq.n	8000f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d130      	bne.n	8000fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f84:	2201      	movs	r2, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	f003 0201 	and.w	r2, r3, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d017      	beq.n	8000fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d123      	bne.n	8001040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	69b9      	ldr	r1, [r7, #24]
 800103c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0203 	and.w	r2, r3, #3
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80a2 	beq.w	80011c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b57      	ldr	r3, [pc, #348]	; (80011e4 <HAL_GPIO_Init+0x2e8>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a56      	ldr	r2, [pc, #344]	; (80011e4 <HAL_GPIO_Init+0x2e8>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b54      	ldr	r3, [pc, #336]	; (80011e4 <HAL_GPIO_Init+0x2e8>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109e:	4a52      	ldr	r2, [pc, #328]	; (80011e8 <HAL_GPIO_Init+0x2ec>)
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a49      	ldr	r2, [pc, #292]	; (80011ec <HAL_GPIO_Init+0x2f0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d019      	beq.n	80010fe <HAL_GPIO_Init+0x202>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <HAL_GPIO_Init+0x2f4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x1fe>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a47      	ldr	r2, [pc, #284]	; (80011f4 <HAL_GPIO_Init+0x2f8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_Init+0x1fa>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a46      	ldr	r2, [pc, #280]	; (80011f8 <HAL_GPIO_Init+0x2fc>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x1f6>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a45      	ldr	r2, [pc, #276]	; (80011fc <HAL_GPIO_Init+0x300>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_Init+0x1f2>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e008      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010ee:	2307      	movs	r3, #7
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010fe:	2300      	movs	r3, #0
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	f002 0203 	and.w	r2, r2, #3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4093      	lsls	r3, r2
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001110:	4935      	ldr	r1, [pc, #212]	; (80011e8 <HAL_GPIO_Init+0x2ec>)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111e:	4b38      	ldr	r3, [pc, #224]	; (8001200 <HAL_GPIO_Init+0x304>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001142:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <HAL_GPIO_Init+0x304>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <HAL_GPIO_Init+0x304>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800116c:	4a24      	ldr	r2, [pc, #144]	; (8001200 <HAL_GPIO_Init+0x304>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_GPIO_Init+0x304>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001196:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <HAL_GPIO_Init+0x304>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_GPIO_Init+0x304>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c0:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <HAL_GPIO_Init+0x304>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3301      	adds	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	f67f aea2 	bls.w	8000f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40013800 	.word	0x40013800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	40021000 	.word	0x40021000
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	4013      	ands	r3, r2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e001      	b.n	8001226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e267      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d075      	beq.n	800133e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001252:	4b88      	ldr	r3, [pc, #544]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d00c      	beq.n	8001278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	4b85      	ldr	r3, [pc, #532]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001266:	2b08      	cmp	r3, #8
 8001268:	d112      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4b82      	ldr	r3, [pc, #520]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001276:	d10b      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4b7e      	ldr	r3, [pc, #504]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d05b      	beq.n	800133c <HAL_RCC_OscConfig+0x108>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d157      	bne.n	800133c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e242      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x74>
 800129a:	4b76      	ldr	r3, [pc, #472]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a75      	ldr	r2, [pc, #468]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e01d      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x98>
 80012b2:	4b70      	ldr	r3, [pc, #448]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6f      	ldr	r2, [pc, #444]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b6d      	ldr	r3, [pc, #436]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6c      	ldr	r2, [pc, #432]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012cc:	4b69      	ldr	r3, [pc, #420]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a68      	ldr	r2, [pc, #416]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b66      	ldr	r3, [pc, #408]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a65      	ldr	r2, [pc, #404]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fc56 	bl	8000b9c <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fc52 	bl	8000b9c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e207      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xc0>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fc42 	bl	8000b9c <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fc3e 	bl	8000b9c <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1f3      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b51      	ldr	r3, [pc, #324]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0xe8>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d063      	beq.n	8001412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134a:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b47      	ldr	r3, [pc, #284]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135e:	2b08      	cmp	r3, #8
 8001360:	d11c      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b44      	ldr	r3, [pc, #272]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d116      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e1c7      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4937      	ldr	r1, [pc, #220]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	e03a      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a4:	4b34      	ldr	r3, [pc, #208]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fbf7 	bl	8000b9c <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff fbf3 	bl	8000b9c <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1a8      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4925      	ldr	r1, [pc, #148]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fbd6 	bl	8000b9c <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fbd2 	bl	8000b9c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e187      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d036      	beq.n	800148c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d016      	beq.n	8001454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_RCC_OscConfig+0x248>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fbb6 	bl	8000b9c <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fbb2 	bl	8000b9c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e167      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x200>
 8001452:	e01b      	b.n	800148c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_OscConfig+0x248>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fb9f 	bl	8000b9c <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	e00e      	b.n	8001480 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff fb9b 	bl	8000b9c <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d907      	bls.n	8001480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e150      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 8001474:	40023800 	.word	0x40023800
 8001478:	42470000 	.word	0x42470000
 800147c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1ea      	bne.n	8001462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8097 	beq.w	80015c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b7d      	ldr	r3, [pc, #500]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a7c      	ldr	r2, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b7a      	ldr	r3, [pc, #488]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b74      	ldr	r3, [pc, #464]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a73      	ldr	r2, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fb5b 	bl	8000b9c <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff fb57 	bl	8000b9c <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e10c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x2ea>
 8001510:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a63      	ldr	r2, [pc, #396]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	; 0x70
 800151c:	e01c      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b05      	cmp	r3, #5
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x30c>
 8001526:	4b5f      	ldr	r3, [pc, #380]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a5e      	ldr	r2, [pc, #376]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	4b5c      	ldr	r3, [pc, #368]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a5b      	ldr	r2, [pc, #364]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 8001540:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	4a57      	ldr	r2, [pc, #348]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6713      	str	r3, [r2, #112]	; 0x70
 800154c:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a54      	ldr	r2, [pc, #336]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001552:	f023 0304 	bic.w	r3, r3, #4
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d015      	beq.n	800158c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fb1c 	bl	8000b9c <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fb18 	bl	8000b9c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0cb      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0ee      	beq.n	8001568 <HAL_RCC_OscConfig+0x334>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff fb06 	bl	8000b9c <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff fb02 	bl	8000b9c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0b5      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ee      	bne.n	8001594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a38      	ldr	r2, [pc, #224]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a1 	beq.w	8001714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d05c      	beq.n	8001698 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d141      	bne.n	800166a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fad6 	bl	8000b9c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fad2 	bl	8000b9c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e087      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	041b      	lsls	r3, r3, #16
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	061b      	lsls	r3, r3, #24
 8001636:	491b      	ldr	r1, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff faab 	bl	8000b9c <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff faa7 	bl	8000b9c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e05c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x416>
 8001668:	e054      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fa94 	bl	8000b9c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fa90 	bl	8000b9c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e045      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x444>
 8001696:	e03d      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e038      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000
 80016ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_RCC_OscConfig+0x4ec>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d028      	beq.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d121      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d11a      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d111      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0cc      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b68      	ldr	r3, [pc, #416]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d90c      	bls.n	8001760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b65      	ldr	r3, [pc, #404]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d044      	beq.n	8001844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e067      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 0203 	bic.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4934      	ldr	r1, [pc, #208]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001814:	f7ff f9c2 	bl	8000b9c <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	e00a      	b.n	8001832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7ff f9be 	bl	8000b9c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e04f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 020c 	and.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	d1eb      	bne.n	800181c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d20c      	bcs.n	800186c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f821 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	; (80018e4 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f922 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00
 80018e0:	40023800 	.word	0x40023800
 80018e4:	080038cc 	.word	0x080038cc
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f4:	b090      	sub	sp, #64	; 0x40
 80018f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
 80018fc:	2300      	movs	r3, #0
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001908:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d00d      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x40>
 8001914:	2b08      	cmp	r3, #8
 8001916:	f200 80a1 	bhi.w	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x34>
 800191e:	2b04      	cmp	r3, #4
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x3a>
 8001922:	e09b      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001928:	e09b      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192a:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800192e:	e098      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001930:	4b4f      	ldr	r3, [pc, #316]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193a:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d028      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	099b      	lsrs	r3, r3, #6
 800194c:	2200      	movs	r2, #0
 800194e:	623b      	str	r3, [r7, #32]
 8001950:	627a      	str	r2, [r7, #36]	; 0x24
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001958:	2100      	movs	r1, #0
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800195c:	fb03 f201 	mul.w	r2, r3, r1
 8001960:	2300      	movs	r3, #0
 8001962:	fb00 f303 	mul.w	r3, r0, r3
 8001966:	4413      	add	r3, r2
 8001968:	4a43      	ldr	r2, [pc, #268]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800196a:	fba0 1202 	umull	r1, r2, r0, r2
 800196e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001970:	460a      	mov	r2, r1
 8001972:	62ba      	str	r2, [r7, #40]	; 0x28
 8001974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001976:	4413      	add	r3, r2
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197c:	2200      	movs	r2, #0
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	61fa      	str	r2, [r7, #28]
 8001982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800198a:	f7fe fc79 	bl	8000280 <__aeabi_uldivmod>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4613      	mov	r3, r2
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001996:	e053      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	2200      	movs	r2, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	617a      	str	r2, [r7, #20]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019aa:	f04f 0b00 	mov.w	fp, #0
 80019ae:	4652      	mov	r2, sl
 80019b0:	465b      	mov	r3, fp
 80019b2:	f04f 0000 	mov.w	r0, #0
 80019b6:	f04f 0100 	mov.w	r1, #0
 80019ba:	0159      	lsls	r1, r3, #5
 80019bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c0:	0150      	lsls	r0, r2, #5
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ebb2 080a 	subs.w	r8, r2, sl
 80019ca:	eb63 090b 	sbc.w	r9, r3, fp
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019e2:	ebb2 0408 	subs.w	r4, r2, r8
 80019e6:	eb63 0509 	sbc.w	r5, r3, r9
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	00eb      	lsls	r3, r5, #3
 80019f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019f8:	00e2      	lsls	r2, r4, #3
 80019fa:	4614      	mov	r4, r2
 80019fc:	461d      	mov	r5, r3
 80019fe:	eb14 030a 	adds.w	r3, r4, sl
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	eb45 030b 	adc.w	r3, r5, fp
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a16:	4629      	mov	r1, r5
 8001a18:	028b      	lsls	r3, r1, #10
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a20:	4621      	mov	r1, r4
 8001a22:	028a      	lsls	r2, r1, #10
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	60fa      	str	r2, [r7, #12]
 8001a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a34:	f7fe fc24 	bl	8000280 <__aeabi_uldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a5a:	e002      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3740      	adds	r7, #64	; 0x40
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	017d7840 	.word	0x017d7840

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000

08001a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a98:	f7ff fff0 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0a9b      	lsrs	r3, r3, #10
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	080038dc 	.word	0x080038dc

08001abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ac0:	f7ff ffdc 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	0b5b      	lsrs	r3, r3, #13
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	4903      	ldr	r1, [pc, #12]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad2:	5ccb      	ldrb	r3, [r1, r3]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	080038dc 	.word	0x080038dc

08001ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e042      	b.n	8001b7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7fe fe98 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2224      	movs	r2, #36	; 0x24
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fd11 	bl	8002550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	d121      	bne.n	8001be2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_UART_Transmit_IT+0x26>
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e01a      	b.n	8001be4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	88fa      	ldrh	r2, [r7, #6]
 8001bb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	88fa      	ldrh	r2, [r7, #6]
 8001bbe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2221      	movs	r2, #33	; 0x21
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bdc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001be2:	2302      	movs	r3, #2
  }
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d112      	bne.n	8001c30 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_UART_Receive_IT+0x26>
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00b      	b.n	8001c32 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 faba 	bl	80021a0 <UART_Start_Receive_IT>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	e000      	b.n	8001c32 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001c30:	2302      	movs	r3, #2
  }
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b0ba      	sub	sp, #232	; 0xe8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001c7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10f      	bne.n	8001ca2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_UART_IRQHandler+0x66>
 8001c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fb99 	bl	80023d2 <UART_Receive_IT>
      return;
 8001ca0:	e25b      	b.n	800215a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80de 	beq.w	8001e68 <HAL_UART_IRQHandler+0x22c>
 8001cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d106      	bne.n	8001cc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80d1 	beq.w	8001e68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00b      	beq.n	8001cea <HAL_UART_IRQHandler+0xae>
 8001cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_UART_IRQHandler+0xd2>
 8001cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f043 0202 	orr.w	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_UART_IRQHandler+0xf6>
 8001d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f043 0204 	orr.w	r2, r3, #4
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d011      	beq.n	8001d62 <HAL_UART_IRQHandler+0x126>
 8001d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d105      	bne.n	8001d56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	f043 0208 	orr.w	r2, r3, #8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 81f2 	beq.w	8002150 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_UART_IRQHandler+0x14e>
 8001d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fb24 	bl	80023d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <HAL_UART_IRQHandler+0x17a>
 8001dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d04f      	beq.n	8001e56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fa2c 	bl	8002214 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc6:	2b40      	cmp	r3, #64	; 0x40
 8001dc8:	d141      	bne.n	8001e4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3314      	adds	r3, #20
 8001dd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dd8:	e853 3f00 	ldrex	r3, [r3]
 8001ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	3314      	adds	r3, #20
 8001df2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001df6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001e02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001e06:	e841 2300 	strex	r3, r2, [r1]
 8001e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1d9      	bne.n	8001dca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d013      	beq.n	8001e46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e22:	4a7e      	ldr	r2, [pc, #504]	; (800201c <HAL_UART_IRQHandler+0x3e0>)
 8001e24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f843 	bl	8000eb6 <HAL_DMA_Abort_IT>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d016      	beq.n	8001e64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e40:	4610      	mov	r0, r2
 8001e42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e44:	e00e      	b.n	8001e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f994 	bl	8002174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e4c:	e00a      	b.n	8001e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f990 	bl	8002174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e54:	e006      	b.n	8001e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f98c 	bl	8002174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001e62:	e175      	b.n	8002150 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e64:	bf00      	nop
    return;
 8001e66:	e173      	b.n	8002150 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	f040 814f 	bne.w	8002110 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8148 	beq.w	8002110 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 8141 	beq.w	8002110 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eae:	2b40      	cmp	r3, #64	; 0x40
 8001eb0:	f040 80b6 	bne.w	8002020 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001ec0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 8145 	beq.w	8002154 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	f080 813e 	bcs.w	8002154 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001ede:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eea:	f000 8088 	beq.w	8001ffe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	330c      	adds	r3, #12
 8001ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001efc:	e853 3f00 	ldrex	r3, [r3]
 8001f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	330c      	adds	r3, #12
 8001f16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001f1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001f26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f2a:	e841 2300 	strex	r3, r2, [r1]
 8001f2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1d9      	bne.n	8001eee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3314      	adds	r3, #20
 8001f40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f44:	e853 3f00 	ldrex	r3, [r3]
 8001f48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3314      	adds	r3, #20
 8001f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001f62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001f6a:	e841 2300 	strex	r3, r2, [r1]
 8001f6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1e1      	bne.n	8001f3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	3314      	adds	r3, #20
 8001f7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f80:	e853 3f00 	ldrex	r3, [r3]
 8001f84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3314      	adds	r3, #20
 8001f96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001f9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001fa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001fa2:	e841 2300 	strex	r3, r2, [r1]
 8001fa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1e3      	bne.n	8001f76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	330c      	adds	r3, #12
 8001fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc6:	e853 3f00 	ldrex	r3, [r3]
 8001fca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fce:	f023 0310 	bic.w	r3, r3, #16
 8001fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	330c      	adds	r3, #12
 8001fdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001fe0:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fe2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fe8:	e841 2300 	strex	r3, r2, [r1]
 8001fec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1e3      	bne.n	8001fbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe feec 	bl	8000dd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800200c:	b29b      	uxth	r3, r3
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	b29b      	uxth	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f8b7 	bl	8002188 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800201a:	e09b      	b.n	8002154 <HAL_UART_IRQHandler+0x518>
 800201c:	080022db 	.word	0x080022db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002028:	b29b      	uxth	r3, r3
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 808e 	beq.w	8002158 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800203c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8089 	beq.w	8002158 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	330c      	adds	r3, #12
 800204c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800204e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002050:	e853 3f00 	ldrex	r3, [r3]
 8002054:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002058:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800205c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	330c      	adds	r3, #12
 8002066:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800206a:	647a      	str	r2, [r7, #68]	; 0x44
 800206c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002072:	e841 2300 	strex	r3, r2, [r1]
 8002076:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1e3      	bne.n	8002046 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3314      	adds	r3, #20
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	e853 3f00 	ldrex	r3, [r3]
 800208c:	623b      	str	r3, [r7, #32]
   return(result);
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3314      	adds	r3, #20
 800209e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80020a2:	633a      	str	r2, [r7, #48]	; 0x30
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020aa:	e841 2300 	strex	r3, r2, [r1]
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1e3      	bne.n	800207e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	330c      	adds	r3, #12
 80020ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	e853 3f00 	ldrex	r3, [r3]
 80020d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0310 	bic.w	r3, r3, #16
 80020da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	330c      	adds	r3, #12
 80020e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80020e8:	61fa      	str	r2, [r7, #28]
 80020ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ec:	69b9      	ldr	r1, [r7, #24]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	e841 2300 	strex	r3, r2, [r1]
 80020f4:	617b      	str	r3, [r7, #20]
   return(result);
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e3      	bne.n	80020c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002102:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002106:	4619      	mov	r1, r3
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f83d 	bl	8002188 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800210e:	e023      	b.n	8002158 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002118:	2b00      	cmp	r3, #0
 800211a:	d009      	beq.n	8002130 <HAL_UART_IRQHandler+0x4f4>
 800211c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f8ea 	bl	8002302 <UART_Transmit_IT>
    return;
 800212e:	e014      	b.n	800215a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00e      	beq.n	800215a <HAL_UART_IRQHandler+0x51e>
 800213c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f92a 	bl	80023a2 <UART_EndTransmit_IT>
    return;
 800214e:	e004      	b.n	800215a <HAL_UART_IRQHandler+0x51e>
    return;
 8002150:	bf00      	nop
 8002152:	e002      	b.n	800215a <HAL_UART_IRQHandler+0x51e>
      return;
 8002154:	bf00      	nop
 8002156:	e000      	b.n	800215a <HAL_UART_IRQHandler+0x51e>
      return;
 8002158:	bf00      	nop
  }
}
 800215a:	37e8      	adds	r7, #232	; 0xe8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	88fa      	ldrh	r2, [r7, #6]
 80021be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2222      	movs	r2, #34	; 0x22
 80021ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0220 	orr.w	r2, r2, #32
 8002204:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002214:	b480      	push	{r7}
 8002216:	b095      	sub	sp, #84	; 0x54
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	330c      	adds	r3, #12
 8002222:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002226:	e853 3f00 	ldrex	r3, [r3]
 800222a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	330c      	adds	r3, #12
 800223a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800223c:	643a      	str	r2, [r7, #64]	; 0x40
 800223e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002240:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002242:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002244:	e841 2300 	strex	r3, r2, [r1]
 8002248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1e5      	bne.n	800221c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3314      	adds	r3, #20
 8002256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	e853 3f00 	ldrex	r3, [r3]
 800225e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f023 0301 	bic.w	r3, r3, #1
 8002266:	64bb      	str	r3, [r7, #72]	; 0x48
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3314      	adds	r3, #20
 800226e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002270:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002278:	e841 2300 	strex	r3, r2, [r1]
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1e5      	bne.n	8002250 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	2b01      	cmp	r3, #1
 800228a:	d119      	bne.n	80022c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	330c      	adds	r3, #12
 8002292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	e853 3f00 	ldrex	r3, [r3]
 800229a:	60bb      	str	r3, [r7, #8]
   return(result);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f023 0310 	bic.w	r3, r3, #16
 80022a2:	647b      	str	r3, [r7, #68]	; 0x44
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	330c      	adds	r3, #12
 80022aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022ac:	61ba      	str	r2, [r7, #24]
 80022ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b0:	6979      	ldr	r1, [r7, #20]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	e841 2300 	strex	r3, r2, [r1]
 80022b8:	613b      	str	r3, [r7, #16]
   return(result);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e5      	bne.n	800228c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022ce:	bf00      	nop
 80022d0:	3754      	adds	r7, #84	; 0x54
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f7ff ff3d 	bl	8002174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b21      	cmp	r3, #33	; 0x21
 8002314:	d13e      	bne.n	8002394 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231e:	d114      	bne.n	800234a <UART_Transmit_IT+0x48>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d110      	bne.n	800234a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800233c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	1c9a      	adds	r2, r3, #2
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	621a      	str	r2, [r3, #32]
 8002348:	e008      	b.n	800235c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	1c59      	adds	r1, r3, #1
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6211      	str	r1, [r2, #32]
 8002354:	781a      	ldrb	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29b      	uxth	r3, r3
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4619      	mov	r1, r3
 800236a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10f      	bne.n	8002390 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800237e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800238e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	e000      	b.n	8002396 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002394:	2302      	movs	r3, #2
  }
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fecc 	bl	8002160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b08c      	sub	sp, #48	; 0x30
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b22      	cmp	r3, #34	; 0x22
 80023e4:	f040 80ae 	bne.w	8002544 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f0:	d117      	bne.n	8002422 <UART_Receive_IT+0x50>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d113      	bne.n	8002422 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	b29b      	uxth	r3, r3
 800240c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002410:	b29a      	uxth	r2, r3
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	1c9a      	adds	r2, r3, #2
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
 8002420:	e026      	b.n	8002470 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002428:	2300      	movs	r3, #0
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002434:	d007      	beq.n	8002446 <UART_Receive_IT+0x74>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <UART_Receive_IT+0x82>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	e008      	b.n	8002466 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002460:	b2da      	uxtb	r2, r3
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29b      	uxth	r3, r3
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4619      	mov	r1, r3
 800247e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002480:	2b00      	cmp	r3, #0
 8002482:	d15d      	bne.n	8002540 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0220 	bic.w	r2, r2, #32
 8002492:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d135      	bne.n	8002536 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	330c      	adds	r3, #12
 80024d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	e853 3f00 	ldrex	r3, [r3]
 80024de:	613b      	str	r3, [r7, #16]
   return(result);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f023 0310 	bic.w	r3, r3, #16
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	330c      	adds	r3, #12
 80024ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f0:	623a      	str	r2, [r7, #32]
 80024f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f4:	69f9      	ldr	r1, [r7, #28]
 80024f6:	6a3a      	ldr	r2, [r7, #32]
 80024f8:	e841 2300 	strex	r3, r2, [r1]
 80024fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e5      	bne.n	80024d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b10      	cmp	r3, #16
 8002510:	d10a      	bne.n	8002528 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800252c:	4619      	mov	r1, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff fe2a 	bl	8002188 <HAL_UARTEx_RxEventCallback>
 8002534:	e002      	b.n	800253c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe f936 	bl	80007a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	e002      	b.n	8002546 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3730      	adds	r7, #48	; 0x30
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002554:	b0c0      	sub	sp, #256	; 0x100
 8002556:	af00      	add	r7, sp, #0
 8002558:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256c:	68d9      	ldr	r1, [r3, #12]
 800256e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	ea40 0301 	orr.w	r3, r0, r1
 8002578:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800257a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	431a      	orrs	r2, r3
 8002588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	431a      	orrs	r2, r3
 8002590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025a8:	f021 010c 	bic.w	r1, r1, #12
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025b6:	430b      	orrs	r3, r1
 80025b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ca:	6999      	ldr	r1, [r3, #24]
 80025cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	ea40 0301 	orr.w	r3, r0, r1
 80025d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4b8f      	ldr	r3, [pc, #572]	; (800281c <UART_SetConfig+0x2cc>)
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d005      	beq.n	80025f0 <UART_SetConfig+0xa0>
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b8d      	ldr	r3, [pc, #564]	; (8002820 <UART_SetConfig+0x2d0>)
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d104      	bne.n	80025fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025f0:	f7ff fa64 	bl	8001abc <HAL_RCC_GetPCLK2Freq>
 80025f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025f8:	e003      	b.n	8002602 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025fa:	f7ff fa4b 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 80025fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800260c:	f040 810c 	bne.w	8002828 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002614:	2200      	movs	r2, #0
 8002616:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800261a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800261e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002622:	4622      	mov	r2, r4
 8002624:	462b      	mov	r3, r5
 8002626:	1891      	adds	r1, r2, r2
 8002628:	65b9      	str	r1, [r7, #88]	; 0x58
 800262a:	415b      	adcs	r3, r3
 800262c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800262e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002632:	4621      	mov	r1, r4
 8002634:	eb12 0801 	adds.w	r8, r2, r1
 8002638:	4629      	mov	r1, r5
 800263a:	eb43 0901 	adc.w	r9, r3, r1
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800264a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800264e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002652:	4690      	mov	r8, r2
 8002654:	4699      	mov	r9, r3
 8002656:	4623      	mov	r3, r4
 8002658:	eb18 0303 	adds.w	r3, r8, r3
 800265c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002660:	462b      	mov	r3, r5
 8002662:	eb49 0303 	adc.w	r3, r9, r3
 8002666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002676:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800267a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800267e:	460b      	mov	r3, r1
 8002680:	18db      	adds	r3, r3, r3
 8002682:	653b      	str	r3, [r7, #80]	; 0x50
 8002684:	4613      	mov	r3, r2
 8002686:	eb42 0303 	adc.w	r3, r2, r3
 800268a:	657b      	str	r3, [r7, #84]	; 0x54
 800268c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002690:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002694:	f7fd fdf4 	bl	8000280 <__aeabi_uldivmod>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4b61      	ldr	r3, [pc, #388]	; (8002824 <UART_SetConfig+0x2d4>)
 800269e:	fba3 2302 	umull	r2, r3, r3, r2
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	011c      	lsls	r4, r3, #4
 80026a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026b8:	4642      	mov	r2, r8
 80026ba:	464b      	mov	r3, r9
 80026bc:	1891      	adds	r1, r2, r2
 80026be:	64b9      	str	r1, [r7, #72]	; 0x48
 80026c0:	415b      	adcs	r3, r3
 80026c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026c8:	4641      	mov	r1, r8
 80026ca:	eb12 0a01 	adds.w	sl, r2, r1
 80026ce:	4649      	mov	r1, r9
 80026d0:	eb43 0b01 	adc.w	fp, r3, r1
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026e8:	4692      	mov	sl, r2
 80026ea:	469b      	mov	fp, r3
 80026ec:	4643      	mov	r3, r8
 80026ee:	eb1a 0303 	adds.w	r3, sl, r3
 80026f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026f6:	464b      	mov	r3, r9
 80026f8:	eb4b 0303 	adc.w	r3, fp, r3
 80026fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800270c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002710:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002714:	460b      	mov	r3, r1
 8002716:	18db      	adds	r3, r3, r3
 8002718:	643b      	str	r3, [r7, #64]	; 0x40
 800271a:	4613      	mov	r3, r2
 800271c:	eb42 0303 	adc.w	r3, r2, r3
 8002720:	647b      	str	r3, [r7, #68]	; 0x44
 8002722:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002726:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800272a:	f7fd fda9 	bl	8000280 <__aeabi_uldivmod>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4611      	mov	r1, r2
 8002734:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <UART_SetConfig+0x2d4>)
 8002736:	fba3 2301 	umull	r2, r3, r3, r1
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2264      	movs	r2, #100	; 0x64
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	1acb      	subs	r3, r1, r3
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800274a:	4b36      	ldr	r3, [pc, #216]	; (8002824 <UART_SetConfig+0x2d4>)
 800274c:	fba3 2302 	umull	r2, r3, r3, r2
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002758:	441c      	add	r4, r3
 800275a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800275e:	2200      	movs	r2, #0
 8002760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002764:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002768:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800276c:	4642      	mov	r2, r8
 800276e:	464b      	mov	r3, r9
 8002770:	1891      	adds	r1, r2, r2
 8002772:	63b9      	str	r1, [r7, #56]	; 0x38
 8002774:	415b      	adcs	r3, r3
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002778:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800277c:	4641      	mov	r1, r8
 800277e:	1851      	adds	r1, r2, r1
 8002780:	6339      	str	r1, [r7, #48]	; 0x30
 8002782:	4649      	mov	r1, r9
 8002784:	414b      	adcs	r3, r1
 8002786:	637b      	str	r3, [r7, #52]	; 0x34
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002794:	4659      	mov	r1, fp
 8002796:	00cb      	lsls	r3, r1, #3
 8002798:	4651      	mov	r1, sl
 800279a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800279e:	4651      	mov	r1, sl
 80027a0:	00ca      	lsls	r2, r1, #3
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	4642      	mov	r2, r8
 80027aa:	189b      	adds	r3, r3, r2
 80027ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027b0:	464b      	mov	r3, r9
 80027b2:	460a      	mov	r2, r1
 80027b4:	eb42 0303 	adc.w	r3, r2, r3
 80027b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027d0:	460b      	mov	r3, r1
 80027d2:	18db      	adds	r3, r3, r3
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d6:	4613      	mov	r3, r2
 80027d8:	eb42 0303 	adc.w	r3, r2, r3
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027e6:	f7fd fd4b 	bl	8000280 <__aeabi_uldivmod>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <UART_SetConfig+0x2d4>)
 80027f0:	fba3 1302 	umull	r1, r3, r3, r2
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	2164      	movs	r1, #100	; 0x64
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	3332      	adds	r3, #50	; 0x32
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <UART_SetConfig+0x2d4>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	f003 0207 	and.w	r2, r3, #7
 800280e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4422      	add	r2, r4
 8002816:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002818:	e106      	b.n	8002a28 <UART_SetConfig+0x4d8>
 800281a:	bf00      	nop
 800281c:	40011000 	.word	0x40011000
 8002820:	40011400 	.word	0x40011400
 8002824:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800282c:	2200      	movs	r2, #0
 800282e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002832:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002836:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800283a:	4642      	mov	r2, r8
 800283c:	464b      	mov	r3, r9
 800283e:	1891      	adds	r1, r2, r2
 8002840:	6239      	str	r1, [r7, #32]
 8002842:	415b      	adcs	r3, r3
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
 8002846:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800284a:	4641      	mov	r1, r8
 800284c:	1854      	adds	r4, r2, r1
 800284e:	4649      	mov	r1, r9
 8002850:	eb43 0501 	adc.w	r5, r3, r1
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	00eb      	lsls	r3, r5, #3
 800285e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002862:	00e2      	lsls	r2, r4, #3
 8002864:	4614      	mov	r4, r2
 8002866:	461d      	mov	r5, r3
 8002868:	4643      	mov	r3, r8
 800286a:	18e3      	adds	r3, r4, r3
 800286c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002870:	464b      	mov	r3, r9
 8002872:	eb45 0303 	adc.w	r3, r5, r3
 8002876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800287a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002886:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002896:	4629      	mov	r1, r5
 8002898:	008b      	lsls	r3, r1, #2
 800289a:	4621      	mov	r1, r4
 800289c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028a0:	4621      	mov	r1, r4
 80028a2:	008a      	lsls	r2, r1, #2
 80028a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028a8:	f7fd fcea 	bl	8000280 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4b60      	ldr	r3, [pc, #384]	; (8002a34 <UART_SetConfig+0x4e4>)
 80028b2:	fba3 2302 	umull	r2, r3, r3, r2
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	011c      	lsls	r4, r3, #4
 80028ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028be:	2200      	movs	r2, #0
 80028c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028cc:	4642      	mov	r2, r8
 80028ce:	464b      	mov	r3, r9
 80028d0:	1891      	adds	r1, r2, r2
 80028d2:	61b9      	str	r1, [r7, #24]
 80028d4:	415b      	adcs	r3, r3
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028dc:	4641      	mov	r1, r8
 80028de:	1851      	adds	r1, r2, r1
 80028e0:	6139      	str	r1, [r7, #16]
 80028e2:	4649      	mov	r1, r9
 80028e4:	414b      	adcs	r3, r1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028f4:	4659      	mov	r1, fp
 80028f6:	00cb      	lsls	r3, r1, #3
 80028f8:	4651      	mov	r1, sl
 80028fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fe:	4651      	mov	r1, sl
 8002900:	00ca      	lsls	r2, r1, #3
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	4603      	mov	r3, r0
 8002908:	4642      	mov	r2, r8
 800290a:	189b      	adds	r3, r3, r2
 800290c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002910:	464b      	mov	r3, r9
 8002912:	460a      	mov	r2, r1
 8002914:	eb42 0303 	adc.w	r3, r2, r3
 8002918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	67bb      	str	r3, [r7, #120]	; 0x78
 8002926:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002934:	4649      	mov	r1, r9
 8002936:	008b      	lsls	r3, r1, #2
 8002938:	4641      	mov	r1, r8
 800293a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800293e:	4641      	mov	r1, r8
 8002940:	008a      	lsls	r2, r1, #2
 8002942:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002946:	f7fd fc9b 	bl	8000280 <__aeabi_uldivmod>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4611      	mov	r1, r2
 8002950:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <UART_SetConfig+0x4e4>)
 8002952:	fba3 2301 	umull	r2, r3, r3, r1
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2264      	movs	r2, #100	; 0x64
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	1acb      	subs	r3, r1, r3
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	3332      	adds	r3, #50	; 0x32
 8002964:	4a33      	ldr	r2, [pc, #204]	; (8002a34 <UART_SetConfig+0x4e4>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002970:	441c      	add	r4, r3
 8002972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002976:	2200      	movs	r2, #0
 8002978:	673b      	str	r3, [r7, #112]	; 0x70
 800297a:	677a      	str	r2, [r7, #116]	; 0x74
 800297c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002980:	4642      	mov	r2, r8
 8002982:	464b      	mov	r3, r9
 8002984:	1891      	adds	r1, r2, r2
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	415b      	adcs	r3, r3
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002990:	4641      	mov	r1, r8
 8002992:	1851      	adds	r1, r2, r1
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	4649      	mov	r1, r9
 8002998:	414b      	adcs	r3, r1
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029a8:	4659      	mov	r1, fp
 80029aa:	00cb      	lsls	r3, r1, #3
 80029ac:	4651      	mov	r1, sl
 80029ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029b2:	4651      	mov	r1, sl
 80029b4:	00ca      	lsls	r2, r1, #3
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	4642      	mov	r2, r8
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80029c2:	464b      	mov	r3, r9
 80029c4:	460a      	mov	r2, r1
 80029c6:	eb42 0303 	adc.w	r3, r2, r3
 80029ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	663b      	str	r3, [r7, #96]	; 0x60
 80029d6:	667a      	str	r2, [r7, #100]	; 0x64
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029e4:	4649      	mov	r1, r9
 80029e6:	008b      	lsls	r3, r1, #2
 80029e8:	4641      	mov	r1, r8
 80029ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ee:	4641      	mov	r1, r8
 80029f0:	008a      	lsls	r2, r1, #2
 80029f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029f6:	f7fd fc43 	bl	8000280 <__aeabi_uldivmod>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <UART_SetConfig+0x4e4>)
 8002a00:	fba3 1302 	umull	r1, r3, r3, r2
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	2164      	movs	r1, #100	; 0x64
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	3332      	adds	r3, #50	; 0x32
 8002a12:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <UART_SetConfig+0x4e4>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4422      	add	r2, r4
 8002a26:	609a      	str	r2, [r3, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a34:	51eb851f 	.word	0x51eb851f

08002a38 <std>:
 8002a38:	2300      	movs	r3, #0
 8002a3a:	b510      	push	{r4, lr}
 8002a3c:	4604      	mov	r4, r0
 8002a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8002a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a46:	6083      	str	r3, [r0, #8]
 8002a48:	8181      	strh	r1, [r0, #12]
 8002a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8002a4c:	81c2      	strh	r2, [r0, #14]
 8002a4e:	6183      	str	r3, [r0, #24]
 8002a50:	4619      	mov	r1, r3
 8002a52:	2208      	movs	r2, #8
 8002a54:	305c      	adds	r0, #92	; 0x5c
 8002a56:	f000 f906 	bl	8002c66 <memset>
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <std+0x58>)
 8002a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <std+0x5c>)
 8002a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <std+0x60>)
 8002a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <std+0x64>)
 8002a68:	6323      	str	r3, [r4, #48]	; 0x30
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <std+0x68>)
 8002a6c:	6224      	str	r4, [r4, #32]
 8002a6e:	429c      	cmp	r4, r3
 8002a70:	d006      	beq.n	8002a80 <std+0x48>
 8002a72:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002a76:	4294      	cmp	r4, r2
 8002a78:	d002      	beq.n	8002a80 <std+0x48>
 8002a7a:	33d0      	adds	r3, #208	; 0xd0
 8002a7c:	429c      	cmp	r4, r3
 8002a7e:	d105      	bne.n	8002a8c <std+0x54>
 8002a80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a88:	f000 b966 	b.w	8002d58 <__retarget_lock_init_recursive>
 8002a8c:	bd10      	pop	{r4, pc}
 8002a8e:	bf00      	nop
 8002a90:	08002be1 	.word	0x08002be1
 8002a94:	08002c03 	.word	0x08002c03
 8002a98:	08002c3b 	.word	0x08002c3b
 8002a9c:	08002c5f 	.word	0x08002c5f
 8002aa0:	200000d8 	.word	0x200000d8

08002aa4 <stdio_exit_handler>:
 8002aa4:	4a02      	ldr	r2, [pc, #8]	; (8002ab0 <stdio_exit_handler+0xc>)
 8002aa6:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <stdio_exit_handler+0x10>)
 8002aa8:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <stdio_exit_handler+0x14>)
 8002aaa:	f000 b869 	b.w	8002b80 <_fwalk_sglue>
 8002aae:	bf00      	nop
 8002ab0:	2000000c 	.word	0x2000000c
 8002ab4:	08003605 	.word	0x08003605
 8002ab8:	20000018 	.word	0x20000018

08002abc <cleanup_stdio>:
 8002abc:	6841      	ldr	r1, [r0, #4]
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <cleanup_stdio+0x34>)
 8002ac0:	4299      	cmp	r1, r3
 8002ac2:	b510      	push	{r4, lr}
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	d001      	beq.n	8002acc <cleanup_stdio+0x10>
 8002ac8:	f000 fd9c 	bl	8003604 <_fflush_r>
 8002acc:	68a1      	ldr	r1, [r4, #8]
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <cleanup_stdio+0x38>)
 8002ad0:	4299      	cmp	r1, r3
 8002ad2:	d002      	beq.n	8002ada <cleanup_stdio+0x1e>
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f000 fd95 	bl	8003604 <_fflush_r>
 8002ada:	68e1      	ldr	r1, [r4, #12]
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <cleanup_stdio+0x3c>)
 8002ade:	4299      	cmp	r1, r3
 8002ae0:	d004      	beq.n	8002aec <cleanup_stdio+0x30>
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ae8:	f000 bd8c 	b.w	8003604 <_fflush_r>
 8002aec:	bd10      	pop	{r4, pc}
 8002aee:	bf00      	nop
 8002af0:	200000d8 	.word	0x200000d8
 8002af4:	20000140 	.word	0x20000140
 8002af8:	200001a8 	.word	0x200001a8

08002afc <global_stdio_init.part.0>:
 8002afc:	b510      	push	{r4, lr}
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <global_stdio_init.part.0+0x30>)
 8002b00:	4c0b      	ldr	r4, [pc, #44]	; (8002b30 <global_stdio_init.part.0+0x34>)
 8002b02:	4a0c      	ldr	r2, [pc, #48]	; (8002b34 <global_stdio_init.part.0+0x38>)
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	4620      	mov	r0, r4
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	f7ff ff94 	bl	8002a38 <std>
 8002b10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002b14:	2201      	movs	r2, #1
 8002b16:	2109      	movs	r1, #9
 8002b18:	f7ff ff8e 	bl	8002a38 <std>
 8002b1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002b20:	2202      	movs	r2, #2
 8002b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b26:	2112      	movs	r1, #18
 8002b28:	f7ff bf86 	b.w	8002a38 <std>
 8002b2c:	20000210 	.word	0x20000210
 8002b30:	200000d8 	.word	0x200000d8
 8002b34:	08002aa5 	.word	0x08002aa5

08002b38 <__sfp_lock_acquire>:
 8002b38:	4801      	ldr	r0, [pc, #4]	; (8002b40 <__sfp_lock_acquire+0x8>)
 8002b3a:	f000 b90e 	b.w	8002d5a <__retarget_lock_acquire_recursive>
 8002b3e:	bf00      	nop
 8002b40:	20000219 	.word	0x20000219

08002b44 <__sfp_lock_release>:
 8002b44:	4801      	ldr	r0, [pc, #4]	; (8002b4c <__sfp_lock_release+0x8>)
 8002b46:	f000 b909 	b.w	8002d5c <__retarget_lock_release_recursive>
 8002b4a:	bf00      	nop
 8002b4c:	20000219 	.word	0x20000219

08002b50 <__sinit>:
 8002b50:	b510      	push	{r4, lr}
 8002b52:	4604      	mov	r4, r0
 8002b54:	f7ff fff0 	bl	8002b38 <__sfp_lock_acquire>
 8002b58:	6a23      	ldr	r3, [r4, #32]
 8002b5a:	b11b      	cbz	r3, 8002b64 <__sinit+0x14>
 8002b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b60:	f7ff bff0 	b.w	8002b44 <__sfp_lock_release>
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <__sinit+0x28>)
 8002b66:	6223      	str	r3, [r4, #32]
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <__sinit+0x2c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f5      	bne.n	8002b5c <__sinit+0xc>
 8002b70:	f7ff ffc4 	bl	8002afc <global_stdio_init.part.0>
 8002b74:	e7f2      	b.n	8002b5c <__sinit+0xc>
 8002b76:	bf00      	nop
 8002b78:	08002abd 	.word	0x08002abd
 8002b7c:	20000210 	.word	0x20000210

08002b80 <_fwalk_sglue>:
 8002b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b84:	4607      	mov	r7, r0
 8002b86:	4688      	mov	r8, r1
 8002b88:	4614      	mov	r4, r2
 8002b8a:	2600      	movs	r6, #0
 8002b8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b90:	f1b9 0901 	subs.w	r9, r9, #1
 8002b94:	d505      	bpl.n	8002ba2 <_fwalk_sglue+0x22>
 8002b96:	6824      	ldr	r4, [r4, #0]
 8002b98:	2c00      	cmp	r4, #0
 8002b9a:	d1f7      	bne.n	8002b8c <_fwalk_sglue+0xc>
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ba2:	89ab      	ldrh	r3, [r5, #12]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d907      	bls.n	8002bb8 <_fwalk_sglue+0x38>
 8002ba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002bac:	3301      	adds	r3, #1
 8002bae:	d003      	beq.n	8002bb8 <_fwalk_sglue+0x38>
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	4638      	mov	r0, r7
 8002bb4:	47c0      	blx	r8
 8002bb6:	4306      	orrs	r6, r0
 8002bb8:	3568      	adds	r5, #104	; 0x68
 8002bba:	e7e9      	b.n	8002b90 <_fwalk_sglue+0x10>

08002bbc <iprintf>:
 8002bbc:	b40f      	push	{r0, r1, r2, r3}
 8002bbe:	b507      	push	{r0, r1, r2, lr}
 8002bc0:	4906      	ldr	r1, [pc, #24]	; (8002bdc <iprintf+0x20>)
 8002bc2:	ab04      	add	r3, sp, #16
 8002bc4:	6808      	ldr	r0, [r1, #0]
 8002bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bca:	6881      	ldr	r1, [r0, #8]
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	f000 f9e9 	bl	8002fa4 <_vfiprintf_r>
 8002bd2:	b003      	add	sp, #12
 8002bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bd8:	b004      	add	sp, #16
 8002bda:	4770      	bx	lr
 8002bdc:	20000064 	.word	0x20000064

08002be0 <__sread>:
 8002be0:	b510      	push	{r4, lr}
 8002be2:	460c      	mov	r4, r1
 8002be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002be8:	f000 f868 	bl	8002cbc <_read_r>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	bfab      	itete	ge
 8002bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8002bf4:	181b      	addge	r3, r3, r0
 8002bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002bfa:	bfac      	ite	ge
 8002bfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8002bfe:	81a3      	strhlt	r3, [r4, #12]
 8002c00:	bd10      	pop	{r4, pc}

08002c02 <__swrite>:
 8002c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c06:	461f      	mov	r7, r3
 8002c08:	898b      	ldrh	r3, [r1, #12]
 8002c0a:	05db      	lsls	r3, r3, #23
 8002c0c:	4605      	mov	r5, r0
 8002c0e:	460c      	mov	r4, r1
 8002c10:	4616      	mov	r6, r2
 8002c12:	d505      	bpl.n	8002c20 <__swrite+0x1e>
 8002c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c18:	2302      	movs	r3, #2
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f000 f83c 	bl	8002c98 <_lseek_r>
 8002c20:	89a3      	ldrh	r3, [r4, #12]
 8002c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c2a:	81a3      	strh	r3, [r4, #12]
 8002c2c:	4632      	mov	r2, r6
 8002c2e:	463b      	mov	r3, r7
 8002c30:	4628      	mov	r0, r5
 8002c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c36:	f000 b853 	b.w	8002ce0 <_write_r>

08002c3a <__sseek>:
 8002c3a:	b510      	push	{r4, lr}
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c42:	f000 f829 	bl	8002c98 <_lseek_r>
 8002c46:	1c43      	adds	r3, r0, #1
 8002c48:	89a3      	ldrh	r3, [r4, #12]
 8002c4a:	bf15      	itete	ne
 8002c4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c56:	81a3      	strheq	r3, [r4, #12]
 8002c58:	bf18      	it	ne
 8002c5a:	81a3      	strhne	r3, [r4, #12]
 8002c5c:	bd10      	pop	{r4, pc}

08002c5e <__sclose>:
 8002c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c62:	f000 b809 	b.w	8002c78 <_close_r>

08002c66 <memset>:
 8002c66:	4402      	add	r2, r0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d100      	bne.n	8002c70 <memset+0xa>
 8002c6e:	4770      	bx	lr
 8002c70:	f803 1b01 	strb.w	r1, [r3], #1
 8002c74:	e7f9      	b.n	8002c6a <memset+0x4>
	...

08002c78 <_close_r>:
 8002c78:	b538      	push	{r3, r4, r5, lr}
 8002c7a:	4d06      	ldr	r5, [pc, #24]	; (8002c94 <_close_r+0x1c>)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	4604      	mov	r4, r0
 8002c80:	4608      	mov	r0, r1
 8002c82:	602b      	str	r3, [r5, #0]
 8002c84:	f7fd fe7d 	bl	8000982 <_close>
 8002c88:	1c43      	adds	r3, r0, #1
 8002c8a:	d102      	bne.n	8002c92 <_close_r+0x1a>
 8002c8c:	682b      	ldr	r3, [r5, #0]
 8002c8e:	b103      	cbz	r3, 8002c92 <_close_r+0x1a>
 8002c90:	6023      	str	r3, [r4, #0]
 8002c92:	bd38      	pop	{r3, r4, r5, pc}
 8002c94:	20000214 	.word	0x20000214

08002c98 <_lseek_r>:
 8002c98:	b538      	push	{r3, r4, r5, lr}
 8002c9a:	4d07      	ldr	r5, [pc, #28]	; (8002cb8 <_lseek_r+0x20>)
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	4608      	mov	r0, r1
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	602a      	str	r2, [r5, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f7fd fe92 	bl	80009d0 <_lseek>
 8002cac:	1c43      	adds	r3, r0, #1
 8002cae:	d102      	bne.n	8002cb6 <_lseek_r+0x1e>
 8002cb0:	682b      	ldr	r3, [r5, #0]
 8002cb2:	b103      	cbz	r3, 8002cb6 <_lseek_r+0x1e>
 8002cb4:	6023      	str	r3, [r4, #0]
 8002cb6:	bd38      	pop	{r3, r4, r5, pc}
 8002cb8:	20000214 	.word	0x20000214

08002cbc <_read_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	4d07      	ldr	r5, [pc, #28]	; (8002cdc <_read_r+0x20>)
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	4608      	mov	r0, r1
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	602a      	str	r2, [r5, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f7fd fe3c 	bl	8000948 <_read>
 8002cd0:	1c43      	adds	r3, r0, #1
 8002cd2:	d102      	bne.n	8002cda <_read_r+0x1e>
 8002cd4:	682b      	ldr	r3, [r5, #0]
 8002cd6:	b103      	cbz	r3, 8002cda <_read_r+0x1e>
 8002cd8:	6023      	str	r3, [r4, #0]
 8002cda:	bd38      	pop	{r3, r4, r5, pc}
 8002cdc:	20000214 	.word	0x20000214

08002ce0 <_write_r>:
 8002ce0:	b538      	push	{r3, r4, r5, lr}
 8002ce2:	4d07      	ldr	r5, [pc, #28]	; (8002d00 <_write_r+0x20>)
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	4608      	mov	r0, r1
 8002ce8:	4611      	mov	r1, r2
 8002cea:	2200      	movs	r2, #0
 8002cec:	602a      	str	r2, [r5, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f7fd fc44 	bl	800057c <_write>
 8002cf4:	1c43      	adds	r3, r0, #1
 8002cf6:	d102      	bne.n	8002cfe <_write_r+0x1e>
 8002cf8:	682b      	ldr	r3, [r5, #0]
 8002cfa:	b103      	cbz	r3, 8002cfe <_write_r+0x1e>
 8002cfc:	6023      	str	r3, [r4, #0]
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}
 8002d00:	20000214 	.word	0x20000214

08002d04 <__errno>:
 8002d04:	4b01      	ldr	r3, [pc, #4]	; (8002d0c <__errno+0x8>)
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000064 	.word	0x20000064

08002d10 <__libc_init_array>:
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	4d0d      	ldr	r5, [pc, #52]	; (8002d48 <__libc_init_array+0x38>)
 8002d14:	4c0d      	ldr	r4, [pc, #52]	; (8002d4c <__libc_init_array+0x3c>)
 8002d16:	1b64      	subs	r4, r4, r5
 8002d18:	10a4      	asrs	r4, r4, #2
 8002d1a:	2600      	movs	r6, #0
 8002d1c:	42a6      	cmp	r6, r4
 8002d1e:	d109      	bne.n	8002d34 <__libc_init_array+0x24>
 8002d20:	4d0b      	ldr	r5, [pc, #44]	; (8002d50 <__libc_init_array+0x40>)
 8002d22:	4c0c      	ldr	r4, [pc, #48]	; (8002d54 <__libc_init_array+0x44>)
 8002d24:	f000 fdc0 	bl	80038a8 <_init>
 8002d28:	1b64      	subs	r4, r4, r5
 8002d2a:	10a4      	asrs	r4, r4, #2
 8002d2c:	2600      	movs	r6, #0
 8002d2e:	42a6      	cmp	r6, r4
 8002d30:	d105      	bne.n	8002d3e <__libc_init_array+0x2e>
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
 8002d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d38:	4798      	blx	r3
 8002d3a:	3601      	adds	r6, #1
 8002d3c:	e7ee      	b.n	8002d1c <__libc_init_array+0xc>
 8002d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d42:	4798      	blx	r3
 8002d44:	3601      	adds	r6, #1
 8002d46:	e7f2      	b.n	8002d2e <__libc_init_array+0x1e>
 8002d48:	08003920 	.word	0x08003920
 8002d4c:	08003920 	.word	0x08003920
 8002d50:	08003920 	.word	0x08003920
 8002d54:	08003924 	.word	0x08003924

08002d58 <__retarget_lock_init_recursive>:
 8002d58:	4770      	bx	lr

08002d5a <__retarget_lock_acquire_recursive>:
 8002d5a:	4770      	bx	lr

08002d5c <__retarget_lock_release_recursive>:
 8002d5c:	4770      	bx	lr
	...

08002d60 <_free_r>:
 8002d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d62:	2900      	cmp	r1, #0
 8002d64:	d044      	beq.n	8002df0 <_free_r+0x90>
 8002d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d6a:	9001      	str	r0, [sp, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f1a1 0404 	sub.w	r4, r1, #4
 8002d72:	bfb8      	it	lt
 8002d74:	18e4      	addlt	r4, r4, r3
 8002d76:	f000 f8df 	bl	8002f38 <__malloc_lock>
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <_free_r+0x94>)
 8002d7c:	9801      	ldr	r0, [sp, #4]
 8002d7e:	6813      	ldr	r3, [r2, #0]
 8002d80:	b933      	cbnz	r3, 8002d90 <_free_r+0x30>
 8002d82:	6063      	str	r3, [r4, #4]
 8002d84:	6014      	str	r4, [r2, #0]
 8002d86:	b003      	add	sp, #12
 8002d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d8c:	f000 b8da 	b.w	8002f44 <__malloc_unlock>
 8002d90:	42a3      	cmp	r3, r4
 8002d92:	d908      	bls.n	8002da6 <_free_r+0x46>
 8002d94:	6825      	ldr	r5, [r4, #0]
 8002d96:	1961      	adds	r1, r4, r5
 8002d98:	428b      	cmp	r3, r1
 8002d9a:	bf01      	itttt	eq
 8002d9c:	6819      	ldreq	r1, [r3, #0]
 8002d9e:	685b      	ldreq	r3, [r3, #4]
 8002da0:	1949      	addeq	r1, r1, r5
 8002da2:	6021      	streq	r1, [r4, #0]
 8002da4:	e7ed      	b.n	8002d82 <_free_r+0x22>
 8002da6:	461a      	mov	r2, r3
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	b10b      	cbz	r3, 8002db0 <_free_r+0x50>
 8002dac:	42a3      	cmp	r3, r4
 8002dae:	d9fa      	bls.n	8002da6 <_free_r+0x46>
 8002db0:	6811      	ldr	r1, [r2, #0]
 8002db2:	1855      	adds	r5, r2, r1
 8002db4:	42a5      	cmp	r5, r4
 8002db6:	d10b      	bne.n	8002dd0 <_free_r+0x70>
 8002db8:	6824      	ldr	r4, [r4, #0]
 8002dba:	4421      	add	r1, r4
 8002dbc:	1854      	adds	r4, r2, r1
 8002dbe:	42a3      	cmp	r3, r4
 8002dc0:	6011      	str	r1, [r2, #0]
 8002dc2:	d1e0      	bne.n	8002d86 <_free_r+0x26>
 8002dc4:	681c      	ldr	r4, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	6053      	str	r3, [r2, #4]
 8002dca:	440c      	add	r4, r1
 8002dcc:	6014      	str	r4, [r2, #0]
 8002dce:	e7da      	b.n	8002d86 <_free_r+0x26>
 8002dd0:	d902      	bls.n	8002dd8 <_free_r+0x78>
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	6003      	str	r3, [r0, #0]
 8002dd6:	e7d6      	b.n	8002d86 <_free_r+0x26>
 8002dd8:	6825      	ldr	r5, [r4, #0]
 8002dda:	1961      	adds	r1, r4, r5
 8002ddc:	428b      	cmp	r3, r1
 8002dde:	bf04      	itt	eq
 8002de0:	6819      	ldreq	r1, [r3, #0]
 8002de2:	685b      	ldreq	r3, [r3, #4]
 8002de4:	6063      	str	r3, [r4, #4]
 8002de6:	bf04      	itt	eq
 8002de8:	1949      	addeq	r1, r1, r5
 8002dea:	6021      	streq	r1, [r4, #0]
 8002dec:	6054      	str	r4, [r2, #4]
 8002dee:	e7ca      	b.n	8002d86 <_free_r+0x26>
 8002df0:	b003      	add	sp, #12
 8002df2:	bd30      	pop	{r4, r5, pc}
 8002df4:	2000021c 	.word	0x2000021c

08002df8 <sbrk_aligned>:
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	4e0e      	ldr	r6, [pc, #56]	; (8002e34 <sbrk_aligned+0x3c>)
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	6831      	ldr	r1, [r6, #0]
 8002e00:	4605      	mov	r5, r0
 8002e02:	b911      	cbnz	r1, 8002e0a <sbrk_aligned+0x12>
 8002e04:	f000 fcbc 	bl	8003780 <_sbrk_r>
 8002e08:	6030      	str	r0, [r6, #0]
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	f000 fcb7 	bl	8003780 <_sbrk_r>
 8002e12:	1c43      	adds	r3, r0, #1
 8002e14:	d00a      	beq.n	8002e2c <sbrk_aligned+0x34>
 8002e16:	1cc4      	adds	r4, r0, #3
 8002e18:	f024 0403 	bic.w	r4, r4, #3
 8002e1c:	42a0      	cmp	r0, r4
 8002e1e:	d007      	beq.n	8002e30 <sbrk_aligned+0x38>
 8002e20:	1a21      	subs	r1, r4, r0
 8002e22:	4628      	mov	r0, r5
 8002e24:	f000 fcac 	bl	8003780 <_sbrk_r>
 8002e28:	3001      	adds	r0, #1
 8002e2a:	d101      	bne.n	8002e30 <sbrk_aligned+0x38>
 8002e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8002e30:	4620      	mov	r0, r4
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
 8002e34:	20000220 	.word	0x20000220

08002e38 <_malloc_r>:
 8002e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e3c:	1ccd      	adds	r5, r1, #3
 8002e3e:	f025 0503 	bic.w	r5, r5, #3
 8002e42:	3508      	adds	r5, #8
 8002e44:	2d0c      	cmp	r5, #12
 8002e46:	bf38      	it	cc
 8002e48:	250c      	movcc	r5, #12
 8002e4a:	2d00      	cmp	r5, #0
 8002e4c:	4607      	mov	r7, r0
 8002e4e:	db01      	blt.n	8002e54 <_malloc_r+0x1c>
 8002e50:	42a9      	cmp	r1, r5
 8002e52:	d905      	bls.n	8002e60 <_malloc_r+0x28>
 8002e54:	230c      	movs	r3, #12
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	2600      	movs	r6, #0
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f34 <_malloc_r+0xfc>
 8002e64:	f000 f868 	bl	8002f38 <__malloc_lock>
 8002e68:	f8d8 3000 	ldr.w	r3, [r8]
 8002e6c:	461c      	mov	r4, r3
 8002e6e:	bb5c      	cbnz	r4, 8002ec8 <_malloc_r+0x90>
 8002e70:	4629      	mov	r1, r5
 8002e72:	4638      	mov	r0, r7
 8002e74:	f7ff ffc0 	bl	8002df8 <sbrk_aligned>
 8002e78:	1c43      	adds	r3, r0, #1
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	d155      	bne.n	8002f2a <_malloc_r+0xf2>
 8002e7e:	f8d8 4000 	ldr.w	r4, [r8]
 8002e82:	4626      	mov	r6, r4
 8002e84:	2e00      	cmp	r6, #0
 8002e86:	d145      	bne.n	8002f14 <_malloc_r+0xdc>
 8002e88:	2c00      	cmp	r4, #0
 8002e8a:	d048      	beq.n	8002f1e <_malloc_r+0xe6>
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	4631      	mov	r1, r6
 8002e90:	4638      	mov	r0, r7
 8002e92:	eb04 0903 	add.w	r9, r4, r3
 8002e96:	f000 fc73 	bl	8003780 <_sbrk_r>
 8002e9a:	4581      	cmp	r9, r0
 8002e9c:	d13f      	bne.n	8002f1e <_malloc_r+0xe6>
 8002e9e:	6821      	ldr	r1, [r4, #0]
 8002ea0:	1a6d      	subs	r5, r5, r1
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	4638      	mov	r0, r7
 8002ea6:	f7ff ffa7 	bl	8002df8 <sbrk_aligned>
 8002eaa:	3001      	adds	r0, #1
 8002eac:	d037      	beq.n	8002f1e <_malloc_r+0xe6>
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	442b      	add	r3, r5
 8002eb2:	6023      	str	r3, [r4, #0]
 8002eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d038      	beq.n	8002f2e <_malloc_r+0xf6>
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	42a2      	cmp	r2, r4
 8002ec0:	d12b      	bne.n	8002f1a <_malloc_r+0xe2>
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	e00f      	b.n	8002ee8 <_malloc_r+0xb0>
 8002ec8:	6822      	ldr	r2, [r4, #0]
 8002eca:	1b52      	subs	r2, r2, r5
 8002ecc:	d41f      	bmi.n	8002f0e <_malloc_r+0xd6>
 8002ece:	2a0b      	cmp	r2, #11
 8002ed0:	d917      	bls.n	8002f02 <_malloc_r+0xca>
 8002ed2:	1961      	adds	r1, r4, r5
 8002ed4:	42a3      	cmp	r3, r4
 8002ed6:	6025      	str	r5, [r4, #0]
 8002ed8:	bf18      	it	ne
 8002eda:	6059      	strne	r1, [r3, #4]
 8002edc:	6863      	ldr	r3, [r4, #4]
 8002ede:	bf08      	it	eq
 8002ee0:	f8c8 1000 	streq.w	r1, [r8]
 8002ee4:	5162      	str	r2, [r4, r5]
 8002ee6:	604b      	str	r3, [r1, #4]
 8002ee8:	4638      	mov	r0, r7
 8002eea:	f104 060b 	add.w	r6, r4, #11
 8002eee:	f000 f829 	bl	8002f44 <__malloc_unlock>
 8002ef2:	f026 0607 	bic.w	r6, r6, #7
 8002ef6:	1d23      	adds	r3, r4, #4
 8002ef8:	1af2      	subs	r2, r6, r3
 8002efa:	d0ae      	beq.n	8002e5a <_malloc_r+0x22>
 8002efc:	1b9b      	subs	r3, r3, r6
 8002efe:	50a3      	str	r3, [r4, r2]
 8002f00:	e7ab      	b.n	8002e5a <_malloc_r+0x22>
 8002f02:	42a3      	cmp	r3, r4
 8002f04:	6862      	ldr	r2, [r4, #4]
 8002f06:	d1dd      	bne.n	8002ec4 <_malloc_r+0x8c>
 8002f08:	f8c8 2000 	str.w	r2, [r8]
 8002f0c:	e7ec      	b.n	8002ee8 <_malloc_r+0xb0>
 8002f0e:	4623      	mov	r3, r4
 8002f10:	6864      	ldr	r4, [r4, #4]
 8002f12:	e7ac      	b.n	8002e6e <_malloc_r+0x36>
 8002f14:	4634      	mov	r4, r6
 8002f16:	6876      	ldr	r6, [r6, #4]
 8002f18:	e7b4      	b.n	8002e84 <_malloc_r+0x4c>
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	e7cc      	b.n	8002eb8 <_malloc_r+0x80>
 8002f1e:	230c      	movs	r3, #12
 8002f20:	603b      	str	r3, [r7, #0]
 8002f22:	4638      	mov	r0, r7
 8002f24:	f000 f80e 	bl	8002f44 <__malloc_unlock>
 8002f28:	e797      	b.n	8002e5a <_malloc_r+0x22>
 8002f2a:	6025      	str	r5, [r4, #0]
 8002f2c:	e7dc      	b.n	8002ee8 <_malloc_r+0xb0>
 8002f2e:	605b      	str	r3, [r3, #4]
 8002f30:	deff      	udf	#255	; 0xff
 8002f32:	bf00      	nop
 8002f34:	2000021c 	.word	0x2000021c

08002f38 <__malloc_lock>:
 8002f38:	4801      	ldr	r0, [pc, #4]	; (8002f40 <__malloc_lock+0x8>)
 8002f3a:	f7ff bf0e 	b.w	8002d5a <__retarget_lock_acquire_recursive>
 8002f3e:	bf00      	nop
 8002f40:	20000218 	.word	0x20000218

08002f44 <__malloc_unlock>:
 8002f44:	4801      	ldr	r0, [pc, #4]	; (8002f4c <__malloc_unlock+0x8>)
 8002f46:	f7ff bf09 	b.w	8002d5c <__retarget_lock_release_recursive>
 8002f4a:	bf00      	nop
 8002f4c:	20000218 	.word	0x20000218

08002f50 <__sfputc_r>:
 8002f50:	6893      	ldr	r3, [r2, #8]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	b410      	push	{r4}
 8002f58:	6093      	str	r3, [r2, #8]
 8002f5a:	da08      	bge.n	8002f6e <__sfputc_r+0x1e>
 8002f5c:	6994      	ldr	r4, [r2, #24]
 8002f5e:	42a3      	cmp	r3, r4
 8002f60:	db01      	blt.n	8002f66 <__sfputc_r+0x16>
 8002f62:	290a      	cmp	r1, #10
 8002f64:	d103      	bne.n	8002f6e <__sfputc_r+0x1e>
 8002f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f6a:	f000 bb73 	b.w	8003654 <__swbuf_r>
 8002f6e:	6813      	ldr	r3, [r2, #0]
 8002f70:	1c58      	adds	r0, r3, #1
 8002f72:	6010      	str	r0, [r2, #0]
 8002f74:	7019      	strb	r1, [r3, #0]
 8002f76:	4608      	mov	r0, r1
 8002f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <__sfputs_r>:
 8002f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f80:	4606      	mov	r6, r0
 8002f82:	460f      	mov	r7, r1
 8002f84:	4614      	mov	r4, r2
 8002f86:	18d5      	adds	r5, r2, r3
 8002f88:	42ac      	cmp	r4, r5
 8002f8a:	d101      	bne.n	8002f90 <__sfputs_r+0x12>
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	e007      	b.n	8002fa0 <__sfputs_r+0x22>
 8002f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f94:	463a      	mov	r2, r7
 8002f96:	4630      	mov	r0, r6
 8002f98:	f7ff ffda 	bl	8002f50 <__sfputc_r>
 8002f9c:	1c43      	adds	r3, r0, #1
 8002f9e:	d1f3      	bne.n	8002f88 <__sfputs_r+0xa>
 8002fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002fa4 <_vfiprintf_r>:
 8002fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa8:	460d      	mov	r5, r1
 8002faa:	b09d      	sub	sp, #116	; 0x74
 8002fac:	4614      	mov	r4, r2
 8002fae:	4698      	mov	r8, r3
 8002fb0:	4606      	mov	r6, r0
 8002fb2:	b118      	cbz	r0, 8002fbc <_vfiprintf_r+0x18>
 8002fb4:	6a03      	ldr	r3, [r0, #32]
 8002fb6:	b90b      	cbnz	r3, 8002fbc <_vfiprintf_r+0x18>
 8002fb8:	f7ff fdca 	bl	8002b50 <__sinit>
 8002fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fbe:	07d9      	lsls	r1, r3, #31
 8002fc0:	d405      	bmi.n	8002fce <_vfiprintf_r+0x2a>
 8002fc2:	89ab      	ldrh	r3, [r5, #12]
 8002fc4:	059a      	lsls	r2, r3, #22
 8002fc6:	d402      	bmi.n	8002fce <_vfiprintf_r+0x2a>
 8002fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fca:	f7ff fec6 	bl	8002d5a <__retarget_lock_acquire_recursive>
 8002fce:	89ab      	ldrh	r3, [r5, #12]
 8002fd0:	071b      	lsls	r3, r3, #28
 8002fd2:	d501      	bpl.n	8002fd8 <_vfiprintf_r+0x34>
 8002fd4:	692b      	ldr	r3, [r5, #16]
 8002fd6:	b99b      	cbnz	r3, 8003000 <_vfiprintf_r+0x5c>
 8002fd8:	4629      	mov	r1, r5
 8002fda:	4630      	mov	r0, r6
 8002fdc:	f000 fb78 	bl	80036d0 <__swsetup_r>
 8002fe0:	b170      	cbz	r0, 8003000 <_vfiprintf_r+0x5c>
 8002fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fe4:	07dc      	lsls	r4, r3, #31
 8002fe6:	d504      	bpl.n	8002ff2 <_vfiprintf_r+0x4e>
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	b01d      	add	sp, #116	; 0x74
 8002fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff2:	89ab      	ldrh	r3, [r5, #12]
 8002ff4:	0598      	lsls	r0, r3, #22
 8002ff6:	d4f7      	bmi.n	8002fe8 <_vfiprintf_r+0x44>
 8002ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ffa:	f7ff feaf 	bl	8002d5c <__retarget_lock_release_recursive>
 8002ffe:	e7f3      	b.n	8002fe8 <_vfiprintf_r+0x44>
 8003000:	2300      	movs	r3, #0
 8003002:	9309      	str	r3, [sp, #36]	; 0x24
 8003004:	2320      	movs	r3, #32
 8003006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800300a:	f8cd 800c 	str.w	r8, [sp, #12]
 800300e:	2330      	movs	r3, #48	; 0x30
 8003010:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80031c4 <_vfiprintf_r+0x220>
 8003014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003018:	f04f 0901 	mov.w	r9, #1
 800301c:	4623      	mov	r3, r4
 800301e:	469a      	mov	sl, r3
 8003020:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003024:	b10a      	cbz	r2, 800302a <_vfiprintf_r+0x86>
 8003026:	2a25      	cmp	r2, #37	; 0x25
 8003028:	d1f9      	bne.n	800301e <_vfiprintf_r+0x7a>
 800302a:	ebba 0b04 	subs.w	fp, sl, r4
 800302e:	d00b      	beq.n	8003048 <_vfiprintf_r+0xa4>
 8003030:	465b      	mov	r3, fp
 8003032:	4622      	mov	r2, r4
 8003034:	4629      	mov	r1, r5
 8003036:	4630      	mov	r0, r6
 8003038:	f7ff ffa1 	bl	8002f7e <__sfputs_r>
 800303c:	3001      	adds	r0, #1
 800303e:	f000 80a9 	beq.w	8003194 <_vfiprintf_r+0x1f0>
 8003042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003044:	445a      	add	r2, fp
 8003046:	9209      	str	r2, [sp, #36]	; 0x24
 8003048:	f89a 3000 	ldrb.w	r3, [sl]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80a1 	beq.w	8003194 <_vfiprintf_r+0x1f0>
 8003052:	2300      	movs	r3, #0
 8003054:	f04f 32ff 	mov.w	r2, #4294967295
 8003058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800305c:	f10a 0a01 	add.w	sl, sl, #1
 8003060:	9304      	str	r3, [sp, #16]
 8003062:	9307      	str	r3, [sp, #28]
 8003064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003068:	931a      	str	r3, [sp, #104]	; 0x68
 800306a:	4654      	mov	r4, sl
 800306c:	2205      	movs	r2, #5
 800306e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003072:	4854      	ldr	r0, [pc, #336]	; (80031c4 <_vfiprintf_r+0x220>)
 8003074:	f7fd f8b4 	bl	80001e0 <memchr>
 8003078:	9a04      	ldr	r2, [sp, #16]
 800307a:	b9d8      	cbnz	r0, 80030b4 <_vfiprintf_r+0x110>
 800307c:	06d1      	lsls	r1, r2, #27
 800307e:	bf44      	itt	mi
 8003080:	2320      	movmi	r3, #32
 8003082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003086:	0713      	lsls	r3, r2, #28
 8003088:	bf44      	itt	mi
 800308a:	232b      	movmi	r3, #43	; 0x2b
 800308c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003090:	f89a 3000 	ldrb.w	r3, [sl]
 8003094:	2b2a      	cmp	r3, #42	; 0x2a
 8003096:	d015      	beq.n	80030c4 <_vfiprintf_r+0x120>
 8003098:	9a07      	ldr	r2, [sp, #28]
 800309a:	4654      	mov	r4, sl
 800309c:	2000      	movs	r0, #0
 800309e:	f04f 0c0a 	mov.w	ip, #10
 80030a2:	4621      	mov	r1, r4
 80030a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030a8:	3b30      	subs	r3, #48	; 0x30
 80030aa:	2b09      	cmp	r3, #9
 80030ac:	d94d      	bls.n	800314a <_vfiprintf_r+0x1a6>
 80030ae:	b1b0      	cbz	r0, 80030de <_vfiprintf_r+0x13a>
 80030b0:	9207      	str	r2, [sp, #28]
 80030b2:	e014      	b.n	80030de <_vfiprintf_r+0x13a>
 80030b4:	eba0 0308 	sub.w	r3, r0, r8
 80030b8:	fa09 f303 	lsl.w	r3, r9, r3
 80030bc:	4313      	orrs	r3, r2
 80030be:	9304      	str	r3, [sp, #16]
 80030c0:	46a2      	mov	sl, r4
 80030c2:	e7d2      	b.n	800306a <_vfiprintf_r+0xc6>
 80030c4:	9b03      	ldr	r3, [sp, #12]
 80030c6:	1d19      	adds	r1, r3, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	9103      	str	r1, [sp, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bfbb      	ittet	lt
 80030d0:	425b      	neglt	r3, r3
 80030d2:	f042 0202 	orrlt.w	r2, r2, #2
 80030d6:	9307      	strge	r3, [sp, #28]
 80030d8:	9307      	strlt	r3, [sp, #28]
 80030da:	bfb8      	it	lt
 80030dc:	9204      	strlt	r2, [sp, #16]
 80030de:	7823      	ldrb	r3, [r4, #0]
 80030e0:	2b2e      	cmp	r3, #46	; 0x2e
 80030e2:	d10c      	bne.n	80030fe <_vfiprintf_r+0x15a>
 80030e4:	7863      	ldrb	r3, [r4, #1]
 80030e6:	2b2a      	cmp	r3, #42	; 0x2a
 80030e8:	d134      	bne.n	8003154 <_vfiprintf_r+0x1b0>
 80030ea:	9b03      	ldr	r3, [sp, #12]
 80030ec:	1d1a      	adds	r2, r3, #4
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	9203      	str	r2, [sp, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bfb8      	it	lt
 80030f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80030fa:	3402      	adds	r4, #2
 80030fc:	9305      	str	r3, [sp, #20]
 80030fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80031d4 <_vfiprintf_r+0x230>
 8003102:	7821      	ldrb	r1, [r4, #0]
 8003104:	2203      	movs	r2, #3
 8003106:	4650      	mov	r0, sl
 8003108:	f7fd f86a 	bl	80001e0 <memchr>
 800310c:	b138      	cbz	r0, 800311e <_vfiprintf_r+0x17a>
 800310e:	9b04      	ldr	r3, [sp, #16]
 8003110:	eba0 000a 	sub.w	r0, r0, sl
 8003114:	2240      	movs	r2, #64	; 0x40
 8003116:	4082      	lsls	r2, r0
 8003118:	4313      	orrs	r3, r2
 800311a:	3401      	adds	r4, #1
 800311c:	9304      	str	r3, [sp, #16]
 800311e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003122:	4829      	ldr	r0, [pc, #164]	; (80031c8 <_vfiprintf_r+0x224>)
 8003124:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003128:	2206      	movs	r2, #6
 800312a:	f7fd f859 	bl	80001e0 <memchr>
 800312e:	2800      	cmp	r0, #0
 8003130:	d03f      	beq.n	80031b2 <_vfiprintf_r+0x20e>
 8003132:	4b26      	ldr	r3, [pc, #152]	; (80031cc <_vfiprintf_r+0x228>)
 8003134:	bb1b      	cbnz	r3, 800317e <_vfiprintf_r+0x1da>
 8003136:	9b03      	ldr	r3, [sp, #12]
 8003138:	3307      	adds	r3, #7
 800313a:	f023 0307 	bic.w	r3, r3, #7
 800313e:	3308      	adds	r3, #8
 8003140:	9303      	str	r3, [sp, #12]
 8003142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003144:	443b      	add	r3, r7
 8003146:	9309      	str	r3, [sp, #36]	; 0x24
 8003148:	e768      	b.n	800301c <_vfiprintf_r+0x78>
 800314a:	fb0c 3202 	mla	r2, ip, r2, r3
 800314e:	460c      	mov	r4, r1
 8003150:	2001      	movs	r0, #1
 8003152:	e7a6      	b.n	80030a2 <_vfiprintf_r+0xfe>
 8003154:	2300      	movs	r3, #0
 8003156:	3401      	adds	r4, #1
 8003158:	9305      	str	r3, [sp, #20]
 800315a:	4619      	mov	r1, r3
 800315c:	f04f 0c0a 	mov.w	ip, #10
 8003160:	4620      	mov	r0, r4
 8003162:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003166:	3a30      	subs	r2, #48	; 0x30
 8003168:	2a09      	cmp	r2, #9
 800316a:	d903      	bls.n	8003174 <_vfiprintf_r+0x1d0>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0c6      	beq.n	80030fe <_vfiprintf_r+0x15a>
 8003170:	9105      	str	r1, [sp, #20]
 8003172:	e7c4      	b.n	80030fe <_vfiprintf_r+0x15a>
 8003174:	fb0c 2101 	mla	r1, ip, r1, r2
 8003178:	4604      	mov	r4, r0
 800317a:	2301      	movs	r3, #1
 800317c:	e7f0      	b.n	8003160 <_vfiprintf_r+0x1bc>
 800317e:	ab03      	add	r3, sp, #12
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	462a      	mov	r2, r5
 8003184:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <_vfiprintf_r+0x22c>)
 8003186:	a904      	add	r1, sp, #16
 8003188:	4630      	mov	r0, r6
 800318a:	f3af 8000 	nop.w
 800318e:	4607      	mov	r7, r0
 8003190:	1c78      	adds	r0, r7, #1
 8003192:	d1d6      	bne.n	8003142 <_vfiprintf_r+0x19e>
 8003194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003196:	07d9      	lsls	r1, r3, #31
 8003198:	d405      	bmi.n	80031a6 <_vfiprintf_r+0x202>
 800319a:	89ab      	ldrh	r3, [r5, #12]
 800319c:	059a      	lsls	r2, r3, #22
 800319e:	d402      	bmi.n	80031a6 <_vfiprintf_r+0x202>
 80031a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031a2:	f7ff fddb 	bl	8002d5c <__retarget_lock_release_recursive>
 80031a6:	89ab      	ldrh	r3, [r5, #12]
 80031a8:	065b      	lsls	r3, r3, #25
 80031aa:	f53f af1d 	bmi.w	8002fe8 <_vfiprintf_r+0x44>
 80031ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031b0:	e71c      	b.n	8002fec <_vfiprintf_r+0x48>
 80031b2:	ab03      	add	r3, sp, #12
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	462a      	mov	r2, r5
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <_vfiprintf_r+0x22c>)
 80031ba:	a904      	add	r1, sp, #16
 80031bc:	4630      	mov	r0, r6
 80031be:	f000 f879 	bl	80032b4 <_printf_i>
 80031c2:	e7e4      	b.n	800318e <_vfiprintf_r+0x1ea>
 80031c4:	080038e4 	.word	0x080038e4
 80031c8:	080038ee 	.word	0x080038ee
 80031cc:	00000000 	.word	0x00000000
 80031d0:	08002f7f 	.word	0x08002f7f
 80031d4:	080038ea 	.word	0x080038ea

080031d8 <_printf_common>:
 80031d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031dc:	4616      	mov	r6, r2
 80031de:	4699      	mov	r9, r3
 80031e0:	688a      	ldr	r2, [r1, #8]
 80031e2:	690b      	ldr	r3, [r1, #16]
 80031e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031e8:	4293      	cmp	r3, r2
 80031ea:	bfb8      	it	lt
 80031ec:	4613      	movlt	r3, r2
 80031ee:	6033      	str	r3, [r6, #0]
 80031f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031f4:	4607      	mov	r7, r0
 80031f6:	460c      	mov	r4, r1
 80031f8:	b10a      	cbz	r2, 80031fe <_printf_common+0x26>
 80031fa:	3301      	adds	r3, #1
 80031fc:	6033      	str	r3, [r6, #0]
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	0699      	lsls	r1, r3, #26
 8003202:	bf42      	ittt	mi
 8003204:	6833      	ldrmi	r3, [r6, #0]
 8003206:	3302      	addmi	r3, #2
 8003208:	6033      	strmi	r3, [r6, #0]
 800320a:	6825      	ldr	r5, [r4, #0]
 800320c:	f015 0506 	ands.w	r5, r5, #6
 8003210:	d106      	bne.n	8003220 <_printf_common+0x48>
 8003212:	f104 0a19 	add.w	sl, r4, #25
 8003216:	68e3      	ldr	r3, [r4, #12]
 8003218:	6832      	ldr	r2, [r6, #0]
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	42ab      	cmp	r3, r5
 800321e:	dc26      	bgt.n	800326e <_printf_common+0x96>
 8003220:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003224:	1e13      	subs	r3, r2, #0
 8003226:	6822      	ldr	r2, [r4, #0]
 8003228:	bf18      	it	ne
 800322a:	2301      	movne	r3, #1
 800322c:	0692      	lsls	r2, r2, #26
 800322e:	d42b      	bmi.n	8003288 <_printf_common+0xb0>
 8003230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003234:	4649      	mov	r1, r9
 8003236:	4638      	mov	r0, r7
 8003238:	47c0      	blx	r8
 800323a:	3001      	adds	r0, #1
 800323c:	d01e      	beq.n	800327c <_printf_common+0xa4>
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	6922      	ldr	r2, [r4, #16]
 8003242:	f003 0306 	and.w	r3, r3, #6
 8003246:	2b04      	cmp	r3, #4
 8003248:	bf02      	ittt	eq
 800324a:	68e5      	ldreq	r5, [r4, #12]
 800324c:	6833      	ldreq	r3, [r6, #0]
 800324e:	1aed      	subeq	r5, r5, r3
 8003250:	68a3      	ldr	r3, [r4, #8]
 8003252:	bf0c      	ite	eq
 8003254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003258:	2500      	movne	r5, #0
 800325a:	4293      	cmp	r3, r2
 800325c:	bfc4      	itt	gt
 800325e:	1a9b      	subgt	r3, r3, r2
 8003260:	18ed      	addgt	r5, r5, r3
 8003262:	2600      	movs	r6, #0
 8003264:	341a      	adds	r4, #26
 8003266:	42b5      	cmp	r5, r6
 8003268:	d11a      	bne.n	80032a0 <_printf_common+0xc8>
 800326a:	2000      	movs	r0, #0
 800326c:	e008      	b.n	8003280 <_printf_common+0xa8>
 800326e:	2301      	movs	r3, #1
 8003270:	4652      	mov	r2, sl
 8003272:	4649      	mov	r1, r9
 8003274:	4638      	mov	r0, r7
 8003276:	47c0      	blx	r8
 8003278:	3001      	adds	r0, #1
 800327a:	d103      	bne.n	8003284 <_printf_common+0xac>
 800327c:	f04f 30ff 	mov.w	r0, #4294967295
 8003280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003284:	3501      	adds	r5, #1
 8003286:	e7c6      	b.n	8003216 <_printf_common+0x3e>
 8003288:	18e1      	adds	r1, r4, r3
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	2030      	movs	r0, #48	; 0x30
 800328e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003292:	4422      	add	r2, r4
 8003294:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003298:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800329c:	3302      	adds	r3, #2
 800329e:	e7c7      	b.n	8003230 <_printf_common+0x58>
 80032a0:	2301      	movs	r3, #1
 80032a2:	4622      	mov	r2, r4
 80032a4:	4649      	mov	r1, r9
 80032a6:	4638      	mov	r0, r7
 80032a8:	47c0      	blx	r8
 80032aa:	3001      	adds	r0, #1
 80032ac:	d0e6      	beq.n	800327c <_printf_common+0xa4>
 80032ae:	3601      	adds	r6, #1
 80032b0:	e7d9      	b.n	8003266 <_printf_common+0x8e>
	...

080032b4 <_printf_i>:
 80032b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032b8:	7e0f      	ldrb	r7, [r1, #24]
 80032ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032bc:	2f78      	cmp	r7, #120	; 0x78
 80032be:	4691      	mov	r9, r2
 80032c0:	4680      	mov	r8, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	469a      	mov	sl, r3
 80032c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032ca:	d807      	bhi.n	80032dc <_printf_i+0x28>
 80032cc:	2f62      	cmp	r7, #98	; 0x62
 80032ce:	d80a      	bhi.n	80032e6 <_printf_i+0x32>
 80032d0:	2f00      	cmp	r7, #0
 80032d2:	f000 80d4 	beq.w	800347e <_printf_i+0x1ca>
 80032d6:	2f58      	cmp	r7, #88	; 0x58
 80032d8:	f000 80c0 	beq.w	800345c <_printf_i+0x1a8>
 80032dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032e4:	e03a      	b.n	800335c <_printf_i+0xa8>
 80032e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032ea:	2b15      	cmp	r3, #21
 80032ec:	d8f6      	bhi.n	80032dc <_printf_i+0x28>
 80032ee:	a101      	add	r1, pc, #4	; (adr r1, 80032f4 <_printf_i+0x40>)
 80032f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032f4:	0800334d 	.word	0x0800334d
 80032f8:	08003361 	.word	0x08003361
 80032fc:	080032dd 	.word	0x080032dd
 8003300:	080032dd 	.word	0x080032dd
 8003304:	080032dd 	.word	0x080032dd
 8003308:	080032dd 	.word	0x080032dd
 800330c:	08003361 	.word	0x08003361
 8003310:	080032dd 	.word	0x080032dd
 8003314:	080032dd 	.word	0x080032dd
 8003318:	080032dd 	.word	0x080032dd
 800331c:	080032dd 	.word	0x080032dd
 8003320:	08003465 	.word	0x08003465
 8003324:	0800338d 	.word	0x0800338d
 8003328:	0800341f 	.word	0x0800341f
 800332c:	080032dd 	.word	0x080032dd
 8003330:	080032dd 	.word	0x080032dd
 8003334:	08003487 	.word	0x08003487
 8003338:	080032dd 	.word	0x080032dd
 800333c:	0800338d 	.word	0x0800338d
 8003340:	080032dd 	.word	0x080032dd
 8003344:	080032dd 	.word	0x080032dd
 8003348:	08003427 	.word	0x08003427
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	1d1a      	adds	r2, r3, #4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	602a      	str	r2, [r5, #0]
 8003354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800335c:	2301      	movs	r3, #1
 800335e:	e09f      	b.n	80034a0 <_printf_i+0x1ec>
 8003360:	6820      	ldr	r0, [r4, #0]
 8003362:	682b      	ldr	r3, [r5, #0]
 8003364:	0607      	lsls	r7, r0, #24
 8003366:	f103 0104 	add.w	r1, r3, #4
 800336a:	6029      	str	r1, [r5, #0]
 800336c:	d501      	bpl.n	8003372 <_printf_i+0xbe>
 800336e:	681e      	ldr	r6, [r3, #0]
 8003370:	e003      	b.n	800337a <_printf_i+0xc6>
 8003372:	0646      	lsls	r6, r0, #25
 8003374:	d5fb      	bpl.n	800336e <_printf_i+0xba>
 8003376:	f9b3 6000 	ldrsh.w	r6, [r3]
 800337a:	2e00      	cmp	r6, #0
 800337c:	da03      	bge.n	8003386 <_printf_i+0xd2>
 800337e:	232d      	movs	r3, #45	; 0x2d
 8003380:	4276      	negs	r6, r6
 8003382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003386:	485a      	ldr	r0, [pc, #360]	; (80034f0 <_printf_i+0x23c>)
 8003388:	230a      	movs	r3, #10
 800338a:	e012      	b.n	80033b2 <_printf_i+0xfe>
 800338c:	682b      	ldr	r3, [r5, #0]
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	1d19      	adds	r1, r3, #4
 8003392:	6029      	str	r1, [r5, #0]
 8003394:	0605      	lsls	r5, r0, #24
 8003396:	d501      	bpl.n	800339c <_printf_i+0xe8>
 8003398:	681e      	ldr	r6, [r3, #0]
 800339a:	e002      	b.n	80033a2 <_printf_i+0xee>
 800339c:	0641      	lsls	r1, r0, #25
 800339e:	d5fb      	bpl.n	8003398 <_printf_i+0xe4>
 80033a0:	881e      	ldrh	r6, [r3, #0]
 80033a2:	4853      	ldr	r0, [pc, #332]	; (80034f0 <_printf_i+0x23c>)
 80033a4:	2f6f      	cmp	r7, #111	; 0x6f
 80033a6:	bf0c      	ite	eq
 80033a8:	2308      	moveq	r3, #8
 80033aa:	230a      	movne	r3, #10
 80033ac:	2100      	movs	r1, #0
 80033ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033b2:	6865      	ldr	r5, [r4, #4]
 80033b4:	60a5      	str	r5, [r4, #8]
 80033b6:	2d00      	cmp	r5, #0
 80033b8:	bfa2      	ittt	ge
 80033ba:	6821      	ldrge	r1, [r4, #0]
 80033bc:	f021 0104 	bicge.w	r1, r1, #4
 80033c0:	6021      	strge	r1, [r4, #0]
 80033c2:	b90e      	cbnz	r6, 80033c8 <_printf_i+0x114>
 80033c4:	2d00      	cmp	r5, #0
 80033c6:	d04b      	beq.n	8003460 <_printf_i+0x1ac>
 80033c8:	4615      	mov	r5, r2
 80033ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80033ce:	fb03 6711 	mls	r7, r3, r1, r6
 80033d2:	5dc7      	ldrb	r7, [r0, r7]
 80033d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033d8:	4637      	mov	r7, r6
 80033da:	42bb      	cmp	r3, r7
 80033dc:	460e      	mov	r6, r1
 80033de:	d9f4      	bls.n	80033ca <_printf_i+0x116>
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d10b      	bne.n	80033fc <_printf_i+0x148>
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	07de      	lsls	r6, r3, #31
 80033e8:	d508      	bpl.n	80033fc <_printf_i+0x148>
 80033ea:	6923      	ldr	r3, [r4, #16]
 80033ec:	6861      	ldr	r1, [r4, #4]
 80033ee:	4299      	cmp	r1, r3
 80033f0:	bfde      	ittt	le
 80033f2:	2330      	movle	r3, #48	; 0x30
 80033f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033fc:	1b52      	subs	r2, r2, r5
 80033fe:	6122      	str	r2, [r4, #16]
 8003400:	f8cd a000 	str.w	sl, [sp]
 8003404:	464b      	mov	r3, r9
 8003406:	aa03      	add	r2, sp, #12
 8003408:	4621      	mov	r1, r4
 800340a:	4640      	mov	r0, r8
 800340c:	f7ff fee4 	bl	80031d8 <_printf_common>
 8003410:	3001      	adds	r0, #1
 8003412:	d14a      	bne.n	80034aa <_printf_i+0x1f6>
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	b004      	add	sp, #16
 800341a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	f043 0320 	orr.w	r3, r3, #32
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	4833      	ldr	r0, [pc, #204]	; (80034f4 <_printf_i+0x240>)
 8003428:	2778      	movs	r7, #120	; 0x78
 800342a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	6829      	ldr	r1, [r5, #0]
 8003432:	061f      	lsls	r7, r3, #24
 8003434:	f851 6b04 	ldr.w	r6, [r1], #4
 8003438:	d402      	bmi.n	8003440 <_printf_i+0x18c>
 800343a:	065f      	lsls	r7, r3, #25
 800343c:	bf48      	it	mi
 800343e:	b2b6      	uxthmi	r6, r6
 8003440:	07df      	lsls	r7, r3, #31
 8003442:	bf48      	it	mi
 8003444:	f043 0320 	orrmi.w	r3, r3, #32
 8003448:	6029      	str	r1, [r5, #0]
 800344a:	bf48      	it	mi
 800344c:	6023      	strmi	r3, [r4, #0]
 800344e:	b91e      	cbnz	r6, 8003458 <_printf_i+0x1a4>
 8003450:	6823      	ldr	r3, [r4, #0]
 8003452:	f023 0320 	bic.w	r3, r3, #32
 8003456:	6023      	str	r3, [r4, #0]
 8003458:	2310      	movs	r3, #16
 800345a:	e7a7      	b.n	80033ac <_printf_i+0xf8>
 800345c:	4824      	ldr	r0, [pc, #144]	; (80034f0 <_printf_i+0x23c>)
 800345e:	e7e4      	b.n	800342a <_printf_i+0x176>
 8003460:	4615      	mov	r5, r2
 8003462:	e7bd      	b.n	80033e0 <_printf_i+0x12c>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	6826      	ldr	r6, [r4, #0]
 8003468:	6961      	ldr	r1, [r4, #20]
 800346a:	1d18      	adds	r0, r3, #4
 800346c:	6028      	str	r0, [r5, #0]
 800346e:	0635      	lsls	r5, r6, #24
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	d501      	bpl.n	8003478 <_printf_i+0x1c4>
 8003474:	6019      	str	r1, [r3, #0]
 8003476:	e002      	b.n	800347e <_printf_i+0x1ca>
 8003478:	0670      	lsls	r0, r6, #25
 800347a:	d5fb      	bpl.n	8003474 <_printf_i+0x1c0>
 800347c:	8019      	strh	r1, [r3, #0]
 800347e:	2300      	movs	r3, #0
 8003480:	6123      	str	r3, [r4, #16]
 8003482:	4615      	mov	r5, r2
 8003484:	e7bc      	b.n	8003400 <_printf_i+0x14c>
 8003486:	682b      	ldr	r3, [r5, #0]
 8003488:	1d1a      	adds	r2, r3, #4
 800348a:	602a      	str	r2, [r5, #0]
 800348c:	681d      	ldr	r5, [r3, #0]
 800348e:	6862      	ldr	r2, [r4, #4]
 8003490:	2100      	movs	r1, #0
 8003492:	4628      	mov	r0, r5
 8003494:	f7fc fea4 	bl	80001e0 <memchr>
 8003498:	b108      	cbz	r0, 800349e <_printf_i+0x1ea>
 800349a:	1b40      	subs	r0, r0, r5
 800349c:	6060      	str	r0, [r4, #4]
 800349e:	6863      	ldr	r3, [r4, #4]
 80034a0:	6123      	str	r3, [r4, #16]
 80034a2:	2300      	movs	r3, #0
 80034a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034a8:	e7aa      	b.n	8003400 <_printf_i+0x14c>
 80034aa:	6923      	ldr	r3, [r4, #16]
 80034ac:	462a      	mov	r2, r5
 80034ae:	4649      	mov	r1, r9
 80034b0:	4640      	mov	r0, r8
 80034b2:	47d0      	blx	sl
 80034b4:	3001      	adds	r0, #1
 80034b6:	d0ad      	beq.n	8003414 <_printf_i+0x160>
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	079b      	lsls	r3, r3, #30
 80034bc:	d413      	bmi.n	80034e6 <_printf_i+0x232>
 80034be:	68e0      	ldr	r0, [r4, #12]
 80034c0:	9b03      	ldr	r3, [sp, #12]
 80034c2:	4298      	cmp	r0, r3
 80034c4:	bfb8      	it	lt
 80034c6:	4618      	movlt	r0, r3
 80034c8:	e7a6      	b.n	8003418 <_printf_i+0x164>
 80034ca:	2301      	movs	r3, #1
 80034cc:	4632      	mov	r2, r6
 80034ce:	4649      	mov	r1, r9
 80034d0:	4640      	mov	r0, r8
 80034d2:	47d0      	blx	sl
 80034d4:	3001      	adds	r0, #1
 80034d6:	d09d      	beq.n	8003414 <_printf_i+0x160>
 80034d8:	3501      	adds	r5, #1
 80034da:	68e3      	ldr	r3, [r4, #12]
 80034dc:	9903      	ldr	r1, [sp, #12]
 80034de:	1a5b      	subs	r3, r3, r1
 80034e0:	42ab      	cmp	r3, r5
 80034e2:	dcf2      	bgt.n	80034ca <_printf_i+0x216>
 80034e4:	e7eb      	b.n	80034be <_printf_i+0x20a>
 80034e6:	2500      	movs	r5, #0
 80034e8:	f104 0619 	add.w	r6, r4, #25
 80034ec:	e7f5      	b.n	80034da <_printf_i+0x226>
 80034ee:	bf00      	nop
 80034f0:	080038f5 	.word	0x080038f5
 80034f4:	08003906 	.word	0x08003906

080034f8 <__sflush_r>:
 80034f8:	898a      	ldrh	r2, [r1, #12]
 80034fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034fe:	4605      	mov	r5, r0
 8003500:	0710      	lsls	r0, r2, #28
 8003502:	460c      	mov	r4, r1
 8003504:	d458      	bmi.n	80035b8 <__sflush_r+0xc0>
 8003506:	684b      	ldr	r3, [r1, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	dc05      	bgt.n	8003518 <__sflush_r+0x20>
 800350c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	dc02      	bgt.n	8003518 <__sflush_r+0x20>
 8003512:	2000      	movs	r0, #0
 8003514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800351a:	2e00      	cmp	r6, #0
 800351c:	d0f9      	beq.n	8003512 <__sflush_r+0x1a>
 800351e:	2300      	movs	r3, #0
 8003520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003524:	682f      	ldr	r7, [r5, #0]
 8003526:	6a21      	ldr	r1, [r4, #32]
 8003528:	602b      	str	r3, [r5, #0]
 800352a:	d032      	beq.n	8003592 <__sflush_r+0x9a>
 800352c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800352e:	89a3      	ldrh	r3, [r4, #12]
 8003530:	075a      	lsls	r2, r3, #29
 8003532:	d505      	bpl.n	8003540 <__sflush_r+0x48>
 8003534:	6863      	ldr	r3, [r4, #4]
 8003536:	1ac0      	subs	r0, r0, r3
 8003538:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800353a:	b10b      	cbz	r3, 8003540 <__sflush_r+0x48>
 800353c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800353e:	1ac0      	subs	r0, r0, r3
 8003540:	2300      	movs	r3, #0
 8003542:	4602      	mov	r2, r0
 8003544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003546:	6a21      	ldr	r1, [r4, #32]
 8003548:	4628      	mov	r0, r5
 800354a:	47b0      	blx	r6
 800354c:	1c43      	adds	r3, r0, #1
 800354e:	89a3      	ldrh	r3, [r4, #12]
 8003550:	d106      	bne.n	8003560 <__sflush_r+0x68>
 8003552:	6829      	ldr	r1, [r5, #0]
 8003554:	291d      	cmp	r1, #29
 8003556:	d82b      	bhi.n	80035b0 <__sflush_r+0xb8>
 8003558:	4a29      	ldr	r2, [pc, #164]	; (8003600 <__sflush_r+0x108>)
 800355a:	410a      	asrs	r2, r1
 800355c:	07d6      	lsls	r6, r2, #31
 800355e:	d427      	bmi.n	80035b0 <__sflush_r+0xb8>
 8003560:	2200      	movs	r2, #0
 8003562:	6062      	str	r2, [r4, #4]
 8003564:	04d9      	lsls	r1, r3, #19
 8003566:	6922      	ldr	r2, [r4, #16]
 8003568:	6022      	str	r2, [r4, #0]
 800356a:	d504      	bpl.n	8003576 <__sflush_r+0x7e>
 800356c:	1c42      	adds	r2, r0, #1
 800356e:	d101      	bne.n	8003574 <__sflush_r+0x7c>
 8003570:	682b      	ldr	r3, [r5, #0]
 8003572:	b903      	cbnz	r3, 8003576 <__sflush_r+0x7e>
 8003574:	6560      	str	r0, [r4, #84]	; 0x54
 8003576:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003578:	602f      	str	r7, [r5, #0]
 800357a:	2900      	cmp	r1, #0
 800357c:	d0c9      	beq.n	8003512 <__sflush_r+0x1a>
 800357e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003582:	4299      	cmp	r1, r3
 8003584:	d002      	beq.n	800358c <__sflush_r+0x94>
 8003586:	4628      	mov	r0, r5
 8003588:	f7ff fbea 	bl	8002d60 <_free_r>
 800358c:	2000      	movs	r0, #0
 800358e:	6360      	str	r0, [r4, #52]	; 0x34
 8003590:	e7c0      	b.n	8003514 <__sflush_r+0x1c>
 8003592:	2301      	movs	r3, #1
 8003594:	4628      	mov	r0, r5
 8003596:	47b0      	blx	r6
 8003598:	1c41      	adds	r1, r0, #1
 800359a:	d1c8      	bne.n	800352e <__sflush_r+0x36>
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0c5      	beq.n	800352e <__sflush_r+0x36>
 80035a2:	2b1d      	cmp	r3, #29
 80035a4:	d001      	beq.n	80035aa <__sflush_r+0xb2>
 80035a6:	2b16      	cmp	r3, #22
 80035a8:	d101      	bne.n	80035ae <__sflush_r+0xb6>
 80035aa:	602f      	str	r7, [r5, #0]
 80035ac:	e7b1      	b.n	8003512 <__sflush_r+0x1a>
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035b4:	81a3      	strh	r3, [r4, #12]
 80035b6:	e7ad      	b.n	8003514 <__sflush_r+0x1c>
 80035b8:	690f      	ldr	r7, [r1, #16]
 80035ba:	2f00      	cmp	r7, #0
 80035bc:	d0a9      	beq.n	8003512 <__sflush_r+0x1a>
 80035be:	0793      	lsls	r3, r2, #30
 80035c0:	680e      	ldr	r6, [r1, #0]
 80035c2:	bf08      	it	eq
 80035c4:	694b      	ldreq	r3, [r1, #20]
 80035c6:	600f      	str	r7, [r1, #0]
 80035c8:	bf18      	it	ne
 80035ca:	2300      	movne	r3, #0
 80035cc:	eba6 0807 	sub.w	r8, r6, r7
 80035d0:	608b      	str	r3, [r1, #8]
 80035d2:	f1b8 0f00 	cmp.w	r8, #0
 80035d6:	dd9c      	ble.n	8003512 <__sflush_r+0x1a>
 80035d8:	6a21      	ldr	r1, [r4, #32]
 80035da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035dc:	4643      	mov	r3, r8
 80035de:	463a      	mov	r2, r7
 80035e0:	4628      	mov	r0, r5
 80035e2:	47b0      	blx	r6
 80035e4:	2800      	cmp	r0, #0
 80035e6:	dc06      	bgt.n	80035f6 <__sflush_r+0xfe>
 80035e8:	89a3      	ldrh	r3, [r4, #12]
 80035ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ee:	81a3      	strh	r3, [r4, #12]
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295
 80035f4:	e78e      	b.n	8003514 <__sflush_r+0x1c>
 80035f6:	4407      	add	r7, r0
 80035f8:	eba8 0800 	sub.w	r8, r8, r0
 80035fc:	e7e9      	b.n	80035d2 <__sflush_r+0xda>
 80035fe:	bf00      	nop
 8003600:	dfbffffe 	.word	0xdfbffffe

08003604 <_fflush_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	690b      	ldr	r3, [r1, #16]
 8003608:	4605      	mov	r5, r0
 800360a:	460c      	mov	r4, r1
 800360c:	b913      	cbnz	r3, 8003614 <_fflush_r+0x10>
 800360e:	2500      	movs	r5, #0
 8003610:	4628      	mov	r0, r5
 8003612:	bd38      	pop	{r3, r4, r5, pc}
 8003614:	b118      	cbz	r0, 800361e <_fflush_r+0x1a>
 8003616:	6a03      	ldr	r3, [r0, #32]
 8003618:	b90b      	cbnz	r3, 800361e <_fflush_r+0x1a>
 800361a:	f7ff fa99 	bl	8002b50 <__sinit>
 800361e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f3      	beq.n	800360e <_fflush_r+0xa>
 8003626:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003628:	07d0      	lsls	r0, r2, #31
 800362a:	d404      	bmi.n	8003636 <_fflush_r+0x32>
 800362c:	0599      	lsls	r1, r3, #22
 800362e:	d402      	bmi.n	8003636 <_fflush_r+0x32>
 8003630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003632:	f7ff fb92 	bl	8002d5a <__retarget_lock_acquire_recursive>
 8003636:	4628      	mov	r0, r5
 8003638:	4621      	mov	r1, r4
 800363a:	f7ff ff5d 	bl	80034f8 <__sflush_r>
 800363e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003640:	07da      	lsls	r2, r3, #31
 8003642:	4605      	mov	r5, r0
 8003644:	d4e4      	bmi.n	8003610 <_fflush_r+0xc>
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	059b      	lsls	r3, r3, #22
 800364a:	d4e1      	bmi.n	8003610 <_fflush_r+0xc>
 800364c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800364e:	f7ff fb85 	bl	8002d5c <__retarget_lock_release_recursive>
 8003652:	e7dd      	b.n	8003610 <_fflush_r+0xc>

08003654 <__swbuf_r>:
 8003654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003656:	460e      	mov	r6, r1
 8003658:	4614      	mov	r4, r2
 800365a:	4605      	mov	r5, r0
 800365c:	b118      	cbz	r0, 8003666 <__swbuf_r+0x12>
 800365e:	6a03      	ldr	r3, [r0, #32]
 8003660:	b90b      	cbnz	r3, 8003666 <__swbuf_r+0x12>
 8003662:	f7ff fa75 	bl	8002b50 <__sinit>
 8003666:	69a3      	ldr	r3, [r4, #24]
 8003668:	60a3      	str	r3, [r4, #8]
 800366a:	89a3      	ldrh	r3, [r4, #12]
 800366c:	071a      	lsls	r2, r3, #28
 800366e:	d525      	bpl.n	80036bc <__swbuf_r+0x68>
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	b31b      	cbz	r3, 80036bc <__swbuf_r+0x68>
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	6922      	ldr	r2, [r4, #16]
 8003678:	1a98      	subs	r0, r3, r2
 800367a:	6963      	ldr	r3, [r4, #20]
 800367c:	b2f6      	uxtb	r6, r6
 800367e:	4283      	cmp	r3, r0
 8003680:	4637      	mov	r7, r6
 8003682:	dc04      	bgt.n	800368e <__swbuf_r+0x3a>
 8003684:	4621      	mov	r1, r4
 8003686:	4628      	mov	r0, r5
 8003688:	f7ff ffbc 	bl	8003604 <_fflush_r>
 800368c:	b9e0      	cbnz	r0, 80036c8 <__swbuf_r+0x74>
 800368e:	68a3      	ldr	r3, [r4, #8]
 8003690:	3b01      	subs	r3, #1
 8003692:	60a3      	str	r3, [r4, #8]
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	6022      	str	r2, [r4, #0]
 800369a:	701e      	strb	r6, [r3, #0]
 800369c:	6962      	ldr	r2, [r4, #20]
 800369e:	1c43      	adds	r3, r0, #1
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d004      	beq.n	80036ae <__swbuf_r+0x5a>
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	07db      	lsls	r3, r3, #31
 80036a8:	d506      	bpl.n	80036b8 <__swbuf_r+0x64>
 80036aa:	2e0a      	cmp	r6, #10
 80036ac:	d104      	bne.n	80036b8 <__swbuf_r+0x64>
 80036ae:	4621      	mov	r1, r4
 80036b0:	4628      	mov	r0, r5
 80036b2:	f7ff ffa7 	bl	8003604 <_fflush_r>
 80036b6:	b938      	cbnz	r0, 80036c8 <__swbuf_r+0x74>
 80036b8:	4638      	mov	r0, r7
 80036ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036bc:	4621      	mov	r1, r4
 80036be:	4628      	mov	r0, r5
 80036c0:	f000 f806 	bl	80036d0 <__swsetup_r>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d0d5      	beq.n	8003674 <__swbuf_r+0x20>
 80036c8:	f04f 37ff 	mov.w	r7, #4294967295
 80036cc:	e7f4      	b.n	80036b8 <__swbuf_r+0x64>
	...

080036d0 <__swsetup_r>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	4b2a      	ldr	r3, [pc, #168]	; (800377c <__swsetup_r+0xac>)
 80036d4:	4605      	mov	r5, r0
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	460c      	mov	r4, r1
 80036da:	b118      	cbz	r0, 80036e4 <__swsetup_r+0x14>
 80036dc:	6a03      	ldr	r3, [r0, #32]
 80036de:	b90b      	cbnz	r3, 80036e4 <__swsetup_r+0x14>
 80036e0:	f7ff fa36 	bl	8002b50 <__sinit>
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036ea:	0718      	lsls	r0, r3, #28
 80036ec:	d422      	bmi.n	8003734 <__swsetup_r+0x64>
 80036ee:	06d9      	lsls	r1, r3, #27
 80036f0:	d407      	bmi.n	8003702 <__swsetup_r+0x32>
 80036f2:	2309      	movs	r3, #9
 80036f4:	602b      	str	r3, [r5, #0]
 80036f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036fa:	81a3      	strh	r3, [r4, #12]
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003700:	e034      	b.n	800376c <__swsetup_r+0x9c>
 8003702:	0758      	lsls	r0, r3, #29
 8003704:	d512      	bpl.n	800372c <__swsetup_r+0x5c>
 8003706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003708:	b141      	cbz	r1, 800371c <__swsetup_r+0x4c>
 800370a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800370e:	4299      	cmp	r1, r3
 8003710:	d002      	beq.n	8003718 <__swsetup_r+0x48>
 8003712:	4628      	mov	r0, r5
 8003714:	f7ff fb24 	bl	8002d60 <_free_r>
 8003718:	2300      	movs	r3, #0
 800371a:	6363      	str	r3, [r4, #52]	; 0x34
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003722:	81a3      	strh	r3, [r4, #12]
 8003724:	2300      	movs	r3, #0
 8003726:	6063      	str	r3, [r4, #4]
 8003728:	6923      	ldr	r3, [r4, #16]
 800372a:	6023      	str	r3, [r4, #0]
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	f043 0308 	orr.w	r3, r3, #8
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	6923      	ldr	r3, [r4, #16]
 8003736:	b94b      	cbnz	r3, 800374c <__swsetup_r+0x7c>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800373e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003742:	d003      	beq.n	800374c <__swsetup_r+0x7c>
 8003744:	4621      	mov	r1, r4
 8003746:	4628      	mov	r0, r5
 8003748:	f000 f850 	bl	80037ec <__smakebuf_r>
 800374c:	89a0      	ldrh	r0, [r4, #12]
 800374e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003752:	f010 0301 	ands.w	r3, r0, #1
 8003756:	d00a      	beq.n	800376e <__swsetup_r+0x9e>
 8003758:	2300      	movs	r3, #0
 800375a:	60a3      	str	r3, [r4, #8]
 800375c:	6963      	ldr	r3, [r4, #20]
 800375e:	425b      	negs	r3, r3
 8003760:	61a3      	str	r3, [r4, #24]
 8003762:	6923      	ldr	r3, [r4, #16]
 8003764:	b943      	cbnz	r3, 8003778 <__swsetup_r+0xa8>
 8003766:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800376a:	d1c4      	bne.n	80036f6 <__swsetup_r+0x26>
 800376c:	bd38      	pop	{r3, r4, r5, pc}
 800376e:	0781      	lsls	r1, r0, #30
 8003770:	bf58      	it	pl
 8003772:	6963      	ldrpl	r3, [r4, #20]
 8003774:	60a3      	str	r3, [r4, #8]
 8003776:	e7f4      	b.n	8003762 <__swsetup_r+0x92>
 8003778:	2000      	movs	r0, #0
 800377a:	e7f7      	b.n	800376c <__swsetup_r+0x9c>
 800377c:	20000064 	.word	0x20000064

08003780 <_sbrk_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4d06      	ldr	r5, [pc, #24]	; (800379c <_sbrk_r+0x1c>)
 8003784:	2300      	movs	r3, #0
 8003786:	4604      	mov	r4, r0
 8003788:	4608      	mov	r0, r1
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	f7fd f92e 	bl	80009ec <_sbrk>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d102      	bne.n	800379a <_sbrk_r+0x1a>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	b103      	cbz	r3, 800379a <_sbrk_r+0x1a>
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	20000214 	.word	0x20000214

080037a0 <__swhatbuf_r>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	460c      	mov	r4, r1
 80037a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a8:	2900      	cmp	r1, #0
 80037aa:	b096      	sub	sp, #88	; 0x58
 80037ac:	4615      	mov	r5, r2
 80037ae:	461e      	mov	r6, r3
 80037b0:	da0d      	bge.n	80037ce <__swhatbuf_r+0x2e>
 80037b2:	89a3      	ldrh	r3, [r4, #12]
 80037b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80037b8:	f04f 0100 	mov.w	r1, #0
 80037bc:	bf0c      	ite	eq
 80037be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80037c2:	2340      	movne	r3, #64	; 0x40
 80037c4:	2000      	movs	r0, #0
 80037c6:	6031      	str	r1, [r6, #0]
 80037c8:	602b      	str	r3, [r5, #0]
 80037ca:	b016      	add	sp, #88	; 0x58
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
 80037ce:	466a      	mov	r2, sp
 80037d0:	f000 f848 	bl	8003864 <_fstat_r>
 80037d4:	2800      	cmp	r0, #0
 80037d6:	dbec      	blt.n	80037b2 <__swhatbuf_r+0x12>
 80037d8:	9901      	ldr	r1, [sp, #4]
 80037da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80037de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80037e2:	4259      	negs	r1, r3
 80037e4:	4159      	adcs	r1, r3
 80037e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ea:	e7eb      	b.n	80037c4 <__swhatbuf_r+0x24>

080037ec <__smakebuf_r>:
 80037ec:	898b      	ldrh	r3, [r1, #12]
 80037ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037f0:	079d      	lsls	r5, r3, #30
 80037f2:	4606      	mov	r6, r0
 80037f4:	460c      	mov	r4, r1
 80037f6:	d507      	bpl.n	8003808 <__smakebuf_r+0x1c>
 80037f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	6123      	str	r3, [r4, #16]
 8003800:	2301      	movs	r3, #1
 8003802:	6163      	str	r3, [r4, #20]
 8003804:	b002      	add	sp, #8
 8003806:	bd70      	pop	{r4, r5, r6, pc}
 8003808:	ab01      	add	r3, sp, #4
 800380a:	466a      	mov	r2, sp
 800380c:	f7ff ffc8 	bl	80037a0 <__swhatbuf_r>
 8003810:	9900      	ldr	r1, [sp, #0]
 8003812:	4605      	mov	r5, r0
 8003814:	4630      	mov	r0, r6
 8003816:	f7ff fb0f 	bl	8002e38 <_malloc_r>
 800381a:	b948      	cbnz	r0, 8003830 <__smakebuf_r+0x44>
 800381c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003820:	059a      	lsls	r2, r3, #22
 8003822:	d4ef      	bmi.n	8003804 <__smakebuf_r+0x18>
 8003824:	f023 0303 	bic.w	r3, r3, #3
 8003828:	f043 0302 	orr.w	r3, r3, #2
 800382c:	81a3      	strh	r3, [r4, #12]
 800382e:	e7e3      	b.n	80037f8 <__smakebuf_r+0xc>
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	6020      	str	r0, [r4, #0]
 8003834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003838:	81a3      	strh	r3, [r4, #12]
 800383a:	9b00      	ldr	r3, [sp, #0]
 800383c:	6163      	str	r3, [r4, #20]
 800383e:	9b01      	ldr	r3, [sp, #4]
 8003840:	6120      	str	r0, [r4, #16]
 8003842:	b15b      	cbz	r3, 800385c <__smakebuf_r+0x70>
 8003844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003848:	4630      	mov	r0, r6
 800384a:	f000 f81d 	bl	8003888 <_isatty_r>
 800384e:	b128      	cbz	r0, 800385c <__smakebuf_r+0x70>
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	81a3      	strh	r3, [r4, #12]
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	431d      	orrs	r5, r3
 8003860:	81a5      	strh	r5, [r4, #12]
 8003862:	e7cf      	b.n	8003804 <__smakebuf_r+0x18>

08003864 <_fstat_r>:
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	4d07      	ldr	r5, [pc, #28]	; (8003884 <_fstat_r+0x20>)
 8003868:	2300      	movs	r3, #0
 800386a:	4604      	mov	r4, r0
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	602b      	str	r3, [r5, #0]
 8003872:	f7fd f892 	bl	800099a <_fstat>
 8003876:	1c43      	adds	r3, r0, #1
 8003878:	d102      	bne.n	8003880 <_fstat_r+0x1c>
 800387a:	682b      	ldr	r3, [r5, #0]
 800387c:	b103      	cbz	r3, 8003880 <_fstat_r+0x1c>
 800387e:	6023      	str	r3, [r4, #0]
 8003880:	bd38      	pop	{r3, r4, r5, pc}
 8003882:	bf00      	nop
 8003884:	20000214 	.word	0x20000214

08003888 <_isatty_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	4d06      	ldr	r5, [pc, #24]	; (80038a4 <_isatty_r+0x1c>)
 800388c:	2300      	movs	r3, #0
 800388e:	4604      	mov	r4, r0
 8003890:	4608      	mov	r0, r1
 8003892:	602b      	str	r3, [r5, #0]
 8003894:	f7fd f891 	bl	80009ba <_isatty>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	d102      	bne.n	80038a2 <_isatty_r+0x1a>
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	b103      	cbz	r3, 80038a2 <_isatty_r+0x1a>
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
 80038a4:	20000214 	.word	0x20000214

080038a8 <_init>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	bf00      	nop
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr

080038b4 <_fini>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	bf00      	nop
 80038b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ba:	bc08      	pop	{r3}
 80038bc:	469e      	mov	lr, r3
 80038be:	4770      	bx	lr
