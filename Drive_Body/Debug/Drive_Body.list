
Drive_Body.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013f8  0800a990  0800a990  0001a990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd88  0800bd88  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd88  0800bd88  0001bd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd90  0800bd90  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd90  0800bd90  0001bd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd94  0800bd94  0001bd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800bd98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200000a0  0800be38  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800be38  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ea8  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003318  00000000  00000000  00033fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  000372d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e59  00000000  00000000  00038578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190e1  00000000  00000000  000393d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166f1  00000000  00000000  000524b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000933f6  00000000  00000000  00068ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005840  00000000  00000000  000fbf9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001017dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a978 	.word	0x0800a978

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	0800a978 	.word	0x0800a978

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <LCD_INIT>:
    int16_t t = a;                                                             \
    a = b;                                                                     \
    b = t;                                                                     \
  }
#endif
void LCD_INIT(){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	 ILI9341_Init();
 8000ee8:	f000 fef8 	bl	8001cdc <ILI9341_Init>
	  ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 ffff 	bl	8001ef0 <ILI9341_SetRotation>
	  ILI9341_FillScreen(WHITE);  // fill screen WhitE
 8000ef2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ef6:	f001 f8e5 	bl	80020c4 <ILI9341_FillScreen>
	  ILI9341_DrawHollowCircle(160,	240, 100,BLACK);
 8000efa:	2300      	movs	r3, #0
 8000efc:	2264      	movs	r2, #100	; 0x64
 8000efe:	21f0      	movs	r1, #240	; 0xf0
 8000f00:	20a0      	movs	r0, #160	; 0xa0
 8000f02:	f000 f99f 	bl	8001244 <ILI9341_DrawHollowCircle>

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <textOn>:
		ILI9341_FillScreen(RED);
		ILI9341_FillScreen(WHITE);

	}
}
void textOn(uint8_t state, int16_t yAxis){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	80bb      	strh	r3, [r7, #4]
	if(state == 0x01){
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d10b      	bne.n	8000f3a <textOn+0x2e>
	ILI9341_DrawText("Mode:AutoMove", FONT4, 0	, 15, BLUE, WHITE);
 8000f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	231f      	movs	r3, #31
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4912      	ldr	r1, [pc, #72]	; (8000f7c <textOn+0x70>)
 8000f32:	4813      	ldr	r0, [pc, #76]	; (8000f80 <textOn+0x74>)
 8000f34:	f000 fd7a 	bl	8001a2c <ILI9341_DrawText>
	}
	else if (state == 0x00){
		ILI9341_DrawText("mode:Stop", FONT4, 0, 15, BLUE, WHITE);
	}

}
 8000f38:	e01c      	b.n	8000f74 <textOn+0x68>
	else if (state == 0x02){
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d10b      	bne.n	8000f58 <textOn+0x4c>
		ILI9341_DrawText("Mode:Manual", FONT4, 0, 15, BLUE, WHITE);
 8000f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	231f      	movs	r3, #31
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	230f      	movs	r3, #15
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	490b      	ldr	r1, [pc, #44]	; (8000f7c <textOn+0x70>)
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <textOn+0x78>)
 8000f52:	f000 fd6b 	bl	8001a2c <ILI9341_DrawText>
}
 8000f56:	e00d      	b.n	8000f74 <textOn+0x68>
	else if (state == 0x00){
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10a      	bne.n	8000f74 <textOn+0x68>
		ILI9341_DrawText("mode:Stop", FONT4, 0, 15, BLUE, WHITE);
 8000f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	231f      	movs	r3, #31
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	230f      	movs	r3, #15
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4903      	ldr	r1, [pc, #12]	; (8000f7c <textOn+0x70>)
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <textOn+0x7c>)
 8000f70:	f000 fd5c 	bl	8001a2c <ILI9341_DrawText>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	0800aa14 	.word	0x0800aa14
 8000f80:	0800a9dc 	.word	0x0800a9dc
 8000f84:	0800a9ec 	.word	0x0800a9ec
 8000f88:	0800a9f8 	.word	0x0800a9f8
 8000f8c:	00000000 	.word	0x00000000

08000f90 <speedLCD_ON>:
void speedLCD_ON(int16_t xAxis, int16_t yAxis,uint8_t state ){
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	80bb      	strh	r3, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	70fb      	strb	r3, [r7, #3]
				int16_t pwmvalue;
		  	int16_t tAxis = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	81fb      	strh	r3, [r7, #14]
		  	textOn(state, yAxis);
 8000fa6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ffac 	bl	8000f0c <textOn>
		  	if(xAxis>2040)xAxis=2040;
 8000fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8000fbc:	dd02      	ble.n	8000fc4 <speedLCD_ON+0x34>
 8000fbe:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000fc2:	80fb      	strh	r3, [r7, #6]
		  	if(yAxis>2040)yAxis=2040;
 8000fc4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fc8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8000fcc:	dd02      	ble.n	8000fd4 <speedLCD_ON+0x44>
 8000fce:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000fd2:	80bb      	strh	r3, [r7, #4]
				tAxis = sqrt((xAxis*xAxis)+(yAxis*yAxis));
 8000fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fdc:	fb03 f202 	mul.w	r2, r3, r2
 8000fe0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fe4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fe8:	fb01 f303 	mul.w	r3, r1, r3
 8000fec:	4413      	add	r3, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fa98 	bl	8000524 <__aeabi_i2d>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	ec43 2b10 	vmov	d0, r2, r3
 8000ffc:	f008 fb1e 	bl	800963c <sqrt>
 8001000:	ec53 2b10 	vmov	r2, r3, d0
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fda6 	bl	8000b58 <__aeabi_d2iz>
 800100c:	4603      	mov	r3, r0
 800100e:	81fb      	strh	r3, [r7, #14]
		  	if(xAxis>100){
 8001010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001014:	2b64      	cmp	r3, #100	; 0x64
 8001016:	dd04      	ble.n	8001022 <speedLCD_ON+0x92>
		  		RightArrow();
 8001018:	f000 fa00 	bl	800141c <RightArrow>
		  		LeftArrowde();
 800101c:	f000 f9e2 	bl	80013e4 <LeftArrowde>
 8001020:	e00d      	b.n	800103e <speedLCD_ON+0xae>
		    	  	}
		    	  	else if(xAxis<-100){
 8001022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001026:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800102a:	da04      	bge.n	8001036 <speedLCD_ON+0xa6>
		    	  		LeftArrow();
 800102c:	f000 f9c0 	bl	80013b0 <LeftArrow>
		    	  		RightArrowde();
 8001030:	f000 fa12 	bl	8001458 <RightArrowde>
 8001034:	e003      	b.n	800103e <speedLCD_ON+0xae>
		    	    	}
		    	  	else
		    	  	{
		    	  		LeftArrowde();
 8001036:	f000 f9d5 	bl	80013e4 <LeftArrowde>
		    	  		RightArrowde();
 800103a:	f000 fa0d 	bl	8001458 <RightArrowde>
		    	  	}

		  		pwmvalue = map(abs(tAxis),0,2048*sqrt(2),0,160);
 800103e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001042:	2b00      	cmp	r3, #0
 8001044:	bfb8      	it	lt
 8001046:	425b      	neglt	r3, r3
 8001048:	b29b      	uxth	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	23a0      	movs	r3, #160	; 0xa0
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2300      	movs	r3, #0
 8001052:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8001056:	2100      	movs	r1, #0
 8001058:	f003 f80e 	bl	8004078 <map>
 800105c:	4603      	mov	r3, r0
 800105e:	81bb      	strh	r3, [r7, #12]
		  		ILI9341_DrawLine(160, 240, 160-(95*cos(pwmvalue*3.14/180)),240-95*sin(pwmvalue*3.14/180), RED);
 8001060:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa5d 	bl	8000524 <__aeabi_i2d>
 800106a:	a371      	add	r3, pc, #452	; (adr r3, 8001230 <speedLCD_ON+0x2a0>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff fac2 	bl	80005f8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4b6d      	ldr	r3, [pc, #436]	; (8001238 <speedLCD_ON+0x2a8>)
 8001082:	f7ff fbe3 	bl	800084c <__aeabi_ddiv>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	ec43 2b17 	vmov	d7, r2, r3
 800108e:	eeb0 0a47 	vmov.f32	s0, s14
 8001092:	eef0 0a67 	vmov.f32	s1, s15
 8001096:	f008 faff 	bl	8009698 <cos>
 800109a:	ec51 0b10 	vmov	r0, r1, d0
 800109e:	a362      	add	r3, pc, #392	; (adr r3, 8001228 <speedLCD_ON+0x298>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff faa8 	bl	80005f8 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	f04f 0000 	mov.w	r0, #0
 80010b0:	4962      	ldr	r1, [pc, #392]	; (800123c <speedLCD_ON+0x2ac>)
 80010b2:	f7ff f8e9 	bl	8000288 <__aeabi_dsub>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fd4b 	bl	8000b58 <__aeabi_d2iz>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b21c      	sxth	r4, r3
 80010c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa2a 	bl	8000524 <__aeabi_i2d>
 80010d0:	a357      	add	r3, pc, #348	; (adr r3, 8001230 <speedLCD_ON+0x2a0>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	f7ff fa8f 	bl	80005f8 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	4b54      	ldr	r3, [pc, #336]	; (8001238 <speedLCD_ON+0x2a8>)
 80010e8:	f7ff fbb0 	bl	800084c <__aeabi_ddiv>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	ec43 2b17 	vmov	d7, r2, r3
 80010f4:	eeb0 0a47 	vmov.f32	s0, s14
 80010f8:	eef0 0a67 	vmov.f32	s1, s15
 80010fc:	f008 fb20 	bl	8009740 <sin>
 8001100:	ec51 0b10 	vmov	r0, r1, d0
 8001104:	a348      	add	r3, pc, #288	; (adr r3, 8001228 <speedLCD_ON+0x298>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f7ff fa75 	bl	80005f8 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	494a      	ldr	r1, [pc, #296]	; (8001240 <speedLCD_ON+0x2b0>)
 8001118:	f7ff f8b6 	bl	8000288 <__aeabi_dsub>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd18 	bl	8000b58 <__aeabi_d2iz>
 8001128:	4603      	mov	r3, r0
 800112a:	b21b      	sxth	r3, r3
 800112c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001130:	9200      	str	r2, [sp, #0]
 8001132:	4622      	mov	r2, r4
 8001134:	21f0      	movs	r1, #240	; 0xf0
 8001136:	20a0      	movs	r0, #160	; 0xa0
 8001138:	f000 fbda 	bl	80018f0 <ILI9341_DrawLine>
		  		HAL_Delay(15);
 800113c:	200f      	movs	r0, #15
 800113e:	f003 f853 	bl	80041e8 <HAL_Delay>
		  		ILI9341_DrawLine(160, 240, 160-(95*cos(pwmvalue*3.14/180)),240-95*sin(pwmvalue*3.14/180), WHITE);
 8001142:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9ec 	bl	8000524 <__aeabi_i2d>
 800114c:	a338      	add	r3, pc, #224	; (adr r3, 8001230 <speedLCD_ON+0x2a0>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa51 	bl	80005f8 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4b35      	ldr	r3, [pc, #212]	; (8001238 <speedLCD_ON+0x2a8>)
 8001164:	f7ff fb72 	bl	800084c <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	ec43 2b17 	vmov	d7, r2, r3
 8001170:	eeb0 0a47 	vmov.f32	s0, s14
 8001174:	eef0 0a67 	vmov.f32	s1, s15
 8001178:	f008 fa8e 	bl	8009698 <cos>
 800117c:	ec51 0b10 	vmov	r0, r1, d0
 8001180:	a329      	add	r3, pc, #164	; (adr r3, 8001228 <speedLCD_ON+0x298>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fa37 	bl	80005f8 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	f04f 0000 	mov.w	r0, #0
 8001192:	492a      	ldr	r1, [pc, #168]	; (800123c <speedLCD_ON+0x2ac>)
 8001194:	f7ff f878 	bl	8000288 <__aeabi_dsub>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fcda 	bl	8000b58 <__aeabi_d2iz>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b21c      	sxth	r4, r3
 80011a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9b9 	bl	8000524 <__aeabi_i2d>
 80011b2:	a31f      	add	r3, pc, #124	; (adr r3, 8001230 <speedLCD_ON+0x2a0>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fa1e 	bl	80005f8 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <speedLCD_ON+0x2a8>)
 80011ca:	f7ff fb3f 	bl	800084c <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	ec43 2b17 	vmov	d7, r2, r3
 80011d6:	eeb0 0a47 	vmov.f32	s0, s14
 80011da:	eef0 0a67 	vmov.f32	s1, s15
 80011de:	f008 faaf 	bl	8009740 <sin>
 80011e2:	ec51 0b10 	vmov	r0, r1, d0
 80011e6:	a310      	add	r3, pc, #64	; (adr r3, 8001228 <speedLCD_ON+0x298>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	f04f 0000 	mov.w	r0, #0
 80011f8:	4911      	ldr	r1, [pc, #68]	; (8001240 <speedLCD_ON+0x2b0>)
 80011fa:	f7ff f845 	bl	8000288 <__aeabi_dsub>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fca7 	bl	8000b58 <__aeabi_d2iz>
 800120a:	4603      	mov	r3, r0
 800120c:	b21b      	sxth	r3, r3
 800120e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001212:	9200      	str	r2, [sp, #0]
 8001214:	4622      	mov	r2, r4
 8001216:	21f0      	movs	r1, #240	; 0xf0
 8001218:	20a0      	movs	r0, #160	; 0xa0
 800121a:	f000 fb69 	bl	80018f0 <ILI9341_DrawLine>


}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	bf00      	nop
 8001228:	00000000 	.word	0x00000000
 800122c:	4057c000 	.word	0x4057c000
 8001230:	51eb851f 	.word	0x51eb851f
 8001234:	40091eb8 	.word	0x40091eb8
 8001238:	40668000 	.word	0x40668000
 800123c:	40640000 	.word	0x40640000
 8001240:	406e0000 	.word	0x406e0000

08001244 <ILI9341_DrawHollowCircle>:
void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	4604      	mov	r4, r0
 800124c:	4608      	mov	r0, r1
 800124e:	4611      	mov	r1, r2
 8001250:	461a      	mov	r2, r3
 8001252:	4623      	mov	r3, r4
 8001254:	80fb      	strh	r3, [r7, #6]
 8001256:	4603      	mov	r3, r0
 8001258:	80bb      	strh	r3, [r7, #4]
 800125a:	460b      	mov	r3, r1
 800125c:	807b      	strh	r3, [r7, #2]
 800125e:	4613      	mov	r3, r2
 8001260:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	3b01      	subs	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
	int y = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 800126c:	2301      	movs	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
	int dy = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 800127e:	e08d      	b.n	800139c <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	b29a      	uxth	r2, r3
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	4413      	add	r3, r2
 8001288:	b298      	uxth	r0, r3
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	b29a      	uxth	r2, r3
 800128e:	88bb      	ldrh	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	b29b      	uxth	r3, r3
 8001294:	883a      	ldrh	r2, [r7, #0]
 8001296:	4619      	mov	r1, r3
 8001298:	f000 ff3a 	bl	8002110 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	4413      	add	r3, r2
 80012a4:	b298      	uxth	r0, r3
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	88bb      	ldrh	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	883a      	ldrh	r2, [r7, #0]
 80012b2:	4619      	mov	r1, r3
 80012b4:	f000 ff2c 	bl	8002110 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	88fa      	ldrh	r2, [r7, #6]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	b298      	uxth	r0, r3
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	883a      	ldrh	r2, [r7, #0]
 80012ce:	4619      	mov	r1, r3
 80012d0:	f000 ff1e 	bl	8002110 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	88fa      	ldrh	r2, [r7, #6]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b298      	uxth	r0, r3
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	88bb      	ldrh	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	883a      	ldrh	r2, [r7, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	f000 ff10 	bl	8002110 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	88fa      	ldrh	r2, [r7, #6]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	b298      	uxth	r0, r3
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	88ba      	ldrh	r2, [r7, #4]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	b29b      	uxth	r3, r3
 8001304:	883a      	ldrh	r2, [r7, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	f000 ff02 	bl	8002110 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	b29b      	uxth	r3, r3
 8001310:	88fa      	ldrh	r2, [r7, #6]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	b298      	uxth	r0, r3
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	b29b      	uxth	r3, r3
 800131a:	88ba      	ldrh	r2, [r7, #4]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	b29b      	uxth	r3, r3
 8001320:	883a      	ldrh	r2, [r7, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	f000 fef4 	bl	8002110 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	b29a      	uxth	r2, r3
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	4413      	add	r3, r2
 8001330:	b298      	uxth	r0, r3
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	b29b      	uxth	r3, r3
 8001336:	88ba      	ldrh	r2, [r7, #4]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	b29b      	uxth	r3, r3
 800133c:	883a      	ldrh	r2, [r7, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	f000 fee6 	bl	8002110 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	b29a      	uxth	r2, r3
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	4413      	add	r3, r2
 800134c:	b298      	uxth	r0, r3
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	b29b      	uxth	r3, r3
 8001352:	88ba      	ldrh	r2, [r7, #4]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	b29b      	uxth	r3, r3
 8001358:	883a      	ldrh	r2, [r7, #0]
 800135a:	4619      	mov	r1, r3
 800135c:	f000 fed8 	bl	8002110 <ILI9341_DrawPixel>

		if (err <= 0)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	dc09      	bgt.n	800137a <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	3301      	adds	r3, #1
 800136a:	61bb      	str	r3, [r7, #24]
			err += dy;
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4413      	add	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
			dy += 2;
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	3302      	adds	r3, #2
 8001378:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	dd0d      	ble.n	800139c <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	3b01      	subs	r3, #1
 8001384:	61fb      	str	r3, [r7, #28]
			dx += 2;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3302      	adds	r3, #2
 800138a:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	425b      	negs	r3, r3
 8001390:	005a      	lsls	r2, r3, #1
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	4413      	add	r3, r2
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4413      	add	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	f6bf af6d 	bge.w	8001280 <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	3724      	adds	r7, #36	; 0x24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <LeftArrow>:
	{
		ILI9341_DrawPixel(X1, Y1, color);
	}
}

void LeftArrow(){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af04      	add	r7, sp, #16
	//LEFT

	  	ILI9341_DrawFilledRectangleCoord(50, 100, 100, 120, BLACK);
 80013b6:	2300      	movs	r3, #0
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2378      	movs	r3, #120	; 0x78
 80013bc:	2264      	movs	r2, #100	; 0x64
 80013be:	2164      	movs	r1, #100	; 0x64
 80013c0:	2032      	movs	r0, #50	; 0x32
 80013c2:	f000 f9bf 	bl	8001744 <ILI9341_DrawFilledRectangleCoord>
	    ILI9341_fillTriangle(0, 110, 50, 90, 50, 130,BLACK);
 80013c6:	2300      	movs	r3, #0
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2382      	movs	r3, #130	; 0x82
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	2332      	movs	r3, #50	; 0x32
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	235a      	movs	r3, #90	; 0x5a
 80013d4:	2232      	movs	r2, #50	; 0x32
 80013d6:	216e      	movs	r1, #110	; 0x6e
 80013d8:	2000      	movs	r0, #0
 80013da:	f000 f85d 	bl	8001498 <ILI9341_fillTriangle>



}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <LeftArrowde>:
void LeftArrowde(){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af04      	add	r7, sp, #16
	//LEFT

	ILI9341_DrawFilledRectangleCoord(50, 100, 100, 120, WHITE);
 80013ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2378      	movs	r3, #120	; 0x78
 80013f2:	2264      	movs	r2, #100	; 0x64
 80013f4:	2164      	movs	r1, #100	; 0x64
 80013f6:	2032      	movs	r0, #50	; 0x32
 80013f8:	f000 f9a4 	bl	8001744 <ILI9341_DrawFilledRectangleCoord>
  ILI9341_fillTriangle(0, 110, 50, 90, 50, 130,WHITE);
 80013fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	2382      	movs	r3, #130	; 0x82
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	2332      	movs	r3, #50	; 0x32
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	235a      	movs	r3, #90	; 0x5a
 800140c:	2232      	movs	r2, #50	; 0x32
 800140e:	216e      	movs	r1, #110	; 0x6e
 8001410:	2000      	movs	r0, #0
 8001412:	f000 f841 	bl	8001498 <ILI9341_fillTriangle>

}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <RightArrow>:
void RightArrow(){
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af04      	add	r7, sp, #16
  //RIGHT

  	ILI9341_DrawFilledRectangleCoord(220, 100, 270, 120, BLACK);
 8001422:	2300      	movs	r3, #0
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2378      	movs	r3, #120	; 0x78
 8001428:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800142c:	2164      	movs	r1, #100	; 0x64
 800142e:	20dc      	movs	r0, #220	; 0xdc
 8001430:	f000 f988 	bl	8001744 <ILI9341_DrawFilledRectangleCoord>
  	ILI9341_fillTriangle(320, 110, 270, 90, 270, 130,BLACK);
 8001434:	2300      	movs	r3, #0
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	2382      	movs	r3, #130	; 0x82
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	235a      	movs	r3, #90	; 0x5a
 8001444:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001448:	216e      	movs	r1, #110	; 0x6e
 800144a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800144e:	f000 f823 	bl	8001498 <ILI9341_fillTriangle>

}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <RightArrowde>:

void RightArrowde(){
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af04      	add	r7, sp, #16
  //RIGHT

	ILI9341_DrawFilledRectangleCoord(220, 100, 270, 120, WHITE);
 800145e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2378      	movs	r3, #120	; 0x78
 8001466:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800146a:	2164      	movs	r1, #100	; 0x64
 800146c:	20dc      	movs	r0, #220	; 0xdc
 800146e:	f000 f969 	bl	8001744 <ILI9341_DrawFilledRectangleCoord>
	  	ILI9341_fillTriangle(320, 110, 270, 90, 270, 130,WHITE);
 8001472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001476:	9302      	str	r3, [sp, #8]
 8001478:	2382      	movs	r3, #130	; 0x82
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	235a      	movs	r3, #90	; 0x5a
 8001484:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001488:	216e      	movs	r1, #110	; 0x6e
 800148a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800148e:	f000 f803 	bl	8001498 <ILI9341_fillTriangle>
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <ILI9341_fillTriangle>:
	RightArrowde();


}

void ILI9341_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1,int16_t x2, int16_t y2, uint16_t color) {
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b08f      	sub	sp, #60	; 0x3c
 800149c:	af00      	add	r7, sp, #0
 800149e:	4604      	mov	r4, r0
 80014a0:	4608      	mov	r0, r1
 80014a2:	4611      	mov	r1, r2
 80014a4:	461a      	mov	r2, r3
 80014a6:	4623      	mov	r3, r4
 80014a8:	80fb      	strh	r3, [r7, #6]
 80014aa:	4603      	mov	r3, r0
 80014ac:	80bb      	strh	r3, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	807b      	strh	r3, [r7, #2]
 80014b2:	4613      	mov	r3, r2
 80014b4:	803b      	strh	r3, [r7, #0]

  int16_t a, b, y, last;


  if (y0 > y1) {
 80014b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dd0b      	ble.n	80014da <ILI9341_fillTriangle+0x42>
    _swap_int16_t(y0, y1);
 80014c2:	88bb      	ldrh	r3, [r7, #4]
 80014c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80014c6:	883b      	ldrh	r3, [r7, #0]
 80014c8:	80bb      	strh	r3, [r7, #4]
 80014ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014cc:	803b      	strh	r3, [r7, #0]
    _swap_int16_t(x0, x1);
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	80fb      	strh	r3, [r7, #6]
 80014d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014d8:	807b      	strh	r3, [r7, #2]
  }
  if (y1 > y2) {
 80014da:	f9b7 2000 	ldrsh.w	r2, [r7]
 80014de:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dd0f      	ble.n	8001506 <ILI9341_fillTriangle+0x6e>
    _swap_int16_t(y2, y1);
 80014e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80014ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80014ec:	883b      	ldrh	r3, [r7, #0]
 80014ee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80014f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80014f4:	803b      	strh	r3, [r7, #0]
    _swap_int16_t(x2, x1);
 80014f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80014fa:	843b      	strh	r3, [r7, #32]
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001502:	8c3b      	ldrh	r3, [r7, #32]
 8001504:	807b      	strh	r3, [r7, #2]
  }
  if (y0 > y1) {
 8001506:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800150a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800150e:	429a      	cmp	r2, r3
 8001510:	dd0b      	ble.n	800152a <ILI9341_fillTriangle+0x92>
    _swap_int16_t(y0, y1);
 8001512:	88bb      	ldrh	r3, [r7, #4]
 8001514:	83fb      	strh	r3, [r7, #30]
 8001516:	883b      	ldrh	r3, [r7, #0]
 8001518:	80bb      	strh	r3, [r7, #4]
 800151a:	8bfb      	ldrh	r3, [r7, #30]
 800151c:	803b      	strh	r3, [r7, #0]
    _swap_int16_t(x0, x1);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	83bb      	strh	r3, [r7, #28]
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	80fb      	strh	r3, [r7, #6]
 8001526:	8bbb      	ldrh	r3, [r7, #28]
 8001528:	807b      	strh	r3, [r7, #2]
  }

  if (y0 == y2) {
 800152a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800152e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001532:	429a      	cmp	r2, r3
 8001534:	d134      	bne.n	80015a0 <ILI9341_fillTriangle+0x108>
    a = b = x0;
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	86bb      	strh	r3, [r7, #52]	; 0x34
 800153a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800153c:	86fb      	strh	r3, [r7, #54]	; 0x36
    if (x1 < a)
 800153e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001542:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001546:	429a      	cmp	r2, r3
 8001548:	da02      	bge.n	8001550 <ILI9341_fillTriangle+0xb8>
      a = x1;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800154e:	e007      	b.n	8001560 <ILI9341_fillTriangle+0xc8>
    else if (x1 > b)
 8001550:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001554:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001558:	429a      	cmp	r2, r3
 800155a:	dd01      	ble.n	8001560 <ILI9341_fillTriangle+0xc8>
      b = x1;
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (x2 < a)
 8001560:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8001564:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001568:	429a      	cmp	r2, r3
 800156a:	da03      	bge.n	8001574 <ILI9341_fillTriangle+0xdc>
      a = x2;
 800156c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001570:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001572:	e008      	b.n	8001586 <ILI9341_fillTriangle+0xee>
    else if (x2 > b)
 8001574:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8001578:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800157c:	429a      	cmp	r2, r3
 800157e:	dd02      	ble.n	8001586 <ILI9341_fillTriangle+0xee>
      b = x2;
 8001580:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001584:	86bb      	strh	r3, [r7, #52]	; 0x34
    ILI9341_DrawHLine(a, y0, b - a + 1, color);
 8001586:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8001588:	88b9      	ldrh	r1, [r7, #4]
 800158a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800158c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	b29b      	uxth	r3, r3
 8001592:	3301      	adds	r3, #1
 8001594:	b29a      	uxth	r2, r3
 8001596:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800159a:	f000 fe7b 	bl	8002294 <ILI9341_DrawHLine>
    return;
 800159e:	e0ce      	b.n	800173e <ILI9341_fillTriangle+0x2a6>
  }

  int16_t dx01 = x1 - x0, dy01 = y1 - y0, dx02 = x2 - x0, dy02 = y2 - y0,
 80015a0:	887a      	ldrh	r2, [r7, #2]
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	837b      	strh	r3, [r7, #26]
 80015aa:	883a      	ldrh	r2, [r7, #0]
 80015ac:	88bb      	ldrh	r3, [r7, #4]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	833b      	strh	r3, [r7, #24]
 80015b4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	b29b      	uxth	r3, r3
 80015be:	82fb      	strh	r3, [r7, #22]
 80015c0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80015c4:	88bb      	ldrh	r3, [r7, #4]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	82bb      	strh	r3, [r7, #20]
          dx12 = x2 - x1, dy12 = y2 - y1;
 80015cc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	827b      	strh	r3, [r7, #18]
 80015d8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80015dc:	883b      	ldrh	r3, [r7, #0]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	823b      	strh	r3, [r7, #16]
  int32_t sa = 0, sb = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28


  if (y1 == y2)
 80015ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 80015f0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d102      	bne.n	80015fe <ILI9341_fillTriangle+0x166>
    last = y1; //
 80015f8:	883b      	ldrh	r3, [r7, #0]
 80015fa:	863b      	strh	r3, [r7, #48]	; 0x30
 80015fc:	e003      	b.n	8001606 <ILI9341_fillTriangle+0x16e>
  else
    last = y1 - 1; //
 80015fe:	883b      	ldrh	r3, [r7, #0]
 8001600:	3b01      	subs	r3, #1
 8001602:	b29b      	uxth	r3, r3
 8001604:	863b      	strh	r3, [r7, #48]	; 0x30

  for (y = y0; y <= last; y++) {
 8001606:	88bb      	ldrh	r3, [r7, #4]
 8001608:	867b      	strh	r3, [r7, #50]	; 0x32
 800160a:	e03b      	b.n	8001684 <ILI9341_fillTriangle+0x1ec>
    a = x0 + sa / dy01;
 800160c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001612:	fb92 f3f3 	sdiv	r3, r2, r3
 8001616:	b29a      	uxth	r2, r3
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	4413      	add	r3, r2
 800161c:	b29b      	uxth	r3, r3
 800161e:	86fb      	strh	r3, [r7, #54]	; 0x36
    b = x0 + sb / dy02;
 8001620:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001626:	fb92 f3f3 	sdiv	r3, r2, r3
 800162a:	b29a      	uxth	r2, r3
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	4413      	add	r3, r2
 8001630:	b29b      	uxth	r3, r3
 8001632:	86bb      	strh	r3, [r7, #52]	; 0x34
    sa += dx01;
 8001634:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800163a:	4413      	add	r3, r2
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb += dx02;
 800163e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001644:	4413      	add	r3, r2
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28

    if (a > b)
 8001648:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800164c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001650:	429a      	cmp	r2, r3
 8001652:	dd05      	ble.n	8001660 <ILI9341_fillTriangle+0x1c8>
      _swap_int16_t(a, b);
 8001654:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001656:	81bb      	strh	r3, [r7, #12]
 8001658:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800165a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800165c:	89bb      	ldrh	r3, [r7, #12]
 800165e:	86bb      	strh	r3, [r7, #52]	; 0x34
    ILI9341_DrawHLine(a, y, b - a + 1, color);
 8001660:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8001662:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001664:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001666:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	b29b      	uxth	r3, r3
 800166c:	3301      	adds	r3, #1
 800166e:	b29a      	uxth	r2, r3
 8001670:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001674:	f000 fe0e 	bl	8002294 <ILI9341_DrawHLine>
  for (y = y0; y <= last; y++) {
 8001678:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800167c:	b29b      	uxth	r3, r3
 800167e:	3301      	adds	r3, #1
 8001680:	b29b      	uxth	r3, r3
 8001682:	867b      	strh	r3, [r7, #50]	; 0x32
 8001684:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001688:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800168c:	429a      	cmp	r2, r3
 800168e:	ddbd      	ble.n	800160c <ILI9341_fillTriangle+0x174>
  }

  sa = (int32_t)dx12 * (y - y1);
 8001690:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001694:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8001698:	f9b7 2000 	ldrsh.w	r2, [r7]
 800169c:	1a8a      	subs	r2, r1, r2
 800169e:	fb02 f303 	mul.w	r3, r2, r3
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sb = (int32_t)dx02 * (y - y0);
 80016a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016a8:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80016ac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016b0:	1a8a      	subs	r2, r1, r2
 80016b2:	fb02 f303 	mul.w	r3, r2, r3
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (; y <= y2; y++) {
 80016b8:	e03b      	b.n	8001732 <ILI9341_fillTriangle+0x29a>
    a = x1 + sa / dy12;
 80016ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	4413      	add	r3, r2
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	86fb      	strh	r3, [r7, #54]	; 0x36
    b = x0 + sb / dy02;
 80016ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80016d8:	b29a      	uxth	r2, r3
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	4413      	add	r3, r2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	86bb      	strh	r3, [r7, #52]	; 0x34
    sa += dx12;
 80016e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e8:	4413      	add	r3, r2
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb += dx02;
 80016ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f2:	4413      	add	r3, r2
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (a > b)
 80016f6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80016fa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80016fe:	429a      	cmp	r2, r3
 8001700:	dd05      	ble.n	800170e <ILI9341_fillTriangle+0x276>
      _swap_int16_t(a, b);
 8001702:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001704:	81fb      	strh	r3, [r7, #14]
 8001706:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001708:	86fb      	strh	r3, [r7, #54]	; 0x36
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	86bb      	strh	r3, [r7, #52]	; 0x34
    ILI9341_DrawHLine(a, y, b - a + 1, color);
 800170e:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8001710:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001712:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001714:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	b29b      	uxth	r3, r3
 800171a:	3301      	adds	r3, #1
 800171c:	b29a      	uxth	r2, r3
 800171e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001722:	f000 fdb7 	bl	8002294 <ILI9341_DrawHLine>
  for (; y <= y2; y++) {
 8001726:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800172a:	b29b      	uxth	r3, r3
 800172c:	3301      	adds	r3, #1
 800172e:	b29b      	uxth	r3, r3
 8001730:	867b      	strh	r3, [r7, #50]	; 0x32
 8001732:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001736:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800173a:	429a      	cmp	r2, r3
 800173c:	ddbd      	ble.n	80016ba <ILI9341_fillTriangle+0x222>
  }
}
 800173e:	373c      	adds	r7, #60	; 0x3c
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}

08001744 <ILI9341_DrawFilledRectangleCoord>:
}



void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af02      	add	r7, sp, #8
 800174a:	4604      	mov	r4, r0
 800174c:	4608      	mov	r0, r1
 800174e:	4611      	mov	r1, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4623      	mov	r3, r4
 8001754:	80fb      	strh	r3, [r7, #6]
 8001756:	4603      	mov	r3, r0
 8001758:	80bb      	strh	r3, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	807b      	strh	r3, [r7, #2]
 800175e:	4613      	mov	r3, r2
 8001760:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	74bb      	strb	r3, [r7, #18]
	int32_t negCalc = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	823b      	strh	r3, [r7, #16]
	uint16_t Y0True = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	81fb      	strh	r3, [r7, #14]

	negCalc = X1 - X0;
 800177e:	887a      	ldrh	r2, [r7, #2]
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	da01      	bge.n	8001790 <ILI9341_DrawFilledRectangleCoord+0x4c>
 800178c:	2301      	movs	r3, #1
 800178e:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 8001794:	883a      	ldrh	r2, [r7, #0]
 8001796:	88bb      	ldrh	r3, [r7, #4]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da01      	bge.n	80017a6 <ILI9341_DrawFilledRectangleCoord+0x62>
 80017a2:	2301      	movs	r3, #1
 80017a4:	74bb      	strb	r3, [r7, #18]

	if(!negX)
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d106      	bne.n	80017ba <ILI9341_DrawFilledRectangleCoord+0x76>
	{
		xLen = X1 - X0;
 80017ac:	887a      	ldrh	r2, [r7, #2]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	82fb      	strh	r3, [r7, #22]
		X0True = X0;
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	823b      	strh	r3, [r7, #16]
 80017b8:	e005      	b.n	80017c6 <ILI9341_DrawFilledRectangleCoord+0x82>
	}
	else
	{
		xLen = X0 - X1;
 80017ba:	88fa      	ldrh	r2, [r7, #6]
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	82fb      	strh	r3, [r7, #22]
		X0True = X1;
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	823b      	strh	r3, [r7, #16]
	}

	if(!negY)
 80017c6:	7cbb      	ldrb	r3, [r7, #18]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d106      	bne.n	80017da <ILI9341_DrawFilledRectangleCoord+0x96>
	{
		yLen = Y1 - Y0;
 80017cc:	883a      	ldrh	r2, [r7, #0]
 80017ce:	88bb      	ldrh	r3, [r7, #4]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	82bb      	strh	r3, [r7, #20]
		Y0True = Y0;
 80017d4:	88bb      	ldrh	r3, [r7, #4]
 80017d6:	81fb      	strh	r3, [r7, #14]
 80017d8:	e005      	b.n	80017e6 <ILI9341_DrawFilledRectangleCoord+0xa2>
	}
	else
	{
		yLen = Y0 - Y1;
 80017da:	88ba      	ldrh	r2, [r7, #4]
 80017dc:	883b      	ldrh	r3, [r7, #0]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	82bb      	strh	r3, [r7, #20]
		Y0True = Y1;
 80017e2:	883b      	ldrh	r3, [r7, #0]
 80017e4:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 80017e6:	8abc      	ldrh	r4, [r7, #20]
 80017e8:	8afa      	ldrh	r2, [r7, #22]
 80017ea:	89f9      	ldrh	r1, [r7, #14]
 80017ec:	8a38      	ldrh	r0, [r7, #16]
 80017ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	4623      	mov	r3, r4
 80017f4:	f000 fcf2 	bl	80021dc <ILI9341_DrawRectangle>
}
 80017f8:	bf00      	nop
 80017fa:	371c      	adds	r7, #28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}

08001800 <ILI9341_DrawChar>:


void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b08d      	sub	sp, #52	; 0x34
 8001804:	af02      	add	r7, sp, #8
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	4611      	mov	r1, r2
 800180a:	461a      	mov	r2, r3
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	460b      	mov	r3, r1
 8001812:	81bb      	strh	r3, [r7, #12]
 8001814:	4613      	mov	r3, r2
 8001816:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	2b1e      	cmp	r3, #30
 800181c:	d964      	bls.n	80018e8 <ILI9341_DrawChar+0xe8>
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db60      	blt.n	80018e8 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	3301      	adds	r3, #1
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	3302      	adds	r3, #2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	3303      	adds	r3, #3
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	3b20      	subs	r3, #32
 8001848:	7ffa      	ldrb	r2, [r7, #31]
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	3304      	adds	r3, #4
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	4413      	add	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8001856:	7fbb      	ldrb	r3, [r7, #30]
 8001858:	b29a      	uxth	r2, r3
 800185a:	7f7b      	ldrb	r3, [r7, #29]
 800185c:	b29c      	uxth	r4, r3
 800185e:	88f9      	ldrh	r1, [r7, #6]
 8001860:	89b8      	ldrh	r0, [r7, #12]
 8001862:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	4623      	mov	r3, r4
 8001868:	f000 fcb8 	bl	80021dc <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
 8001870:	e035      	b.n	80018de <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
 8001876:	e02b      	b.n	80018d0 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8001878:	7f3b      	ldrb	r3, [r7, #28]
 800187a:	6a3a      	ldr	r2, [r7, #32]
 800187c:	fb03 f202 	mul.w	r2, r3, r2
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	10db      	asrs	r3, r3, #3
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	4413      	add	r3, r2
 800188a:	3301      	adds	r3, #1
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	2201      	movs	r2, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 80018a2:	7dfa      	ldrb	r2, [r7, #23]
 80018a4:	7dbb      	ldrb	r3, [r7, #22]
 80018a6:	4013      	ands	r3, r2
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00d      	beq.n	80018ca <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	89bb      	ldrh	r3, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	b298      	uxth	r0, r3
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80018c4:	4619      	mov	r1, r3
 80018c6:	f000 fc23 	bl	8002110 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	3301      	adds	r3, #1
 80018ce:	623b      	str	r3, [r7, #32]
 80018d0:	7fbb      	ldrb	r3, [r7, #30]
 80018d2:	6a3a      	ldr	r2, [r7, #32]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbcf      	blt.n	8001878 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	3301      	adds	r3, #1
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	7f7b      	ldrb	r3, [r7, #29]
 80018e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dbc5      	blt.n	8001872 <ILI9341_DrawChar+0x72>
 80018e6:	e000      	b.n	80018ea <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80018e8:	bf00      	nop
			}
		}
	}
}
 80018ea:	372c      	adds	r7, #44	; 0x2c
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <ILI9341_DrawLine>:
    a = b;                                                                     \
    b = t;                                                                     \
  }


void ILI9341_DrawLine(int16_t x0,int16_t y0,int16_t x1,int16_t y1,uint16_t color){
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4604      	mov	r4, r0
 80018f8:	4608      	mov	r0, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4623      	mov	r3, r4
 8001900:	80fb      	strh	r3, [r7, #6]
 8001902:	4603      	mov	r3, r0
 8001904:	80bb      	strh	r3, [r7, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	807b      	strh	r3, [r7, #2]
 800190a:	4613      	mov	r3, r2
 800190c:	803b      	strh	r3, [r7, #0]

	#if defined(ESP8266)
	  yield();
	#endif
	  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800190e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001912:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800191c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001920:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001928:	1acb      	subs	r3, r1, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	bfb8      	it	lt
 800192e:	425b      	neglt	r3, r3
 8001930:	429a      	cmp	r2, r3
 8001932:	bfcc      	ite	gt
 8001934:	2301      	movgt	r3, #1
 8001936:	2300      	movle	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	837b      	strh	r3, [r7, #26]
	  if (steep) {
 800193c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00b      	beq.n	800195c <ILI9341_DrawLine+0x6c>
	    _swap_int16_t(x0, y0);
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	833b      	strh	r3, [r7, #24]
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	80fb      	strh	r3, [r7, #6]
 800194c:	8b3b      	ldrh	r3, [r7, #24]
 800194e:	80bb      	strh	r3, [r7, #4]
	    _swap_int16_t(x1, y1);
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	82fb      	strh	r3, [r7, #22]
 8001954:	883b      	ldrh	r3, [r7, #0]
 8001956:	807b      	strh	r3, [r7, #2]
 8001958:	8afb      	ldrh	r3, [r7, #22]
 800195a:	803b      	strh	r3, [r7, #0]
	  }

	  if (x0 > x1) {
 800195c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001960:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001964:	429a      	cmp	r2, r3
 8001966:	dd0b      	ble.n	8001980 <ILI9341_DrawLine+0x90>
	    _swap_int16_t(x0, x1);
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	82bb      	strh	r3, [r7, #20]
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	80fb      	strh	r3, [r7, #6]
 8001970:	8abb      	ldrh	r3, [r7, #20]
 8001972:	807b      	strh	r3, [r7, #2]
	    _swap_int16_t(y0, y1);
 8001974:	88bb      	ldrh	r3, [r7, #4]
 8001976:	827b      	strh	r3, [r7, #18]
 8001978:	883b      	ldrh	r3, [r7, #0]
 800197a:	80bb      	strh	r3, [r7, #4]
 800197c:	8a7b      	ldrh	r3, [r7, #18]
 800197e:	803b      	strh	r3, [r7, #0]
	  }

	  int16_t dx, dy;
	  dx = x1 - x0;
 8001980:	887a      	ldrh	r2, [r7, #2]
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	b29b      	uxth	r3, r3
 8001988:	823b      	strh	r3, [r7, #16]
	  dy = abs(y1 - y0);
 800198a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800198e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	bfb8      	it	lt
 8001998:	425b      	neglt	r3, r3
 800199a:	81fb      	strh	r3, [r7, #14]

	  int16_t err = dx / 2;
 800199c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019a0:	0fda      	lsrs	r2, r3, #31
 80019a2:	4413      	add	r3, r2
 80019a4:	105b      	asrs	r3, r3, #1
 80019a6:	83fb      	strh	r3, [r7, #30]
	  int16_t ystep;

	  if (y0 < y1) {
 80019a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019ac:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	da02      	bge.n	80019ba <ILI9341_DrawLine+0xca>
	    ystep = 1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	83bb      	strh	r3, [r7, #28]
 80019b8:	e02d      	b.n	8001a16 <ILI9341_DrawLine+0x126>
	  } else {
	    ystep = -1;
 80019ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019be:	83bb      	strh	r3, [r7, #28]
	  }

	  for (; x0 <= x1; x0++) {
 80019c0:	e029      	b.n	8001a16 <ILI9341_DrawLine+0x126>
	    if (steep) {
 80019c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <ILI9341_DrawLine+0xe8>
	    	ILI9341_DrawPixel(y0, x0, color);
 80019ca:	88bb      	ldrh	r3, [r7, #4]
 80019cc:	88f9      	ldrh	r1, [r7, #6]
 80019ce:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fb9d 	bl	8002110 <ILI9341_DrawPixel>
 80019d6:	e005      	b.n	80019e4 <ILI9341_DrawLine+0xf4>
	    } else {
	    	ILI9341_DrawPixel(x0, y0, color);
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	88b9      	ldrh	r1, [r7, #4]
 80019dc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 fb96 	bl	8002110 <ILI9341_DrawPixel>
	    }
	    err -= dy;
 80019e4:	8bfa      	ldrh	r2, [r7, #30]
 80019e6:	89fb      	ldrh	r3, [r7, #14]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	83fb      	strh	r3, [r7, #30]
	    if (err < 0) {
 80019ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da09      	bge.n	8001a0a <ILI9341_DrawLine+0x11a>
	      y0 += ystep;
 80019f6:	88ba      	ldrh	r2, [r7, #4]
 80019f8:	8bbb      	ldrh	r3, [r7, #28]
 80019fa:	4413      	add	r3, r2
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	80bb      	strh	r3, [r7, #4]
	      err += dx;
 8001a00:	8bfa      	ldrh	r2, [r7, #30]
 8001a02:	8a3b      	ldrh	r3, [r7, #16]
 8001a04:	4413      	add	r3, r2
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	83fb      	strh	r3, [r7, #30]
	  for (; x0 <= x1; x0++) {
 8001a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	80fb      	strh	r3, [r7, #6]
 8001a16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	ddcf      	ble.n	80019c2 <ILI9341_DrawLine+0xd2>





}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	3724      	adds	r7, #36	; 0x24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}

08001a2c <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	4611      	mov	r1, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	80fb      	strh	r3, [r7, #6]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8001a50:	e02d      	b.n	8001aae <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	7818      	ldrb	r0, [r3, #0]
 8001a56:	88b9      	ldrh	r1, [r7, #4]
 8001a58:	88fa      	ldrh	r2, [r7, #6]
 8001a5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	460b      	mov	r3, r1
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	f7ff fecb 	bl	8001800 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	3b20      	subs	r3, #32
 8001a70:	7ffa      	ldrb	r2, [r7, #31]
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	3304      	adds	r3, #4
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	1c9a      	adds	r2, r3, #2
 8001a88:	7fbb      	ldrb	r3, [r7, #30]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	da07      	bge.n	8001a9e <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	4413      	add	r3, r2
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3302      	adds	r3, #2
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	e004      	b.n	8001aa8 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8001a9e:	7fbb      	ldrb	r3, [r7, #30]
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1cd      	bne.n	8001a52 <ILI9341_DrawText+0x26>
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_SPI_TxCpltCallback+0x24>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d104      	bne.n	8001ada <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <HAL_SPI_TxCpltCallback+0x28>)
 8001ad6:	f003 fa43 	bl	8004f60 <HAL_GPIO_WritePin>
  }
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200000c4 	.word	0x200000c4
 8001ae8:	40020800 	.word	0x40020800

08001aec <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001af6:	bf00      	nop
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <ILI9341_SPI_Tx+0x30>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d1f8      	bne.n	8001af8 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4803      	ldr	r0, [pc, #12]	; (8001b1c <ILI9341_SPI_Tx+0x30>)
 8001b0e:	f004 f865 	bl	8005bdc <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200000c4 	.word	0x200000c4

08001b20 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001b2c:	bf00      	nop
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <ILI9341_SPI_TxBuffer+0x30>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d1f8      	bne.n	8001b2e <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8001b3c:	887b      	ldrh	r3, [r7, #2]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <ILI9341_SPI_TxBuffer+0x30>)
 8001b44:	f004 f84a 	bl	8005bdc <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200000c4 	.word	0x200000c4

08001b54 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2104      	movs	r1, #4
 8001b62:	4808      	ldr	r0, [pc, #32]	; (8001b84 <ILI9341_WriteCommand+0x30>)
 8001b64:	f003 f9fc 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <ILI9341_WriteCommand+0x30>)
 8001b6e:	f003 f9f7 	bl	8004f60 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ffb9 	bl	8001aec <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40020800 	.word	0x40020800

08001b88 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001b92:	2201      	movs	r2, #1
 8001b94:	2104      	movs	r1, #4
 8001b96:	4808      	ldr	r0, [pc, #32]	; (8001bb8 <ILI9341_WriteData+0x30>)
 8001b98:	f003 f9e2 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <ILI9341_WriteData+0x30>)
 8001ba2:	f003 f9dd 	bl	8004f60 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff9f 	bl	8001aec <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40020800 	.word	0x40020800

08001bbc <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2104      	movs	r1, #4
 8001bcc:	4808      	ldr	r0, [pc, #32]	; (8001bf0 <ILI9341_WriteBuffer+0x34>)
 8001bce:	f003 f9c7 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <ILI9341_WriteBuffer+0x34>)
 8001bd8:	f003 f9c2 	bl	8004f60 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	4619      	mov	r1, r3
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff9d 	bl	8001b20 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40020800 	.word	0x40020800

08001bf4 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	4611      	mov	r1, r2
 8001c00:	461a      	mov	r2, r3
 8001c02:	4623      	mov	r3, r4
 8001c04:	80fb      	strh	r3, [r7, #6]
 8001c06:	4603      	mov	r3, r0
 8001c08:	80bb      	strh	r3, [r7, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	807b      	strh	r3, [r7, #2]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8001c32:	202a      	movs	r0, #42	; 0x2a
 8001c34:	f7ff ff8e 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2104      	movs	r1, #4
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ffbc 	bl	8001bbc <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8001c44:	88bb      	ldrh	r3, [r7, #4]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8001c54:	883b      	ldrh	r3, [r7, #0]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8001c5e:	883b      	ldrh	r3, [r7, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8001c64:	202b      	movs	r0, #43	; 0x2b
 8001c66:	f7ff ff75 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	2104      	movs	r1, #4
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ffa3 	bl	8001bbc <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8001c76:	202c      	movs	r0, #44	; 0x2c
 8001c78:	f7ff ff6c 	bl	8001b54 <ILI9341_WriteCommand>
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}

08001c84 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2108      	movs	r1, #8
 8001c8c:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <ILI9341_Reset+0x3c>)
 8001c8e:	f003 f967 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001c92:	200a      	movs	r0, #10
 8001c94:	f002 faa8 	bl	80041e8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	4808      	ldr	r0, [pc, #32]	; (8001cc0 <ILI9341_Reset+0x3c>)
 8001c9e:	f003 f95f 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001ca2:	200a      	movs	r0, #10
 8001ca4:	f002 faa0 	bl	80041e8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2108      	movs	r1, #8
 8001cac:	4804      	ldr	r0, [pc, #16]	; (8001cc0 <ILI9341_Reset+0x3c>)
 8001cae:	f003 f957 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <ILI9341_Reset+0x3c>)
 8001cb8:	f003 f952 	bl	8004f60 <HAL_GPIO_WritePin>
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40020800 	.word	0x40020800

08001cc4 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001cc8:	2201      	movs	r2, #1
 8001cca:	2108      	movs	r1, #8
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <ILI9341_Enable+0x14>)
 8001cce:	f003 f947 	bl	8004f60 <HAL_GPIO_WritePin>
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40020800 	.word	0x40020800

08001cdc <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001ce0:	f7ff fff0 	bl	8001cc4 <ILI9341_Enable>
	ILI9341_Reset();
 8001ce4:	f7ff ffce 	bl	8001c84 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff ff33 	bl	8001b54 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8001cee:	200a      	movs	r0, #10
 8001cf0:	f002 fa7a 	bl	80041e8 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8001cf4:	20cb      	movs	r0, #203	; 0xcb
 8001cf6:	f7ff ff2d 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8001cfa:	2039      	movs	r0, #57	; 0x39
 8001cfc:	f7ff ff44 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8001d00:	202c      	movs	r0, #44	; 0x2c
 8001d02:	f7ff ff41 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff ff3e 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8001d0c:	2034      	movs	r0, #52	; 0x34
 8001d0e:	f7ff ff3b 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8001d12:	2002      	movs	r0, #2
 8001d14:	f7ff ff38 	bl	8001b88 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8001d18:	20cf      	movs	r0, #207	; 0xcf
 8001d1a:	f7ff ff1b 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff ff32 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001d24:	20c1      	movs	r0, #193	; 0xc1
 8001d26:	f7ff ff2f 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8001d2a:	2030      	movs	r0, #48	; 0x30
 8001d2c:	f7ff ff2c 	bl	8001b88 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8001d30:	20e8      	movs	r0, #232	; 0xe8
 8001d32:	f7ff ff0f 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8001d36:	2085      	movs	r0, #133	; 0x85
 8001d38:	f7ff ff26 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7ff ff23 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8001d42:	2078      	movs	r0, #120	; 0x78
 8001d44:	f7ff ff20 	bl	8001b88 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001d48:	20ea      	movs	r0, #234	; 0xea
 8001d4a:	f7ff ff03 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7ff ff1a 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff ff17 	bl	8001b88 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8001d5a:	20ed      	movs	r0, #237	; 0xed
 8001d5c:	f7ff fefa 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8001d60:	2064      	movs	r0, #100	; 0x64
 8001d62:	f7ff ff11 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001d66:	2003      	movs	r0, #3
 8001d68:	f7ff ff0e 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8001d6c:	2012      	movs	r0, #18
 8001d6e:	f7ff ff0b 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8001d72:	2081      	movs	r0, #129	; 0x81
 8001d74:	f7ff ff08 	bl	8001b88 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001d78:	20f7      	movs	r0, #247	; 0xf7
 8001d7a:	f7ff feeb 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8001d7e:	2020      	movs	r0, #32
 8001d80:	f7ff ff02 	bl	8001b88 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001d84:	20c0      	movs	r0, #192	; 0xc0
 8001d86:	f7ff fee5 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8001d8a:	2023      	movs	r0, #35	; 0x23
 8001d8c:	f7ff fefc 	bl	8001b88 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001d90:	20c1      	movs	r0, #193	; 0xc1
 8001d92:	f7ff fedf 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001d96:	2010      	movs	r0, #16
 8001d98:	f7ff fef6 	bl	8001b88 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001d9c:	20c5      	movs	r0, #197	; 0xc5
 8001d9e:	f7ff fed9 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8001da2:	203e      	movs	r0, #62	; 0x3e
 8001da4:	f7ff fef0 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001da8:	2028      	movs	r0, #40	; 0x28
 8001daa:	f7ff feed 	bl	8001b88 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8001dae:	20c7      	movs	r0, #199	; 0xc7
 8001db0:	f7ff fed0 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001db4:	2086      	movs	r0, #134	; 0x86
 8001db6:	f7ff fee7 	bl	8001b88 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8001dba:	2036      	movs	r0, #54	; 0x36
 8001dbc:	f7ff feca 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001dc0:	2048      	movs	r0, #72	; 0x48
 8001dc2:	f7ff fee1 	bl	8001b88 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8001dc6:	203a      	movs	r0, #58	; 0x3a
 8001dc8:	f7ff fec4 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001dcc:	2055      	movs	r0, #85	; 0x55
 8001dce:	f7ff fedb 	bl	8001b88 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8001dd2:	20b1      	movs	r0, #177	; 0xb1
 8001dd4:	f7ff febe 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff fed5 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8001dde:	2018      	movs	r0, #24
 8001de0:	f7ff fed2 	bl	8001b88 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001de4:	20b6      	movs	r0, #182	; 0xb6
 8001de6:	f7ff feb5 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8001dea:	2008      	movs	r0, #8
 8001dec:	f7ff fecc 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8001df0:	2082      	movs	r0, #130	; 0x82
 8001df2:	f7ff fec9 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8001df6:	2027      	movs	r0, #39	; 0x27
 8001df8:	f7ff fec6 	bl	8001b88 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8001dfc:	20f2      	movs	r0, #242	; 0xf2
 8001dfe:	f7ff fea9 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff fec0 	bl	8001b88 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001e08:	2026      	movs	r0, #38	; 0x26
 8001e0a:	f7ff fea3 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f7ff feba 	bl	8001b88 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001e14:	20e0      	movs	r0, #224	; 0xe0
 8001e16:	f7ff fe9d 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8001e1a:	200f      	movs	r0, #15
 8001e1c:	f7ff feb4 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001e20:	2031      	movs	r0, #49	; 0x31
 8001e22:	f7ff feb1 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8001e26:	202b      	movs	r0, #43	; 0x2b
 8001e28:	f7ff feae 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001e2c:	200c      	movs	r0, #12
 8001e2e:	f7ff feab 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001e32:	200e      	movs	r0, #14
 8001e34:	f7ff fea8 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001e38:	2008      	movs	r0, #8
 8001e3a:	f7ff fea5 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8001e3e:	204e      	movs	r0, #78	; 0x4e
 8001e40:	f7ff fea2 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001e44:	20f1      	movs	r0, #241	; 0xf1
 8001e46:	f7ff fe9f 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8001e4a:	2037      	movs	r0, #55	; 0x37
 8001e4c:	f7ff fe9c 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001e50:	2007      	movs	r0, #7
 8001e52:	f7ff fe99 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001e56:	2010      	movs	r0, #16
 8001e58:	f7ff fe96 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f7ff fe93 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001e62:	200e      	movs	r0, #14
 8001e64:	f7ff fe90 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001e68:	2009      	movs	r0, #9
 8001e6a:	f7ff fe8d 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff fe8a 	bl	8001b88 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001e74:	20e1      	movs	r0, #225	; 0xe1
 8001e76:	f7ff fe6d 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff fe84 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001e80:	200e      	movs	r0, #14
 8001e82:	f7ff fe81 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001e86:	2014      	movs	r0, #20
 8001e88:	f7ff fe7e 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001e8c:	2003      	movs	r0, #3
 8001e8e:	f7ff fe7b 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001e92:	2011      	movs	r0, #17
 8001e94:	f7ff fe78 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001e98:	2007      	movs	r0, #7
 8001e9a:	f7ff fe75 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001e9e:	2031      	movs	r0, #49	; 0x31
 8001ea0:	f7ff fe72 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001ea4:	20c1      	movs	r0, #193	; 0xc1
 8001ea6:	f7ff fe6f 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8001eaa:	2048      	movs	r0, #72	; 0x48
 8001eac:	f7ff fe6c 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001eb0:	2008      	movs	r0, #8
 8001eb2:	f7ff fe69 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001eb6:	200f      	movs	r0, #15
 8001eb8:	f7ff fe66 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001ebc:	200c      	movs	r0, #12
 8001ebe:	f7ff fe63 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001ec2:	2031      	movs	r0, #49	; 0x31
 8001ec4:	f7ff fe60 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001ec8:	2036      	movs	r0, #54	; 0x36
 8001eca:	f7ff fe5d 	bl	8001b88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f7ff fe5a 	bl	8001b88 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001ed4:	2011      	movs	r0, #17
 8001ed6:	f7ff fe3d 	bl	8001b54 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8001eda:	2064      	movs	r0, #100	; 0x64
 8001edc:	f002 f984 	bl	80041e8 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001ee0:	2029      	movs	r0, #41	; 0x29
 8001ee2:	f7ff fe37 	bl	8001b54 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f000 f802 	bl	8001ef0 <ILI9341_SetRotation>
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8001efa:	2036      	movs	r0, #54	; 0x36
 8001efc:	f7ff fe2a 	bl	8001b54 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001f00:	2001      	movs	r0, #1
 8001f02:	f002 f971 	bl	80041e8 <HAL_Delay>

	switch(rotation)
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d837      	bhi.n	8001f7c <ILI9341_SetRotation+0x8c>
 8001f0c:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <ILI9341_SetRotation+0x24>)
 8001f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f12:	bf00      	nop
 8001f14:	08001f25 	.word	0x08001f25
 8001f18:	08001f3b 	.word	0x08001f3b
 8001f1c:	08001f51 	.word	0x08001f51
 8001f20:	08001f67 	.word	0x08001f67
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001f24:	2048      	movs	r0, #72	; 0x48
 8001f26:	f7ff fe2f 	bl	8001b88 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <ILI9341_SetRotation+0x98>)
 8001f2c:	22f0      	movs	r2, #240	; 0xf0
 8001f2e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <ILI9341_SetRotation+0x9c>)
 8001f32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f36:	801a      	strh	r2, [r3, #0]
		break;
 8001f38:	e021      	b.n	8001f7e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8001f3a:	2028      	movs	r0, #40	; 0x28
 8001f3c:	f7ff fe24 	bl	8001b88 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <ILI9341_SetRotation+0x98>)
 8001f42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f46:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001f48:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <ILI9341_SetRotation+0x9c>)
 8001f4a:	22f0      	movs	r2, #240	; 0xf0
 8001f4c:	801a      	strh	r2, [r3, #0]
		break;
 8001f4e:	e016      	b.n	8001f7e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001f50:	2088      	movs	r0, #136	; 0x88
 8001f52:	f7ff fe19 	bl	8001b88 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <ILI9341_SetRotation+0x98>)
 8001f58:	22f0      	movs	r2, #240	; 0xf0
 8001f5a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <ILI9341_SetRotation+0x9c>)
 8001f5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f62:	801a      	strh	r2, [r3, #0]
		break;
 8001f64:	e00b      	b.n	8001f7e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001f66:	20e8      	movs	r0, #232	; 0xe8
 8001f68:	f7ff fe0e 	bl	8001b88 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <ILI9341_SetRotation+0x98>)
 8001f6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f72:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <ILI9341_SetRotation+0x9c>)
 8001f76:	22f0      	movs	r2, #240	; 0xf0
 8001f78:	801a      	strh	r2, [r3, #0]
		break;
 8001f7a:	e000      	b.n	8001f7e <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001f7c:	bf00      	nop
	}
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000002 	.word	0x20000002
 8001f8c:	20000000 	.word	0x20000000

08001f90 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f94:	b08d      	sub	sp, #52	; 0x34
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	6039      	str	r1, [r7, #0]
 8001f9c:	80fb      	strh	r3, [r7, #6]
 8001f9e:	466b      	mov	r3, sp
 8001fa0:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fae:	d202      	bcs.n	8001fb6 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb4:	e002      	b.n	8001fbc <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001fb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	483e      	ldr	r0, [pc, #248]	; (80020bc <ILI9341_DrawColorBurst+0x12c>)
 8001fc2:	f002 ffcd 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2102      	movs	r1, #2
 8001fca:	483c      	ldr	r0, [pc, #240]	; (80020bc <ILI9341_DrawColorBurst+0x12c>)
 8001fcc:	f002 ffc8 	bl	8004f60 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8001fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fdc:	460b      	mov	r3, r1
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	4688      	mov	r8, r1
 8001fe6:	4699      	mov	r9, r3
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ff4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ff8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	460c      	mov	r4, r1
 8002000:	461d      	mov	r5, r3
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	00eb      	lsls	r3, r5, #3
 800200c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002010:	00e2      	lsls	r2, r4, #3
 8002012:	1dcb      	adds	r3, r1, #7
 8002014:	08db      	lsrs	r3, r3, #3
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	ebad 0d03 	sub.w	sp, sp, r3
 800201c:	466b      	mov	r3, sp
 800201e:	3300      	adds	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8002022:	2300      	movs	r3, #0
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
 8002026:	e00e      	b.n	8002046 <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202c:	4413      	add	r3, r2
 800202e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002032:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	3301      	adds	r3, #1
 8002038:	88fa      	ldrh	r2, [r7, #6]
 800203a:	b2d1      	uxtb	r1, r2
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8002040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002042:	3302      	adds	r3, #2
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
 8002046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204a:	429a      	cmp	r2, r3
 800204c:	d3ec      	bcc.n	8002028 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002062:	fbb3 f2f2 	udiv	r2, r3, r2
 8002066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002068:	fb01 f202 	mul.w	r2, r1, r2
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	e009      	b.n	8002090 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 800207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207e:	b29a      	uxth	r2, r3
 8002080:	230a      	movs	r3, #10
 8002082:	69b9      	ldr	r1, [r7, #24]
 8002084:	480e      	ldr	r0, [pc, #56]	; (80020c0 <ILI9341_DrawColorBurst+0x130>)
 8002086:	f003 fc66 	bl	8005956 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	3301      	adds	r3, #1
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
 8002090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	429a      	cmp	r2, r3
 8002096:	d3f1      	bcc.n	800207c <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	b29a      	uxth	r2, r3
 800209c:	230a      	movs	r3, #10
 800209e:	69b9      	ldr	r1, [r7, #24]
 80020a0:	4807      	ldr	r0, [pc, #28]	; (80020c0 <ILI9341_DrawColorBurst+0x130>)
 80020a2:	f003 fc58 	bl	8005956 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80020a6:	2201      	movs	r2, #1
 80020a8:	2102      	movs	r1, #2
 80020aa:	4804      	ldr	r0, [pc, #16]	; (80020bc <ILI9341_DrawColorBurst+0x12c>)
 80020ac:	f002 ff58 	bl	8004f60 <HAL_GPIO_WritePin>
 80020b0:	46b5      	mov	sp, r6
}
 80020b2:	bf00      	nop
 80020b4:	3734      	adds	r7, #52	; 0x34
 80020b6:	46bd      	mov	sp, r7
 80020b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020bc:	40020800 	.word	0x40020800
 80020c0:	200000c4 	.word	0x200000c4

080020c4 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <ILI9341_FillScreen+0x44>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <ILI9341_FillScreen+0x48>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2100      	movs	r1, #0
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff fd89 	bl	8001bf4 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <ILI9341_FillScreen+0x44>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <ILI9341_FillScreen+0x48>)
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	fb02 f303 	mul.w	r3, r2, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff48 	bl	8001f90 <ILI9341_DrawColorBurst>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000002 	.word	0x20000002
 800210c:	20000000 	.word	0x20000000

08002110 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
 800211a:	460b      	mov	r3, r1
 800211c:	80bb      	strh	r3, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8002122:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <ILI9341_DrawPixel+0xc4>)
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	88fa      	ldrh	r2, [r7, #6]
 800212a:	429a      	cmp	r2, r3
 800212c:	d24d      	bcs.n	80021ca <ILI9341_DrawPixel+0xba>
 800212e:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <ILI9341_DrawPixel+0xc8>)
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	88ba      	ldrh	r2, [r7, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	d247      	bcs.n	80021ca <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	b29b      	uxth	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	753b      	strb	r3, [r7, #20]
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	757b      	strb	r3, [r7, #21]
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	3301      	adds	r3, #1
 800214e:	121b      	asrs	r3, r3, #8
 8002150:	b2db      	uxtb	r3, r3
 8002152:	75bb      	strb	r3, [r7, #22]
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3301      	adds	r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 800215e:	88bb      	ldrh	r3, [r7, #4]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	b29b      	uxth	r3, r3
 8002164:	b2db      	uxtb	r3, r3
 8002166:	743b      	strb	r3, [r7, #16]
 8002168:	88bb      	ldrh	r3, [r7, #4]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	747b      	strb	r3, [r7, #17]
 800216e:	88bb      	ldrh	r3, [r7, #4]
 8002170:	3301      	adds	r3, #1
 8002172:	121b      	asrs	r3, r3, #8
 8002174:	b2db      	uxtb	r3, r3
 8002176:	74bb      	strb	r3, [r7, #18]
 8002178:	88bb      	ldrh	r3, [r7, #4]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	b29b      	uxth	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	733b      	strb	r3, [r7, #12]
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8002192:	202a      	movs	r0, #42	; 0x2a
 8002194:	f7ff fcde 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2104      	movs	r1, #4
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fd0c 	bl	8001bbc <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 80021a4:	202b      	movs	r0, #43	; 0x2b
 80021a6:	f7ff fcd5 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 80021aa:	f107 0310 	add.w	r3, r7, #16
 80021ae:	2104      	movs	r1, #4
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fd03 	bl	8001bbc <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 80021b6:	202c      	movs	r0, #44	; 0x2c
 80021b8:	f7ff fccc 	bl	8001b54 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	2102      	movs	r1, #2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fcfa 	bl	8001bbc <ILI9341_WriteBuffer>
 80021c8:	e000      	b.n	80021cc <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80021ca:	bf00      	nop
}
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000002 	.word	0x20000002
 80021d8:	20000000 	.word	0x20000000

080021dc <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4604      	mov	r4, r0
 80021e4:	4608      	mov	r0, r1
 80021e6:	4611      	mov	r1, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	4623      	mov	r3, r4
 80021ec:	80fb      	strh	r3, [r7, #6]
 80021ee:	4603      	mov	r3, r0
 80021f0:	80bb      	strh	r3, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]
 80021f6:	4613      	mov	r3, r2
 80021f8:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80021fa:	4b24      	ldr	r3, [pc, #144]	; (800228c <ILI9341_DrawRectangle+0xb0>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	429a      	cmp	r2, r3
 8002204:	d23d      	bcs.n	8002282 <ILI9341_DrawRectangle+0xa6>
 8002206:	4b22      	ldr	r3, [pc, #136]	; (8002290 <ILI9341_DrawRectangle+0xb4>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	88ba      	ldrh	r2, [r7, #4]
 800220e:	429a      	cmp	r2, r3
 8002210:	d237      	bcs.n	8002282 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	4413      	add	r3, r2
 8002218:	4a1c      	ldr	r2, [pc, #112]	; (800228c <ILI9341_DrawRectangle+0xb0>)
 800221a:	8812      	ldrh	r2, [r2, #0]
 800221c:	b292      	uxth	r2, r2
 800221e:	4293      	cmp	r3, r2
 8002220:	dd05      	ble.n	800222e <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <ILI9341_DrawRectangle+0xb0>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b29a      	uxth	r2, r3
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 800222e:	88ba      	ldrh	r2, [r7, #4]
 8002230:	883b      	ldrh	r3, [r7, #0]
 8002232:	4413      	add	r3, r2
 8002234:	4a16      	ldr	r2, [pc, #88]	; (8002290 <ILI9341_DrawRectangle+0xb4>)
 8002236:	8812      	ldrh	r2, [r2, #0]
 8002238:	b292      	uxth	r2, r2
 800223a:	4293      	cmp	r3, r2
 800223c:	dd05      	ble.n	800224a <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <ILI9341_DrawRectangle+0xb4>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	b29a      	uxth	r2, r3
 8002244:	88bb      	ldrh	r3, [r7, #4]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 800224a:	88fa      	ldrh	r2, [r7, #6]
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	4413      	add	r3, r2
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29c      	uxth	r4, r3
 8002256:	88ba      	ldrh	r2, [r7, #4]
 8002258:	883b      	ldrh	r3, [r7, #0]
 800225a:	4413      	add	r3, r2
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29b      	uxth	r3, r3
 8002262:	88b9      	ldrh	r1, [r7, #4]
 8002264:	88f8      	ldrh	r0, [r7, #6]
 8002266:	4622      	mov	r2, r4
 8002268:	f7ff fcc4 	bl	8001bf4 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 800226c:	883b      	ldrh	r3, [r7, #0]
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	461a      	mov	r2, r3
 8002276:	8b3b      	ldrh	r3, [r7, #24]
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fe88 	bl	8001f90 <ILI9341_DrawColorBurst>
 8002280:	e000      	b.n	8002284 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8002282:	bf00      	nop
}
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	bf00      	nop
 800228c:	20000002 	.word	0x20000002
 8002290:	20000000 	.word	0x20000000

08002294 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4604      	mov	r4, r0
 800229c:	4608      	mov	r0, r1
 800229e:	4611      	mov	r1, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	4623      	mov	r3, r4
 80022a4:	80fb      	strh	r3, [r7, #6]
 80022a6:	4603      	mov	r3, r0
 80022a8:	80bb      	strh	r3, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]
 80022ae:	4613      	mov	r3, r2
 80022b0:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <ILI9341_DrawHLine+0x80>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	88fa      	ldrh	r2, [r7, #6]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d225      	bcs.n	800230a <ILI9341_DrawHLine+0x76>
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <ILI9341_DrawHLine+0x84>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	88ba      	ldrh	r2, [r7, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d21f      	bcs.n	800230a <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 80022ca:	88fa      	ldrh	r2, [r7, #6]
 80022cc:	887b      	ldrh	r3, [r7, #2]
 80022ce:	4413      	add	r3, r2
 80022d0:	4a10      	ldr	r2, [pc, #64]	; (8002314 <ILI9341_DrawHLine+0x80>)
 80022d2:	8812      	ldrh	r2, [r2, #0]
 80022d4:	b292      	uxth	r2, r2
 80022d6:	4293      	cmp	r3, r2
 80022d8:	dd05      	ble.n	80022e6 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <ILI9341_DrawHLine+0x80>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 80022e6:	88fa      	ldrh	r2, [r7, #6]
 80022e8:	887b      	ldrh	r3, [r7, #2]
 80022ea:	4413      	add	r3, r2
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	88bb      	ldrh	r3, [r7, #4]
 80022f4:	88b9      	ldrh	r1, [r7, #4]
 80022f6:	88f8      	ldrh	r0, [r7, #6]
 80022f8:	f7ff fc7c 	bl	8001bf4 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 80022fc:	887a      	ldrh	r2, [r7, #2]
 80022fe:	883b      	ldrh	r3, [r7, #0]
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fe44 	bl	8001f90 <ILI9341_DrawColorBurst>
 8002308:	e000      	b.n	800230c <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800230a:	bf00      	nop
}
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bd90      	pop	{r4, r7, pc}
 8002312:	bf00      	nop
 8002314:	20000002 	.word	0x20000002
 8002318:	20000000 	.word	0x20000000

0800231c <manualDriveStart>:
 *  Created on: Apr 14, 2024
 *      Author: myhg1
 */
#include "Motor.h"

void manualDriveStart(TIM_HandleTypeDef *htim4, int16_t xAxis, int16_t yAxis) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
 8002328:	4613      	mov	r3, r2
 800232a:	803b      	strh	r3, [r7, #0]
	xAxis = xAxis - 2118;
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	f6a3 0346 	subw	r3, r3, #2118	; 0x846
 8002332:	b29b      	uxth	r3, r3
 8002334:	807b      	strh	r3, [r7, #2]
	yAxis = yAxis - 2068;
 8002336:	883b      	ldrh	r3, [r7, #0]
 8002338:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800233c:	b29b      	uxth	r3, r3
 800233e:	803b      	strh	r3, [r7, #0]
	//ccr1 left, ccr2 right
	//left wheel
	wheelGenerate(htim4, xAxis, yAxis, 0);
 8002340:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002344:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002348:	2300      	movs	r3, #0
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f871 	bl	8002432 <wheelGenerate>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <safeDriveStart>:

void safeDriveStart(TIM_HandleTypeDef *htim4, TIM_HandleTypeDef *htim2,
		TIM_HandleTypeDef *htim11, int16_t xAxis, int16_t yAxis) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	807b      	strh	r3, [r7, #2]
	uint16_t C_dist, L_dist, R_dist;
	//left wheel
	C_dist = getDistance_C(htim11, htim2);
 8002366:	68b9      	ldr	r1, [r7, #8]
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f001 fe39 	bl	8003fe0 <getDistance_C>
 800236e:	4603      	mov	r3, r0
 8002370:	82fb      	strh	r3, [r7, #22]
	L_dist = getDistance_L(htim11, htim2);
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f001 fe0d 	bl	8003f94 <getDistance_L>
 800237a:	4603      	mov	r3, r0
 800237c:	82bb      	strh	r3, [r7, #20]
	R_dist = getDistance_R(htim11, htim2);
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f001 fe53 	bl	800402c <getDistance_R>
 8002386:	4603      	mov	r3, r0
 8002388:	827b      	strh	r3, [r7, #18]

	xAxis = xAxis - 2118;
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	f6a3 0346 	subw	r3, r3, #2118	; 0x846
 8002390:	b29b      	uxth	r3, r3
 8002392:	807b      	strh	r3, [r7, #2]
	yAxis = yAxis - 2068;
 8002394:	8c3b      	ldrh	r3, [r7, #32]
 8002396:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800239a:	b29b      	uxth	r3, r3
 800239c:	843b      	strh	r3, [r7, #32]
	//ccr1 left, ccr2 right

	if (C_dist < 30) {
 800239e:	8afb      	ldrh	r3, [r7, #22]
 80023a0:	2b1d      	cmp	r3, #29
 80023a2:	d83a      	bhi.n	800241a <safeDriveStart+0xc2>
		if ((C_dist < 10) & (xAxis>100|xAxis<-100)&(yAxis>100|yAxis<-100)) {
 80023a4:	8afb      	ldrh	r3, [r7, #22]
 80023a6:	2b09      	cmp	r3, #9
 80023a8:	bf94      	ite	ls
 80023aa:	2301      	movls	r3, #1
 80023ac:	2300      	movhi	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	4619      	mov	r1, r3
 80023b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	bfcc      	ite	gt
 80023ba:	2301      	movgt	r3, #1
 80023bc:	2300      	movle	r3, #0
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023c4:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80023c8:	bfb4      	ite	lt
 80023ca:	2301      	movlt	r3, #1
 80023cc:	2300      	movge	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	4313      	orrs	r3, r2
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	400b      	ands	r3, r1
 80023d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80023da:	2a64      	cmp	r2, #100	; 0x64
 80023dc:	bfcc      	ite	gt
 80023de:	2201      	movgt	r2, #1
 80023e0:	2200      	movle	r2, #0
 80023e2:	b2d1      	uxtb	r1, r2
 80023e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80023e8:	f112 0f64 	cmn.w	r2, #100	; 0x64
 80023ec:	bfb4      	ite	lt
 80023ee:	2201      	movlt	r2, #1
 80023f0:	2200      	movge	r2, #0
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	430a      	orrs	r2, r1
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <safeDriveStart+0xae>
			MoveStop(htim4);
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f8a0 	bl	8002544 <MoveStop>
			return 2;
 8002404:	e012      	b.n	800242c <safeDriveStart+0xd4>
		}
		wheelGenerate(htim4, xAxis, yAxis, 20000);
 8002406:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800240a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800240e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f80d 	bl	8002432 <wheelGenerate>
		return 1;
 8002418:	e008      	b.n	800242c <safeDriveStart+0xd4>
	}

	wheelGenerate(htim4, xAxis, yAxis, 0);
 800241a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800241e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002422:	2300      	movs	r3, #0
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f804 	bl	8002432 <wheelGenerate>
	return 0;
 800242a:	bf00      	nop
}
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <wheelGenerate>:

void wheelGenerate(TIM_HandleTypeDef *htim4, int16_t xAxis, int16_t yAxis,
		int16_t deceleration) {
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af02      	add	r7, sp, #8
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	4608      	mov	r0, r1
 800243c:	4611      	mov	r1, r2
 800243e:	461a      	mov	r2, r3
 8002440:	4603      	mov	r3, r0
 8002442:	817b      	strh	r3, [r7, #10]
 8002444:	460b      	mov	r3, r1
 8002446:	813b      	strh	r3, [r7, #8]
 8002448:	4613      	mov	r3, r2
 800244a:	80fb      	strh	r3, [r7, #6]
	if (yAxis > 100) {
 800244c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002450:	2b64      	cmp	r3, #100	; 0x64
 8002452:	dd19      	ble.n	8002488 <wheelGenerate+0x56>
		rightDriveForward();
 8002454:	f000 f8b4 	bl	80025c0 <rightDriveForward>
		htim4->Instance->CCR2 = map(abs(yAxis), 100, 2060 , 0, 65535- deceleration);
 8002458:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	bfb8      	it	lt
 8002460:	425b      	neglt	r3, r3
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800246a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800246e:	33ff      	adds	r3, #255	; 0xff
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2300      	movs	r3, #0
 8002474:	f640 020c 	movw	r2, #2060	; 0x80c
 8002478:	2164      	movs	r1, #100	; 0x64
 800247a:	f001 fdfd 	bl	8004078 <map>
 800247e:	4602      	mov	r2, r0
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	639a      	str	r2, [r3, #56]	; 0x38
 8002486:	e01d      	b.n	80024c4 <wheelGenerate+0x92>
	} else if (yAxis < -100) {
 8002488:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800248c:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8002490:	da18      	bge.n	80024c4 <wheelGenerate+0x92>
		rightDriveBackward();
 8002492:	f000 f8b7 	bl	8002604 <rightDriveBackward>
		htim4->Instance->CCR2 = map(abs(yAxis), 100, 2100 , 0, 65535- deceleration);
 8002496:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	bfb8      	it	lt
 800249e:	425b      	neglt	r3, r3
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024a8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80024ac:	33ff      	adds	r3, #255	; 0xff
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2300      	movs	r3, #0
 80024b2:	f640 0234 	movw	r2, #2100	; 0x834
 80024b6:	2164      	movs	r1, #100	; 0x64
 80024b8:	f001 fdde 	bl	8004078 <map>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	639a      	str	r2, [r3, #56]	; 0x38
	}

	//Right wheel
	if (xAxis > 100) {
 80024c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024c8:	2b64      	cmp	r3, #100	; 0x64
 80024ca:	dd19      	ble.n	8002500 <wheelGenerate+0xce>
		leftDriveForward();
 80024cc:	f000 f88a 	bl	80025e4 <leftDriveForward>
		htim4->Instance->CCR1 = map(abs(xAxis), 100, 2000 , 0, 53700- deceleration);
 80024d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bfb8      	it	lt
 80024d8:	425b      	neglt	r3, r3
 80024da:	b29b      	uxth	r3, r3
 80024dc:	4618      	mov	r0, r3
 80024de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024e2:	f5c3 4351 	rsb	r3, r3, #53504	; 0xd100
 80024e6:	33c4      	adds	r3, #196	; 0xc4
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2300      	movs	r3, #0
 80024ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80024f0:	2164      	movs	r1, #100	; 0x64
 80024f2:	f001 fdc1 	bl	8004078 <map>
 80024f6:	4602      	mov	r2, r0
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	635a      	str	r2, [r3, #52]	; 0x34
	} else if (xAxis < -100) {
		leftDriveBackward();
		htim4->Instance->CCR1 = map(abs(xAxis), 100, 2150 , 0, 53700- deceleration);
	}

}
 80024fe:	e01d      	b.n	800253c <wheelGenerate+0x10a>
	} else if (xAxis < -100) {
 8002500:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002504:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8002508:	da18      	bge.n	800253c <wheelGenerate+0x10a>
		leftDriveBackward();
 800250a:	f000 f88d 	bl	8002628 <leftDriveBackward>
		htim4->Instance->CCR1 = map(abs(xAxis), 100, 2150 , 0, 53700- deceleration);
 800250e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002512:	2b00      	cmp	r3, #0
 8002514:	bfb8      	it	lt
 8002516:	425b      	neglt	r3, r3
 8002518:	b29b      	uxth	r3, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002520:	f5c3 4351 	rsb	r3, r3, #53504	; 0xd100
 8002524:	33c4      	adds	r3, #196	; 0xc4
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2300      	movs	r3, #0
 800252a:	f640 0266 	movw	r2, #2150	; 0x866
 800252e:	2164      	movs	r1, #100	; 0x64
 8002530:	f001 fda2 	bl	8004078 <map>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <MoveStop>:

void MoveStop(TIM_HandleTypeDef *htim) {
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	htim->Instance->CCR1 = 0;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2200      	movs	r2, #0
 8002552:	635a      	str	r2, [r3, #52]	; 0x34
	htim->Instance->CCR2 = 0;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2200      	movs	r2, #0
 800255a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <goMove>:

void goMove(TIM_HandleTypeDef *htim4) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	rightDriveForward();
 8002570:	f000 f826 	bl	80025c0 <rightDriveForward>
	leftDriveForward();
 8002574:	f000 f836 	bl	80025e4 <leftDriveForward>
	htim4->Instance->CCR2 = 65535;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
	htim4->Instance->CCR1 = 53700;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f24d 12c4 	movw	r2, #53700	; 0xd1c4
 800258a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <backMove>:

void backMove(TIM_HandleTypeDef *htim4) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	rightDriveBackward();
 800259c:	f000 f832 	bl	8002604 <rightDriveBackward>
	leftDriveBackward();
 80025a0:	f000 f842 	bl	8002628 <leftDriveBackward>
	htim4->Instance->CCR2 = 45000;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 80025ac:	639a      	str	r2, [r3, #56]	; 0x38
	htim4->Instance->CCR1 = 36900;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f249 0224 	movw	r2, #36900	; 0x9024
 80025b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <rightDriveForward>:

void rightDriveForward() {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Left_IN3_GPIO_Port, Left_IN3_Pin, GPIO_PIN_RESET);
 80025c4:	2200      	movs	r2, #0
 80025c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ca:	4805      	ldr	r0, [pc, #20]	; (80025e0 <rightDriveForward+0x20>)
 80025cc:	f002 fcc8 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_IN4_GPIO_Port, Left_IN4_Pin, GPIO_PIN_SET);
 80025d0:	2201      	movs	r2, #1
 80025d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025d6:	4802      	ldr	r0, [pc, #8]	; (80025e0 <rightDriveForward+0x20>)
 80025d8:	f002 fcc2 	bl	8004f60 <HAL_GPIO_WritePin>
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40020400 	.word	0x40020400

080025e4 <leftDriveForward>:

void leftDriveForward() {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_IN1_GPIO_Port, Right_IN1_Pin, GPIO_PIN_SET);
 80025e8:	2201      	movs	r2, #1
 80025ea:	2108      	movs	r1, #8
 80025ec:	4804      	ldr	r0, [pc, #16]	; (8002600 <leftDriveForward+0x1c>)
 80025ee:	f002 fcb7 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_IN2_GPIO_Port, Right_IN2_Pin, GPIO_PIN_RESET);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2110      	movs	r1, #16
 80025f6:	4802      	ldr	r0, [pc, #8]	; (8002600 <leftDriveForward+0x1c>)
 80025f8:	f002 fcb2 	bl	8004f60 <HAL_GPIO_WritePin>
}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40020400 	.word	0x40020400

08002604 <rightDriveBackward>:

void rightDriveBackward() {
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Left_IN3_GPIO_Port, Left_IN3_Pin, GPIO_PIN_SET);
 8002608:	2201      	movs	r2, #1
 800260a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <rightDriveBackward+0x20>)
 8002610:	f002 fca6 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_IN4_GPIO_Port, Left_IN4_Pin, GPIO_PIN_RESET);
 8002614:	2200      	movs	r2, #0
 8002616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800261a:	4802      	ldr	r0, [pc, #8]	; (8002624 <rightDriveBackward+0x20>)
 800261c:	f002 fca0 	bl	8004f60 <HAL_GPIO_WritePin>
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40020400 	.word	0x40020400

08002628 <leftDriveBackward>:

void leftDriveBackward() {
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_IN1_GPIO_Port, Right_IN1_Pin, GPIO_PIN_RESET);
 800262c:	2200      	movs	r2, #0
 800262e:	2108      	movs	r1, #8
 8002630:	4804      	ldr	r0, [pc, #16]	; (8002644 <leftDriveBackward+0x1c>)
 8002632:	f002 fc95 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_IN2_GPIO_Port, Right_IN2_Pin, GPIO_PIN_SET);
 8002636:	2201      	movs	r2, #1
 8002638:	2110      	movs	r1, #16
 800263a:	4802      	ldr	r0, [pc, #8]	; (8002644 <leftDriveBackward+0x1c>)
 800263c:	f002 fc90 	bl	8004f60 <HAL_GPIO_WritePin>
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40020400 	.word	0x40020400

08002648 <getADCdata>:
//	if (adcData_Chksum(&adcval[0], size)) {
//		adcData_Pasing(&adcval[0]);
//	}
//}

void getADCdata(uint8_t *flag, uint8_t *adcval, uint8_t size) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	4613      	mov	r3, r2
 8002654:	71fb      	strb	r3, [r7, #7]
	if (*flag == 1) {
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d10d      	bne.n	800267a <getADCdata+0x32>
		*flag=0;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
		if (adcData_Chksum(&adcval[0], size)) {
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	4619      	mov	r1, r3
 8002668:	68b8      	ldr	r0, [r7, #8]
 800266a:	f000 f80a 	bl	8002682 <adcData_Chksum>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <getADCdata+0x32>
			adcData_Pasing(&adcval[0]);
 8002674:	68b8      	ldr	r0, [r7, #8]
 8002676:	f000 f82d 	bl	80026d4 <adcData_Pasing>
		}
	}
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <adcData_Chksum>:

uint8_t adcData_Chksum(uint8_t *data, uint8_t len) {
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
	uint8_t chksum = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < len - 1; i++) {
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	e009      	b.n	80026ac <adcData_Chksum+0x2a>
		chksum += data[i];
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	781a      	ldrb	r2, [r3, #0]
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	4413      	add	r3, r2
 80026a4:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < len - 1; i++) {
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	3301      	adds	r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	dbf0      	blt.n	8002698 <adcData_Chksum+0x16>
	}

	return (chksum == data[6]);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3306      	adds	r3, #6
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	429a      	cmp	r2, r3
 80026c0:	bf0c      	ite	eq
 80026c2:	2301      	moveq	r3, #1
 80026c4:	2300      	movne	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <adcData_Pasing>:

void adcData_Pasing(uint8_t *data) {
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	uint8_t oldState = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]
	oldState = controlData.modeState;
 80026e0:	4b23      	ldr	r3, [pc, #140]	; (8002770 <adcData_Pasing+0x9c>)
 80026e2:	791b      	ldrb	r3, [r3, #4]
 80026e4:	73fb      	strb	r3, [r7, #15]
	controlData.XData = ((data[2] << 8) | data[3]) & 0x0fff;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3302      	adds	r3, #2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3303      	adds	r3, #3
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b21b      	sxth	r3, r3
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b21b      	sxth	r3, r3
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <adcData_Pasing+0x9c>)
 8002706:	801a      	strh	r2, [r3, #0]
	controlData.YData = ((data[4] << 8) | data[5]) & 0x0fff;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3304      	adds	r3, #4
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	b21a      	sxth	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3305      	adds	r3, #5
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	b21b      	sxth	r3, r3
 800271a:	4313      	orrs	r3, r2
 800271c:	b21b      	sxth	r3, r3
 800271e:	b29b      	uxth	r3, r3
 8002720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002724:	b29a      	uxth	r2, r3
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <adcData_Pasing+0x9c>)
 8002728:	805a      	strh	r2, [r3, #2]
	controlData.hornData = (data[4]>>4) & 0x0f;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3304      	adds	r3, #4
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	b2da      	uxtb	r2, r3
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <adcData_Pasing+0x9c>)
 8002736:	719a      	strb	r2, [r3, #6]
	controlData.modeState = (data[2]>>4) & 0x0f;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3302      	adds	r3, #2
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <adcData_Pasing+0x9c>)
 8002744:	711a      	strb	r2, [r3, #4]
	if(oldState != controlData.modeState) controlData.modeChangeFlag=1;
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <adcData_Pasing+0x9c>)
 8002748:	791b      	ldrb	r3, [r3, #4]
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	429a      	cmp	r2, r3
 800274e:	d002      	beq.n	8002756 <adcData_Pasing+0x82>
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <adcData_Pasing+0x9c>)
 8002752:	2201      	movs	r2, #1
 8002754:	715a      	strb	r2, [r3, #5]
//reverse stick
	controlData.YData = 4096 - controlData.YData;
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <adcData_Pasing+0x9c>)
 8002758:	885b      	ldrh	r3, [r3, #2]
 800275a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800275e:	b29a      	uxth	r2, r3
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <adcData_Pasing+0x9c>)
 8002762:	805a      	strh	r2, [r3, #2]
//remove Offset
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	200000bc 	.word	0x200000bc

08002774 <initAutoMove>:
 *      Author: kccistc
 */

#include "autoMove.h"

void initAutoMove(TIM_HandleTypeDef *htim4) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	MoveStop(htim4);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff fee1 	bl	8002544 <MoveStop>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <ultraSonicAutoMove>:

void ultraSonicAutoMove(TIM_HandleTypeDef *htim4, TIM_HandleTypeDef *htim11,
		TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3) {
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	603b      	str	r3, [r7, #0]
	uint16_t L_dist, C_dist, R_dist;
	L_dist = getDistance_L(htim11, htim2);
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	68b8      	ldr	r0, [r7, #8]
 800279c:	f001 fbfa 	bl	8003f94 <getDistance_L>
 80027a0:	4603      	mov	r3, r0
 80027a2:	82fb      	strh	r3, [r7, #22]
	C_dist = getDistance_C(htim11, htim2);
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	68b8      	ldr	r0, [r7, #8]
 80027a8:	f001 fc1a 	bl	8003fe0 <getDistance_C>
 80027ac:	4603      	mov	r3, r0
 80027ae:	82bb      	strh	r3, [r7, #20]
	R_dist = getDistance_R(htim11, htim2);
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	68b8      	ldr	r0, [r7, #8]
 80027b4:	f001 fc3a 	bl	800402c <getDistance_R>
 80027b8:	4603      	mov	r3, r0
 80027ba:	827b      	strh	r3, [r7, #18]

	if (C_dist > 100) {
 80027bc:	8abb      	ldrh	r3, [r7, #20]
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d902      	bls.n	80027c8 <ultraSonicAutoMove+0x3e>
		goMove(htim4);
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f7ff fed0 	bl	8002568 <goMove>
	}

	if (C_dist <= 40) {
 80027c8:	8abb      	ldrh	r3, [r7, #20]
 80027ca:	2b28      	cmp	r3, #40	; 0x28
 80027cc:	d82a      	bhi.n	8002824 <ultraSonicAutoMove+0x9a>
		if (L_dist < R_dist && R_dist > 30) {
 80027ce:	8afa      	ldrh	r2, [r7, #22]
 80027d0:	8a7b      	ldrh	r3, [r7, #18]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d211      	bcs.n	80027fa <ultraSonicAutoMove+0x70>
 80027d6:	8a7b      	ldrh	r3, [r7, #18]
 80027d8:	2b1e      	cmp	r3, #30
 80027da:	d90e      	bls.n	80027fa <ultraSonicAutoMove+0x70>
			leftDriveForward();
 80027dc:	f7ff ff02 	bl	80025e4 <leftDriveForward>
			rightDriveBackward();
 80027e0:	f7ff ff10 	bl	8002604 <rightDriveBackward>
			htim4->Instance->CCR1 = 28700;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f247 021c 	movw	r2, #28700	; 0x701c
 80027ec:	635a      	str	r2, [r3, #52]	; 0x34
			htim4->Instance->CCR2 = 35000;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f648 02b8 	movw	r2, #35000	; 0x88b8
 80027f6:	639a      	str	r2, [r3, #56]	; 0x38
 80027f8:	e014      	b.n	8002824 <ultraSonicAutoMove+0x9a>
		} else if (L_dist >= R_dist && L_dist > 30) {
 80027fa:	8afa      	ldrh	r2, [r7, #22]
 80027fc:	8a7b      	ldrh	r3, [r7, #18]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d310      	bcc.n	8002824 <ultraSonicAutoMove+0x9a>
 8002802:	8afb      	ldrh	r3, [r7, #22]
 8002804:	2b1e      	cmp	r3, #30
 8002806:	d90d      	bls.n	8002824 <ultraSonicAutoMove+0x9a>
			rightDriveForward();
 8002808:	f7ff feda 	bl	80025c0 <rightDriveForward>
			leftDriveBackward();
 800280c:	f7ff ff0c 	bl	8002628 <leftDriveBackward>
			htim4->Instance->CCR1 = 28700;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f247 021c 	movw	r2, #28700	; 0x701c
 8002818:	635a      	str	r2, [r3, #52]	; 0x34
			htim4->Instance->CCR2 = 35000;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8002822:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	if (C_dist <= 10) {
 8002824:	8abb      	ldrh	r3, [r7, #20]
 8002826:	2b0a      	cmp	r3, #10
 8002828:	d806      	bhi.n	8002838 <ultraSonicAutoMove+0xae>
		backMove(htim4);
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7ff feb2 	bl	8002594 <backMove>
		hornSound(htim3);
 8002830:	6838      	ldr	r0, [r7, #0]
 8002832:	f000 f833 	bl	800289c <hornSound>
//			htim4->Instance->CCR1 = 45000;
//		}
//	}
//}

}
 8002836:	e002      	b.n	800283e <ultraSonicAutoMove+0xb4>
	}else stopSound(htim3);
 8002838:	6838      	ldr	r0, [r7, #0]
 800283a:	f000 f83c 	bl	80028b6 <stopSound>
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <initSound>:

#include "buzzer.h"

int soundLUT[] = {1046, 1175, 1318, 1397, 1568, 1760, 1975, 2092};

void initSound(TIM_HandleTypeDef *htim3){
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_4);
 800284e:	210c      	movs	r1, #12
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f003 fdf3 	bl	800643c <HAL_TIM_PWM_Start>
	stopSound(htim3);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f82d 	bl	80028b6 <stopSound>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <setSound>:

void setSound(int freq , TIM_HandleTypeDef *htim3){
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
	htim3->Instance->ARR = 1000000/freq - 1;
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <setSound+0x34>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	fb92 f3f3 	sdiv	r3, r2, r3
 8002876:	1e5a      	subs	r2, r3, #1
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	62da      	str	r2, [r3, #44]	; 0x2c
	htim3->Instance->CCR4 = htim3->Instance->ARR / 2;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0852      	lsrs	r2, r2, #1
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	000f4240 	.word	0x000f4240

0800289c <hornSound>:

void hornSound(TIM_HandleTypeDef *htim3){
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	setSound(400, htim3);
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80028aa:	f7ff ffdb 	bl	8002864 <setSound>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <stopSound>:
			stopSound(htim3);
			break;
	}
}

void stopSound(TIM_HandleTypeDef *htim3){
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
	htim3->Instance->CCR4 = 0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2200      	movs	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <manualModeSound>:

void manualModeSound(TIM_HandleTypeDef *htim3){
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	setSound(soundLUT[0], htim3);
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <manualModeSound+0x58>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ffbe 	bl	8002864 <setSound>
	HAL_Delay(150);
 80028e8:	2096      	movs	r0, #150	; 0x96
 80028ea:	f001 fc7d 	bl	80041e8 <HAL_Delay>
	setSound(soundLUT[2], htim3);
 80028ee:	4b0f      	ldr	r3, [pc, #60]	; (800292c <manualModeSound+0x58>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ffb5 	bl	8002864 <setSound>
	HAL_Delay(150);
 80028fa:	2096      	movs	r0, #150	; 0x96
 80028fc:	f001 fc74 	bl	80041e8 <HAL_Delay>
	setSound(soundLUT[4], htim3);
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <manualModeSound+0x58>)
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ffac 	bl	8002864 <setSound>
	HAL_Delay(150);
 800290c:	2096      	movs	r0, #150	; 0x96
 800290e:	f001 fc6b 	bl	80041e8 <HAL_Delay>
	setSound(soundLUT[7], htim3);
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <manualModeSound+0x58>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ffa3 	bl	8002864 <setSound>
	HAL_Delay(150);
 800291e:	2096      	movs	r0, #150	; 0x96
 8002920:	f001 fc62 	bl	80041e8 <HAL_Delay>
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000004 	.word	0x20000004

08002930 <autoModeSound>:

void autoModeSound(TIM_HandleTypeDef *htim3){
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	setSound(soundLUT[7], htim3);
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <autoModeSound+0x58>)
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff90 	bl	8002864 <setSound>
	HAL_Delay(150);
 8002944:	2096      	movs	r0, #150	; 0x96
 8002946:	f001 fc4f 	bl	80041e8 <HAL_Delay>
	setSound(soundLUT[4], htim3);
 800294a:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <autoModeSound+0x58>)
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff87 	bl	8002864 <setSound>
	HAL_Delay(150);
 8002956:	2096      	movs	r0, #150	; 0x96
 8002958:	f001 fc46 	bl	80041e8 <HAL_Delay>
	setSound(soundLUT[2], htim3);
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <autoModeSound+0x58>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff7e 	bl	8002864 <setSound>
	HAL_Delay(150);
 8002968:	2096      	movs	r0, #150	; 0x96
 800296a:	f001 fc3d 	bl	80041e8 <HAL_Delay>
	setSound(soundLUT[0], htim3);
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <autoModeSound+0x58>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff75 	bl	8002864 <setSound>
	HAL_Delay(150);
 800297a:	2096      	movs	r0, #150	; 0x96
 800297c:	f001 fc34 	bl	80041e8 <HAL_Delay>
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000004 	.word	0x20000004

0800298c <suddenlyStopSound>:

void suddenlyStopSound(TIM_HandleTypeDef *htim3){
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	setSound(soundLUT[2], htim3);
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <suddenlyStopSound+0x7c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ff62 	bl	8002864 <setSound>
	HAL_Delay(100);
 80029a0:	2064      	movs	r0, #100	; 0x64
 80029a2:	f001 fc21 	bl	80041e8 <HAL_Delay>
	setSound(soundLUT[0], htim3);
 80029a6:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <suddenlyStopSound+0x7c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff59 	bl	8002864 <setSound>
	HAL_Delay(100);
 80029b2:	2064      	movs	r0, #100	; 0x64
 80029b4:	f001 fc18 	bl	80041e8 <HAL_Delay>
	setSound(soundLUT[2], htim3);
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <suddenlyStopSound+0x7c>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ff50 	bl	8002864 <setSound>
	HAL_Delay(100);
 80029c4:	2064      	movs	r0, #100	; 0x64
 80029c6:	f001 fc0f 	bl	80041e8 <HAL_Delay>
	setSound(soundLUT[0], htim3);
 80029ca:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <suddenlyStopSound+0x7c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff47 	bl	8002864 <setSound>
	HAL_Delay(100);
 80029d6:	2064      	movs	r0, #100	; 0x64
 80029d8:	f001 fc06 	bl	80041e8 <HAL_Delay>
	setSound(soundLUT[2], htim3);
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <suddenlyStopSound+0x7c>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff3e 	bl	8002864 <setSound>
	HAL_Delay(100);
 80029e8:	2064      	movs	r0, #100	; 0x64
 80029ea:	f001 fbfd 	bl	80041e8 <HAL_Delay>
	setSound(soundLUT[0], htim3);
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <suddenlyStopSound+0x7c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff35 	bl	8002864 <setSound>
	HAL_Delay(100);
 80029fa:	2064      	movs	r0, #100	; 0x64
 80029fc:	f001 fbf4 	bl	80041e8 <HAL_Delay>
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000004 	.word	0x20000004

08002a0c <LED_init>:
 *      Author: kccistc
 */

#include "led.h"

void LED_init(){
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
	suddenlyModeLed();
 8002a10:	f000 f832 	bl	8002a78 <suddenlyModeLed>
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <manualModeLed>:
	HAL_GPIO_WritePin(manual_LED_GPIO_Port, manual_LED_Pin, 0);
	HAL_GPIO_WritePin(auto_LED_GPIO_Port, auto_LED_Pin, 0);
	HAL_GPIO_WritePin(stop_LED_GPIO_Port, stop_LED_Pin, 0);
}

void manualModeLed(){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(manual_LED_GPIO_Port, manual_LED_Pin, 1);
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a22:	4808      	ldr	r0, [pc, #32]	; (8002a44 <manualModeLed+0x2c>)
 8002a24:	f002 fa9c 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(auto_LED_GPIO_Port, auto_LED_Pin, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a2e:	4805      	ldr	r0, [pc, #20]	; (8002a44 <manualModeLed+0x2c>)
 8002a30:	f002 fa96 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(stop_LED_GPIO_Port, stop_LED_Pin, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a3a:	4802      	ldr	r0, [pc, #8]	; (8002a44 <manualModeLed+0x2c>)
 8002a3c:	f002 fa90 	bl	8004f60 <HAL_GPIO_WritePin>
}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40020800 	.word	0x40020800

08002a48 <autoModeLed>:

void autoModeLed(){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(manual_LED_GPIO_Port, manual_LED_Pin, 1);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a52:	4808      	ldr	r0, [pc, #32]	; (8002a74 <autoModeLed+0x2c>)
 8002a54:	f002 fa84 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(auto_LED_GPIO_Port, auto_LED_Pin, 1);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a5e:	4805      	ldr	r0, [pc, #20]	; (8002a74 <autoModeLed+0x2c>)
 8002a60:	f002 fa7e 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(stop_LED_GPIO_Port, stop_LED_Pin, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a6a:	4802      	ldr	r0, [pc, #8]	; (8002a74 <autoModeLed+0x2c>)
 8002a6c:	f002 fa78 	bl	8004f60 <HAL_GPIO_WritePin>
}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40020800 	.word	0x40020800

08002a78 <suddenlyModeLed>:

void suddenlyModeLed(){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(manual_LED_GPIO_Port, manual_LED_Pin, 0);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a82:	4808      	ldr	r0, [pc, #32]	; (8002aa4 <suddenlyModeLed+0x2c>)
 8002a84:	f002 fa6c 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(auto_LED_GPIO_Port, auto_LED_Pin, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <suddenlyModeLed+0x2c>)
 8002a90:	f002 fa66 	bl	8004f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(stop_LED_GPIO_Port, stop_LED_Pin, 1);
 8002a94:	2201      	movs	r2, #1
 8002a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a9a:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <suddenlyModeLed+0x2c>)
 8002a9c:	f002 fa60 	bl	8004f60 <HAL_GPIO_WritePin>
}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40020800 	.word	0x40020800

08002aa8 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *p, int len) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, p, len);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	4803      	ldr	r0, [pc, #12]	; (8002acc <_write+0x24>)
 8002abe:	f004 ff2b 	bl	8007918 <HAL_UART_Transmit_IT>
	return len;
 8002ac2:	687b      	ldr	r3, [r7, #4]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	200002e4 	.word	0x200002e4

08002ad0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002ad6:	f001 fb15 	bl	8004104 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002ada:	f000 f87b 	bl	8002bd4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002ade:	f000 fb2d 	bl	800313c <MX_GPIO_Init>
	MX_DMA_Init();
 8002ae2:	f000 fb0b 	bl	80030fc <MX_DMA_Init>
	MX_USART1_UART_Init();
 8002ae6:	f000 fab5 	bl	8003054 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8002aea:	f000 fadd 	bl	80030a8 <MX_USART2_UART_Init>
	MX_TIM4_Init();
 8002aee:	f000 fa0b 	bl	8002f08 <MX_TIM4_Init>
	MX_TIM2_Init();
 8002af2:	f000 f90d 	bl	8002d10 <MX_TIM2_Init>
	MX_TIM11_Init();
 8002af6:	f000 fa89 	bl	800300c <MX_TIM11_Init>
	MX_SPI1_Init();
 8002afa:	f000 f8d3 	bl	8002ca4 <MX_SPI1_Init>
	MX_TIM3_Init();
 8002afe:	f000 f98d 	bl	8002e1c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, &uart2_buf, 1);
 8002b02:	2201      	movs	r2, #1
 8002b04:	4927      	ldr	r1, [pc, #156]	; (8002ba4 <main+0xd4>)
 8002b06:	4828      	ldr	r0, [pc, #160]	; (8002ba8 <main+0xd8>)
 8002b08:	f004 ff3c 	bl	8007984 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &uart1_buf, 1);
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	4927      	ldr	r1, [pc, #156]	; (8002bac <main+0xdc>)
 8002b10:	4827      	ldr	r0, [pc, #156]	; (8002bb0 <main+0xe0>)
 8002b12:	f004 ff37 	bl	8007984 <HAL_UART_Receive_IT>

	LED_init();
 8002b16:	f7ff ff79 	bl	8002a0c <LED_init>
	LCD_INIT();
 8002b1a:	f7fe f9e3 	bl	8000ee4 <LCD_INIT>
	initSound(&htim3);
 8002b1e:	4825      	ldr	r0, [pc, #148]	; (8002bb4 <main+0xe4>)
 8002b20:	f7ff fe91 	bl	8002846 <initSound>

	ultraSonicInit(&htim2, &htim11);
 8002b24:	4924      	ldr	r1, [pc, #144]	; (8002bb8 <main+0xe8>)
 8002b26:	4825      	ldr	r0, [pc, #148]	; (8002bbc <main+0xec>)
 8002b28:	f001 f806 	bl	8003b38 <ultraSonicInit>
	initAutoMove(&htim4);
 8002b2c:	4824      	ldr	r0, [pc, #144]	; (8002bc0 <main+0xf0>)
 8002b2e:	f7ff fe21 	bl	8002774 <initAutoMove>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002b32:	2100      	movs	r1, #0
 8002b34:	4822      	ldr	r0, [pc, #136]	; (8002bc0 <main+0xf0>)
 8002b36:	f003 fc81 	bl	800643c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	4820      	ldr	r0, [pc, #128]	; (8002bc0 <main+0xf0>)
 8002b3e:	f003 fc7d 	bl	800643c <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		getADCdata(&adc_cplt_flag, &adcVal[0], sizeof(adcVal));
 8002b42:	2207      	movs	r2, #7
 8002b44:	491f      	ldr	r1, [pc, #124]	; (8002bc4 <main+0xf4>)
 8002b46:	4820      	ldr	r0, [pc, #128]	; (8002bc8 <main+0xf8>)
 8002b48:	f7ff fd7e 	bl	8002648 <getADCdata>

		printf("%d,%d,%d,%d\n",controlData.modeState,controlData.XData,controlData.hornData, controlData.YData);
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <main+0xfc>)
 8002b4e:	791b      	ldrb	r3, [r3, #4]
 8002b50:	4619      	mov	r1, r3
 8002b52:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <main+0xfc>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <main+0xfc>)
 8002b5a:	799b      	ldrb	r3, [r3, #6]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <main+0xfc>)
 8002b60:	885b      	ldrh	r3, [r3, #2]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4603      	mov	r3, r0
 8002b66:	481a      	ldr	r0, [pc, #104]	; (8002bd0 <main+0x100>)
 8002b68:	f005 fef2 	bl	8008950 <iprintf>

		changeFlag();
 8002b6c:	f000 fbe0 	bl	8003330 <changeFlag>
		horn_Run(controlData.hornData);
 8002b70:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <main+0xfc>)
 8002b72:	799b      	ldrb	r3, [r3, #6]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fc71 	bl	800345c <horn_Run>

		state_Run();
 8002b7a:	f000 fc2b 	bl	80033d4 <state_Run>

		speedLCD_ON((int) controlData.XData - 2118, (int) controlData.YData - 2068,
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <main+0xfc>)
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	f6a3 0346 	subw	r3, r3, #2118	; 0x846
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	b218      	sxth	r0, r3
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <main+0xfc>)
 8002b8c:	885b      	ldrh	r3, [r3, #2]
 8002b8e:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	b21b      	sxth	r3, r3
 8002b96:	4a0d      	ldr	r2, [pc, #52]	; (8002bcc <main+0xfc>)
 8002b98:	7912      	ldrb	r2, [r2, #4]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f7fe f9f8 	bl	8000f90 <speedLCD_ON>
	while (1) {
 8002ba0:	e7cf      	b.n	8002b42 <main+0x72>
 8002ba2:	bf00      	nop
 8002ba4:	2000032d 	.word	0x2000032d
 8002ba8:	200002e4 	.word	0x200002e4
 8002bac:	2000032c 	.word	0x2000032c
 8002bb0:	2000029c 	.word	0x2000029c
 8002bb4:	200001c4 	.word	0x200001c4
 8002bb8:	20000254 	.word	0x20000254
 8002bbc:	2000017c 	.word	0x2000017c
 8002bc0:	2000020c 	.word	0x2000020c
 8002bc4:	20000330 	.word	0x20000330
 8002bc8:	2000032e 	.word	0x2000032e
 8002bcc:	200000bc 	.word	0x200000bc
 8002bd0:	0800aa04 	.word	0x0800aa04

08002bd4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b094      	sub	sp, #80	; 0x50
 8002bd8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002bda:	f107 0320 	add.w	r3, r7, #32
 8002bde:	2230      	movs	r2, #48	; 0x30
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f005 ff09 	bl	80089fa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <SystemClock_Config+0xc8>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	4a26      	ldr	r2, [pc, #152]	; (8002c9c <SystemClock_Config+0xc8>)
 8002c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c06:	6413      	str	r3, [r2, #64]	; 0x40
 8002c08:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <SystemClock_Config+0xc8>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c14:	2300      	movs	r3, #0
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <SystemClock_Config+0xcc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <SystemClock_Config+0xcc>)
 8002c1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <SystemClock_Config+0xcc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c30:	2302      	movs	r3, #2
 8002c32:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c34:	2301      	movs	r3, #1
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c38:	2310      	movs	r3, #16
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c40:	2300      	movs	r3, #0
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002c44:	2308      	movs	r3, #8
 8002c46:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8002c48:	2364      	movs	r3, #100	; 0x64
 8002c4a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c50:	2304      	movs	r3, #4
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c54:	f107 0320 	add.w	r3, r7, #32
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f002 f99b 	bl	8004f94 <HAL_RCC_OscConfig>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <SystemClock_Config+0x94>
		Error_Handler();
 8002c64:	f000 fc14 	bl	8003490 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002c68:	230f      	movs	r3, #15
 8002c6a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c78:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	2103      	movs	r1, #3
 8002c84:	4618      	mov	r0, r3
 8002c86:	f002 fbfd 	bl	8005484 <HAL_RCC_ClockConfig>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <SystemClock_Config+0xc0>
		Error_Handler();
 8002c90:	f000 fbfe 	bl	8003490 <Error_Handler>
	}
}
 8002c94:	bf00      	nop
 8002c96:	3750      	adds	r7, #80	; 0x50
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40007000 	.word	0x40007000

08002ca4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002caa:	4a18      	ldr	r2, [pc, #96]	; (8002d0c <MX_SPI1_Init+0x68>)
 8002cac:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cb4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce8:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cf0:	220a      	movs	r2, #10
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002cf4:	4804      	ldr	r0, [pc, #16]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cf6:	f002 fda5 	bl	8005844 <HAL_SPI_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002d00:	f000 fbc6 	bl	8003490 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	200000c4 	.word	0x200000c4
 8002d0c:	40013000 	.word	0x40013000

08002d10 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002d16:	f107 0318 	add.w	r3, r7, #24
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002d24:	f107 0310 	add.w	r3, r7, #16
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8002d2e:	463b      	mov	r3, r7
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <MX_TIM2_Init+0x108>)
 8002d3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d40:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 100 - 1;
 8002d42:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <MX_TIM2_Init+0x108>)
 8002d44:	2263      	movs	r2, #99	; 0x63
 8002d46:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d48:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <MX_TIM2_Init+0x108>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8002d4e:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <MX_TIM2_Init+0x108>)
 8002d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d54:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d56:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <MX_TIM2_Init+0x108>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <MX_TIM2_Init+0x108>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002d62:	482d      	ldr	r0, [pc, #180]	; (8002e18 <MX_TIM2_Init+0x108>)
 8002d64:	f003 fa66 	bl	8006234 <HAL_TIM_Base_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM2_Init+0x62>
		Error_Handler();
 8002d6e:	f000 fb8f 	bl	8003490 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d76:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002d78:	f107 0318 	add.w	r3, r7, #24
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4826      	ldr	r0, [pc, #152]	; (8002e18 <MX_TIM2_Init+0x108>)
 8002d80:	f003 ffce 	bl	8006d20 <HAL_TIM_ConfigClockSource>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM2_Init+0x7e>
		Error_Handler();
 8002d8a:	f000 fb81 	bl	8003490 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8002d8e:	4822      	ldr	r0, [pc, #136]	; (8002e18 <MX_TIM2_Init+0x108>)
 8002d90:	f003 fc04 	bl	800659c <HAL_TIM_IC_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM2_Init+0x8e>
		Error_Handler();
 8002d9a:	f000 fb79 	bl	8003490 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8002da6:	f107 0310 	add.w	r3, r7, #16
 8002daa:	4619      	mov	r1, r3
 8002dac:	481a      	ldr	r0, [pc, #104]	; (8002e18 <MX_TIM2_Init+0x108>)
 8002dae:	f004 fce1 	bl	8007774 <HAL_TIMEx_MasterConfigSynchronization>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM2_Init+0xac>
		Error_Handler();
 8002db8:	f000 fb6a 	bl	8003490 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8002dcc:	463b      	mov	r3, r7
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4811      	ldr	r0, [pc, #68]	; (8002e18 <MX_TIM2_Init+0x108>)
 8002dd4:	f003 fe46 	bl	8006a64 <HAL_TIM_IC_ConfigChannel>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM2_Init+0xd2>
		Error_Handler();
 8002dde:	f000 fb57 	bl	8003490 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8002de2:	463b      	mov	r3, r7
 8002de4:	2204      	movs	r2, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	480b      	ldr	r0, [pc, #44]	; (8002e18 <MX_TIM2_Init+0x108>)
 8002dea:	f003 fe3b 	bl	8006a64 <HAL_TIM_IC_ConfigChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM2_Init+0xe8>
		Error_Handler();
 8002df4:	f000 fb4c 	bl	8003490 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8002df8:	463b      	mov	r3, r7
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4806      	ldr	r0, [pc, #24]	; (8002e18 <MX_TIM2_Init+0x108>)
 8002e00:	f003 fe30 	bl	8006a64 <HAL_TIM_IC_ConfigChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM2_Init+0xfe>
		Error_Handler();
 8002e0a:	f000 fb41 	bl	8003490 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002e0e:	bf00      	nop
 8002e10:	3728      	adds	r7, #40	; 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2000017c 	.word	0x2000017c

08002e1c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08e      	sub	sp, #56	; 0x38
 8002e20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]
 8002e2c:	609a      	str	r2, [r3, #8]
 8002e2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002e30:	f107 0320 	add.w	r3, r7, #32
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
 8002e48:	615a      	str	r2, [r3, #20]
 8002e4a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002e4c:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <MX_TIM3_Init+0xe4>)
 8002e4e:	4a2d      	ldr	r2, [pc, #180]	; (8002f04 <MX_TIM3_Init+0xe8>)
 8002e50:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 100 - 1;
 8002e52:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <MX_TIM3_Init+0xe4>)
 8002e54:	2263      	movs	r2, #99	; 0x63
 8002e56:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <MX_TIM3_Init+0xe4>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <MX_TIM3_Init+0xe4>)
 8002e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e64:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e66:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <MX_TIM3_Init+0xe4>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <MX_TIM3_Init+0xe4>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002e72:	4823      	ldr	r0, [pc, #140]	; (8002f00 <MX_TIM3_Init+0xe4>)
 8002e74:	f003 f9de 	bl	8006234 <HAL_TIM_Base_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM3_Init+0x66>
		Error_Handler();
 8002e7e:	f000 fb07 	bl	8003490 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	481c      	ldr	r0, [pc, #112]	; (8002f00 <MX_TIM3_Init+0xe4>)
 8002e90:	f003 ff46 	bl	8006d20 <HAL_TIM_ConfigClockSource>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM3_Init+0x82>
		Error_Handler();
 8002e9a:	f000 faf9 	bl	8003490 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002e9e:	4818      	ldr	r0, [pc, #96]	; (8002f00 <MX_TIM3_Init+0xe4>)
 8002ea0:	f003 fa72 	bl	8006388 <HAL_TIM_PWM_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_TIM3_Init+0x92>
		Error_Handler();
 8002eaa:	f000 faf1 	bl	8003490 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8002eb6:	f107 0320 	add.w	r3, r7, #32
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4810      	ldr	r0, [pc, #64]	; (8002f00 <MX_TIM3_Init+0xe4>)
 8002ebe:	f004 fc59 	bl	8007774 <HAL_TIMEx_MasterConfigSynchronization>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM3_Init+0xb0>
		Error_Handler();
 8002ec8:	f000 fae2 	bl	8003490 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ecc:	2360      	movs	r3, #96	; 0x60
 8002ece:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	220c      	movs	r2, #12
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4807      	ldr	r0, [pc, #28]	; (8002f00 <MX_TIM3_Init+0xe4>)
 8002ee4:	f003 fe5a 	bl	8006b9c <HAL_TIM_PWM_ConfigChannel>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_TIM3_Init+0xd6>
		Error_Handler();
 8002eee:	f000 facf 	bl	8003490 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002ef2:	4803      	ldr	r0, [pc, #12]	; (8002f00 <MX_TIM3_Init+0xe4>)
 8002ef4:	f000 fc34 	bl	8003760 <HAL_TIM_MspPostInit>

}
 8002ef8:	bf00      	nop
 8002efa:	3738      	adds	r7, #56	; 0x38
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200001c4 	.word	0x200001c4
 8002f04:	40000400 	.word	0x40000400

08002f08 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08e      	sub	sp, #56	; 0x38
 8002f0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002f1c:	f107 0320 	add.w	r3, r7, #32
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002f26:	1d3b      	adds	r3, r7, #4
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	611a      	str	r2, [r3, #16]
 8002f34:	615a      	str	r2, [r3, #20]
 8002f36:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002f38:	4b32      	ldr	r3, [pc, #200]	; (8003004 <MX_TIM4_Init+0xfc>)
 8002f3a:	4a33      	ldr	r2, [pc, #204]	; (8003008 <MX_TIM4_Init+0x100>)
 8002f3c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 100 - 1;
 8002f3e:	4b31      	ldr	r3, [pc, #196]	; (8003004 <MX_TIM4_Init+0xfc>)
 8002f40:	2263      	movs	r2, #99	; 0x63
 8002f42:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f44:	4b2f      	ldr	r3, [pc, #188]	; (8003004 <MX_TIM4_Init+0xfc>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002f4a:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <MX_TIM4_Init+0xfc>)
 8002f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f50:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f52:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <MX_TIM4_Init+0xfc>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f58:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <MX_TIM4_Init+0xfc>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002f5e:	4829      	ldr	r0, [pc, #164]	; (8003004 <MX_TIM4_Init+0xfc>)
 8002f60:	f003 f968 	bl	8006234 <HAL_TIM_Base_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_TIM4_Init+0x66>
		Error_Handler();
 8002f6a:	f000 fa91 	bl	8003490 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4822      	ldr	r0, [pc, #136]	; (8003004 <MX_TIM4_Init+0xfc>)
 8002f7c:	f003 fed0 	bl	8006d20 <HAL_TIM_ConfigClockSource>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_TIM4_Init+0x82>
		Error_Handler();
 8002f86:	f000 fa83 	bl	8003490 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8002f8a:	481e      	ldr	r0, [pc, #120]	; (8003004 <MX_TIM4_Init+0xfc>)
 8002f8c:	f003 f9fc 	bl	8006388 <HAL_TIM_PWM_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_TIM4_Init+0x92>
		Error_Handler();
 8002f96:	f000 fa7b 	bl	8003490 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8002fa2:	f107 0320 	add.w	r3, r7, #32
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4816      	ldr	r0, [pc, #88]	; (8003004 <MX_TIM4_Init+0xfc>)
 8002faa:	f004 fbe3 	bl	8007774 <HAL_TIMEx_MasterConfigSynchronization>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_TIM4_Init+0xb0>
		Error_Handler();
 8002fb4:	f000 fa6c 	bl	8003490 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fb8:	2360      	movs	r3, #96	; 0x60
 8002fba:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	2200      	movs	r2, #0
 8002fcc:	4619      	mov	r1, r3
 8002fce:	480d      	ldr	r0, [pc, #52]	; (8003004 <MX_TIM4_Init+0xfc>)
 8002fd0:	f003 fde4 	bl	8006b9c <HAL_TIM_PWM_ConfigChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM4_Init+0xd6>
		Error_Handler();
 8002fda:	f000 fa59 	bl	8003490 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4807      	ldr	r0, [pc, #28]	; (8003004 <MX_TIM4_Init+0xfc>)
 8002fe6:	f003 fdd9 	bl	8006b9c <HAL_TIM_PWM_ConfigChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_TIM4_Init+0xec>
		Error_Handler();
 8002ff0:	f000 fa4e 	bl	8003490 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8002ff4:	4803      	ldr	r0, [pc, #12]	; (8003004 <MX_TIM4_Init+0xfc>)
 8002ff6:	f000 fbb3 	bl	8003760 <HAL_TIM_MspPostInit>

}
 8002ffa:	bf00      	nop
 8002ffc:	3738      	adds	r7, #56	; 0x38
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	2000020c 	.word	0x2000020c
 8003008:	40000800 	.word	0x40000800

0800300c <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8003010:	4b0e      	ldr	r3, [pc, #56]	; (800304c <MX_TIM11_Init+0x40>)
 8003012:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <MX_TIM11_Init+0x44>)
 8003014:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 100 - 1;
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <MX_TIM11_Init+0x40>)
 8003018:	2263      	movs	r2, #99	; 0x63
 800301a:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <MX_TIM11_Init+0x40>)
 800301e:	2200      	movs	r2, #0
 8003020:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 8003022:	4b0a      	ldr	r3, [pc, #40]	; (800304c <MX_TIM11_Init+0x40>)
 8003024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003028:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <MX_TIM11_Init+0x40>)
 800302c:	2200      	movs	r2, #0
 800302e:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <MX_TIM11_Init+0x40>)
 8003032:	2200      	movs	r2, #0
 8003034:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8003036:	4805      	ldr	r0, [pc, #20]	; (800304c <MX_TIM11_Init+0x40>)
 8003038:	f003 f8fc 	bl	8006234 <HAL_TIM_Base_Init>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM11_Init+0x3a>
		Error_Handler();
 8003042:	f000 fa25 	bl	8003490 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000254 	.word	0x20000254
 8003050:	40014800 	.word	0x40014800

08003054 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <MX_USART1_UART_Init+0x4c>)
 800305a:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <MX_USART1_UART_Init+0x50>)
 800305c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <MX_USART1_UART_Init+0x4c>)
 8003060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003064:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003066:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <MX_USART1_UART_Init+0x4c>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <MX_USART1_UART_Init+0x4c>)
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <MX_USART1_UART_Init+0x4c>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <MX_USART1_UART_Init+0x4c>)
 800307a:	220c      	movs	r2, #12
 800307c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <MX_USART1_UART_Init+0x4c>)
 8003080:	2200      	movs	r2, #0
 8003082:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <MX_USART1_UART_Init+0x4c>)
 8003086:	2200      	movs	r2, #0
 8003088:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800308a:	4805      	ldr	r0, [pc, #20]	; (80030a0 <MX_USART1_UART_Init+0x4c>)
 800308c:	f004 fbf4 	bl	8007878 <HAL_UART_Init>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8003096:	f000 f9fb 	bl	8003490 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	2000029c 	.word	0x2000029c
 80030a4:	40011000 	.word	0x40011000

080030a8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80030ac:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030ae:	4a12      	ldr	r2, [pc, #72]	; (80030f8 <MX_USART2_UART_Init+0x50>)
 80030b0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030b8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030ba:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030ce:	220c      	movs	r2, #12
 80030d0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80030de:	4805      	ldr	r0, [pc, #20]	; (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030e0:	f004 fbca 	bl	8007878 <HAL_UART_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80030ea:	f000 f9d1 	bl	8003490 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200002e4 	.word	0x200002e4
 80030f8:	40004400 	.word	0x40004400

080030fc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <MX_DMA_Init+0x3c>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <MX_DMA_Init+0x3c>)
 800310c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <MX_DMA_Init+0x3c>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800311e:	2200      	movs	r2, #0
 8003120:	2100      	movs	r1, #0
 8003122:	203a      	movs	r0, #58	; 0x3a
 8003124:	f001 f95f 	bl	80043e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003128:	203a      	movs	r0, #58	; 0x3a
 800312a:	f001 f978 	bl	800441e <HAL_NVIC_EnableIRQ>

}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800

0800313c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003142:	f107 030c 	add.w	r3, r7, #12
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	4b31      	ldr	r3, [pc, #196]	; (800321c <MX_GPIO_Init+0xe0>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a30      	ldr	r2, [pc, #192]	; (800321c <MX_GPIO_Init+0xe0>)
 800315c:	f043 0304 	orr.w	r3, r3, #4
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b2e      	ldr	r3, [pc, #184]	; (800321c <MX_GPIO_Init+0xe0>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	4b2a      	ldr	r3, [pc, #168]	; (800321c <MX_GPIO_Init+0xe0>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	4a29      	ldr	r2, [pc, #164]	; (800321c <MX_GPIO_Init+0xe0>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6313      	str	r3, [r2, #48]	; 0x30
 800317e:	4b27      	ldr	r3, [pc, #156]	; (800321c <MX_GPIO_Init+0xe0>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	607b      	str	r3, [r7, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	4b23      	ldr	r3, [pc, #140]	; (800321c <MX_GPIO_Init+0xe0>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	4a22      	ldr	r2, [pc, #136]	; (800321c <MX_GPIO_Init+0xe0>)
 8003194:	f043 0302 	orr.w	r3, r3, #2
 8003198:	6313      	str	r3, [r2, #48]	; 0x30
 800319a:	4b20      	ldr	r3, [pc, #128]	; (800321c <MX_GPIO_Init+0xe0>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 80031a6:	2200      	movs	r2, #0
 80031a8:	f643 010e 	movw	r1, #14350	; 0x380e
 80031ac:	481c      	ldr	r0, [pc, #112]	; (8003220 <MX_GPIO_Init+0xe4>)
 80031ae:	f001 fed7 	bl	8004f60 <HAL_GPIO_WritePin>
			manual_LED_Pin | LCD_CS_Pin | LCD_DC_Pin | LCD_RST_Pin | stop_LED_Pin
					| auto_LED_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80031b2:	2200      	movs	r2, #0
 80031b4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80031b8:	481a      	ldr	r0, [pc, #104]	; (8003224 <MX_GPIO_Init+0xe8>)
 80031ba:	f001 fed1 	bl	8004f60 <HAL_GPIO_WritePin>
			trigger1_Pin | Right_IN1_Pin | Right_IN2_Pin | Left_IN3_Pin | Left_IN4_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : manual_LED_Pin LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin
	 stop_LED_Pin auto_LED_Pin */
	GPIO_InitStruct.Pin = manual_LED_Pin | LCD_CS_Pin | LCD_DC_Pin | LCD_RST_Pin
 80031be:	f643 030e 	movw	r3, #14350	; 0x380e
 80031c2:	60fb      	str	r3, [r7, #12]
			| stop_LED_Pin | auto_LED_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c4:	2301      	movs	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d0:	f107 030c 	add.w	r3, r7, #12
 80031d4:	4619      	mov	r1, r3
 80031d6:	4812      	ldr	r0, [pc, #72]	; (8003220 <MX_GPIO_Init+0xe4>)
 80031d8:	f001 fd3e 	bl	8004c58 <HAL_GPIO_Init>

	/*Configure GPIO pins : trigger1_Pin Right_IN1_Pin Right_IN2_Pin Left_IN3_Pin
	 Left_IN4_Pin */
	GPIO_InitStruct.Pin = trigger1_Pin | Right_IN1_Pin | Right_IN2_Pin
 80031dc:	f44f 7347 	mov.w	r3, #796	; 0x31c
 80031e0:	60fb      	str	r3, [r7, #12]
			| Left_IN3_Pin | Left_IN4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e2:	2301      	movs	r3, #1
 80031e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ee:	f107 030c 	add.w	r3, r7, #12
 80031f2:	4619      	mov	r1, r3
 80031f4:	480b      	ldr	r0, [pc, #44]	; (8003224 <MX_GPIO_Init+0xe8>)
 80031f6:	f001 fd2f 	bl	8004c58 <HAL_GPIO_Init>

	/*Configure GPIO pins : L_Laser_Pin C_Laser_Pin R_Laser_Pin */
	GPIO_InitStruct.Pin = L_Laser_Pin | C_Laser_Pin | R_Laser_Pin;
 80031fa:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80031fe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	4619      	mov	r1, r3
 800320e:	4806      	ldr	r0, [pc, #24]	; (8003228 <MX_GPIO_Init+0xec>)
 8003210:	f001 fd22 	bl	8004c58 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003214:	bf00      	nop
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	40020800 	.word	0x40020800
 8003224:	40020400 	.word	0x40020400
 8003228:	40020000 	.word	0x40020000

0800322c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;
	if (huart->Instance == USART1) {
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a34      	ldr	r2, [pc, #208]	; (800330c <HAL_UART_RxCpltCallback+0xe0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d152      	bne.n	80032e4 <HAL_UART_RxCpltCallback+0xb8>
		HAL_UART_Receive_IT(&huart1, &uart1_buf, 1);
 800323e:	2201      	movs	r2, #1
 8003240:	4933      	ldr	r1, [pc, #204]	; (8003310 <HAL_UART_RxCpltCallback+0xe4>)
 8003242:	4834      	ldr	r0, [pc, #208]	; (8003314 <HAL_UART_RxCpltCallback+0xe8>)
 8003244:	f004 fb9e 	bl	8007984 <HAL_UART_Receive_IT>
		//HAL_UART_Transmit_IT(&huart2, &uart1_buf, 1);
		switch (cnt) {
 8003248:	4b33      	ldr	r3, [pc, #204]	; (8003318 <HAL_UART_RxCpltCallback+0xec>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b06      	cmp	r3, #6
 800324e:	d02a      	beq.n	80032a6 <HAL_UART_RxCpltCallback+0x7a>
 8003250:	2b06      	cmp	r3, #6
 8003252:	dc36      	bgt.n	80032c2 <HAL_UART_RxCpltCallback+0x96>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_UART_RxCpltCallback+0x32>
 8003258:	2b01      	cmp	r3, #1
 800325a:	d012      	beq.n	8003282 <HAL_UART_RxCpltCallback+0x56>
 800325c:	e031      	b.n	80032c2 <HAL_UART_RxCpltCallback+0x96>
		case 0:
			if (uart1_buf == 0x48) {
 800325e:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <HAL_UART_RxCpltCallback+0xe4>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b48      	cmp	r3, #72	; 0x48
 8003264:	d13b      	bne.n	80032de <HAL_UART_RxCpltCallback+0xb2>
				adcVal[cnt] = uart1_buf;
 8003266:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <HAL_UART_RxCpltCallback+0xec>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_UART_RxCpltCallback+0xe4>)
 800326e:	7819      	ldrb	r1, [r3, #0]
 8003270:	4b2a      	ldr	r3, [pc, #168]	; (800331c <HAL_UART_RxCpltCallback+0xf0>)
 8003272:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_UART_RxCpltCallback+0xec>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	b2da      	uxtb	r2, r3
 800327c:	4b26      	ldr	r3, [pc, #152]	; (8003318 <HAL_UART_RxCpltCallback+0xec>)
 800327e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003280:	e02d      	b.n	80032de <HAL_UART_RxCpltCallback+0xb2>
		case 1:
			if (uart1_buf == 0x59) {
 8003282:	4b23      	ldr	r3, [pc, #140]	; (8003310 <HAL_UART_RxCpltCallback+0xe4>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b59      	cmp	r3, #89	; 0x59
 8003288:	d12b      	bne.n	80032e2 <HAL_UART_RxCpltCallback+0xb6>
				adcVal[cnt] = uart1_buf;
 800328a:	4b23      	ldr	r3, [pc, #140]	; (8003318 <HAL_UART_RxCpltCallback+0xec>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <HAL_UART_RxCpltCallback+0xe4>)
 8003292:	7819      	ldrb	r1, [r3, #0]
 8003294:	4b21      	ldr	r3, [pc, #132]	; (800331c <HAL_UART_RxCpltCallback+0xf0>)
 8003296:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003298:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <HAL_UART_RxCpltCallback+0xec>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_UART_RxCpltCallback+0xec>)
 80032a2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80032a4:	e01d      	b.n	80032e2 <HAL_UART_RxCpltCallback+0xb6>
		case 6:
			adcVal[cnt] = uart1_buf;
 80032a6:	4b1c      	ldr	r3, [pc, #112]	; (8003318 <HAL_UART_RxCpltCallback+0xec>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_UART_RxCpltCallback+0xe4>)
 80032ae:	7819      	ldrb	r1, [r3, #0]
 80032b0:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_UART_RxCpltCallback+0xf0>)
 80032b2:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 80032b4:	4b18      	ldr	r3, [pc, #96]	; (8003318 <HAL_UART_RxCpltCallback+0xec>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
			adc_cplt_flag = 1;
 80032ba:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_UART_RxCpltCallback+0xf4>)
 80032bc:	2201      	movs	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]
			break;
 80032c0:	e010      	b.n	80032e4 <HAL_UART_RxCpltCallback+0xb8>
		default:
			adcVal[cnt] = uart1_buf;
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <HAL_UART_RxCpltCallback+0xec>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_UART_RxCpltCallback+0xe4>)
 80032ca:	7819      	ldrb	r1, [r3, #0]
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_UART_RxCpltCallback+0xf0>)
 80032ce:	5499      	strb	r1, [r3, r2]
			cnt++;
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_UART_RxCpltCallback+0xec>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_UART_RxCpltCallback+0xec>)
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e002      	b.n	80032e4 <HAL_UART_RxCpltCallback+0xb8>
			break;
 80032de:	bf00      	nop
 80032e0:	e000      	b.n	80032e4 <HAL_UART_RxCpltCallback+0xb8>
			break;
 80032e2:	bf00      	nop
		}
	}
	if (huart->Instance == USART2) {
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0e      	ldr	r2, [pc, #56]	; (8003324 <HAL_UART_RxCpltCallback+0xf8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d109      	bne.n	8003302 <HAL_UART_RxCpltCallback+0xd6>
		HAL_UART_Receive_IT(&huart2, &uart2_buf, 1);
 80032ee:	2201      	movs	r2, #1
 80032f0:	490d      	ldr	r1, [pc, #52]	; (8003328 <HAL_UART_RxCpltCallback+0xfc>)
 80032f2:	480e      	ldr	r0, [pc, #56]	; (800332c <HAL_UART_RxCpltCallback+0x100>)
 80032f4:	f004 fb46 	bl	8007984 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart1, &uart2_buf, 1);
 80032f8:	2201      	movs	r2, #1
 80032fa:	490b      	ldr	r1, [pc, #44]	; (8003328 <HAL_UART_RxCpltCallback+0xfc>)
 80032fc:	4805      	ldr	r0, [pc, #20]	; (8003314 <HAL_UART_RxCpltCallback+0xe8>)
 80032fe:	f004 fb0b 	bl	8007918 <HAL_UART_Transmit_IT>
	}
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40011000 	.word	0x40011000
 8003310:	2000032c 	.word	0x2000032c
 8003314:	2000029c 	.word	0x2000029c
 8003318:	20000337 	.word	0x20000337
 800331c:	20000330 	.word	0x20000330
 8003320:	2000032e 	.word	0x2000032e
 8003324:	40004400 	.word	0x40004400
 8003328:	2000032d 	.word	0x2000032d
 800332c:	200002e4 	.word	0x200002e4

08003330 <changeFlag>:

void changeFlag(){
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
	if (controlData.modeChangeFlag == 1) {
 8003334:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <changeFlag+0x98>)
 8003336:	795b      	ldrb	r3, [r3, #5]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d142      	bne.n	80033c2 <changeFlag+0x92>
		switch (controlData.modeState) {
 800333c:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <changeFlag+0x98>)
 800333e:	791b      	ldrb	r3, [r3, #4]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d83b      	bhi.n	80033bc <changeFlag+0x8c>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <changeFlag+0x1c>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	0800335d 	.word	0x0800335d
 8003350:	08003375 	.word	0x08003375
 8003354:	0800338d 	.word	0x0800338d
 8003358:	080033a5 	.word	0x080033a5
		case 0x00:
			MoveStop(&htim4);
 800335c:	481b      	ldr	r0, [pc, #108]	; (80033cc <changeFlag+0x9c>)
 800335e:	f7ff f8f1 	bl	8002544 <MoveStop>
			suddenlyModeLed();
 8003362:	f7ff fb89 	bl	8002a78 <suddenlyModeLed>
			suddenlyStopSound(&htim3);
 8003366:	481a      	ldr	r0, [pc, #104]	; (80033d0 <changeFlag+0xa0>)
 8003368:	f7ff fb10 	bl	800298c <suddenlyStopSound>
			stopSound(&htim3);
 800336c:	4818      	ldr	r0, [pc, #96]	; (80033d0 <changeFlag+0xa0>)
 800336e:	f7ff faa2 	bl	80028b6 <stopSound>
			break;
 8003372:	e023      	b.n	80033bc <changeFlag+0x8c>
		case 0x01:
			MoveStop(&htim4);
 8003374:	4815      	ldr	r0, [pc, #84]	; (80033cc <changeFlag+0x9c>)
 8003376:	f7ff f8e5 	bl	8002544 <MoveStop>
			manualModeLed();
 800337a:	f7ff fb4d 	bl	8002a18 <manualModeLed>
			manualModeSound(&htim3);
 800337e:	4814      	ldr	r0, [pc, #80]	; (80033d0 <changeFlag+0xa0>)
 8003380:	f7ff faa8 	bl	80028d4 <manualModeSound>
			stopSound(&htim3);
 8003384:	4812      	ldr	r0, [pc, #72]	; (80033d0 <changeFlag+0xa0>)
 8003386:	f7ff fa96 	bl	80028b6 <stopSound>
			break;
 800338a:	e017      	b.n	80033bc <changeFlag+0x8c>
		case 0x02:
			MoveStop(&htim4);
 800338c:	480f      	ldr	r0, [pc, #60]	; (80033cc <changeFlag+0x9c>)
 800338e:	f7ff f8d9 	bl	8002544 <MoveStop>
			autoModeLed();
 8003392:	f7ff fb59 	bl	8002a48 <autoModeLed>
			autoModeSound(&htim3);
 8003396:	480e      	ldr	r0, [pc, #56]	; (80033d0 <changeFlag+0xa0>)
 8003398:	f7ff faca 	bl	8002930 <autoModeSound>
			stopSound(&htim3);
 800339c:	480c      	ldr	r0, [pc, #48]	; (80033d0 <changeFlag+0xa0>)
 800339e:	f7ff fa8a 	bl	80028b6 <stopSound>
			break;
 80033a2:	e00b      	b.n	80033bc <changeFlag+0x8c>
		case 0x03:
			MoveStop(&htim4);
 80033a4:	4809      	ldr	r0, [pc, #36]	; (80033cc <changeFlag+0x9c>)
 80033a6:	f7ff f8cd 	bl	8002544 <MoveStop>
			manualModeLed();
 80033aa:	f7ff fb35 	bl	8002a18 <manualModeLed>
			manualModeSound(&htim3);
 80033ae:	4808      	ldr	r0, [pc, #32]	; (80033d0 <changeFlag+0xa0>)
 80033b0:	f7ff fa90 	bl	80028d4 <manualModeSound>
			stopSound(&htim3);
 80033b4:	4806      	ldr	r0, [pc, #24]	; (80033d0 <changeFlag+0xa0>)
 80033b6:	f7ff fa7e 	bl	80028b6 <stopSound>
			break;
 80033ba:	bf00      	nop
		}
		controlData.modeChangeFlag = 0;
 80033bc:	4b02      	ldr	r3, [pc, #8]	; (80033c8 <changeFlag+0x98>)
 80033be:	2200      	movs	r2, #0
 80033c0:	715a      	strb	r2, [r3, #5]
	}
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	200000bc 	.word	0x200000bc
 80033cc:	2000020c 	.word	0x2000020c
 80033d0:	200001c4 	.word	0x200001c4

080033d4 <state_Run>:

void state_Run(){
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af02      	add	r7, sp, #8
	switch (controlData.modeState) {
 80033da:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <state_Run+0x74>)
 80033dc:	791b      	ldrb	r3, [r3, #4]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d82e      	bhi.n	8003440 <state_Run+0x6c>
 80033e2:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <state_Run+0x14>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	080033f9 	.word	0x080033f9
 80033ec:	08003401 	.word	0x08003401
 80033f0:	08003417 	.word	0x08003417
 80033f4:	08003425 	.word	0x08003425
	case 0x00:
		MoveStop(&htim4);
 80033f8:	4814      	ldr	r0, [pc, #80]	; (800344c <state_Run+0x78>)
 80033fa:	f7ff f8a3 	bl	8002544 <MoveStop>
		break;
 80033fe:	e01f      	b.n	8003440 <state_Run+0x6c>
	case 0x01:
		manualDriveStart(&htim4, controlData.XData, controlData.YData);
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <state_Run+0x74>)
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	b21b      	sxth	r3, r3
 8003406:	4a10      	ldr	r2, [pc, #64]	; (8003448 <state_Run+0x74>)
 8003408:	8852      	ldrh	r2, [r2, #2]
 800340a:	b212      	sxth	r2, r2
 800340c:	4619      	mov	r1, r3
 800340e:	480f      	ldr	r0, [pc, #60]	; (800344c <state_Run+0x78>)
 8003410:	f7fe ff84 	bl	800231c <manualDriveStart>
		break;
 8003414:	e014      	b.n	8003440 <state_Run+0x6c>
	case 0x02:
		ultraSonicAutoMove(&htim4, &htim11, &htim2,&htim3);
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <state_Run+0x7c>)
 8003418:	4a0e      	ldr	r2, [pc, #56]	; (8003454 <state_Run+0x80>)
 800341a:	490f      	ldr	r1, [pc, #60]	; (8003458 <state_Run+0x84>)
 800341c:	480b      	ldr	r0, [pc, #44]	; (800344c <state_Run+0x78>)
 800341e:	f7ff f9b4 	bl	800278a <ultraSonicAutoMove>
		break;
 8003422:	e00d      	b.n	8003440 <state_Run+0x6c>
	case 0x03:
		safeDriveStart(&htim4, &htim2, &htim11, controlData.XData, controlData.YData);
 8003424:	4b08      	ldr	r3, [pc, #32]	; (8003448 <state_Run+0x74>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b21a      	sxth	r2, r3
 800342a:	4b07      	ldr	r3, [pc, #28]	; (8003448 <state_Run+0x74>)
 800342c:	885b      	ldrh	r3, [r3, #2]
 800342e:	b21b      	sxth	r3, r3
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	4613      	mov	r3, r2
 8003434:	4a08      	ldr	r2, [pc, #32]	; (8003458 <state_Run+0x84>)
 8003436:	4907      	ldr	r1, [pc, #28]	; (8003454 <state_Run+0x80>)
 8003438:	4804      	ldr	r0, [pc, #16]	; (800344c <state_Run+0x78>)
 800343a:	f7fe ff8d 	bl	8002358 <safeDriveStart>
		// safeSound(&htim3, safemodestate);
		break;
 800343e:	bf00      	nop
	}
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	200000bc 	.word	0x200000bc
 800344c:	2000020c 	.word	0x2000020c
 8003450:	200001c4 	.word	0x200001c4
 8003454:	2000017c 	.word	0x2000017c
 8003458:	20000254 	.word	0x20000254

0800345c <horn_Run>:
void horn_Run(uint8_t hornState){
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
	switch(hornState){
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <horn_Run+0x16>
 800346c:	2b01      	cmp	r3, #1
 800346e:	d004      	beq.n	800347a <horn_Run+0x1e>
		break;
	case 0x01:
		hornSound(&htim3);
		break;
	}
}
 8003470:	e007      	b.n	8003482 <horn_Run+0x26>
		stopSound(&htim3);
 8003472:	4806      	ldr	r0, [pc, #24]	; (800348c <horn_Run+0x30>)
 8003474:	f7ff fa1f 	bl	80028b6 <stopSound>
		break;
 8003478:	e003      	b.n	8003482 <horn_Run+0x26>
		hornSound(&htim3);
 800347a:	4804      	ldr	r0, [pc, #16]	; (800348c <horn_Run+0x30>)
 800347c:	f7ff fa0e 	bl	800289c <hornSound>
		break;
 8003480:	bf00      	nop
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	200001c4 	.word	0x200001c4

08003490 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003494:	b672      	cpsid	i
}
 8003496:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003498:	e7fe      	b.n	8003498 <Error_Handler+0x8>
	...

0800349c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_MspInit+0x4c>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	4a0f      	ldr	r2, [pc, #60]	; (80034e8 <HAL_MspInit+0x4c>)
 80034ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_MspInit+0x4c>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_MspInit+0x4c>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <HAL_MspInit+0x4c>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6413      	str	r3, [r2, #64]	; 0x40
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_MspInit+0x4c>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800

080034ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	; 0x28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	60da      	str	r2, [r3, #12]
 8003502:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a34      	ldr	r2, [pc, #208]	; (80035dc <HAL_SPI_MspInit+0xf0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d161      	bne.n	80035d2 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <HAL_SPI_MspInit+0xf4>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	4a32      	ldr	r2, [pc, #200]	; (80035e0 <HAL_SPI_MspInit+0xf4>)
 8003518:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800351c:	6453      	str	r3, [r2, #68]	; 0x44
 800351e:	4b30      	ldr	r3, [pc, #192]	; (80035e0 <HAL_SPI_MspInit+0xf4>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	4b2c      	ldr	r3, [pc, #176]	; (80035e0 <HAL_SPI_MspInit+0xf4>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	4a2b      	ldr	r2, [pc, #172]	; (80035e0 <HAL_SPI_MspInit+0xf4>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6313      	str	r3, [r2, #48]	; 0x30
 800353a:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_SPI_MspInit+0xf4>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003546:	23e0      	movs	r3, #224	; 0xe0
 8003548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354a:	2302      	movs	r3, #2
 800354c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003552:	2303      	movs	r3, #3
 8003554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003556:	2305      	movs	r3, #5
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355a:	f107 0314 	add.w	r3, r7, #20
 800355e:	4619      	mov	r1, r3
 8003560:	4820      	ldr	r0, [pc, #128]	; (80035e4 <HAL_SPI_MspInit+0xf8>)
 8003562:	f001 fb79 	bl	8004c58 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8003566:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <HAL_SPI_MspInit+0xfc>)
 8003568:	4a20      	ldr	r2, [pc, #128]	; (80035ec <HAL_SPI_MspInit+0x100>)
 800356a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800356c:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_SPI_MspInit+0xfc>)
 800356e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003572:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003574:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <HAL_SPI_MspInit+0xfc>)
 8003576:	2240      	movs	r2, #64	; 0x40
 8003578:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800357a:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_SPI_MspInit+0xfc>)
 800357c:	2200      	movs	r2, #0
 800357e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_SPI_MspInit+0xfc>)
 8003582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003586:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003588:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <HAL_SPI_MspInit+0xfc>)
 800358a:	2200      	movs	r2, #0
 800358c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800358e:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_SPI_MspInit+0xfc>)
 8003590:	2200      	movs	r2, #0
 8003592:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003594:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <HAL_SPI_MspInit+0xfc>)
 8003596:	2200      	movs	r2, #0
 8003598:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800359a:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <HAL_SPI_MspInit+0xfc>)
 800359c:	2200      	movs	r2, #0
 800359e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_SPI_MspInit+0xfc>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80035a6:	4810      	ldr	r0, [pc, #64]	; (80035e8 <HAL_SPI_MspInit+0xfc>)
 80035a8:	f000 ff54 	bl	8004454 <HAL_DMA_Init>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80035b2:	f7ff ff6d 	bl	8003490 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <HAL_SPI_MspInit+0xfc>)
 80035ba:	649a      	str	r2, [r3, #72]	; 0x48
 80035bc:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <HAL_SPI_MspInit+0xfc>)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2100      	movs	r1, #0
 80035c6:	2023      	movs	r0, #35	; 0x23
 80035c8:	f000 ff0d 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80035cc:	2023      	movs	r0, #35	; 0x23
 80035ce:	f000 ff26 	bl	800441e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035d2:	bf00      	nop
 80035d4:	3728      	adds	r7, #40	; 0x28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40013000 	.word	0x40013000
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40020000 	.word	0x40020000
 80035e8:	2000011c 	.word	0x2000011c
 80035ec:	40026440 	.word	0x40026440

080035f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08e      	sub	sp, #56	; 0x38
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003610:	d153      	bne.n	80036ba <HAL_TIM_Base_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
 8003616:	4b4c      	ldr	r3, [pc, #304]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	4a4b      	ldr	r2, [pc, #300]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	6413      	str	r3, [r2, #64]	; 0x40
 8003622:	4b49      	ldr	r3, [pc, #292]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	623b      	str	r3, [r7, #32]
 800362c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	4b45      	ldr	r3, [pc, #276]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4a44      	ldr	r2, [pc, #272]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
 800363e:	4b42      	ldr	r3, [pc, #264]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	4b3e      	ldr	r3, [pc, #248]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	4a3d      	ldr	r2, [pc, #244]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 8003654:	f043 0302 	orr.w	r3, r3, #2
 8003658:	6313      	str	r3, [r2, #48]	; 0x30
 800365a:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = echo_left_Pin|echo_center_Pin;
 8003666:	2303      	movs	r3, #3
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	2302      	movs	r3, #2
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003672:	2300      	movs	r3, #0
 8003674:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003676:	2301      	movs	r3, #1
 8003678:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367e:	4619      	mov	r1, r3
 8003680:	4832      	ldr	r0, [pc, #200]	; (800374c <HAL_TIM_Base_MspInit+0x15c>)
 8003682:	f001 fae9 	bl	8004c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = echo_right_Pin;
 8003686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368c:	2302      	movs	r3, #2
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003694:	2300      	movs	r3, #0
 8003696:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003698:	2301      	movs	r3, #1
 800369a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(echo_right_GPIO_Port, &GPIO_InitStruct);
 800369c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a0:	4619      	mov	r1, r3
 80036a2:	482b      	ldr	r0, [pc, #172]	; (8003750 <HAL_TIM_Base_MspInit+0x160>)
 80036a4:	f001 fad8 	bl	8004c58 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036a8:	2200      	movs	r2, #0
 80036aa:	2100      	movs	r1, #0
 80036ac:	201c      	movs	r0, #28
 80036ae:	f000 fe9a 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036b2:	201c      	movs	r0, #28
 80036b4:	f000 feb3 	bl	800441e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80036b8:	e042      	b.n	8003740 <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM3)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a25      	ldr	r2, [pc, #148]	; (8003754 <HAL_TIM_Base_MspInit+0x164>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d10e      	bne.n	80036e2 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 80036ce:	f043 0302 	orr.w	r3, r3, #2
 80036d2:	6413      	str	r3, [r2, #64]	; 0x40
 80036d4:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	697b      	ldr	r3, [r7, #20]
}
 80036e0:	e02e      	b.n	8003740 <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM4)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_TIM_Base_MspInit+0x168>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d10e      	bne.n	800370a <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 80036f6:	f043 0304 	orr.w	r3, r3, #4
 80036fa:	6413      	str	r3, [r2, #64]	; 0x40
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	693b      	ldr	r3, [r7, #16]
}
 8003708:	e01a      	b.n	8003740 <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM11)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a13      	ldr	r2, [pc, #76]	; (800375c <HAL_TIM_Base_MspInit+0x16c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d115      	bne.n	8003740 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 800371e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003722:	6453      	str	r3, [r2, #68]	; 0x44
 8003724:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_TIM_Base_MspInit+0x158>)
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003730:	2200      	movs	r2, #0
 8003732:	2100      	movs	r1, #0
 8003734:	201a      	movs	r0, #26
 8003736:	f000 fe56 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800373a:	201a      	movs	r0, #26
 800373c:	f000 fe6f 	bl	800441e <HAL_NVIC_EnableIRQ>
}
 8003740:	bf00      	nop
 8003742:	3738      	adds	r7, #56	; 0x38
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40023800 	.word	0x40023800
 800374c:	40020000 	.word	0x40020000
 8003750:	40020400 	.word	0x40020400
 8003754:	40000400 	.word	0x40000400
 8003758:	40000800 	.word	0x40000800
 800375c:	40014800 	.word	0x40014800

08003760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a24      	ldr	r2, [pc, #144]	; (8003810 <HAL_TIM_MspPostInit+0xb0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d11e      	bne.n	80037c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	4b23      	ldr	r3, [pc, #140]	; (8003814 <HAL_TIM_MspPostInit+0xb4>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a22      	ldr	r2, [pc, #136]	; (8003814 <HAL_TIM_MspPostInit+0xb4>)
 800378c:	f043 0302 	orr.w	r3, r3, #2
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b20      	ldr	r3, [pc, #128]	; (8003814 <HAL_TIM_MspPostInit+0xb4>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = buzzer_Pin;
 800379e:	2302      	movs	r3, #2
 80037a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a2:	2302      	movs	r3, #2
 80037a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037ae:	2302      	movs	r3, #2
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 80037b2:	f107 0314 	add.w	r3, r7, #20
 80037b6:	4619      	mov	r1, r3
 80037b8:	4817      	ldr	r0, [pc, #92]	; (8003818 <HAL_TIM_MspPostInit+0xb8>)
 80037ba:	f001 fa4d 	bl	8004c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80037be:	e022      	b.n	8003806 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a15      	ldr	r2, [pc, #84]	; (800381c <HAL_TIM_MspPostInit+0xbc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d11d      	bne.n	8003806 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_TIM_MspPostInit+0xb4>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	4a10      	ldr	r2, [pc, #64]	; (8003814 <HAL_TIM_MspPostInit+0xb4>)
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	6313      	str	r3, [r2, #48]	; 0x30
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_TIM_MspPostInit+0xb4>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Right_Wheel_Pin|Left_Wheel_Pin;
 80037e6:	23c0      	movs	r3, #192	; 0xc0
 80037e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ea:	2302      	movs	r3, #2
 80037ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f2:	2300      	movs	r3, #0
 80037f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037f6:	2302      	movs	r3, #2
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037fa:	f107 0314 	add.w	r3, r7, #20
 80037fe:	4619      	mov	r1, r3
 8003800:	4805      	ldr	r0, [pc, #20]	; (8003818 <HAL_TIM_MspPostInit+0xb8>)
 8003802:	f001 fa29 	bl	8004c58 <HAL_GPIO_Init>
}
 8003806:	bf00      	nop
 8003808:	3728      	adds	r7, #40	; 0x28
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40000400 	.word	0x40000400
 8003814:	40023800 	.word	0x40023800
 8003818:	40020400 	.word	0x40020400
 800381c:	40000800 	.word	0x40000800

08003820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003828:	f107 031c 	add.w	r3, r7, #28
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a3a      	ldr	r2, [pc, #232]	; (8003928 <HAL_UART_MspInit+0x108>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d135      	bne.n	80038ae <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	4b39      	ldr	r3, [pc, #228]	; (800392c <HAL_UART_MspInit+0x10c>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	4a38      	ldr	r2, [pc, #224]	; (800392c <HAL_UART_MspInit+0x10c>)
 800384c:	f043 0310 	orr.w	r3, r3, #16
 8003850:	6453      	str	r3, [r2, #68]	; 0x44
 8003852:	4b36      	ldr	r3, [pc, #216]	; (800392c <HAL_UART_MspInit+0x10c>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	4b32      	ldr	r3, [pc, #200]	; (800392c <HAL_UART_MspInit+0x10c>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	4a31      	ldr	r2, [pc, #196]	; (800392c <HAL_UART_MspInit+0x10c>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6313      	str	r3, [r2, #48]	; 0x30
 800386e:	4b2f      	ldr	r3, [pc, #188]	; (800392c <HAL_UART_MspInit+0x10c>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800387a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800387e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003880:	2302      	movs	r3, #2
 8003882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	2300      	movs	r3, #0
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003888:	2303      	movs	r3, #3
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800388c:	2307      	movs	r3, #7
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003890:	f107 031c 	add.w	r3, r7, #28
 8003894:	4619      	mov	r1, r3
 8003896:	4826      	ldr	r0, [pc, #152]	; (8003930 <HAL_UART_MspInit+0x110>)
 8003898:	f001 f9de 	bl	8004c58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800389c:	2200      	movs	r2, #0
 800389e:	2100      	movs	r1, #0
 80038a0:	2025      	movs	r0, #37	; 0x25
 80038a2:	f000 fda0 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038a6:	2025      	movs	r0, #37	; 0x25
 80038a8:	f000 fdb9 	bl	800441e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038ac:	e038      	b.n	8003920 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a20      	ldr	r2, [pc, #128]	; (8003934 <HAL_UART_MspInit+0x114>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d133      	bne.n	8003920 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	4b1b      	ldr	r3, [pc, #108]	; (800392c <HAL_UART_MspInit+0x10c>)
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	4a1a      	ldr	r2, [pc, #104]	; (800392c <HAL_UART_MspInit+0x10c>)
 80038c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c6:	6413      	str	r3, [r2, #64]	; 0x40
 80038c8:	4b18      	ldr	r3, [pc, #96]	; (800392c <HAL_UART_MspInit+0x10c>)
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	4b14      	ldr	r3, [pc, #80]	; (800392c <HAL_UART_MspInit+0x10c>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	4a13      	ldr	r2, [pc, #76]	; (800392c <HAL_UART_MspInit+0x10c>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6313      	str	r3, [r2, #48]	; 0x30
 80038e4:	4b11      	ldr	r3, [pc, #68]	; (800392c <HAL_UART_MspInit+0x10c>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038f0:	230c      	movs	r3, #12
 80038f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f4:	2302      	movs	r3, #2
 80038f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fc:	2303      	movs	r3, #3
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003900:	2307      	movs	r3, #7
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003904:	f107 031c 	add.w	r3, r7, #28
 8003908:	4619      	mov	r1, r3
 800390a:	4809      	ldr	r0, [pc, #36]	; (8003930 <HAL_UART_MspInit+0x110>)
 800390c:	f001 f9a4 	bl	8004c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003910:	2200      	movs	r2, #0
 8003912:	2100      	movs	r1, #0
 8003914:	2026      	movs	r0, #38	; 0x26
 8003916:	f000 fd66 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800391a:	2026      	movs	r0, #38	; 0x26
 800391c:	f000 fd7f 	bl	800441e <HAL_NVIC_EnableIRQ>
}
 8003920:	bf00      	nop
 8003922:	3730      	adds	r7, #48	; 0x30
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40011000 	.word	0x40011000
 800392c:	40023800 	.word	0x40023800
 8003930:	40020000 	.word	0x40020000
 8003934:	40004400 	.word	0x40004400

08003938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800393c:	e7fe      	b.n	800393c <NMI_Handler+0x4>

0800393e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800393e:	b480      	push	{r7}
 8003940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003942:	e7fe      	b.n	8003942 <HardFault_Handler+0x4>

08003944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003948:	e7fe      	b.n	8003948 <MemManage_Handler+0x4>

0800394a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800394a:	b480      	push	{r7}
 800394c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800394e:	e7fe      	b.n	800394e <BusFault_Handler+0x4>

08003950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003954:	e7fe      	b.n	8003954 <UsageFault_Handler+0x4>

08003956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003956:	b480      	push	{r7}
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003984:	f000 fc10 	bl	80041a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003988:	bf00      	nop
 800398a:	bd80      	pop	{r7, pc}

0800398c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003990:	4802      	ldr	r0, [pc, #8]	; (800399c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003992:	f002 ff77 	bl	8006884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000254 	.word	0x20000254

080039a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039a4:	4802      	ldr	r0, [pc, #8]	; (80039b0 <TIM2_IRQHandler+0x10>)
 80039a6:	f002 ff6d 	bl	8006884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	2000017c 	.word	0x2000017c

080039b4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <SPI1_IRQHandler+0x10>)
 80039ba:	f002 f9c1 	bl	8005d40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	200000c4 	.word	0x200000c4

080039c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <USART1_IRQHandler+0x10>)
 80039ce:	f003 ffff 	bl	80079d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	2000029c 	.word	0x2000029c

080039dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039e0:	4802      	ldr	r0, [pc, #8]	; (80039ec <USART2_IRQHandler+0x10>)
 80039e2:	f003 fff5 	bl	80079d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	200002e4 	.word	0x200002e4

080039f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <DMA2_Stream2_IRQHandler+0x10>)
 80039f6:	f000 fec5 	bl	8004784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	2000011c 	.word	0x2000011c

08003a04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	e00a      	b.n	8003a2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a16:	f3af 8000 	nop.w
 8003a1a:	4601      	mov	r1, r0
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	60ba      	str	r2, [r7, #8]
 8003a22:	b2ca      	uxtb	r2, r1
 8003a24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	dbf0      	blt.n	8003a16 <_read+0x12>
  }

  return len;
 8003a34:	687b      	ldr	r3, [r7, #4]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <_close>:
  }
  return len;
}

int _close(int file)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a66:	605a      	str	r2, [r3, #4]
  return 0;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <_isatty>:

int _isatty(int file)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a7e:	2301      	movs	r3, #1
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ab0:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <_sbrk+0x5c>)
 8003ab2:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <_sbrk+0x60>)
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003abc:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <_sbrk+0x64>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <_sbrk+0x64>)
 8003ac6:	4a12      	ldr	r2, [pc, #72]	; (8003b10 <_sbrk+0x68>)
 8003ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <_sbrk+0x64>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d207      	bcs.n	8003ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ad8:	f004 ffde 	bl	8008a98 <__errno>
 8003adc:	4603      	mov	r3, r0
 8003ade:	220c      	movs	r2, #12
 8003ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	e009      	b.n	8003afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <_sbrk+0x64>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <_sbrk+0x64>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <_sbrk+0x64>)
 8003af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003afa:	68fb      	ldr	r3, [r7, #12]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20020000 	.word	0x20020000
 8003b08:	00000400 	.word	0x00000400
 8003b0c:	20000338 	.word	0x20000338
 8003b10:	200004c8 	.word	0x200004c8

08003b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <SystemInit+0x20>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	4a05      	ldr	r2, [pc, #20]	; (8003b34 <SystemInit+0x20>)
 8003b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <ultraSonicInit>:
uint32_t Distance3 = 0;
uint8_t IsFirstCaptured3 = 0;

uint8_t IsAroundCaptured = 0;

void ultraSonicInit(TIM_HandleTypeDef *htim1 , TIM_HandleTypeDef* htim2){
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
	HAL_TIM_IC_Start_IT(htim1, TIM_CHANNEL_1);
 8003b42:	2100      	movs	r1, #0
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f002 fd83 	bl	8006650 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(htim1, TIM_CHANNEL_2);
 8003b4a:	2104      	movs	r1, #4
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f002 fd7f 	bl	8006650 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(htim1, TIM_CHANNEL_3);
 8003b52:	2108      	movs	r1, #8
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f002 fd7b 	bl	8006650 <HAL_TIM_IC_Start_IT>

	HAL_TIM_Base_Start(htim2);
 8003b5a:	6838      	ldr	r0, [r7, #0]
 8003b5c:	f002 fbba 	bl	80062d4 <HAL_TIM_Base_Start>
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <delayUs>:

void delayUs(uint16_t time, TIM_HandleTypeDef *htim){
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	6039      	str	r1, [r7, #0]
 8003b72:	80fb      	strh	r3, [r7, #6]
	htim->Instance->CNT = 0;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim->Instance->CNT < time);
 8003b7c:	bf00      	nop
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d3f9      	bcc.n	8003b7e <delayUs+0x16>
}
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7f1b      	ldrb	r3, [r3, #28]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	f040 8090 	bne.w	8003cca <HAL_TIM_IC_CaptureCallback+0x132>
		//rising interrupt mode
		if(IsFirstCaptured1 == 0 && IsAroundCaptured == 0){
 8003baa:	4b6d      	ldr	r3, [pc, #436]	; (8003d60 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d11e      	bne.n	8003bf0 <HAL_TIM_IC_CaptureCallback+0x58>
 8003bb2:	4b6c      	ldr	r3, [pc, #432]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11a      	bne.n	8003bf0 <HAL_TIM_IC_CaptureCallback+0x58>
			//Read Timer
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // time to rising interrupt mode
 8003bba:	2100      	movs	r1, #0
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f003 f977 	bl	8006eb0 <HAL_TIM_ReadCapturedValue>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4a68      	ldr	r2, [pc, #416]	; (8003d68 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8003bc6:	6013      	str	r3, [r2, #0]
				IsFirstCaptured1 = 1;
 8003bc8:	4b65      	ldr	r3, [pc, #404]	; (8003d60 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
			//Next interrupt falling setting
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 020a 	bic.w	r2, r2, #10
 8003bdc:	621a      	str	r2, [r3, #32]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0202 	orr.w	r2, r2, #2
 8003bec:	621a      	str	r2, [r3, #32]
 8003bee:	e06c      	b.n	8003cca <HAL_TIM_IC_CaptureCallback+0x132>
		}
		//falling interrupt mode
		else if(IsFirstCaptured1 == 1){
 8003bf0:	4b5b      	ldr	r3, [pc, #364]	; (8003d60 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d168      	bne.n	8003cca <HAL_TIM_IC_CaptureCallback+0x132>
			//read Timer
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // time to falling interrupt mode
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f003 f958 	bl	8006eb0 <HAL_TIM_ReadCapturedValue>
 8003c00:	4603      	mov	r3, r0
 8003c02:	4a5a      	ldr	r2, [pc, #360]	; (8003d6c <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8003c04:	6013      	str	r3, [r2, #0]
			htim->Instance->CNT = 0;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24
			// subtract to IC_Val1 and IC_Val2
			if(IC_Val2 > IC_Val1) Difference1 = IC_Val2 - IC_Val1;
 8003c0e:	4b57      	ldr	r3, [pc, #348]	; (8003d6c <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4b55      	ldr	r3, [pc, #340]	; (8003d68 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d907      	bls.n	8003c2a <HAL_TIM_IC_CaptureCallback+0x92>
 8003c1a:	4b54      	ldr	r3, [pc, #336]	; (8003d6c <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b52      	ldr	r3, [pc, #328]	; (8003d68 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	4a52      	ldr	r2, [pc, #328]	; (8003d70 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	e00f      	b.n	8003c4a <HAL_TIM_IC_CaptureCallback+0xb2>
			else if(IC_Val1 > IC_Val2) Difference1 = (0xffff - IC_Val1) + IC_Val2; // one arround --> max - IC_Val1
 8003c2a:	4b4f      	ldr	r3, [pc, #316]	; (8003d68 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b4f      	ldr	r3, [pc, #316]	; (8003d6c <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d909      	bls.n	8003c4a <HAL_TIM_IC_CaptureCallback+0xb2>
 8003c36:	4b4d      	ldr	r3, [pc, #308]	; (8003d6c <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b4b      	ldr	r3, [pc, #300]	; (8003d68 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003c44:	33ff      	adds	r3, #255	; 0xff
 8003c46:	4a4a      	ldr	r2, [pc, #296]	; (8003d70 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8003c48:	6013      	str	r3, [r2, #0]
			//Calculation to Distance
			Distance1 = Difference1 * 0.034 / 2;
 8003c4a:	4b49      	ldr	r3, [pc, #292]	; (8003d70 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fc fc58 	bl	8000504 <__aeabi_ui2d>
 8003c54:	a340      	add	r3, pc, #256	; (adr r3, 8003d58 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	f7fc fccd 	bl	80005f8 <__aeabi_dmul>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4610      	mov	r0, r2
 8003c64:	4619      	mov	r1, r3
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c6e:	f7fc fded 	bl	800084c <__aeabi_ddiv>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f7fc ff95 	bl	8000ba8 <__aeabi_d2uiz>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4a3c      	ldr	r2, [pc, #240]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8003c82:	6013      	str	r3, [r2, #0]
			if(Distance1 > 150) Distance1 = 150;
 8003c84:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b96      	cmp	r3, #150	; 0x96
 8003c8a:	d902      	bls.n	8003c92 <HAL_TIM_IC_CaptureCallback+0xfa>
 8003c8c:	4b39      	ldr	r3, [pc, #228]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8003c8e:	2296      	movs	r2, #150	; 0x96
 8003c90:	601a      	str	r2, [r3, #0]
			IsFirstCaptured1 = 0;
 8003c92:	4b33      	ldr	r3, [pc, #204]	; (8003d60 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
			IsAroundCaptured = 1;
 8003c98:	4b32      	ldr	r3, [pc, #200]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
			//Next interrupt rising setting
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a1a      	ldr	r2, [r3, #32]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 020a 	bic.w	r2, r2, #10
 8003cac:	621a      	str	r2, [r3, #32]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a12      	ldr	r2, [r2, #32]
 8003cb8:	621a      	str	r2, [r3, #32]
			//Disable to interrupt
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0202 	bic.w	r2, r2, #2
 8003cc8:	60da      	str	r2, [r3, #12]
		}
	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7f1b      	ldrb	r3, [r3, #28]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	f040 80aa 	bne.w	8003e28 <HAL_TIM_IC_CaptureCallback+0x290>
				//rising interrupt mode
				if(IsFirstCaptured2 == 0 && IsAroundCaptured == 1){
 8003cd4:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d11e      	bne.n	8003d1a <HAL_TIM_IC_CaptureCallback+0x182>
 8003cdc:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d11a      	bne.n	8003d1a <HAL_TIM_IC_CaptureCallback+0x182>
					//Read Timer
					IC_Val3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // time to rising interrupt mode
 8003ce4:	2104      	movs	r1, #4
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f003 f8e2 	bl	8006eb0 <HAL_TIM_ReadCapturedValue>
 8003cec:	4603      	mov	r3, r0
 8003cee:	4a23      	ldr	r2, [pc, #140]	; (8003d7c <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8003cf0:	6013      	str	r3, [r2, #0]
						IsFirstCaptured2 = 1;
 8003cf2:	4b21      	ldr	r3, [pc, #132]	; (8003d78 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
					//Next interrupt falling setting
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d06:	621a      	str	r2, [r3, #32]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6a1a      	ldr	r2, [r3, #32]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0220 	orr.w	r2, r2, #32
 8003d16:	621a      	str	r2, [r3, #32]
 8003d18:	e086      	b.n	8003e28 <HAL_TIM_IC_CaptureCallback+0x290>
				}
				//falling interrupt mode
				else if(IsFirstCaptured2 == 1){
 8003d1a:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	f040 8082 	bne.w	8003e28 <HAL_TIM_IC_CaptureCallback+0x290>
					//read Timer
					IC_Val4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // time to falling interrupt mode
 8003d24:	2104      	movs	r1, #4
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f003 f8c2 	bl	8006eb0 <HAL_TIM_ReadCapturedValue>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8003d30:	6013      	str	r3, [r2, #0]
					htim->Instance->CNT = 0;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24
					// subtract to IC_Val1 and IC_Val2
					if(IC_Val4 > IC_Val3) Difference2 = IC_Val4 - IC_Val3;
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d920      	bls.n	8003d88 <HAL_TIM_IC_CaptureCallback+0x1f0>
 8003d46:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	4a0c      	ldr	r2, [pc, #48]	; (8003d84 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	e028      	b.n	8003da8 <HAL_TIM_IC_CaptureCallback+0x210>
 8003d56:	bf00      	nop
 8003d58:	b020c49c 	.word	0xb020c49c
 8003d5c:	3fa16872 	.word	0x3fa16872
 8003d60:	2000034c 	.word	0x2000034c
 8003d64:	20000375 	.word	0x20000375
 8003d68:	2000033c 	.word	0x2000033c
 8003d6c:	20000340 	.word	0x20000340
 8003d70:	20000344 	.word	0x20000344
 8003d74:	20000348 	.word	0x20000348
 8003d78:	20000360 	.word	0x20000360
 8003d7c:	20000350 	.word	0x20000350
 8003d80:	20000354 	.word	0x20000354
 8003d84:	20000358 	.word	0x20000358
					else if(IC_Val3 > IC_Val4) Difference2 = (0xffff - IC_Val3) + IC_Val4; // one arround --> max - IC_Val1
 8003d88:	4b77      	ldr	r3, [pc, #476]	; (8003f68 <HAL_TIM_IC_CaptureCallback+0x3d0>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4b77      	ldr	r3, [pc, #476]	; (8003f6c <HAL_TIM_IC_CaptureCallback+0x3d4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d909      	bls.n	8003da8 <HAL_TIM_IC_CaptureCallback+0x210>
 8003d94:	4b75      	ldr	r3, [pc, #468]	; (8003f6c <HAL_TIM_IC_CaptureCallback+0x3d4>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b73      	ldr	r3, [pc, #460]	; (8003f68 <HAL_TIM_IC_CaptureCallback+0x3d0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003da2:	33ff      	adds	r3, #255	; 0xff
 8003da4:	4a72      	ldr	r2, [pc, #456]	; (8003f70 <HAL_TIM_IC_CaptureCallback+0x3d8>)
 8003da6:	6013      	str	r3, [r2, #0]
					//Calculation to Distance
					Distance2 = Difference2 * 0.034 / 2;
 8003da8:	4b71      	ldr	r3, [pc, #452]	; (8003f70 <HAL_TIM_IC_CaptureCallback+0x3d8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fc fba9 	bl	8000504 <__aeabi_ui2d>
 8003db2:	a36b      	add	r3, pc, #428	; (adr r3, 8003f60 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8003db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db8:	f7fc fc1e 	bl	80005f8 <__aeabi_dmul>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dcc:	f7fc fd3e 	bl	800084c <__aeabi_ddiv>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f7fc fee6 	bl	8000ba8 <__aeabi_d2uiz>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4a65      	ldr	r2, [pc, #404]	; (8003f74 <HAL_TIM_IC_CaptureCallback+0x3dc>)
 8003de0:	6013      	str	r3, [r2, #0]
					if(Distance2 > 150) Distance2 = 150;
 8003de2:	4b64      	ldr	r3, [pc, #400]	; (8003f74 <HAL_TIM_IC_CaptureCallback+0x3dc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b96      	cmp	r3, #150	; 0x96
 8003de8:	d902      	bls.n	8003df0 <HAL_TIM_IC_CaptureCallback+0x258>
 8003dea:	4b62      	ldr	r3, [pc, #392]	; (8003f74 <HAL_TIM_IC_CaptureCallback+0x3dc>)
 8003dec:	2296      	movs	r2, #150	; 0x96
 8003dee:	601a      	str	r2, [r3, #0]
					IsFirstCaptured2 = 0;
 8003df0:	4b61      	ldr	r3, [pc, #388]	; (8003f78 <HAL_TIM_IC_CaptureCallback+0x3e0>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
					IsAroundCaptured = 2;
 8003df6:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <HAL_TIM_IC_CaptureCallback+0x3e4>)
 8003df8:	2202      	movs	r2, #2
 8003dfa:	701a      	strb	r2, [r3, #0]
					//Next interrupt rising setting
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6a1a      	ldr	r2, [r3, #32]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e0a:	621a      	str	r2, [r3, #32]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6a12      	ldr	r2, [r2, #32]
 8003e16:	621a      	str	r2, [r3, #32]
					//Disable to interrupt
					__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0204 	bic.w	r2, r2, #4
 8003e26:	60da      	str	r2, [r3, #12]
				}
		}
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	7f1b      	ldrb	r3, [r3, #28]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	f040 8090 	bne.w	8003f52 <HAL_TIM_IC_CaptureCallback+0x3ba>
				//rising interrupt mode
				if(IsFirstCaptured3 == 0 && IsAroundCaptured == 2){
 8003e32:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_TIM_IC_CaptureCallback+0x3e8>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d11e      	bne.n	8003e78 <HAL_TIM_IC_CaptureCallback+0x2e0>
 8003e3a:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <HAL_TIM_IC_CaptureCallback+0x3e4>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d11a      	bne.n	8003e78 <HAL_TIM_IC_CaptureCallback+0x2e0>
					//Read Timer
					IC_Val5 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // time to rising interrupt mode
 8003e42:	2108      	movs	r1, #8
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f003 f833 	bl	8006eb0 <HAL_TIM_ReadCapturedValue>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4a4d      	ldr	r2, [pc, #308]	; (8003f84 <HAL_TIM_IC_CaptureCallback+0x3ec>)
 8003e4e:	6013      	str	r3, [r2, #0]
						IsFirstCaptured3 = 1;
 8003e50:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <HAL_TIM_IC_CaptureCallback+0x3e8>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	701a      	strb	r2, [r3, #0]
					//Next interrupt falling setting
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a1a      	ldr	r2, [r3, #32]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8003e64:	621a      	str	r2, [r3, #32]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6a1a      	ldr	r2, [r3, #32]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e74:	621a      	str	r2, [r3, #32]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
					//Disable to interrupt
					__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
				}
			}
}
 8003e76:	e06c      	b.n	8003f52 <HAL_TIM_IC_CaptureCallback+0x3ba>
				else if(IsFirstCaptured3 == 1){
 8003e78:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <HAL_TIM_IC_CaptureCallback+0x3e8>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d168      	bne.n	8003f52 <HAL_TIM_IC_CaptureCallback+0x3ba>
					IC_Val6 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // time to falling interrupt mode
 8003e80:	2108      	movs	r1, #8
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f003 f814 	bl	8006eb0 <HAL_TIM_ReadCapturedValue>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4a3f      	ldr	r2, [pc, #252]	; (8003f88 <HAL_TIM_IC_CaptureCallback+0x3f0>)
 8003e8c:	6013      	str	r3, [r2, #0]
					htim->Instance->CNT = 0;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2200      	movs	r2, #0
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24
					if(IC_Val6 > IC_Val5) Difference3 = IC_Val6 - IC_Val5;
 8003e96:	4b3c      	ldr	r3, [pc, #240]	; (8003f88 <HAL_TIM_IC_CaptureCallback+0x3f0>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b3a      	ldr	r3, [pc, #232]	; (8003f84 <HAL_TIM_IC_CaptureCallback+0x3ec>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d907      	bls.n	8003eb2 <HAL_TIM_IC_CaptureCallback+0x31a>
 8003ea2:	4b39      	ldr	r3, [pc, #228]	; (8003f88 <HAL_TIM_IC_CaptureCallback+0x3f0>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4b37      	ldr	r3, [pc, #220]	; (8003f84 <HAL_TIM_IC_CaptureCallback+0x3ec>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	4a37      	ldr	r2, [pc, #220]	; (8003f8c <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	e00f      	b.n	8003ed2 <HAL_TIM_IC_CaptureCallback+0x33a>
					else if(IC_Val5 > IC_Val6) Difference3 = (0xffff - IC_Val5) + IC_Val6; // one arround --> max - IC_Val1
 8003eb2:	4b34      	ldr	r3, [pc, #208]	; (8003f84 <HAL_TIM_IC_CaptureCallback+0x3ec>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	4b34      	ldr	r3, [pc, #208]	; (8003f88 <HAL_TIM_IC_CaptureCallback+0x3f0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d909      	bls.n	8003ed2 <HAL_TIM_IC_CaptureCallback+0x33a>
 8003ebe:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <HAL_TIM_IC_CaptureCallback+0x3f0>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4b30      	ldr	r3, [pc, #192]	; (8003f84 <HAL_TIM_IC_CaptureCallback+0x3ec>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003ecc:	33ff      	adds	r3, #255	; 0xff
 8003ece:	4a2f      	ldr	r2, [pc, #188]	; (8003f8c <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8003ed0:	6013      	str	r3, [r2, #0]
					Distance3 = Difference3 * 0.034 / 2;
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fc fb14 	bl	8000504 <__aeabi_ui2d>
 8003edc:	a320      	add	r3, pc, #128	; (adr r3, 8003f60 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f7fc fb89 	bl	80005f8 <__aeabi_dmul>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ef6:	f7fc fca9 	bl	800084c <__aeabi_ddiv>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	f7fc fe51 	bl	8000ba8 <__aeabi_d2uiz>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4a21      	ldr	r2, [pc, #132]	; (8003f90 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8003f0a:	6013      	str	r3, [r2, #0]
					if(Distance3 > 150) Distance3 = 150;
 8003f0c:	4b20      	ldr	r3, [pc, #128]	; (8003f90 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b96      	cmp	r3, #150	; 0x96
 8003f12:	d902      	bls.n	8003f1a <HAL_TIM_IC_CaptureCallback+0x382>
 8003f14:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8003f16:	2296      	movs	r2, #150	; 0x96
 8003f18:	601a      	str	r2, [r3, #0]
					IsFirstCaptured3 = 0;
 8003f1a:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_TIM_IC_CaptureCallback+0x3e8>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
					IsAroundCaptured = 0;
 8003f20:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <HAL_TIM_IC_CaptureCallback+0x3e4>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6a1a      	ldr	r2, [r3, #32]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8003f34:	621a      	str	r2, [r3, #32]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6a12      	ldr	r2, [r2, #32]
 8003f40:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0208 	bic.w	r2, r2, #8
 8003f50:	60da      	str	r2, [r3, #12]
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	f3af 8000 	nop.w
 8003f60:	b020c49c 	.word	0xb020c49c
 8003f64:	3fa16872 	.word	0x3fa16872
 8003f68:	20000350 	.word	0x20000350
 8003f6c:	20000354 	.word	0x20000354
 8003f70:	20000358 	.word	0x20000358
 8003f74:	2000035c 	.word	0x2000035c
 8003f78:	20000360 	.word	0x20000360
 8003f7c:	20000375 	.word	0x20000375
 8003f80:	20000374 	.word	0x20000374
 8003f84:	20000364 	.word	0x20000364
 8003f88:	20000368 	.word	0x20000368
 8003f8c:	2000036c 	.word	0x2000036c
 8003f90:	20000370 	.word	0x20000370

08003f94 <getDistance_L>:

uint32_t getDistance_L(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2){
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(trigger1_GPIO_Port, trigger1_Pin, 1);
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	2104      	movs	r1, #4
 8003fa2:	480d      	ldr	r0, [pc, #52]	; (8003fd8 <getDistance_L+0x44>)
 8003fa4:	f000 ffdc 	bl	8004f60 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOC, left_light_Pin, 1);
	delayUs(10 , htim1);
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	200a      	movs	r0, #10
 8003fac:	f7ff fddc 	bl	8003b68 <delayUs>
	HAL_GPIO_WritePin(trigger1_GPIO_Port, trigger1_Pin, 0);
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2104      	movs	r1, #4
 8003fb4:	4808      	ldr	r0, [pc, #32]	; (8003fd8 <getDistance_L+0x44>)
 8003fb6:	f000 ffd3 	bl	8004f60 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOC, left_light_Pin, 0);
	//Enable to interrupt
	__HAL_TIM_ENABLE_IT(htim2, TIM_IT_CC1);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 0202 	orr.w	r2, r2, #2
 8003fc8:	60da      	str	r2, [r3, #12]
	return Distance1;
 8003fca:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <getDistance_L+0x48>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40020400 	.word	0x40020400
 8003fdc:	20000348 	.word	0x20000348

08003fe0 <getDistance_C>:

uint32_t getDistance_C(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2){
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(trigger1_GPIO_Port, trigger1_Pin, 1);
 8003fea:	2201      	movs	r2, #1
 8003fec:	2104      	movs	r1, #4
 8003fee:	480d      	ldr	r0, [pc, #52]	; (8004024 <getDistance_C+0x44>)
 8003ff0:	f000 ffb6 	bl	8004f60 <HAL_GPIO_WritePin>
	delayUs(10, htim1);
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	200a      	movs	r0, #10
 8003ff8:	f7ff fdb6 	bl	8003b68 <delayUs>
	HAL_GPIO_WritePin(trigger1_GPIO_Port, trigger1_Pin, 0);
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2104      	movs	r1, #4
 8004000:	4808      	ldr	r0, [pc, #32]	; (8004024 <getDistance_C+0x44>)
 8004002:	f000 ffad 	bl	8004f60 <HAL_GPIO_WritePin>
	//Enable to interrupt
	__HAL_TIM_ENABLE_IT(htim2, TIM_IT_CC2);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0204 	orr.w	r2, r2, #4
 8004014:	60da      	str	r2, [r3, #12]
	return Distance2;
 8004016:	4b04      	ldr	r3, [pc, #16]	; (8004028 <getDistance_C+0x48>)
 8004018:	681b      	ldr	r3, [r3, #0]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40020400 	.word	0x40020400
 8004028:	2000035c 	.word	0x2000035c

0800402c <getDistance_R>:

uint32_t getDistance_R(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2){
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(trigger1_GPIO_Port, trigger1_Pin, 1);
 8004036:	2201      	movs	r2, #1
 8004038:	2104      	movs	r1, #4
 800403a:	480d      	ldr	r0, [pc, #52]	; (8004070 <getDistance_R+0x44>)
 800403c:	f000 ff90 	bl	8004f60 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOC, right_light_Pin, 1);
//	HAL_GPIO_WritePin(GPIOC, right_light_Pin, 1);
	delayUs(10, htim1);
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	200a      	movs	r0, #10
 8004044:	f7ff fd90 	bl	8003b68 <delayUs>
	HAL_GPIO_WritePin(trigger1_GPIO_Port, trigger1_Pin, 0);
 8004048:	2200      	movs	r2, #0
 800404a:	2104      	movs	r1, #4
 800404c:	4808      	ldr	r0, [pc, #32]	; (8004070 <getDistance_R+0x44>)
 800404e:	f000 ff87 	bl	8004f60 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOC, right_light_Pin, 0);
	//Enable to interrupt
	__HAL_TIM_ENABLE_IT(htim2, TIM_IT_CC3);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0208 	orr.w	r2, r2, #8
 8004060:	60da      	str	r2, [r3, #12]
	return Distance3;
 8004062:	4b04      	ldr	r3, [pc, #16]	; (8004074 <getDistance_R+0x48>)
 8004064:	681b      	ldr	r3, [r3, #0]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40020400 	.word	0x40020400
 8004074:	20000370 	.word	0x20000370

08004078 <map>:
 *  Created on: Apr 15, 2024
 *      Author: myhg1
 */
#include "utils.h"

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	69b9      	ldr	r1, [r7, #24]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	1a8a      	subs	r2, r1, r2
 8004092:	fb03 f202 	mul.w	r2, r3, r2
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	1acb      	subs	r3, r1, r3
 800409c:	fb92 f2f3 	sdiv	r2, r2, r3
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4413      	add	r3, r2
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80040b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80040b4:	f7ff fd2e 	bl	8003b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040b8:	480c      	ldr	r0, [pc, #48]	; (80040ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040ba:	490d      	ldr	r1, [pc, #52]	; (80040f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040bc:	4a0d      	ldr	r2, [pc, #52]	; (80040f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040c0:	e002      	b.n	80040c8 <LoopCopyDataInit>

080040c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040c6:	3304      	adds	r3, #4

080040c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040cc:	d3f9      	bcc.n	80040c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ce:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040d0:	4c0a      	ldr	r4, [pc, #40]	; (80040fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80040d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040d4:	e001      	b.n	80040da <LoopFillZerobss>

080040d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040d8:	3204      	adds	r2, #4

080040da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040dc:	d3fb      	bcc.n	80040d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040de:	f004 fce1 	bl	8008aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040e2:	f7fe fcf5 	bl	8002ad0 <main>
  bx  lr    
 80040e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80040e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040f0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80040f4:	0800bd98 	.word	0x0800bd98
  ldr r2, =_sbss
 80040f8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80040fc:	200004c8 	.word	0x200004c8

08004100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004100:	e7fe      	b.n	8004100 <ADC_IRQHandler>
	...

08004104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004108:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <HAL_Init+0x40>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a0d      	ldr	r2, [pc, #52]	; (8004144 <HAL_Init+0x40>)
 800410e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_Init+0x40>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <HAL_Init+0x40>)
 800411a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800411e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <HAL_Init+0x40>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a07      	ldr	r2, [pc, #28]	; (8004144 <HAL_Init+0x40>)
 8004126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800412c:	2003      	movs	r0, #3
 800412e:	f000 f94f 	bl	80043d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004132:	200f      	movs	r0, #15
 8004134:	f000 f808 	bl	8004148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004138:	f7ff f9b0 	bl	800349c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40023c00 	.word	0x40023c00

08004148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <HAL_InitTick+0x54>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <HAL_InitTick+0x58>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	4619      	mov	r1, r3
 800415a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800415e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f967 	bl	800443a <HAL_SYSTICK_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e00e      	b.n	8004194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b0f      	cmp	r3, #15
 800417a:	d80a      	bhi.n	8004192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800417c:	2200      	movs	r2, #0
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	f04f 30ff 	mov.w	r0, #4294967295
 8004184:	f000 f92f 	bl	80043e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004188:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <HAL_InitTick+0x5c>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000024 	.word	0x20000024
 80041a0:	2000002c 	.word	0x2000002c
 80041a4:	20000028 	.word	0x20000028

080041a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_IncTick+0x20>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_IncTick+0x24>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4413      	add	r3, r2
 80041b8:	4a04      	ldr	r2, [pc, #16]	; (80041cc <HAL_IncTick+0x24>)
 80041ba:	6013      	str	r3, [r2, #0]
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	2000002c 	.word	0x2000002c
 80041cc:	20000378 	.word	0x20000378

080041d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return uwTick;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_GetTick+0x14>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000378 	.word	0x20000378

080041e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041f0:	f7ff ffee 	bl	80041d0 <HAL_GetTick>
 80041f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d005      	beq.n	800420e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <HAL_Delay+0x44>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800420e:	bf00      	nop
 8004210:	f7ff ffde 	bl	80041d0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	429a      	cmp	r2, r3
 800421e:	d8f7      	bhi.n	8004210 <HAL_Delay+0x28>
  {
  }
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	2000002c 	.word	0x2000002c

08004230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800424c:	4013      	ands	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800425c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004262:	4a04      	ldr	r2, [pc, #16]	; (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	60d3      	str	r3, [r2, #12]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <__NVIC_GetPriorityGrouping+0x18>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	f003 0307 	and.w	r3, r3, #7
}
 8004286:	4618      	mov	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	db0b      	blt.n	80042be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	4907      	ldr	r1, [pc, #28]	; (80042cc <__NVIC_EnableIRQ+0x38>)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2001      	movs	r0, #1
 80042b6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000e100 	.word	0xe000e100

080042d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	6039      	str	r1, [r7, #0]
 80042da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	db0a      	blt.n	80042fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	490c      	ldr	r1, [pc, #48]	; (800431c <__NVIC_SetPriority+0x4c>)
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	0112      	lsls	r2, r2, #4
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	440b      	add	r3, r1
 80042f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f8:	e00a      	b.n	8004310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	4908      	ldr	r1, [pc, #32]	; (8004320 <__NVIC_SetPriority+0x50>)
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	3b04      	subs	r3, #4
 8004308:	0112      	lsls	r2, r2, #4
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	440b      	add	r3, r1
 800430e:	761a      	strb	r2, [r3, #24]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000e100 	.word	0xe000e100
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004324:	b480      	push	{r7}
 8004326:	b089      	sub	sp, #36	; 0x24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f1c3 0307 	rsb	r3, r3, #7
 800433e:	2b04      	cmp	r3, #4
 8004340:	bf28      	it	cs
 8004342:	2304      	movcs	r3, #4
 8004344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3304      	adds	r3, #4
 800434a:	2b06      	cmp	r3, #6
 800434c:	d902      	bls.n	8004354 <NVIC_EncodePriority+0x30>
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	3b03      	subs	r3, #3
 8004352:	e000      	b.n	8004356 <NVIC_EncodePriority+0x32>
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004358:	f04f 32ff 	mov.w	r2, #4294967295
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43da      	mvns	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	401a      	ands	r2, r3
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800436c:	f04f 31ff 	mov.w	r1, #4294967295
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	43d9      	mvns	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800437c:	4313      	orrs	r3, r2
         );
}
 800437e:	4618      	mov	r0, r3
 8004380:	3724      	adds	r7, #36	; 0x24
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3b01      	subs	r3, #1
 8004398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800439c:	d301      	bcc.n	80043a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800439e:	2301      	movs	r3, #1
 80043a0:	e00f      	b.n	80043c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043a2:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <SysTick_Config+0x40>)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043aa:	210f      	movs	r1, #15
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	f7ff ff8e 	bl	80042d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <SysTick_Config+0x40>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ba:	4b04      	ldr	r3, [pc, #16]	; (80043cc <SysTick_Config+0x40>)
 80043bc:	2207      	movs	r2, #7
 80043be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	e000e010 	.word	0xe000e010

080043d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ff29 	bl	8004230 <__NVIC_SetPriorityGrouping>
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b086      	sub	sp, #24
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	4603      	mov	r3, r0
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043f8:	f7ff ff3e 	bl	8004278 <__NVIC_GetPriorityGrouping>
 80043fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	6978      	ldr	r0, [r7, #20]
 8004404:	f7ff ff8e 	bl	8004324 <NVIC_EncodePriority>
 8004408:	4602      	mov	r2, r0
 800440a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff5d 	bl	80042d0 <__NVIC_SetPriority>
}
 8004416:	bf00      	nop
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	4603      	mov	r3, r0
 8004426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff ff31 	bl	8004294 <__NVIC_EnableIRQ>
}
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff ffa2 	bl	800438c <SysTick_Config>
 8004448:	4603      	mov	r3, r0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004460:	f7ff feb6 	bl	80041d0 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e099      	b.n	80045a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004490:	e00f      	b.n	80044b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004492:	f7ff fe9d 	bl	80041d0 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b05      	cmp	r3, #5
 800449e:	d908      	bls.n	80044b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2203      	movs	r2, #3
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e078      	b.n	80045a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e8      	bne.n	8004492 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4b38      	ldr	r3, [pc, #224]	; (80045ac <HAL_DMA_Init+0x158>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	2b04      	cmp	r3, #4
 800450a:	d107      	bne.n	800451c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	4313      	orrs	r3, r2
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f023 0307 	bic.w	r3, r3, #7
 8004532:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2b04      	cmp	r3, #4
 8004544:	d117      	bne.n	8004576 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00e      	beq.n	8004576 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fb01 	bl	8004b60 <DMA_CheckFifoParam>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2240      	movs	r2, #64	; 0x40
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004572:	2301      	movs	r3, #1
 8004574:	e016      	b.n	80045a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fab8 	bl	8004af4 <DMA_CalcBaseAndBitshift>
 8004584:	4603      	mov	r3, r0
 8004586:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458c:	223f      	movs	r2, #63	; 0x3f
 800458e:	409a      	lsls	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	f010803f 	.word	0xf010803f

080045b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_DMA_Start_IT+0x26>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e040      	b.n	8004658 <HAL_DMA_Start_IT+0xa8>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d12f      	bne.n	800464a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2202      	movs	r2, #2
 80045ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fa4a 	bl	8004a98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004608:	223f      	movs	r2, #63	; 0x3f
 800460a:	409a      	lsls	r2, r3
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0216 	orr.w	r2, r2, #22
 800461e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0208 	orr.w	r2, r2, #8
 8004636:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	e005      	b.n	8004656 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004652:	2302      	movs	r3, #2
 8004654:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004656:	7dfb      	ldrb	r3, [r7, #23]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800466e:	f7ff fdaf 	bl	80041d0 <HAL_GetTick>
 8004672:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d008      	beq.n	8004692 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2280      	movs	r2, #128	; 0x80
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e052      	b.n	8004738 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0216 	bic.w	r2, r2, #22
 80046a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695a      	ldr	r2, [r3, #20]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d103      	bne.n	80046c2 <HAL_DMA_Abort+0x62>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0208 	bic.w	r2, r2, #8
 80046d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0201 	bic.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046e2:	e013      	b.n	800470c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046e4:	f7ff fd74 	bl	80041d0 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	d90c      	bls.n	800470c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2203      	movs	r2, #3
 80046fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e015      	b.n	8004738 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e4      	bne.n	80046e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471e:	223f      	movs	r2, #63	; 0x3f
 8004720:	409a      	lsls	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d004      	beq.n	800475e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2280      	movs	r2, #128	; 0x80
 8004758:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e00c      	b.n	8004778 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2205      	movs	r2, #5
 8004762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0201 	bic.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004790:	4b8e      	ldr	r3, [pc, #568]	; (80049cc <HAL_DMA_IRQHandler+0x248>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a8e      	ldr	r2, [pc, #568]	; (80049d0 <HAL_DMA_IRQHandler+0x24c>)
 8004796:	fba2 2303 	umull	r2, r3, r2, r3
 800479a:	0a9b      	lsrs	r3, r3, #10
 800479c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ae:	2208      	movs	r2, #8
 80047b0:	409a      	lsls	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d01a      	beq.n	80047f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d013      	beq.n	80047f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0204 	bic.w	r2, r2, #4
 80047d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047dc:	2208      	movs	r2, #8
 80047de:	409a      	lsls	r2, r3
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e8:	f043 0201 	orr.w	r2, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f4:	2201      	movs	r2, #1
 80047f6:	409a      	lsls	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d012      	beq.n	8004826 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004812:	2201      	movs	r2, #1
 8004814:	409a      	lsls	r2, r3
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	f043 0202 	orr.w	r2, r3, #2
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482a:	2204      	movs	r2, #4
 800482c:	409a      	lsls	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4013      	ands	r3, r2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d012      	beq.n	800485c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	2204      	movs	r2, #4
 800484a:	409a      	lsls	r2, r3
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004854:	f043 0204 	orr.w	r2, r3, #4
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	2210      	movs	r2, #16
 8004862:	409a      	lsls	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d043      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d03c      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487e:	2210      	movs	r2, #16
 8004880:	409a      	lsls	r2, r3
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d018      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d108      	bne.n	80048b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d024      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	4798      	blx	r3
 80048b2:	e01f      	b.n	80048f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01b      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4798      	blx	r3
 80048c4:	e016      	b.n	80048f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d107      	bne.n	80048e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0208 	bic.w	r2, r2, #8
 80048e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f8:	2220      	movs	r2, #32
 80048fa:	409a      	lsls	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4013      	ands	r3, r2
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 808f 	beq.w	8004a24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8087 	beq.w	8004a24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491a:	2220      	movs	r2, #32
 800491c:	409a      	lsls	r2, r3
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b05      	cmp	r3, #5
 800492c:	d136      	bne.n	800499c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0216 	bic.w	r2, r2, #22
 800493c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695a      	ldr	r2, [r3, #20]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800494c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d103      	bne.n	800495e <HAL_DMA_IRQHandler+0x1da>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0208 	bic.w	r2, r2, #8
 800496c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004972:	223f      	movs	r2, #63	; 0x3f
 8004974:	409a      	lsls	r2, r3
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498e:	2b00      	cmp	r3, #0
 8004990:	d07e      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	4798      	blx	r3
        }
        return;
 800499a:	e079      	b.n	8004a90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01d      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10d      	bne.n	80049d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d031      	beq.n	8004a24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4798      	blx	r3
 80049c8:	e02c      	b.n	8004a24 <HAL_DMA_IRQHandler+0x2a0>
 80049ca:	bf00      	nop
 80049cc:	20000024 	.word	0x20000024
 80049d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d023      	beq.n	8004a24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	4798      	blx	r3
 80049e4:	e01e      	b.n	8004a24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10f      	bne.n	8004a14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0210 	bic.w	r2, r2, #16
 8004a02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d032      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d022      	beq.n	8004a7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2205      	movs	r2, #5
 8004a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	3301      	adds	r3, #1
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d307      	bcc.n	8004a6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f2      	bne.n	8004a50 <HAL_DMA_IRQHandler+0x2cc>
 8004a6a:	e000      	b.n	8004a6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
 8004a8e:	e000      	b.n	8004a92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a90:	bf00      	nop
    }
  }
}
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ab4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b40      	cmp	r3, #64	; 0x40
 8004ac4:	d108      	bne.n	8004ad8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ad6:	e007      	b.n	8004ae8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	60da      	str	r2, [r3, #12]
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	3b10      	subs	r3, #16
 8004b04:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <DMA_CalcBaseAndBitshift+0x64>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b0e:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <DMA_CalcBaseAndBitshift+0x68>)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d909      	bls.n	8004b36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	1d1a      	adds	r2, r3, #4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	659a      	str	r2, [r3, #88]	; 0x58
 8004b34:	e007      	b.n	8004b46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	aaaaaaab 	.word	0xaaaaaaab
 8004b5c:	0800bb70 	.word	0x0800bb70

08004b60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d11f      	bne.n	8004bba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d856      	bhi.n	8004c2e <DMA_CheckFifoParam+0xce>
 8004b80:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <DMA_CheckFifoParam+0x28>)
 8004b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b86:	bf00      	nop
 8004b88:	08004b99 	.word	0x08004b99
 8004b8c:	08004bab 	.word	0x08004bab
 8004b90:	08004b99 	.word	0x08004b99
 8004b94:	08004c2f 	.word	0x08004c2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d046      	beq.n	8004c32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ba8:	e043      	b.n	8004c32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bb2:	d140      	bne.n	8004c36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb8:	e03d      	b.n	8004c36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc2:	d121      	bne.n	8004c08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d837      	bhi.n	8004c3a <DMA_CheckFifoParam+0xda>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <DMA_CheckFifoParam+0x70>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004be1 	.word	0x08004be1
 8004bd4:	08004be7 	.word	0x08004be7
 8004bd8:	08004be1 	.word	0x08004be1
 8004bdc:	08004bf9 	.word	0x08004bf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	73fb      	strb	r3, [r7, #15]
      break;
 8004be4:	e030      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d025      	beq.n	8004c3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf6:	e022      	b.n	8004c3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c00:	d11f      	bne.n	8004c42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c06:	e01c      	b.n	8004c42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d903      	bls.n	8004c16 <DMA_CheckFifoParam+0xb6>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d003      	beq.n	8004c1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c14:	e018      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
      break;
 8004c1a:	e015      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00e      	beq.n	8004c46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c2c:	e00b      	b.n	8004c46 <DMA_CheckFifoParam+0xe6>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e00a      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c32:	bf00      	nop
 8004c34:	e008      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c36:	bf00      	nop
 8004c38:	e006      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c3a:	bf00      	nop
 8004c3c:	e004      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e002      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c46:	bf00      	nop
    }
  } 
  
  return status; 
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop

08004c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b089      	sub	sp, #36	; 0x24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	e159      	b.n	8004f28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c74:	2201      	movs	r2, #1
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4013      	ands	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	f040 8148 	bne.w	8004f22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d005      	beq.n	8004caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d130      	bne.n	8004d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 0201 	and.w	r2, r3, #1
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d017      	beq.n	8004d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	2203      	movs	r2, #3
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d123      	bne.n	8004d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	08da      	lsrs	r2, r3, #3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3208      	adds	r2, #8
 8004d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	220f      	movs	r2, #15
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	43db      	mvns	r3, r3
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4013      	ands	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	08da      	lsrs	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3208      	adds	r2, #8
 8004d96:	69b9      	ldr	r1, [r7, #24]
 8004d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	2203      	movs	r2, #3
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4013      	ands	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0203 	and.w	r2, r3, #3
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80a2 	beq.w	8004f22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	4b57      	ldr	r3, [pc, #348]	; (8004f40 <HAL_GPIO_Init+0x2e8>)
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	4a56      	ldr	r2, [pc, #344]	; (8004f40 <HAL_GPIO_Init+0x2e8>)
 8004de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dec:	6453      	str	r3, [r2, #68]	; 0x44
 8004dee:	4b54      	ldr	r3, [pc, #336]	; (8004f40 <HAL_GPIO_Init+0x2e8>)
 8004df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dfa:	4a52      	ldr	r2, [pc, #328]	; (8004f44 <HAL_GPIO_Init+0x2ec>)
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	089b      	lsrs	r3, r3, #2
 8004e00:	3302      	adds	r3, #2
 8004e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	220f      	movs	r2, #15
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a49      	ldr	r2, [pc, #292]	; (8004f48 <HAL_GPIO_Init+0x2f0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d019      	beq.n	8004e5a <HAL_GPIO_Init+0x202>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a48      	ldr	r2, [pc, #288]	; (8004f4c <HAL_GPIO_Init+0x2f4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_GPIO_Init+0x1fe>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a47      	ldr	r2, [pc, #284]	; (8004f50 <HAL_GPIO_Init+0x2f8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00d      	beq.n	8004e52 <HAL_GPIO_Init+0x1fa>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a46      	ldr	r2, [pc, #280]	; (8004f54 <HAL_GPIO_Init+0x2fc>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <HAL_GPIO_Init+0x1f6>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a45      	ldr	r2, [pc, #276]	; (8004f58 <HAL_GPIO_Init+0x300>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d101      	bne.n	8004e4a <HAL_GPIO_Init+0x1f2>
 8004e46:	2304      	movs	r3, #4
 8004e48:	e008      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e4a:	2307      	movs	r3, #7
 8004e4c:	e006      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e004      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e002      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	f002 0203 	and.w	r2, r2, #3
 8004e62:	0092      	lsls	r2, r2, #2
 8004e64:	4093      	lsls	r3, r2
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e6c:	4935      	ldr	r1, [pc, #212]	; (8004f44 <HAL_GPIO_Init+0x2ec>)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	089b      	lsrs	r3, r3, #2
 8004e72:	3302      	adds	r3, #2
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e7a:	4b38      	ldr	r3, [pc, #224]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e9e:	4a2f      	ldr	r2, [pc, #188]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ea4:	4b2d      	ldr	r3, [pc, #180]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ec8:	4a24      	ldr	r2, [pc, #144]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ece:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4013      	ands	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ef2:	4a1a      	ldr	r2, [pc, #104]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ef8:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	43db      	mvns	r3, r3
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4013      	ands	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f1c:	4a0f      	ldr	r2, [pc, #60]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	3301      	adds	r3, #1
 8004f26:	61fb      	str	r3, [r7, #28]
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b0f      	cmp	r3, #15
 8004f2c:	f67f aea2 	bls.w	8004c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	3724      	adds	r7, #36	; 0x24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40023800 	.word	0x40023800
 8004f44:	40013800 	.word	0x40013800
 8004f48:	40020000 	.word	0x40020000
 8004f4c:	40020400 	.word	0x40020400
 8004f50:	40020800 	.word	0x40020800
 8004f54:	40020c00 	.word	0x40020c00
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40013c00 	.word	0x40013c00

08004f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f70:	787b      	ldrb	r3, [r7, #1]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f76:	887a      	ldrh	r2, [r7, #2]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f7c:	e003      	b.n	8004f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f7e:	887b      	ldrh	r3, [r7, #2]
 8004f80:	041a      	lsls	r2, r3, #16
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	619a      	str	r2, [r3, #24]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e267      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d075      	beq.n	800509e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fb2:	4b88      	ldr	r3, [pc, #544]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d00c      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fbe:	4b85      	ldr	r3, [pc, #532]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d112      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fca:	4b82      	ldr	r3, [pc, #520]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd8:	4b7e      	ldr	r3, [pc, #504]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d05b      	beq.n	800509c <HAL_RCC_OscConfig+0x108>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d157      	bne.n	800509c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e242      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff8:	d106      	bne.n	8005008 <HAL_RCC_OscConfig+0x74>
 8004ffa:	4b76      	ldr	r3, [pc, #472]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a75      	ldr	r2, [pc, #468]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	e01d      	b.n	8005044 <HAL_RCC_OscConfig+0xb0>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005010:	d10c      	bne.n	800502c <HAL_RCC_OscConfig+0x98>
 8005012:	4b70      	ldr	r3, [pc, #448]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a6f      	ldr	r2, [pc, #444]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	4b6d      	ldr	r3, [pc, #436]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a6c      	ldr	r2, [pc, #432]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e00b      	b.n	8005044 <HAL_RCC_OscConfig+0xb0>
 800502c:	4b69      	ldr	r3, [pc, #420]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a68      	ldr	r2, [pc, #416]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	4b66      	ldr	r3, [pc, #408]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a65      	ldr	r2, [pc, #404]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 800503e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d013      	beq.n	8005074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504c:	f7ff f8c0 	bl	80041d0 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005054:	f7ff f8bc 	bl	80041d0 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b64      	cmp	r3, #100	; 0x64
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e207      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005066:	4b5b      	ldr	r3, [pc, #364]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f0      	beq.n	8005054 <HAL_RCC_OscConfig+0xc0>
 8005072:	e014      	b.n	800509e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005074:	f7ff f8ac 	bl	80041d0 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800507c:	f7ff f8a8 	bl	80041d0 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b64      	cmp	r3, #100	; 0x64
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e1f3      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800508e:	4b51      	ldr	r3, [pc, #324]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <HAL_RCC_OscConfig+0xe8>
 800509a:	e000      	b.n	800509e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800509c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d063      	beq.n	8005172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050aa:	4b4a      	ldr	r3, [pc, #296]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050b6:	4b47      	ldr	r3, [pc, #284]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d11c      	bne.n	80050fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050c2:	4b44      	ldr	r3, [pc, #272]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d116      	bne.n	80050fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ce:	4b41      	ldr	r3, [pc, #260]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <HAL_RCC_OscConfig+0x152>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d001      	beq.n	80050e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e1c7      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e6:	4b3b      	ldr	r3, [pc, #236]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	4937      	ldr	r1, [pc, #220]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fa:	e03a      	b.n	8005172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d020      	beq.n	8005146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005104:	4b34      	ldr	r3, [pc, #208]	; (80051d8 <HAL_RCC_OscConfig+0x244>)
 8005106:	2201      	movs	r2, #1
 8005108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510a:	f7ff f861 	bl	80041d0 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005112:	f7ff f85d 	bl	80041d0 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e1a8      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005124:	4b2b      	ldr	r3, [pc, #172]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005130:	4b28      	ldr	r3, [pc, #160]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	4925      	ldr	r1, [pc, #148]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005140:	4313      	orrs	r3, r2
 8005142:	600b      	str	r3, [r1, #0]
 8005144:	e015      	b.n	8005172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005146:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <HAL_RCC_OscConfig+0x244>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7ff f840 	bl	80041d0 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005154:	f7ff f83c 	bl	80041d0 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e187      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005166:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d036      	beq.n	80051ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005186:	4b15      	ldr	r3, [pc, #84]	; (80051dc <HAL_RCC_OscConfig+0x248>)
 8005188:	2201      	movs	r2, #1
 800518a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518c:	f7ff f820 	bl	80041d0 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005194:	f7ff f81c 	bl	80041d0 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e167      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051a6:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <HAL_RCC_OscConfig+0x240>)
 80051a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0x200>
 80051b2:	e01b      	b.n	80051ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b4:	4b09      	ldr	r3, [pc, #36]	; (80051dc <HAL_RCC_OscConfig+0x248>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ba:	f7ff f809 	bl	80041d0 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c0:	e00e      	b.n	80051e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c2:	f7ff f805 	bl	80041d0 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d907      	bls.n	80051e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e150      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
 80051d4:	40023800 	.word	0x40023800
 80051d8:	42470000 	.word	0x42470000
 80051dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e0:	4b88      	ldr	r3, [pc, #544]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 80051e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1ea      	bne.n	80051c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8097 	beq.w	8005328 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fa:	2300      	movs	r3, #0
 80051fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fe:	4b81      	ldr	r3, [pc, #516]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10f      	bne.n	800522a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520a:	2300      	movs	r3, #0
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	4b7d      	ldr	r3, [pc, #500]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	4a7c      	ldr	r2, [pc, #496]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005218:	6413      	str	r3, [r2, #64]	; 0x40
 800521a:	4b7a      	ldr	r3, [pc, #488]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522a:	4b77      	ldr	r3, [pc, #476]	; (8005408 <HAL_RCC_OscConfig+0x474>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d118      	bne.n	8005268 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005236:	4b74      	ldr	r3, [pc, #464]	; (8005408 <HAL_RCC_OscConfig+0x474>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a73      	ldr	r2, [pc, #460]	; (8005408 <HAL_RCC_OscConfig+0x474>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005242:	f7fe ffc5 	bl	80041d0 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524a:	f7fe ffc1 	bl	80041d0 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e10c      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525c:	4b6a      	ldr	r3, [pc, #424]	; (8005408 <HAL_RCC_OscConfig+0x474>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d106      	bne.n	800527e <HAL_RCC_OscConfig+0x2ea>
 8005270:	4b64      	ldr	r3, [pc, #400]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005274:	4a63      	ldr	r2, [pc, #396]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	6713      	str	r3, [r2, #112]	; 0x70
 800527c:	e01c      	b.n	80052b8 <HAL_RCC_OscConfig+0x324>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b05      	cmp	r3, #5
 8005284:	d10c      	bne.n	80052a0 <HAL_RCC_OscConfig+0x30c>
 8005286:	4b5f      	ldr	r3, [pc, #380]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	4a5e      	ldr	r2, [pc, #376]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 800528c:	f043 0304 	orr.w	r3, r3, #4
 8005290:	6713      	str	r3, [r2, #112]	; 0x70
 8005292:	4b5c      	ldr	r3, [pc, #368]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	4a5b      	ldr	r2, [pc, #364]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	6713      	str	r3, [r2, #112]	; 0x70
 800529e:	e00b      	b.n	80052b8 <HAL_RCC_OscConfig+0x324>
 80052a0:	4b58      	ldr	r3, [pc, #352]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 80052a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a4:	4a57      	ldr	r2, [pc, #348]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 80052a6:	f023 0301 	bic.w	r3, r3, #1
 80052aa:	6713      	str	r3, [r2, #112]	; 0x70
 80052ac:	4b55      	ldr	r3, [pc, #340]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 80052ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b0:	4a54      	ldr	r2, [pc, #336]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 80052b2:	f023 0304 	bic.w	r3, r3, #4
 80052b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fe ff86 	bl	80041d0 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c6:	e00a      	b.n	80052de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c8:	f7fe ff82 	bl	80041d0 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e0cb      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052de:	4b49      	ldr	r3, [pc, #292]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0ee      	beq.n	80052c8 <HAL_RCC_OscConfig+0x334>
 80052ea:	e014      	b.n	8005316 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ec:	f7fe ff70 	bl	80041d0 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f2:	e00a      	b.n	800530a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f4:	f7fe ff6c 	bl	80041d0 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e0b5      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800530a:	4b3e      	ldr	r3, [pc, #248]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1ee      	bne.n	80052f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005316:	7dfb      	ldrb	r3, [r7, #23]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d105      	bne.n	8005328 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531c:	4b39      	ldr	r3, [pc, #228]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	4a38      	ldr	r2, [pc, #224]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 8005322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005326:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80a1 	beq.w	8005474 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005332:	4b34      	ldr	r3, [pc, #208]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
 800533a:	2b08      	cmp	r3, #8
 800533c:	d05c      	beq.n	80053f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d141      	bne.n	80053ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005346:	4b31      	ldr	r3, [pc, #196]	; (800540c <HAL_RCC_OscConfig+0x478>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534c:	f7fe ff40 	bl	80041d0 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005354:	f7fe ff3c 	bl	80041d0 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e087      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005366:	4b27      	ldr	r3, [pc, #156]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	019b      	lsls	r3, r3, #6
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	3b01      	subs	r3, #1
 800538c:	041b      	lsls	r3, r3, #16
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	061b      	lsls	r3, r3, #24
 8005396:	491b      	ldr	r1, [pc, #108]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 8005398:	4313      	orrs	r3, r2
 800539a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800539c:	4b1b      	ldr	r3, [pc, #108]	; (800540c <HAL_RCC_OscConfig+0x478>)
 800539e:	2201      	movs	r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a2:	f7fe ff15 	bl	80041d0 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053aa:	f7fe ff11 	bl	80041d0 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e05c      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053bc:	4b11      	ldr	r3, [pc, #68]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x416>
 80053c8:	e054      	b.n	8005474 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ca:	4b10      	ldr	r3, [pc, #64]	; (800540c <HAL_RCC_OscConfig+0x478>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f7fe fefe 	bl	80041d0 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fe fefa 	bl	80041d0 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e045      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <HAL_RCC_OscConfig+0x470>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x444>
 80053f6:	e03d      	b.n	8005474 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d107      	bne.n	8005410 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e038      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
 8005404:	40023800 	.word	0x40023800
 8005408:	40007000 	.word	0x40007000
 800540c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005410:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <HAL_RCC_OscConfig+0x4ec>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d028      	beq.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d121      	bne.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005436:	429a      	cmp	r2, r3
 8005438:	d11a      	bne.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005440:	4013      	ands	r3, r2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005448:	4293      	cmp	r3, r2
 800544a:	d111      	bne.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	3b01      	subs	r3, #1
 800545a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800545c:	429a      	cmp	r2, r3
 800545e:	d107      	bne.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d001      	beq.n	8005474 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40023800 	.word	0x40023800

08005484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0cc      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005498:	4b68      	ldr	r3, [pc, #416]	; (800563c <HAL_RCC_ClockConfig+0x1b8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d90c      	bls.n	80054c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b65      	ldr	r3, [pc, #404]	; (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ae:	4b63      	ldr	r3, [pc, #396]	; (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0b8      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d020      	beq.n	800550e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054d8:	4b59      	ldr	r3, [pc, #356]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	4a58      	ldr	r2, [pc, #352]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054f0:	4b53      	ldr	r3, [pc, #332]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4a52      	ldr	r2, [pc, #328]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054fc:	4b50      	ldr	r3, [pc, #320]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	494d      	ldr	r1, [pc, #308]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d044      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d107      	bne.n	8005532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005522:	4b47      	ldr	r3, [pc, #284]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d119      	bne.n	8005562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e07f      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d003      	beq.n	8005542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800553e:	2b03      	cmp	r3, #3
 8005540:	d107      	bne.n	8005552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005542:	4b3f      	ldr	r3, [pc, #252]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e06f      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005552:	4b3b      	ldr	r3, [pc, #236]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e067      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005562:	4b37      	ldr	r3, [pc, #220]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f023 0203 	bic.w	r2, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	4934      	ldr	r1, [pc, #208]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005570:	4313      	orrs	r3, r2
 8005572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005574:	f7fe fe2c 	bl	80041d0 <HAL_GetTick>
 8005578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557a:	e00a      	b.n	8005592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800557c:	f7fe fe28 	bl	80041d0 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	f241 3288 	movw	r2, #5000	; 0x1388
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e04f      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	4b2b      	ldr	r3, [pc, #172]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 020c 	and.w	r2, r3, #12
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d1eb      	bne.n	800557c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055a4:	4b25      	ldr	r3, [pc, #148]	; (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d20c      	bcs.n	80055cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b2:	4b22      	ldr	r3, [pc, #136]	; (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ba:	4b20      	ldr	r3, [pc, #128]	; (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e032      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055d8:	4b19      	ldr	r3, [pc, #100]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4916      	ldr	r1, [pc, #88]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055f6:	4b12      	ldr	r3, [pc, #72]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	490e      	ldr	r1, [pc, #56]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	4313      	orrs	r3, r2
 8005608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800560a:	f000 f821 	bl	8005650 <HAL_RCC_GetSysClockFreq>
 800560e:	4602      	mov	r2, r0
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	490a      	ldr	r1, [pc, #40]	; (8005644 <HAL_RCC_ClockConfig+0x1c0>)
 800561c:	5ccb      	ldrb	r3, [r1, r3]
 800561e:	fa22 f303 	lsr.w	r3, r2, r3
 8005622:	4a09      	ldr	r2, [pc, #36]	; (8005648 <HAL_RCC_ClockConfig+0x1c4>)
 8005624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005626:	4b09      	ldr	r3, [pc, #36]	; (800564c <HAL_RCC_ClockConfig+0x1c8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fd8c 	bl	8004148 <HAL_InitTick>

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40023c00 	.word	0x40023c00
 8005640:	40023800 	.word	0x40023800
 8005644:	0800bb58 	.word	0x0800bb58
 8005648:	20000024 	.word	0x20000024
 800564c:	20000028 	.word	0x20000028

08005650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005654:	b090      	sub	sp, #64	; 0x40
 8005656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	637b      	str	r3, [r7, #52]	; 0x34
 800565c:	2300      	movs	r3, #0
 800565e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005660:	2300      	movs	r3, #0
 8005662:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005668:	4b59      	ldr	r3, [pc, #356]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f003 030c 	and.w	r3, r3, #12
 8005670:	2b08      	cmp	r3, #8
 8005672:	d00d      	beq.n	8005690 <HAL_RCC_GetSysClockFreq+0x40>
 8005674:	2b08      	cmp	r3, #8
 8005676:	f200 80a1 	bhi.w	80057bc <HAL_RCC_GetSysClockFreq+0x16c>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_RCC_GetSysClockFreq+0x34>
 800567e:	2b04      	cmp	r3, #4
 8005680:	d003      	beq.n	800568a <HAL_RCC_GetSysClockFreq+0x3a>
 8005682:	e09b      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005684:	4b53      	ldr	r3, [pc, #332]	; (80057d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005686:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005688:	e09b      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800568a:	4b53      	ldr	r3, [pc, #332]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800568c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800568e:	e098      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005690:	4b4f      	ldr	r3, [pc, #316]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005698:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800569a:	4b4d      	ldr	r3, [pc, #308]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d028      	beq.n	80056f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a6:	4b4a      	ldr	r3, [pc, #296]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	099b      	lsrs	r3, r3, #6
 80056ac:	2200      	movs	r2, #0
 80056ae:	623b      	str	r3, [r7, #32]
 80056b0:	627a      	str	r2, [r7, #36]	; 0x24
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80056b8:	2100      	movs	r1, #0
 80056ba:	4b47      	ldr	r3, [pc, #284]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80056bc:	fb03 f201 	mul.w	r2, r3, r1
 80056c0:	2300      	movs	r3, #0
 80056c2:	fb00 f303 	mul.w	r3, r0, r3
 80056c6:	4413      	add	r3, r2
 80056c8:	4a43      	ldr	r2, [pc, #268]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80056ca:	fba0 1202 	umull	r1, r2, r0, r2
 80056ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056d0:	460a      	mov	r2, r1
 80056d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80056d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d6:	4413      	add	r3, r2
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056dc:	2200      	movs	r2, #0
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	61fa      	str	r2, [r7, #28]
 80056e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80056ea:	f7fb fa7d 	bl	8000be8 <__aeabi_uldivmod>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4613      	mov	r3, r2
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f6:	e053      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f8:	4b35      	ldr	r3, [pc, #212]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	099b      	lsrs	r3, r3, #6
 80056fe:	2200      	movs	r2, #0
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	617a      	str	r2, [r7, #20]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800570a:	f04f 0b00 	mov.w	fp, #0
 800570e:	4652      	mov	r2, sl
 8005710:	465b      	mov	r3, fp
 8005712:	f04f 0000 	mov.w	r0, #0
 8005716:	f04f 0100 	mov.w	r1, #0
 800571a:	0159      	lsls	r1, r3, #5
 800571c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005720:	0150      	lsls	r0, r2, #5
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	ebb2 080a 	subs.w	r8, r2, sl
 800572a:	eb63 090b 	sbc.w	r9, r3, fp
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800573a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800573e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005742:	ebb2 0408 	subs.w	r4, r2, r8
 8005746:	eb63 0509 	sbc.w	r5, r3, r9
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	00eb      	lsls	r3, r5, #3
 8005754:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005758:	00e2      	lsls	r2, r4, #3
 800575a:	4614      	mov	r4, r2
 800575c:	461d      	mov	r5, r3
 800575e:	eb14 030a 	adds.w	r3, r4, sl
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	eb45 030b 	adc.w	r3, r5, fp
 8005768:	607b      	str	r3, [r7, #4]
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005776:	4629      	mov	r1, r5
 8005778:	028b      	lsls	r3, r1, #10
 800577a:	4621      	mov	r1, r4
 800577c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005780:	4621      	mov	r1, r4
 8005782:	028a      	lsls	r2, r1, #10
 8005784:	4610      	mov	r0, r2
 8005786:	4619      	mov	r1, r3
 8005788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578a:	2200      	movs	r2, #0
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	60fa      	str	r2, [r7, #12]
 8005790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005794:	f7fb fa28 	bl	8000be8 <__aeabi_uldivmod>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4613      	mov	r3, r2
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	0c1b      	lsrs	r3, r3, #16
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	3301      	adds	r3, #1
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80057b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057ba:	e002      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80057be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3740      	adds	r7, #64	; 0x40
 80057c8:	46bd      	mov	sp, r7
 80057ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ce:	bf00      	nop
 80057d0:	40023800 	.word	0x40023800
 80057d4:	00f42400 	.word	0x00f42400
 80057d8:	017d7840 	.word	0x017d7840

080057dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057e0:	4b03      	ldr	r3, [pc, #12]	; (80057f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057e2:	681b      	ldr	r3, [r3, #0]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	20000024 	.word	0x20000024

080057f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057f8:	f7ff fff0 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 80057fc:	4602      	mov	r2, r0
 80057fe:	4b05      	ldr	r3, [pc, #20]	; (8005814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	0a9b      	lsrs	r3, r3, #10
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	4903      	ldr	r1, [pc, #12]	; (8005818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800580a:	5ccb      	ldrb	r3, [r1, r3]
 800580c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005810:	4618      	mov	r0, r3
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40023800 	.word	0x40023800
 8005818:	0800bb68 	.word	0x0800bb68

0800581c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005820:	f7ff ffdc 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 8005824:	4602      	mov	r2, r0
 8005826:	4b05      	ldr	r3, [pc, #20]	; (800583c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	0b5b      	lsrs	r3, r3, #13
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	4903      	ldr	r1, [pc, #12]	; (8005840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005832:	5ccb      	ldrb	r3, [r1, r3]
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005838:	4618      	mov	r0, r3
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40023800 	.word	0x40023800
 8005840:	0800bb68 	.word	0x0800bb68

08005844 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e07b      	b.n	800594e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b00      	cmp	r3, #0
 800585c:	d108      	bne.n	8005870 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005866:	d009      	beq.n	800587c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	61da      	str	r2, [r3, #28]
 800586e:	e005      	b.n	800587c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fd fe28 	bl	80034ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005900:	ea42 0103 	orr.w	r1, r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	0c1b      	lsrs	r3, r3, #16
 800591a:	f003 0104 	and.w	r1, r3, #4
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	f003 0210 	and.w	r2, r3, #16
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800593c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b088      	sub	sp, #32
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	603b      	str	r3, [r7, #0]
 8005962:	4613      	mov	r3, r2
 8005964:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_SPI_Transmit+0x22>
 8005974:	2302      	movs	r3, #2
 8005976:	e12d      	b.n	8005bd4 <HAL_SPI_Transmit+0x27e>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005980:	f7fe fc26 	bl	80041d0 <HAL_GetTick>
 8005984:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005986:	88fb      	ldrh	r3, [r7, #6]
 8005988:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b01      	cmp	r3, #1
 8005994:	d002      	beq.n	800599c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005996:	2302      	movs	r3, #2
 8005998:	77fb      	strb	r3, [r7, #31]
    goto error;
 800599a:	e116      	b.n	8005bca <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_SPI_Transmit+0x52>
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059ac:	e10d      	b.n	8005bca <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2203      	movs	r2, #3
 80059b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	88fa      	ldrh	r2, [r7, #6]
 80059cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059f4:	d10f      	bne.n	8005a16 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a20:	2b40      	cmp	r3, #64	; 0x40
 8005a22:	d007      	beq.n	8005a34 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a3c:	d14f      	bne.n	8005ade <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_SPI_Transmit+0xf6>
 8005a46:	8afb      	ldrh	r3, [r7, #22]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d142      	bne.n	8005ad2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	881a      	ldrh	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	1c9a      	adds	r2, r3, #2
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a70:	e02f      	b.n	8005ad2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d112      	bne.n	8005aa6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	881a      	ldrh	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	1c9a      	adds	r2, r3, #2
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005aa4:	e015      	b.n	8005ad2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aa6:	f7fe fb93 	bl	80041d0 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d803      	bhi.n	8005abe <HAL_SPI_Transmit+0x168>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d102      	bne.n	8005ac4 <HAL_SPI_Transmit+0x16e>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d106      	bne.n	8005ad2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005ad0:	e07b      	b.n	8005bca <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1ca      	bne.n	8005a72 <HAL_SPI_Transmit+0x11c>
 8005adc:	e050      	b.n	8005b80 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_SPI_Transmit+0x196>
 8005ae6:	8afb      	ldrh	r3, [r7, #22]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d144      	bne.n	8005b76 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	7812      	ldrb	r2, [r2, #0]
 8005af8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b12:	e030      	b.n	8005b76 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d113      	bne.n	8005b4a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	7812      	ldrb	r2, [r2, #0]
 8005b2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b48:	e015      	b.n	8005b76 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b4a:	f7fe fb41 	bl	80041d0 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d803      	bhi.n	8005b62 <HAL_SPI_Transmit+0x20c>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d102      	bne.n	8005b68 <HAL_SPI_Transmit+0x212>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d106      	bne.n	8005b76 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005b74:	e029      	b.n	8005bca <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1c9      	bne.n	8005b14 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fb01 	bl	800618c <SPI_EndRxTxTransaction>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2220      	movs	r2, #32
 8005b94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	613b      	str	r3, [r7, #16]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	613b      	str	r3, [r7, #16]
 8005bb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e003      	b.n	8005bca <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3720      	adds	r7, #32
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_SPI_Transmit_DMA+0x20>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e097      	b.n	8005d2c <HAL_SPI_Transmit_DMA+0x150>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d002      	beq.n	8005c16 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
 8005c12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c14:	e085      	b.n	8005d22 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <HAL_SPI_Transmit_DMA+0x46>
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c26:	e07c      	b.n	8005d22 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	88fa      	ldrh	r2, [r7, #6]
 8005c40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	88fa      	ldrh	r2, [r7, #6]
 8005c46:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c6e:	d10f      	bne.n	8005c90 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c94:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <HAL_SPI_Transmit_DMA+0x158>)
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9c:	4a26      	ldr	r2, [pc, #152]	; (8005d38 <HAL_SPI_Transmit_DMA+0x15c>)
 8005c9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca4:	4a25      	ldr	r2, [pc, #148]	; (8005d3c <HAL_SPI_Transmit_DMA+0x160>)
 8005ca6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cac:	2200      	movs	r2, #0
 8005cae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb8:	4619      	mov	r1, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005cc8:	f7fe fc72 	bl	80045b0 <HAL_DMA_Start_IT>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd6:	f043 0210 	orr.w	r2, r3, #16
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005ce2:	e01e      	b.n	8005d22 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cee:	2b40      	cmp	r3, #64	; 0x40
 8005cf0:	d007      	beq.n	8005d02 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d00:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0220 	orr.w	r2, r2, #32
 8005d10:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0202 	orr.w	r2, r2, #2
 8005d20:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	08005ff9 	.word	0x08005ff9
 8005d38:	08005f51 	.word	0x08005f51
 8005d3c:	08006015 	.word	0x08006015

08005d40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10e      	bne.n	8005d80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d009      	beq.n	8005d80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3
    return;
 8005d7e:	e0ce      	b.n	8005f1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <HAL_SPI_IRQHandler+0x5e>
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	4798      	blx	r3
    return;
 8005d9c:	e0bf      	b.n	8005f1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <HAL_SPI_IRQHandler+0x7e>
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d105      	bne.n	8005dbe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80b0 	beq.w	8005f1e <HAL_SPI_IRQHandler+0x1de>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80aa 	beq.w	8005f1e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d023      	beq.n	8005e1c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d011      	beq.n	8005e04 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	f043 0204 	orr.w	r2, r3, #4
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	e00b      	b.n	8005e1c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e04:	2300      	movs	r3, #0
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	693b      	ldr	r3, [r7, #16]
        return;
 8005e1a:	e080      	b.n	8005f1e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d014      	beq.n	8005e50 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	f043 0201 	orr.w	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00c      	beq.n	8005e74 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5e:	f043 0208 	orr.w	r2, r3, #8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e66:	2300      	movs	r3, #0
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	60bb      	str	r3, [r7, #8]
 8005e72:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d04f      	beq.n	8005f1c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <HAL_SPI_IRQHandler+0x168>
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d034      	beq.n	8005f12 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0203 	bic.w	r2, r2, #3
 8005eb6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d011      	beq.n	8005ee4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec4:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <HAL_SPI_IRQHandler+0x1e4>)
 8005ec6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fe fc37 	bl	8004740 <HAL_DMA_Abort_IT>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005edc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d016      	beq.n	8005f1a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef0:	4a0c      	ldr	r2, [pc, #48]	; (8005f24 <HAL_SPI_IRQHandler+0x1e4>)
 8005ef2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fe fc21 	bl	8004740 <HAL_DMA_Abort_IT>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005f10:	e003      	b.n	8005f1a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f812 	bl	8005f3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f18:	e000      	b.n	8005f1c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005f1a:	bf00      	nop
    return;
 8005f1c:	bf00      	nop
  }
}
 8005f1e:	3720      	adds	r7, #32
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	08006055 	.word	0x08006055

08005f28 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f5e:	f7fe f937 	bl	80041d0 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f72:	d03b      	beq.n	8005fec <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0220 	bic.w	r2, r2, #32
 8005f82:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0202 	bic.w	r2, r2, #2
 8005f92:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	2164      	movs	r1, #100	; 0x64
 8005f98:	6978      	ldr	r0, [r7, #20]
 8005f9a:	f000 f8f7 	bl	800618c <SPI_EndRxTxTransaction>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa8:	f043 0220 	orr.w	r2, r3, #32
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005fe4:	6978      	ldr	r0, [r7, #20]
 8005fe6:	f7ff ffa9 	bl	8005f3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005fea:	e002      	b.n	8005ff2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005fec:	6978      	ldr	r0, [r7, #20]
 8005fee:	f7fb fd67 	bl	8001ac0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f7ff ff8e 	bl	8005f28 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0203 	bic.w	r2, r2, #3
 8006030:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006036:	f043 0210 	orr.w	r2, r3, #16
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff ff78 	bl	8005f3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f7ff ff64 	bl	8005f3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006074:	bf00      	nop
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800608c:	f7fe f8a0 	bl	80041d0 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	4413      	add	r3, r2
 800609a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800609c:	f7fe f898 	bl	80041d0 <HAL_GetTick>
 80060a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060a2:	4b39      	ldr	r3, [pc, #228]	; (8006188 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	015b      	lsls	r3, r3, #5
 80060a8:	0d1b      	lsrs	r3, r3, #20
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	fb02 f303 	mul.w	r3, r2, r3
 80060b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060b2:	e054      	b.n	800615e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ba:	d050      	beq.n	800615e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060bc:	f7fe f888 	bl	80041d0 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d902      	bls.n	80060d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d13d      	bne.n	800614e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ea:	d111      	bne.n	8006110 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f4:	d004      	beq.n	8006100 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060fe:	d107      	bne.n	8006110 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800610e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006118:	d10f      	bne.n	800613a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006138:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e017      	b.n	800617e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	3b01      	subs	r3, #1
 800615c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4013      	ands	r3, r2
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	bf0c      	ite	eq
 800616e:	2301      	moveq	r3, #1
 8006170:	2300      	movne	r3, #0
 8006172:	b2db      	uxtb	r3, r3
 8006174:	461a      	mov	r2, r3
 8006176:	79fb      	ldrb	r3, [r7, #7]
 8006178:	429a      	cmp	r2, r3
 800617a:	d19b      	bne.n	80060b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3720      	adds	r7, #32
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000024 	.word	0x20000024

0800618c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2201      	movs	r2, #1
 80061a0:	2102      	movs	r1, #2
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff ff6a 	bl	800607c <SPI_WaitFlagStateUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d007      	beq.n	80061be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b2:	f043 0220 	orr.w	r2, r3, #32
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e032      	b.n	8006224 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061be:	4b1b      	ldr	r3, [pc, #108]	; (800622c <SPI_EndRxTxTransaction+0xa0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <SPI_EndRxTxTransaction+0xa4>)
 80061c4:	fba2 2303 	umull	r2, r3, r2, r3
 80061c8:	0d5b      	lsrs	r3, r3, #21
 80061ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061ce:	fb02 f303 	mul.w	r3, r2, r3
 80061d2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061dc:	d112      	bne.n	8006204 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2200      	movs	r2, #0
 80061e6:	2180      	movs	r1, #128	; 0x80
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7ff ff47 	bl	800607c <SPI_WaitFlagStateUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d016      	beq.n	8006222 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f8:	f043 0220 	orr.w	r2, r3, #32
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e00f      	b.n	8006224 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	3b01      	subs	r3, #1
 800620e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621a:	2b80      	cmp	r3, #128	; 0x80
 800621c:	d0f2      	beq.n	8006204 <SPI_EndRxTxTransaction+0x78>
 800621e:	e000      	b.n	8006222 <SPI_EndRxTxTransaction+0x96>
        break;
 8006220:	bf00      	nop
  }

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20000024 	.word	0x20000024
 8006230:	165e9f81 	.word	0x165e9f81

08006234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e041      	b.n	80062ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fd f9c8 	bl	80035f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f000 fe88 	bl	8006f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
	...

080062d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d001      	beq.n	80062ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e03c      	b.n	8006366 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1e      	ldr	r2, [pc, #120]	; (8006374 <HAL_TIM_Base_Start+0xa0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d018      	beq.n	8006330 <HAL_TIM_Base_Start+0x5c>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006306:	d013      	beq.n	8006330 <HAL_TIM_Base_Start+0x5c>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a1a      	ldr	r2, [pc, #104]	; (8006378 <HAL_TIM_Base_Start+0xa4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00e      	beq.n	8006330 <HAL_TIM_Base_Start+0x5c>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a19      	ldr	r2, [pc, #100]	; (800637c <HAL_TIM_Base_Start+0xa8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d009      	beq.n	8006330 <HAL_TIM_Base_Start+0x5c>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a17      	ldr	r2, [pc, #92]	; (8006380 <HAL_TIM_Base_Start+0xac>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d004      	beq.n	8006330 <HAL_TIM_Base_Start+0x5c>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a16      	ldr	r2, [pc, #88]	; (8006384 <HAL_TIM_Base_Start+0xb0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d111      	bne.n	8006354 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b06      	cmp	r3, #6
 8006340:	d010      	beq.n	8006364 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006352:	e007      	b.n	8006364 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	40010000 	.word	0x40010000
 8006378:	40000400 	.word	0x40000400
 800637c:	40000800 	.word	0x40000800
 8006380:	40000c00 	.word	0x40000c00
 8006384:	40014000 	.word	0x40014000

08006388 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e041      	b.n	800641e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d106      	bne.n	80063b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f839 	bl	8006426 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f000 fdde 	bl	8006f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d109      	bne.n	8006460 <HAL_TIM_PWM_Start+0x24>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b01      	cmp	r3, #1
 8006456:	bf14      	ite	ne
 8006458:	2301      	movne	r3, #1
 800645a:	2300      	moveq	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	e022      	b.n	80064a6 <HAL_TIM_PWM_Start+0x6a>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b04      	cmp	r3, #4
 8006464:	d109      	bne.n	800647a <HAL_TIM_PWM_Start+0x3e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b01      	cmp	r3, #1
 8006470:	bf14      	ite	ne
 8006472:	2301      	movne	r3, #1
 8006474:	2300      	moveq	r3, #0
 8006476:	b2db      	uxtb	r3, r3
 8006478:	e015      	b.n	80064a6 <HAL_TIM_PWM_Start+0x6a>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b08      	cmp	r3, #8
 800647e:	d109      	bne.n	8006494 <HAL_TIM_PWM_Start+0x58>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b01      	cmp	r3, #1
 800648a:	bf14      	ite	ne
 800648c:	2301      	movne	r3, #1
 800648e:	2300      	moveq	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	e008      	b.n	80064a6 <HAL_TIM_PWM_Start+0x6a>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	bf14      	ite	ne
 80064a0:	2301      	movne	r3, #1
 80064a2:	2300      	moveq	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e068      	b.n	8006580 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d104      	bne.n	80064be <HAL_TIM_PWM_Start+0x82>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064bc:	e013      	b.n	80064e6 <HAL_TIM_PWM_Start+0xaa>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d104      	bne.n	80064ce <HAL_TIM_PWM_Start+0x92>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064cc:	e00b      	b.n	80064e6 <HAL_TIM_PWM_Start+0xaa>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d104      	bne.n	80064de <HAL_TIM_PWM_Start+0xa2>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064dc:	e003      	b.n	80064e6 <HAL_TIM_PWM_Start+0xaa>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2202      	movs	r2, #2
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2201      	movs	r2, #1
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 f91a 	bl	8007728 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a23      	ldr	r2, [pc, #140]	; (8006588 <HAL_TIM_PWM_Start+0x14c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d107      	bne.n	800650e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800650c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1d      	ldr	r2, [pc, #116]	; (8006588 <HAL_TIM_PWM_Start+0x14c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d018      	beq.n	800654a <HAL_TIM_PWM_Start+0x10e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006520:	d013      	beq.n	800654a <HAL_TIM_PWM_Start+0x10e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a19      	ldr	r2, [pc, #100]	; (800658c <HAL_TIM_PWM_Start+0x150>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00e      	beq.n	800654a <HAL_TIM_PWM_Start+0x10e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a17      	ldr	r2, [pc, #92]	; (8006590 <HAL_TIM_PWM_Start+0x154>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d009      	beq.n	800654a <HAL_TIM_PWM_Start+0x10e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a16      	ldr	r2, [pc, #88]	; (8006594 <HAL_TIM_PWM_Start+0x158>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_TIM_PWM_Start+0x10e>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a14      	ldr	r2, [pc, #80]	; (8006598 <HAL_TIM_PWM_Start+0x15c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d111      	bne.n	800656e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b06      	cmp	r3, #6
 800655a:	d010      	beq.n	800657e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656c:	e007      	b.n	800657e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0201 	orr.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	40010000 	.word	0x40010000
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40014000 	.word	0x40014000

0800659c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e041      	b.n	8006632 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f839 	bl	800663a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3304      	adds	r3, #4
 80065d8:	4619      	mov	r1, r3
 80065da:	4610      	mov	r0, r2
 80065dc:	f000 fcd4 	bl	8006f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
	...

08006650 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d104      	bne.n	800666e <HAL_TIM_IC_Start_IT+0x1e>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800666a:	b2db      	uxtb	r3, r3
 800666c:	e013      	b.n	8006696 <HAL_TIM_IC_Start_IT+0x46>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b04      	cmp	r3, #4
 8006672:	d104      	bne.n	800667e <HAL_TIM_IC_Start_IT+0x2e>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800667a:	b2db      	uxtb	r3, r3
 800667c:	e00b      	b.n	8006696 <HAL_TIM_IC_Start_IT+0x46>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b08      	cmp	r3, #8
 8006682:	d104      	bne.n	800668e <HAL_TIM_IC_Start_IT+0x3e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800668a:	b2db      	uxtb	r3, r3
 800668c:	e003      	b.n	8006696 <HAL_TIM_IC_Start_IT+0x46>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006694:	b2db      	uxtb	r3, r3
 8006696:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d104      	bne.n	80066a8 <HAL_TIM_IC_Start_IT+0x58>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	e013      	b.n	80066d0 <HAL_TIM_IC_Start_IT+0x80>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d104      	bne.n	80066b8 <HAL_TIM_IC_Start_IT+0x68>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	e00b      	b.n	80066d0 <HAL_TIM_IC_Start_IT+0x80>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d104      	bne.n	80066c8 <HAL_TIM_IC_Start_IT+0x78>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	e003      	b.n	80066d0 <HAL_TIM_IC_Start_IT+0x80>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d102      	bne.n	80066de <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80066d8:	7b7b      	ldrb	r3, [r7, #13]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d001      	beq.n	80066e2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e0c2      	b.n	8006868 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d104      	bne.n	80066f2 <HAL_TIM_IC_Start_IT+0xa2>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f0:	e013      	b.n	800671a <HAL_TIM_IC_Start_IT+0xca>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d104      	bne.n	8006702 <HAL_TIM_IC_Start_IT+0xb2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006700:	e00b      	b.n	800671a <HAL_TIM_IC_Start_IT+0xca>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d104      	bne.n	8006712 <HAL_TIM_IC_Start_IT+0xc2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006710:	e003      	b.n	800671a <HAL_TIM_IC_Start_IT+0xca>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d104      	bne.n	800672a <HAL_TIM_IC_Start_IT+0xda>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006728:	e013      	b.n	8006752 <HAL_TIM_IC_Start_IT+0x102>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b04      	cmp	r3, #4
 800672e:	d104      	bne.n	800673a <HAL_TIM_IC_Start_IT+0xea>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006738:	e00b      	b.n	8006752 <HAL_TIM_IC_Start_IT+0x102>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b08      	cmp	r3, #8
 800673e:	d104      	bne.n	800674a <HAL_TIM_IC_Start_IT+0xfa>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006748:	e003      	b.n	8006752 <HAL_TIM_IC_Start_IT+0x102>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2202      	movs	r2, #2
 800674e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b0c      	cmp	r3, #12
 8006756:	d841      	bhi.n	80067dc <HAL_TIM_IC_Start_IT+0x18c>
 8006758:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <HAL_TIM_IC_Start_IT+0x110>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	08006795 	.word	0x08006795
 8006764:	080067dd 	.word	0x080067dd
 8006768:	080067dd 	.word	0x080067dd
 800676c:	080067dd 	.word	0x080067dd
 8006770:	080067a7 	.word	0x080067a7
 8006774:	080067dd 	.word	0x080067dd
 8006778:	080067dd 	.word	0x080067dd
 800677c:	080067dd 	.word	0x080067dd
 8006780:	080067b9 	.word	0x080067b9
 8006784:	080067dd 	.word	0x080067dd
 8006788:	080067dd 	.word	0x080067dd
 800678c:	080067dd 	.word	0x080067dd
 8006790:	080067cb 	.word	0x080067cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0202 	orr.w	r2, r2, #2
 80067a2:	60da      	str	r2, [r3, #12]
      break;
 80067a4:	e01d      	b.n	80067e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0204 	orr.w	r2, r2, #4
 80067b4:	60da      	str	r2, [r3, #12]
      break;
 80067b6:	e014      	b.n	80067e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0208 	orr.w	r2, r2, #8
 80067c6:	60da      	str	r2, [r3, #12]
      break;
 80067c8:	e00b      	b.n	80067e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f042 0210 	orr.w	r2, r2, #16
 80067d8:	60da      	str	r2, [r3, #12]
      break;
 80067da:	e002      	b.n	80067e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
      break;
 80067e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d13e      	bne.n	8006866 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2201      	movs	r2, #1
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 ff99 	bl	8007728 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a1d      	ldr	r2, [pc, #116]	; (8006870 <HAL_TIM_IC_Start_IT+0x220>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d018      	beq.n	8006832 <HAL_TIM_IC_Start_IT+0x1e2>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006808:	d013      	beq.n	8006832 <HAL_TIM_IC_Start_IT+0x1e2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a19      	ldr	r2, [pc, #100]	; (8006874 <HAL_TIM_IC_Start_IT+0x224>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d00e      	beq.n	8006832 <HAL_TIM_IC_Start_IT+0x1e2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a17      	ldr	r2, [pc, #92]	; (8006878 <HAL_TIM_IC_Start_IT+0x228>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d009      	beq.n	8006832 <HAL_TIM_IC_Start_IT+0x1e2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a16      	ldr	r2, [pc, #88]	; (800687c <HAL_TIM_IC_Start_IT+0x22c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d004      	beq.n	8006832 <HAL_TIM_IC_Start_IT+0x1e2>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a14      	ldr	r2, [pc, #80]	; (8006880 <HAL_TIM_IC_Start_IT+0x230>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d111      	bne.n	8006856 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f003 0307 	and.w	r3, r3, #7
 800683c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b06      	cmp	r3, #6
 8006842:	d010      	beq.n	8006866 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0201 	orr.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006854:	e007      	b.n	8006866 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f042 0201 	orr.w	r2, r2, #1
 8006864:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006866:	7bfb      	ldrb	r3, [r7, #15]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	40010000 	.word	0x40010000
 8006874:	40000400 	.word	0x40000400
 8006878:	40000800 	.word	0x40000800
 800687c:	40000c00 	.word	0x40000c00
 8006880:	40014000 	.word	0x40014000

08006884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d020      	beq.n	80068e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01b      	beq.n	80068e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f06f 0202 	mvn.w	r2, #2
 80068b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fd f962 	bl	8003b98 <HAL_TIM_IC_CaptureCallback>
 80068d4:	e005      	b.n	80068e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fb38 	bl	8006f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fb3f 	bl	8006f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d020      	beq.n	8006934 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01b      	beq.n	8006934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0204 	mvn.w	r2, #4
 8006904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2202      	movs	r2, #2
 800690a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7fd f93c 	bl	8003b98 <HAL_TIM_IC_CaptureCallback>
 8006920:	e005      	b.n	800692e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fb12 	bl	8006f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fb19 	bl	8006f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d020      	beq.n	8006980 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01b      	beq.n	8006980 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0208 	mvn.w	r2, #8
 8006950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2204      	movs	r2, #4
 8006956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7fd f916 	bl	8003b98 <HAL_TIM_IC_CaptureCallback>
 800696c:	e005      	b.n	800697a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 faec 	bl	8006f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 faf3 	bl	8006f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b00      	cmp	r3, #0
 8006988:	d020      	beq.n	80069cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01b      	beq.n	80069cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0210 	mvn.w	r2, #16
 800699c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2208      	movs	r2, #8
 80069a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7fd f8f0 	bl	8003b98 <HAL_TIM_IC_CaptureCallback>
 80069b8:	e005      	b.n	80069c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fac6 	bl	8006f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 facd 	bl	8006f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00c      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0201 	mvn.w	r2, #1
 80069e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 faa4 	bl	8006f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 ff28 	bl	8007864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00c      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa9e 	bl	8006f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00c      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0220 	mvn.w	r2, #32
 8006a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fefa 	bl	8007850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e088      	b.n	8006b94 <HAL_TIM_IC_ConfigChannel+0x130>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d11b      	bne.n	8006ac8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006aa0:	f000 fc8a 	bl	80073b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699a      	ldr	r2, [r3, #24]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 020c 	bic.w	r2, r2, #12
 8006ab2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6999      	ldr	r1, [r3, #24]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	619a      	str	r2, [r3, #24]
 8006ac6:	e060      	b.n	8006b8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d11c      	bne.n	8006b08 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006ade:	f000 fd02 	bl	80074e6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699a      	ldr	r2, [r3, #24]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006af0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6999      	ldr	r1, [r3, #24]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	021a      	lsls	r2, r3, #8
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	619a      	str	r2, [r3, #24]
 8006b06:	e040      	b.n	8006b8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d11b      	bne.n	8006b46 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006b1e:	f000 fd4f 	bl	80075c0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69da      	ldr	r2, [r3, #28]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 020c 	bic.w	r2, r2, #12
 8006b30:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69d9      	ldr	r1, [r3, #28]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	61da      	str	r2, [r3, #28]
 8006b44:	e021      	b.n	8006b8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b0c      	cmp	r3, #12
 8006b4a:	d11c      	bne.n	8006b86 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006b5c:	f000 fd6c 	bl	8007638 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69da      	ldr	r2, [r3, #28]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b6e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69d9      	ldr	r1, [r3, #28]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	021a      	lsls	r2, r3, #8
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	61da      	str	r2, [r3, #28]
 8006b84:	e001      	b.n	8006b8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e0ae      	b.n	8006d18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b0c      	cmp	r3, #12
 8006bc6:	f200 809f 	bhi.w	8006d08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006bca:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd0:	08006c05 	.word	0x08006c05
 8006bd4:	08006d09 	.word	0x08006d09
 8006bd8:	08006d09 	.word	0x08006d09
 8006bdc:	08006d09 	.word	0x08006d09
 8006be0:	08006c45 	.word	0x08006c45
 8006be4:	08006d09 	.word	0x08006d09
 8006be8:	08006d09 	.word	0x08006d09
 8006bec:	08006d09 	.word	0x08006d09
 8006bf0:	08006c87 	.word	0x08006c87
 8006bf4:	08006d09 	.word	0x08006d09
 8006bf8:	08006d09 	.word	0x08006d09
 8006bfc:	08006d09 	.word	0x08006d09
 8006c00:	08006cc7 	.word	0x08006cc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fa48 	bl	80070a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0208 	orr.w	r2, r2, #8
 8006c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0204 	bic.w	r2, r2, #4
 8006c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6999      	ldr	r1, [r3, #24]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	619a      	str	r2, [r3, #24]
      break;
 8006c42:	e064      	b.n	8006d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fa8e 	bl	800716c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6999      	ldr	r1, [r3, #24]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	021a      	lsls	r2, r3, #8
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	619a      	str	r2, [r3, #24]
      break;
 8006c84:	e043      	b.n	8006d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fad9 	bl	8007244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0208 	orr.w	r2, r2, #8
 8006ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0204 	bic.w	r2, r2, #4
 8006cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69d9      	ldr	r1, [r3, #28]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	691a      	ldr	r2, [r3, #16]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	61da      	str	r2, [r3, #28]
      break;
 8006cc4:	e023      	b.n	8006d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fb23 	bl	8007318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69d9      	ldr	r1, [r3, #28]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	021a      	lsls	r2, r3, #8
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	61da      	str	r2, [r3, #28]
      break;
 8006d06:	e002      	b.n	8006d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_TIM_ConfigClockSource+0x1c>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e0b4      	b.n	8006ea6 <HAL_TIM_ConfigClockSource+0x186>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d74:	d03e      	beq.n	8006df4 <HAL_TIM_ConfigClockSource+0xd4>
 8006d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d7a:	f200 8087 	bhi.w	8006e8c <HAL_TIM_ConfigClockSource+0x16c>
 8006d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d82:	f000 8086 	beq.w	8006e92 <HAL_TIM_ConfigClockSource+0x172>
 8006d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d8a:	d87f      	bhi.n	8006e8c <HAL_TIM_ConfigClockSource+0x16c>
 8006d8c:	2b70      	cmp	r3, #112	; 0x70
 8006d8e:	d01a      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0xa6>
 8006d90:	2b70      	cmp	r3, #112	; 0x70
 8006d92:	d87b      	bhi.n	8006e8c <HAL_TIM_ConfigClockSource+0x16c>
 8006d94:	2b60      	cmp	r3, #96	; 0x60
 8006d96:	d050      	beq.n	8006e3a <HAL_TIM_ConfigClockSource+0x11a>
 8006d98:	2b60      	cmp	r3, #96	; 0x60
 8006d9a:	d877      	bhi.n	8006e8c <HAL_TIM_ConfigClockSource+0x16c>
 8006d9c:	2b50      	cmp	r3, #80	; 0x50
 8006d9e:	d03c      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0xfa>
 8006da0:	2b50      	cmp	r3, #80	; 0x50
 8006da2:	d873      	bhi.n	8006e8c <HAL_TIM_ConfigClockSource+0x16c>
 8006da4:	2b40      	cmp	r3, #64	; 0x40
 8006da6:	d058      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0x13a>
 8006da8:	2b40      	cmp	r3, #64	; 0x40
 8006daa:	d86f      	bhi.n	8006e8c <HAL_TIM_ConfigClockSource+0x16c>
 8006dac:	2b30      	cmp	r3, #48	; 0x30
 8006dae:	d064      	beq.n	8006e7a <HAL_TIM_ConfigClockSource+0x15a>
 8006db0:	2b30      	cmp	r3, #48	; 0x30
 8006db2:	d86b      	bhi.n	8006e8c <HAL_TIM_ConfigClockSource+0x16c>
 8006db4:	2b20      	cmp	r3, #32
 8006db6:	d060      	beq.n	8006e7a <HAL_TIM_ConfigClockSource+0x15a>
 8006db8:	2b20      	cmp	r3, #32
 8006dba:	d867      	bhi.n	8006e8c <HAL_TIM_ConfigClockSource+0x16c>
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d05c      	beq.n	8006e7a <HAL_TIM_ConfigClockSource+0x15a>
 8006dc0:	2b10      	cmp	r3, #16
 8006dc2:	d05a      	beq.n	8006e7a <HAL_TIM_ConfigClockSource+0x15a>
 8006dc4:	e062      	b.n	8006e8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dd6:	f000 fc87 	bl	80076e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006de8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	609a      	str	r2, [r3, #8]
      break;
 8006df2:	e04f      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e04:	f000 fc70 	bl	80076e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e16:	609a      	str	r2, [r3, #8]
      break;
 8006e18:	e03c      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e26:	461a      	mov	r2, r3
 8006e28:	f000 fb2e 	bl	8007488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2150      	movs	r1, #80	; 0x50
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fc3d 	bl	80076b2 <TIM_ITRx_SetConfig>
      break;
 8006e38:	e02c      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e46:	461a      	mov	r2, r3
 8006e48:	f000 fb8a 	bl	8007560 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2160      	movs	r1, #96	; 0x60
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fc2d 	bl	80076b2 <TIM_ITRx_SetConfig>
      break;
 8006e58:	e01c      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e66:	461a      	mov	r2, r3
 8006e68:	f000 fb0e 	bl	8007488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2140      	movs	r1, #64	; 0x40
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fc1d 	bl	80076b2 <TIM_ITRx_SetConfig>
      break;
 8006e78:	e00c      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4619      	mov	r1, r3
 8006e84:	4610      	mov	r0, r2
 8006e86:	f000 fc14 	bl	80076b2 <TIM_ITRx_SetConfig>
      break;
 8006e8a:	e003      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e90:	e000      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
	...

08006eb0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b0c      	cmp	r3, #12
 8006ec2:	d831      	bhi.n	8006f28 <HAL_TIM_ReadCapturedValue+0x78>
 8006ec4:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <HAL_TIM_ReadCapturedValue+0x1c>)
 8006ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eca:	bf00      	nop
 8006ecc:	08006f01 	.word	0x08006f01
 8006ed0:	08006f29 	.word	0x08006f29
 8006ed4:	08006f29 	.word	0x08006f29
 8006ed8:	08006f29 	.word	0x08006f29
 8006edc:	08006f0b 	.word	0x08006f0b
 8006ee0:	08006f29 	.word	0x08006f29
 8006ee4:	08006f29 	.word	0x08006f29
 8006ee8:	08006f29 	.word	0x08006f29
 8006eec:	08006f15 	.word	0x08006f15
 8006ef0:	08006f29 	.word	0x08006f29
 8006ef4:	08006f29 	.word	0x08006f29
 8006ef8:	08006f29 	.word	0x08006f29
 8006efc:	08006f1f 	.word	0x08006f1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f06:	60fb      	str	r3, [r7, #12]

      break;
 8006f08:	e00f      	b.n	8006f2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	60fb      	str	r3, [r7, #12]

      break;
 8006f12:	e00a      	b.n	8006f2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1a:	60fb      	str	r3, [r7, #12]

      break;
 8006f1c:	e005      	b.n	8006f2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	60fb      	str	r3, [r7, #12]

      break;
 8006f26:	e000      	b.n	8006f2a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006f28:	bf00      	nop
  }

  return tmpreg;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a3a      	ldr	r2, [pc, #232]	; (8007084 <TIM_Base_SetConfig+0xfc>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00f      	beq.n	8006fc0 <TIM_Base_SetConfig+0x38>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa6:	d00b      	beq.n	8006fc0 <TIM_Base_SetConfig+0x38>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a37      	ldr	r2, [pc, #220]	; (8007088 <TIM_Base_SetConfig+0x100>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d007      	beq.n	8006fc0 <TIM_Base_SetConfig+0x38>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a36      	ldr	r2, [pc, #216]	; (800708c <TIM_Base_SetConfig+0x104>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d003      	beq.n	8006fc0 <TIM_Base_SetConfig+0x38>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a35      	ldr	r2, [pc, #212]	; (8007090 <TIM_Base_SetConfig+0x108>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d108      	bne.n	8006fd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a2b      	ldr	r2, [pc, #172]	; (8007084 <TIM_Base_SetConfig+0xfc>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d01b      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe0:	d017      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a28      	ldr	r2, [pc, #160]	; (8007088 <TIM_Base_SetConfig+0x100>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a27      	ldr	r2, [pc, #156]	; (800708c <TIM_Base_SetConfig+0x104>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00f      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a26      	ldr	r2, [pc, #152]	; (8007090 <TIM_Base_SetConfig+0x108>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00b      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a25      	ldr	r2, [pc, #148]	; (8007094 <TIM_Base_SetConfig+0x10c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d007      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a24      	ldr	r2, [pc, #144]	; (8007098 <TIM_Base_SetConfig+0x110>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d003      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a23      	ldr	r2, [pc, #140]	; (800709c <TIM_Base_SetConfig+0x114>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d108      	bne.n	8007024 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4313      	orrs	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a0e      	ldr	r2, [pc, #56]	; (8007084 <TIM_Base_SetConfig+0xfc>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d103      	bne.n	8007058 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b01      	cmp	r3, #1
 8007068:	d105      	bne.n	8007076 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	f023 0201 	bic.w	r2, r3, #1
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	611a      	str	r2, [r3, #16]
  }
}
 8007076:	bf00      	nop
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40010000 	.word	0x40010000
 8007088:	40000400 	.word	0x40000400
 800708c:	40000800 	.word	0x40000800
 8007090:	40000c00 	.word	0x40000c00
 8007094:	40014000 	.word	0x40014000
 8007098:	40014400 	.word	0x40014400
 800709c:	40014800 	.word	0x40014800

080070a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	f023 0201 	bic.w	r2, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0303 	bic.w	r3, r3, #3
 80070d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f023 0302 	bic.w	r3, r3, #2
 80070e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a1c      	ldr	r2, [pc, #112]	; (8007168 <TIM_OC1_SetConfig+0xc8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d10c      	bne.n	8007116 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f023 0308 	bic.w	r3, r3, #8
 8007102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f023 0304 	bic.w	r3, r3, #4
 8007114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a13      	ldr	r2, [pc, #76]	; (8007168 <TIM_OC1_SetConfig+0xc8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d111      	bne.n	8007142 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800712c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	621a      	str	r2, [r3, #32]
}
 800715c:	bf00      	nop
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	40010000 	.word	0x40010000

0800716c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	f023 0210 	bic.w	r2, r3, #16
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	021b      	lsls	r3, r3, #8
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f023 0320 	bic.w	r3, r3, #32
 80071b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	011b      	lsls	r3, r3, #4
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a1e      	ldr	r2, [pc, #120]	; (8007240 <TIM_OC2_SetConfig+0xd4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d10d      	bne.n	80071e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a15      	ldr	r2, [pc, #84]	; (8007240 <TIM_OC2_SetConfig+0xd4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d113      	bne.n	8007218 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4313      	orrs	r3, r2
 8007216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	621a      	str	r2, [r3, #32]
}
 8007232:	bf00      	nop
 8007234:	371c      	adds	r7, #28
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40010000 	.word	0x40010000

08007244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0303 	bic.w	r3, r3, #3
 800727a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800728c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	021b      	lsls	r3, r3, #8
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a1d      	ldr	r2, [pc, #116]	; (8007314 <TIM_OC3_SetConfig+0xd0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d10d      	bne.n	80072be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a14      	ldr	r2, [pc, #80]	; (8007314 <TIM_OC3_SetConfig+0xd0>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d113      	bne.n	80072ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	011b      	lsls	r3, r3, #4
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	4313      	orrs	r3, r2
 80072e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	011b      	lsls	r3, r3, #4
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	621a      	str	r2, [r3, #32]
}
 8007308:	bf00      	nop
 800730a:	371c      	adds	r7, #28
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	40010000 	.word	0x40010000

08007318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800734e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	031b      	lsls	r3, r3, #12
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	4313      	orrs	r3, r2
 800736e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a10      	ldr	r2, [pc, #64]	; (80073b4 <TIM_OC4_SetConfig+0x9c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d109      	bne.n	800738c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800737e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	019b      	lsls	r3, r3, #6
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	621a      	str	r2, [r3, #32]
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	40010000 	.word	0x40010000

080073b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	f023 0201 	bic.w	r2, r3, #1
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4a24      	ldr	r2, [pc, #144]	; (8007474 <TIM_TI1_SetConfig+0xbc>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d013      	beq.n	800740e <TIM_TI1_SetConfig+0x56>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ec:	d00f      	beq.n	800740e <TIM_TI1_SetConfig+0x56>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4a21      	ldr	r2, [pc, #132]	; (8007478 <TIM_TI1_SetConfig+0xc0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00b      	beq.n	800740e <TIM_TI1_SetConfig+0x56>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a20      	ldr	r2, [pc, #128]	; (800747c <TIM_TI1_SetConfig+0xc4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d007      	beq.n	800740e <TIM_TI1_SetConfig+0x56>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4a1f      	ldr	r2, [pc, #124]	; (8007480 <TIM_TI1_SetConfig+0xc8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d003      	beq.n	800740e <TIM_TI1_SetConfig+0x56>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4a1e      	ldr	r2, [pc, #120]	; (8007484 <TIM_TI1_SetConfig+0xcc>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d101      	bne.n	8007412 <TIM_TI1_SetConfig+0x5a>
 800740e:	2301      	movs	r3, #1
 8007410:	e000      	b.n	8007414 <TIM_TI1_SetConfig+0x5c>
 8007412:	2300      	movs	r3, #0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d008      	beq.n	800742a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	e003      	b.n	8007432 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f043 0301 	orr.w	r3, r3, #1
 8007430:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	011b      	lsls	r3, r3, #4
 800743e:	b2db      	uxtb	r3, r3
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	4313      	orrs	r3, r2
 8007444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f023 030a 	bic.w	r3, r3, #10
 800744c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f003 030a 	and.w	r3, r3, #10
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	621a      	str	r2, [r3, #32]
}
 8007466:	bf00      	nop
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	40010000 	.word	0x40010000
 8007478:	40000400 	.word	0x40000400
 800747c:	40000800 	.word	0x40000800
 8007480:	40000c00 	.word	0x40000c00
 8007484:	40014000 	.word	0x40014000

08007488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a1b      	ldr	r3, [r3, #32]
 8007498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f023 0201 	bic.w	r2, r3, #1
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f023 030a 	bic.w	r3, r3, #10
 80074c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	621a      	str	r2, [r3, #32]
}
 80074da:	bf00      	nop
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b087      	sub	sp, #28
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
 80074f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	f023 0210 	bic.w	r2, r3, #16
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	021b      	lsls	r3, r3, #8
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	4313      	orrs	r3, r2
 800751c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	031b      	lsls	r3, r3, #12
 800752a:	b29b      	uxth	r3, r3
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	4313      	orrs	r3, r2
 8007530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007538:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	4313      	orrs	r3, r2
 8007546:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	621a      	str	r2, [r3, #32]
}
 8007554:	bf00      	nop
 8007556:	371c      	adds	r7, #28
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f023 0210 	bic.w	r2, r3, #16
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800758a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	031b      	lsls	r3, r3, #12
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	4313      	orrs	r3, r2
 8007594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800759c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	011b      	lsls	r3, r3, #4
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	621a      	str	r2, [r3, #32]
}
 80075b4:	bf00      	nop
 80075b6:	371c      	adds	r7, #28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f023 0303 	bic.w	r3, r3, #3
 80075ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	b2db      	uxtb	r3, r3
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007610:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	021b      	lsls	r3, r3, #8
 8007616:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	4313      	orrs	r3, r2
 800761e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	621a      	str	r2, [r3, #32]
}
 800762c:	bf00      	nop
 800762e:	371c      	adds	r7, #28
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
 8007644:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007664:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	021b      	lsls	r3, r3, #8
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	4313      	orrs	r3, r2
 800766e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007676:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	031b      	lsls	r3, r3, #12
 800767c:	b29b      	uxth	r3, r3
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800768a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	031b      	lsls	r3, r3, #12
 8007690:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	621a      	str	r2, [r3, #32]
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b085      	sub	sp, #20
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f043 0307 	orr.w	r3, r3, #7
 80076d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	609a      	str	r2, [r3, #8]
}
 80076dc:	bf00      	nop
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	021a      	lsls	r2, r3, #8
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	431a      	orrs	r2, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4313      	orrs	r3, r2
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	4313      	orrs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	609a      	str	r2, [r3, #8]
}
 800771c:	bf00      	nop
 800771e:	371c      	adds	r7, #28
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f003 031f 	and.w	r3, r3, #31
 800773a:	2201      	movs	r2, #1
 800773c:	fa02 f303 	lsl.w	r3, r2, r3
 8007740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6a1a      	ldr	r2, [r3, #32]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	43db      	mvns	r3, r3
 800774a:	401a      	ands	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6a1a      	ldr	r2, [r3, #32]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f003 031f 	and.w	r3, r3, #31
 800775a:	6879      	ldr	r1, [r7, #4]
 800775c:	fa01 f303 	lsl.w	r3, r1, r3
 8007760:	431a      	orrs	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	621a      	str	r2, [r3, #32]
}
 8007766:	bf00      	nop
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
	...

08007774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007784:	2b01      	cmp	r3, #1
 8007786:	d101      	bne.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007788:	2302      	movs	r3, #2
 800778a:	e050      	b.n	800782e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a1c      	ldr	r2, [pc, #112]	; (800783c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d018      	beq.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d8:	d013      	beq.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a18      	ldr	r2, [pc, #96]	; (8007840 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00e      	beq.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a16      	ldr	r2, [pc, #88]	; (8007844 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d009      	beq.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a15      	ldr	r2, [pc, #84]	; (8007848 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d004      	beq.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a13      	ldr	r2, [pc, #76]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d10c      	bne.n	800781c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	4313      	orrs	r3, r2
 8007812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	40010000 	.word	0x40010000
 8007840:	40000400 	.word	0x40000400
 8007844:	40000800 	.word	0x40000800
 8007848:	40000c00 	.word	0x40000c00
 800784c:	40014000 	.word	0x40014000

08007850 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e042      	b.n	8007910 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d106      	bne.n	80078a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7fb ffbe 	bl	8003820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2224      	movs	r2, #36	; 0x24
 80078a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fd11 	bl	80082e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	691a      	ldr	r2, [r3, #16]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695a      	ldr	r2, [r3, #20]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	4613      	mov	r3, r2
 8007924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b20      	cmp	r3, #32
 8007930:	d121      	bne.n	8007976 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <HAL_UART_Transmit_IT+0x26>
 8007938:	88fb      	ldrh	r3, [r7, #6]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e01a      	b.n	8007978 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	88fa      	ldrh	r2, [r7, #6]
 800794c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	88fa      	ldrh	r2, [r7, #6]
 8007952:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2221      	movs	r2, #33	; 0x21
 800795e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007970:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	e000      	b.n	8007978 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007976:	2302      	movs	r3, #2
  }
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	4613      	mov	r3, r2
 8007990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b20      	cmp	r3, #32
 800799c:	d112      	bne.n	80079c4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <HAL_UART_Receive_IT+0x26>
 80079a4:	88fb      	ldrh	r3, [r7, #6]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e00b      	b.n	80079c6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80079b4:	88fb      	ldrh	r3, [r7, #6]
 80079b6:	461a      	mov	r2, r3
 80079b8:	68b9      	ldr	r1, [r7, #8]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 faba 	bl	8007f34 <UART_Start_Receive_IT>
 80079c0:	4603      	mov	r3, r0
 80079c2:	e000      	b.n	80079c6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80079c4:	2302      	movs	r3, #2
  }
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b0ba      	sub	sp, #232	; 0xe8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10f      	bne.n	8007a36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1a:	f003 0320 	and.w	r3, r3, #32
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d009      	beq.n	8007a36 <HAL_UART_IRQHandler+0x66>
 8007a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fb99 	bl	8008166 <UART_Receive_IT>
      return;
 8007a34:	e25b      	b.n	8007eee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 80de 	beq.w	8007bfc <HAL_UART_IRQHandler+0x22c>
 8007a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d106      	bne.n	8007a5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 80d1 	beq.w	8007bfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <HAL_UART_IRQHandler+0xae>
 8007a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a76:	f043 0201 	orr.w	r2, r3, #1
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a82:	f003 0304 	and.w	r3, r3, #4
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00b      	beq.n	8007aa2 <HAL_UART_IRQHandler+0xd2>
 8007a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9a:	f043 0202 	orr.w	r2, r3, #2
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00b      	beq.n	8007ac6 <HAL_UART_IRQHandler+0xf6>
 8007aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d005      	beq.n	8007ac6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007abe:	f043 0204 	orr.w	r2, r3, #4
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aca:	f003 0308 	and.w	r3, r3, #8
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d011      	beq.n	8007af6 <HAL_UART_IRQHandler+0x126>
 8007ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad6:	f003 0320 	and.w	r3, r3, #32
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d105      	bne.n	8007aea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d005      	beq.n	8007af6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aee:	f043 0208 	orr.w	r2, r3, #8
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 81f2 	beq.w	8007ee4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d008      	beq.n	8007b1e <HAL_UART_IRQHandler+0x14e>
 8007b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fb24 	bl	8008166 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b28:	2b40      	cmp	r3, #64	; 0x40
 8007b2a:	bf0c      	ite	eq
 8007b2c:	2301      	moveq	r3, #1
 8007b2e:	2300      	movne	r3, #0
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3a:	f003 0308 	and.w	r3, r3, #8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d103      	bne.n	8007b4a <HAL_UART_IRQHandler+0x17a>
 8007b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d04f      	beq.n	8007bea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa2c 	bl	8007fa8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5a:	2b40      	cmp	r3, #64	; 0x40
 8007b5c:	d141      	bne.n	8007be2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3314      	adds	r3, #20
 8007b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3314      	adds	r3, #20
 8007b86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b9a:	e841 2300 	strex	r3, r2, [r1]
 8007b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1d9      	bne.n	8007b5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d013      	beq.n	8007bda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb6:	4a7e      	ldr	r2, [pc, #504]	; (8007db0 <HAL_UART_IRQHandler+0x3e0>)
 8007bb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fc fdbe 	bl	8004740 <HAL_DMA_Abort_IT>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d016      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd8:	e00e      	b.n	8007bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f994 	bl	8007f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be0:	e00a      	b.n	8007bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f990 	bl	8007f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be8:	e006      	b.n	8007bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f98c 	bl	8007f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007bf6:	e175      	b.n	8007ee4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf8:	bf00      	nop
    return;
 8007bfa:	e173      	b.n	8007ee4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	f040 814f 	bne.w	8007ea4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0a:	f003 0310 	and.w	r3, r3, #16
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 8148 	beq.w	8007ea4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c18:	f003 0310 	and.w	r3, r3, #16
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 8141 	beq.w	8007ea4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c22:	2300      	movs	r3, #0
 8007c24:	60bb      	str	r3, [r7, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60bb      	str	r3, [r7, #8]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c42:	2b40      	cmp	r3, #64	; 0x40
 8007c44:	f040 80b6 	bne.w	8007db4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 8145 	beq.w	8007ee8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c66:	429a      	cmp	r2, r3
 8007c68:	f080 813e 	bcs.w	8007ee8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c7e:	f000 8088 	beq.w	8007d92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	330c      	adds	r3, #12
 8007c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	330c      	adds	r3, #12
 8007caa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1d9      	bne.n	8007c82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3314      	adds	r3, #20
 8007cd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce0:	f023 0301 	bic.w	r3, r3, #1
 8007ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3314      	adds	r3, #20
 8007cee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1e1      	bne.n	8007cce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3314      	adds	r3, #20
 8007d10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3314      	adds	r3, #20
 8007d2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e3      	bne.n	8007d0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	330c      	adds	r3, #12
 8007d56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d5a:	e853 3f00 	ldrex	r3, [r3]
 8007d5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d62:	f023 0310 	bic.w	r3, r3, #16
 8007d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	330c      	adds	r3, #12
 8007d70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d74:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e3      	bne.n	8007d50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fc fc67 	bl	8004660 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2202      	movs	r2, #2
 8007d96:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f8b7 	bl	8007f1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dae:	e09b      	b.n	8007ee8 <HAL_UART_IRQHandler+0x518>
 8007db0:	0800806f 	.word	0x0800806f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 808e 	beq.w	8007eec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 8089 	beq.w	8007eec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	330c      	adds	r3, #12
 8007de0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007df0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	330c      	adds	r3, #12
 8007dfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007dfe:	647a      	str	r2, [r7, #68]	; 0x44
 8007e00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e3      	bne.n	8007dda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3314      	adds	r3, #20
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	623b      	str	r3, [r7, #32]
   return(result);
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	f023 0301 	bic.w	r3, r3, #1
 8007e28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3314      	adds	r3, #20
 8007e32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e36:	633a      	str	r2, [r7, #48]	; 0x30
 8007e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e3      	bne.n	8007e12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	330c      	adds	r3, #12
 8007e5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	e853 3f00 	ldrex	r3, [r3]
 8007e66:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f023 0310 	bic.w	r3, r3, #16
 8007e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	330c      	adds	r3, #12
 8007e78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e7c:	61fa      	str	r2, [r7, #28]
 8007e7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	69b9      	ldr	r1, [r7, #24]
 8007e82:	69fa      	ldr	r2, [r7, #28]
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	617b      	str	r3, [r7, #20]
   return(result);
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e3      	bne.n	8007e58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f83d 	bl	8007f1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ea2:	e023      	b.n	8007eec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d009      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x4f4>
 8007eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f8ea 	bl	8008096 <UART_Transmit_IT>
    return;
 8007ec2:	e014      	b.n	8007eee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00e      	beq.n	8007eee <HAL_UART_IRQHandler+0x51e>
 8007ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d008      	beq.n	8007eee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f92a 	bl	8008136 <UART_EndTransmit_IT>
    return;
 8007ee2:	e004      	b.n	8007eee <HAL_UART_IRQHandler+0x51e>
    return;
 8007ee4:	bf00      	nop
 8007ee6:	e002      	b.n	8007eee <HAL_UART_IRQHandler+0x51e>
      return;
 8007ee8:	bf00      	nop
 8007eea:	e000      	b.n	8007eee <HAL_UART_IRQHandler+0x51e>
      return;
 8007eec:	bf00      	nop
  }
}
 8007eee:	37e8      	adds	r7, #232	; 0xe8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	88fa      	ldrh	r2, [r7, #6]
 8007f4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	88fa      	ldrh	r2, [r7, #6]
 8007f52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2222      	movs	r2, #34	; 0x22
 8007f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d007      	beq.n	8007f7a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68da      	ldr	r2, [r3, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f78:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	695a      	ldr	r2, [r3, #20]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 0201 	orr.w	r2, r2, #1
 8007f88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68da      	ldr	r2, [r3, #12]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 0220 	orr.w	r2, r2, #32
 8007f98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b095      	sub	sp, #84	; 0x54
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	330c      	adds	r3, #12
 8007fb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fd0:	643a      	str	r2, [r7, #64]	; 0x40
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e5      	bne.n	8007fb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3314      	adds	r3, #20
 8007fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f023 0301 	bic.w	r3, r3, #1
 8007ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3314      	adds	r3, #20
 8008002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008004:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800800a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e5      	bne.n	8007fe4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801c:	2b01      	cmp	r3, #1
 800801e:	d119      	bne.n	8008054 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	330c      	adds	r3, #12
 8008026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	e853 3f00 	ldrex	r3, [r3]
 800802e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f023 0310 	bic.w	r3, r3, #16
 8008036:	647b      	str	r3, [r7, #68]	; 0x44
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	330c      	adds	r3, #12
 800803e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008040:	61ba      	str	r2, [r7, #24]
 8008042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008044:	6979      	ldr	r1, [r7, #20]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	e841 2300 	strex	r3, r2, [r1]
 800804c:	613b      	str	r3, [r7, #16]
   return(result);
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1e5      	bne.n	8008020 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2220      	movs	r2, #32
 8008058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008062:	bf00      	nop
 8008064:	3754      	adds	r7, #84	; 0x54
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f7ff ff3d 	bl	8007f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800808e:	bf00      	nop
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008096:	b480      	push	{r7}
 8008098:	b085      	sub	sp, #20
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b21      	cmp	r3, #33	; 0x21
 80080a8:	d13e      	bne.n	8008128 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b2:	d114      	bne.n	80080de <UART_Transmit_IT+0x48>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d110      	bne.n	80080de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	1c9a      	adds	r2, r3, #2
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	621a      	str	r2, [r3, #32]
 80080dc:	e008      	b.n	80080f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	1c59      	adds	r1, r3, #1
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6211      	str	r1, [r2, #32]
 80080e8:	781a      	ldrb	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	3b01      	subs	r3, #1
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	4619      	mov	r1, r3
 80080fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10f      	bne.n	8008124 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008112:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008122:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	e000      	b.n	800812a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008128:	2302      	movs	r3, #2
  }
}
 800812a:	4618      	mov	r0, r3
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68da      	ldr	r2, [r3, #12]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800814c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff fecc 	bl	8007ef4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b08c      	sub	sp, #48	; 0x30
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b22      	cmp	r3, #34	; 0x22
 8008178:	f040 80ae 	bne.w	80082d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008184:	d117      	bne.n	80081b6 <UART_Receive_IT+0x50>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d113      	bne.n	80081b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800818e:	2300      	movs	r3, #0
 8008190:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	1c9a      	adds	r2, r3, #2
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	629a      	str	r2, [r3, #40]	; 0x28
 80081b4:	e026      	b.n	8008204 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c8:	d007      	beq.n	80081da <UART_Receive_IT+0x74>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10a      	bne.n	80081e8 <UART_Receive_IT+0x82>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d106      	bne.n	80081e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	e008      	b.n	80081fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008208:	b29b      	uxth	r3, r3
 800820a:	3b01      	subs	r3, #1
 800820c:	b29b      	uxth	r3, r3
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	4619      	mov	r1, r3
 8008212:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008214:	2b00      	cmp	r3, #0
 8008216:	d15d      	bne.n	80082d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68da      	ldr	r2, [r3, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0220 	bic.w	r2, r2, #32
 8008226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	695a      	ldr	r2, [r3, #20]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 0201 	bic.w	r2, r2, #1
 8008246:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2220      	movs	r2, #32
 800824c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825a:	2b01      	cmp	r3, #1
 800825c:	d135      	bne.n	80082ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	330c      	adds	r3, #12
 800826a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	e853 3f00 	ldrex	r3, [r3]
 8008272:	613b      	str	r3, [r7, #16]
   return(result);
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	f023 0310 	bic.w	r3, r3, #16
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	330c      	adds	r3, #12
 8008282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008284:	623a      	str	r2, [r7, #32]
 8008286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008288:	69f9      	ldr	r1, [r7, #28]
 800828a:	6a3a      	ldr	r2, [r7, #32]
 800828c:	e841 2300 	strex	r3, r2, [r1]
 8008290:	61bb      	str	r3, [r7, #24]
   return(result);
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1e5      	bne.n	8008264 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0310 	and.w	r3, r3, #16
 80082a2:	2b10      	cmp	r3, #16
 80082a4:	d10a      	bne.n	80082bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	60fb      	str	r3, [r7, #12]
 80082ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff fe2a 	bl	8007f1c <HAL_UARTEx_RxEventCallback>
 80082c8:	e002      	b.n	80082d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7fa ffae 	bl	800322c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	e002      	b.n	80082da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	e000      	b.n	80082da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80082d8:	2302      	movs	r3, #2
  }
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3730      	adds	r7, #48	; 0x30
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082e8:	b0c0      	sub	sp, #256	; 0x100
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008300:	68d9      	ldr	r1, [r3, #12]
 8008302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	ea40 0301 	orr.w	r3, r0, r1
 800830c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800830e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	431a      	orrs	r2, r3
 800831c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	431a      	orrs	r2, r3
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	4313      	orrs	r3, r2
 800832c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800833c:	f021 010c 	bic.w	r1, r1, #12
 8008340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800834a:	430b      	orrs	r3, r1
 800834c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800834e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800835a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835e:	6999      	ldr	r1, [r3, #24]
 8008360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	ea40 0301 	orr.w	r3, r0, r1
 800836a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800836c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	4b8f      	ldr	r3, [pc, #572]	; (80085b0 <UART_SetConfig+0x2cc>)
 8008374:	429a      	cmp	r2, r3
 8008376:	d005      	beq.n	8008384 <UART_SetConfig+0xa0>
 8008378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	4b8d      	ldr	r3, [pc, #564]	; (80085b4 <UART_SetConfig+0x2d0>)
 8008380:	429a      	cmp	r2, r3
 8008382:	d104      	bne.n	800838e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008384:	f7fd fa4a 	bl	800581c <HAL_RCC_GetPCLK2Freq>
 8008388:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800838c:	e003      	b.n	8008396 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800838e:	f7fd fa31 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 8008392:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083a0:	f040 810c 	bne.w	80085bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80083b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80083b6:	4622      	mov	r2, r4
 80083b8:	462b      	mov	r3, r5
 80083ba:	1891      	adds	r1, r2, r2
 80083bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80083be:	415b      	adcs	r3, r3
 80083c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80083c6:	4621      	mov	r1, r4
 80083c8:	eb12 0801 	adds.w	r8, r2, r1
 80083cc:	4629      	mov	r1, r5
 80083ce:	eb43 0901 	adc.w	r9, r3, r1
 80083d2:	f04f 0200 	mov.w	r2, #0
 80083d6:	f04f 0300 	mov.w	r3, #0
 80083da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083e6:	4690      	mov	r8, r2
 80083e8:	4699      	mov	r9, r3
 80083ea:	4623      	mov	r3, r4
 80083ec:	eb18 0303 	adds.w	r3, r8, r3
 80083f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083f4:	462b      	mov	r3, r5
 80083f6:	eb49 0303 	adc.w	r3, r9, r3
 80083fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800840a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800840e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008412:	460b      	mov	r3, r1
 8008414:	18db      	adds	r3, r3, r3
 8008416:	653b      	str	r3, [r7, #80]	; 0x50
 8008418:	4613      	mov	r3, r2
 800841a:	eb42 0303 	adc.w	r3, r2, r3
 800841e:	657b      	str	r3, [r7, #84]	; 0x54
 8008420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008428:	f7f8 fbde 	bl	8000be8 <__aeabi_uldivmod>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	4b61      	ldr	r3, [pc, #388]	; (80085b8 <UART_SetConfig+0x2d4>)
 8008432:	fba3 2302 	umull	r2, r3, r3, r2
 8008436:	095b      	lsrs	r3, r3, #5
 8008438:	011c      	lsls	r4, r3, #4
 800843a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800843e:	2200      	movs	r2, #0
 8008440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008444:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008448:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800844c:	4642      	mov	r2, r8
 800844e:	464b      	mov	r3, r9
 8008450:	1891      	adds	r1, r2, r2
 8008452:	64b9      	str	r1, [r7, #72]	; 0x48
 8008454:	415b      	adcs	r3, r3
 8008456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008458:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800845c:	4641      	mov	r1, r8
 800845e:	eb12 0a01 	adds.w	sl, r2, r1
 8008462:	4649      	mov	r1, r9
 8008464:	eb43 0b01 	adc.w	fp, r3, r1
 8008468:	f04f 0200 	mov.w	r2, #0
 800846c:	f04f 0300 	mov.w	r3, #0
 8008470:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008474:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800847c:	4692      	mov	sl, r2
 800847e:	469b      	mov	fp, r3
 8008480:	4643      	mov	r3, r8
 8008482:	eb1a 0303 	adds.w	r3, sl, r3
 8008486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800848a:	464b      	mov	r3, r9
 800848c:	eb4b 0303 	adc.w	r3, fp, r3
 8008490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80084a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80084a8:	460b      	mov	r3, r1
 80084aa:	18db      	adds	r3, r3, r3
 80084ac:	643b      	str	r3, [r7, #64]	; 0x40
 80084ae:	4613      	mov	r3, r2
 80084b0:	eb42 0303 	adc.w	r3, r2, r3
 80084b4:	647b      	str	r3, [r7, #68]	; 0x44
 80084b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80084be:	f7f8 fb93 	bl	8000be8 <__aeabi_uldivmod>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4611      	mov	r1, r2
 80084c8:	4b3b      	ldr	r3, [pc, #236]	; (80085b8 <UART_SetConfig+0x2d4>)
 80084ca:	fba3 2301 	umull	r2, r3, r3, r1
 80084ce:	095b      	lsrs	r3, r3, #5
 80084d0:	2264      	movs	r2, #100	; 0x64
 80084d2:	fb02 f303 	mul.w	r3, r2, r3
 80084d6:	1acb      	subs	r3, r1, r3
 80084d8:	00db      	lsls	r3, r3, #3
 80084da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80084de:	4b36      	ldr	r3, [pc, #216]	; (80085b8 <UART_SetConfig+0x2d4>)
 80084e0:	fba3 2302 	umull	r2, r3, r3, r2
 80084e4:	095b      	lsrs	r3, r3, #5
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084ec:	441c      	add	r4, r3
 80084ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80084fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008500:	4642      	mov	r2, r8
 8008502:	464b      	mov	r3, r9
 8008504:	1891      	adds	r1, r2, r2
 8008506:	63b9      	str	r1, [r7, #56]	; 0x38
 8008508:	415b      	adcs	r3, r3
 800850a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800850c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008510:	4641      	mov	r1, r8
 8008512:	1851      	adds	r1, r2, r1
 8008514:	6339      	str	r1, [r7, #48]	; 0x30
 8008516:	4649      	mov	r1, r9
 8008518:	414b      	adcs	r3, r1
 800851a:	637b      	str	r3, [r7, #52]	; 0x34
 800851c:	f04f 0200 	mov.w	r2, #0
 8008520:	f04f 0300 	mov.w	r3, #0
 8008524:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008528:	4659      	mov	r1, fp
 800852a:	00cb      	lsls	r3, r1, #3
 800852c:	4651      	mov	r1, sl
 800852e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008532:	4651      	mov	r1, sl
 8008534:	00ca      	lsls	r2, r1, #3
 8008536:	4610      	mov	r0, r2
 8008538:	4619      	mov	r1, r3
 800853a:	4603      	mov	r3, r0
 800853c:	4642      	mov	r2, r8
 800853e:	189b      	adds	r3, r3, r2
 8008540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008544:	464b      	mov	r3, r9
 8008546:	460a      	mov	r2, r1
 8008548:	eb42 0303 	adc.w	r3, r2, r3
 800854c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800855c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008564:	460b      	mov	r3, r1
 8008566:	18db      	adds	r3, r3, r3
 8008568:	62bb      	str	r3, [r7, #40]	; 0x28
 800856a:	4613      	mov	r3, r2
 800856c:	eb42 0303 	adc.w	r3, r2, r3
 8008570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008576:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800857a:	f7f8 fb35 	bl	8000be8 <__aeabi_uldivmod>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4b0d      	ldr	r3, [pc, #52]	; (80085b8 <UART_SetConfig+0x2d4>)
 8008584:	fba3 1302 	umull	r1, r3, r3, r2
 8008588:	095b      	lsrs	r3, r3, #5
 800858a:	2164      	movs	r1, #100	; 0x64
 800858c:	fb01 f303 	mul.w	r3, r1, r3
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	00db      	lsls	r3, r3, #3
 8008594:	3332      	adds	r3, #50	; 0x32
 8008596:	4a08      	ldr	r2, [pc, #32]	; (80085b8 <UART_SetConfig+0x2d4>)
 8008598:	fba2 2303 	umull	r2, r3, r2, r3
 800859c:	095b      	lsrs	r3, r3, #5
 800859e:	f003 0207 	and.w	r2, r3, #7
 80085a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4422      	add	r2, r4
 80085aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085ac:	e106      	b.n	80087bc <UART_SetConfig+0x4d8>
 80085ae:	bf00      	nop
 80085b0:	40011000 	.word	0x40011000
 80085b4:	40011400 	.word	0x40011400
 80085b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80085ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80085ce:	4642      	mov	r2, r8
 80085d0:	464b      	mov	r3, r9
 80085d2:	1891      	adds	r1, r2, r2
 80085d4:	6239      	str	r1, [r7, #32]
 80085d6:	415b      	adcs	r3, r3
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
 80085da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085de:	4641      	mov	r1, r8
 80085e0:	1854      	adds	r4, r2, r1
 80085e2:	4649      	mov	r1, r9
 80085e4:	eb43 0501 	adc.w	r5, r3, r1
 80085e8:	f04f 0200 	mov.w	r2, #0
 80085ec:	f04f 0300 	mov.w	r3, #0
 80085f0:	00eb      	lsls	r3, r5, #3
 80085f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085f6:	00e2      	lsls	r2, r4, #3
 80085f8:	4614      	mov	r4, r2
 80085fa:	461d      	mov	r5, r3
 80085fc:	4643      	mov	r3, r8
 80085fe:	18e3      	adds	r3, r4, r3
 8008600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008604:	464b      	mov	r3, r9
 8008606:	eb45 0303 	adc.w	r3, r5, r3
 800860a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800860e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800861a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800861e:	f04f 0200 	mov.w	r2, #0
 8008622:	f04f 0300 	mov.w	r3, #0
 8008626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800862a:	4629      	mov	r1, r5
 800862c:	008b      	lsls	r3, r1, #2
 800862e:	4621      	mov	r1, r4
 8008630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008634:	4621      	mov	r1, r4
 8008636:	008a      	lsls	r2, r1, #2
 8008638:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800863c:	f7f8 fad4 	bl	8000be8 <__aeabi_uldivmod>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4b60      	ldr	r3, [pc, #384]	; (80087c8 <UART_SetConfig+0x4e4>)
 8008646:	fba3 2302 	umull	r2, r3, r3, r2
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	011c      	lsls	r4, r3, #4
 800864e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008652:	2200      	movs	r2, #0
 8008654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008658:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800865c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008660:	4642      	mov	r2, r8
 8008662:	464b      	mov	r3, r9
 8008664:	1891      	adds	r1, r2, r2
 8008666:	61b9      	str	r1, [r7, #24]
 8008668:	415b      	adcs	r3, r3
 800866a:	61fb      	str	r3, [r7, #28]
 800866c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008670:	4641      	mov	r1, r8
 8008672:	1851      	adds	r1, r2, r1
 8008674:	6139      	str	r1, [r7, #16]
 8008676:	4649      	mov	r1, r9
 8008678:	414b      	adcs	r3, r1
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	f04f 0200 	mov.w	r2, #0
 8008680:	f04f 0300 	mov.w	r3, #0
 8008684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008688:	4659      	mov	r1, fp
 800868a:	00cb      	lsls	r3, r1, #3
 800868c:	4651      	mov	r1, sl
 800868e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008692:	4651      	mov	r1, sl
 8008694:	00ca      	lsls	r2, r1, #3
 8008696:	4610      	mov	r0, r2
 8008698:	4619      	mov	r1, r3
 800869a:	4603      	mov	r3, r0
 800869c:	4642      	mov	r2, r8
 800869e:	189b      	adds	r3, r3, r2
 80086a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086a4:	464b      	mov	r3, r9
 80086a6:	460a      	mov	r2, r1
 80086a8:	eb42 0303 	adc.w	r3, r2, r3
 80086ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80086ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80086bc:	f04f 0200 	mov.w	r2, #0
 80086c0:	f04f 0300 	mov.w	r3, #0
 80086c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80086c8:	4649      	mov	r1, r9
 80086ca:	008b      	lsls	r3, r1, #2
 80086cc:	4641      	mov	r1, r8
 80086ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086d2:	4641      	mov	r1, r8
 80086d4:	008a      	lsls	r2, r1, #2
 80086d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80086da:	f7f8 fa85 	bl	8000be8 <__aeabi_uldivmod>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4611      	mov	r1, r2
 80086e4:	4b38      	ldr	r3, [pc, #224]	; (80087c8 <UART_SetConfig+0x4e4>)
 80086e6:	fba3 2301 	umull	r2, r3, r3, r1
 80086ea:	095b      	lsrs	r3, r3, #5
 80086ec:	2264      	movs	r2, #100	; 0x64
 80086ee:	fb02 f303 	mul.w	r3, r2, r3
 80086f2:	1acb      	subs	r3, r1, r3
 80086f4:	011b      	lsls	r3, r3, #4
 80086f6:	3332      	adds	r3, #50	; 0x32
 80086f8:	4a33      	ldr	r2, [pc, #204]	; (80087c8 <UART_SetConfig+0x4e4>)
 80086fa:	fba2 2303 	umull	r2, r3, r2, r3
 80086fe:	095b      	lsrs	r3, r3, #5
 8008700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008704:	441c      	add	r4, r3
 8008706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800870a:	2200      	movs	r2, #0
 800870c:	673b      	str	r3, [r7, #112]	; 0x70
 800870e:	677a      	str	r2, [r7, #116]	; 0x74
 8008710:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008714:	4642      	mov	r2, r8
 8008716:	464b      	mov	r3, r9
 8008718:	1891      	adds	r1, r2, r2
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	415b      	adcs	r3, r3
 800871e:	60fb      	str	r3, [r7, #12]
 8008720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008724:	4641      	mov	r1, r8
 8008726:	1851      	adds	r1, r2, r1
 8008728:	6039      	str	r1, [r7, #0]
 800872a:	4649      	mov	r1, r9
 800872c:	414b      	adcs	r3, r1
 800872e:	607b      	str	r3, [r7, #4]
 8008730:	f04f 0200 	mov.w	r2, #0
 8008734:	f04f 0300 	mov.w	r3, #0
 8008738:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800873c:	4659      	mov	r1, fp
 800873e:	00cb      	lsls	r3, r1, #3
 8008740:	4651      	mov	r1, sl
 8008742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008746:	4651      	mov	r1, sl
 8008748:	00ca      	lsls	r2, r1, #3
 800874a:	4610      	mov	r0, r2
 800874c:	4619      	mov	r1, r3
 800874e:	4603      	mov	r3, r0
 8008750:	4642      	mov	r2, r8
 8008752:	189b      	adds	r3, r3, r2
 8008754:	66bb      	str	r3, [r7, #104]	; 0x68
 8008756:	464b      	mov	r3, r9
 8008758:	460a      	mov	r2, r1
 800875a:	eb42 0303 	adc.w	r3, r2, r3
 800875e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	663b      	str	r3, [r7, #96]	; 0x60
 800876a:	667a      	str	r2, [r7, #100]	; 0x64
 800876c:	f04f 0200 	mov.w	r2, #0
 8008770:	f04f 0300 	mov.w	r3, #0
 8008774:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008778:	4649      	mov	r1, r9
 800877a:	008b      	lsls	r3, r1, #2
 800877c:	4641      	mov	r1, r8
 800877e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008782:	4641      	mov	r1, r8
 8008784:	008a      	lsls	r2, r1, #2
 8008786:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800878a:	f7f8 fa2d 	bl	8000be8 <__aeabi_uldivmod>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <UART_SetConfig+0x4e4>)
 8008794:	fba3 1302 	umull	r1, r3, r3, r2
 8008798:	095b      	lsrs	r3, r3, #5
 800879a:	2164      	movs	r1, #100	; 0x64
 800879c:	fb01 f303 	mul.w	r3, r1, r3
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	3332      	adds	r3, #50	; 0x32
 80087a6:	4a08      	ldr	r2, [pc, #32]	; (80087c8 <UART_SetConfig+0x4e4>)
 80087a8:	fba2 2303 	umull	r2, r3, r2, r3
 80087ac:	095b      	lsrs	r3, r3, #5
 80087ae:	f003 020f 	and.w	r2, r3, #15
 80087b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4422      	add	r2, r4
 80087ba:	609a      	str	r2, [r3, #8]
}
 80087bc:	bf00      	nop
 80087be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80087c2:	46bd      	mov	sp, r7
 80087c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087c8:	51eb851f 	.word	0x51eb851f

080087cc <std>:
 80087cc:	2300      	movs	r3, #0
 80087ce:	b510      	push	{r4, lr}
 80087d0:	4604      	mov	r4, r0
 80087d2:	e9c0 3300 	strd	r3, r3, [r0]
 80087d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087da:	6083      	str	r3, [r0, #8]
 80087dc:	8181      	strh	r1, [r0, #12]
 80087de:	6643      	str	r3, [r0, #100]	; 0x64
 80087e0:	81c2      	strh	r2, [r0, #14]
 80087e2:	6183      	str	r3, [r0, #24]
 80087e4:	4619      	mov	r1, r3
 80087e6:	2208      	movs	r2, #8
 80087e8:	305c      	adds	r0, #92	; 0x5c
 80087ea:	f000 f906 	bl	80089fa <memset>
 80087ee:	4b0d      	ldr	r3, [pc, #52]	; (8008824 <std+0x58>)
 80087f0:	6263      	str	r3, [r4, #36]	; 0x24
 80087f2:	4b0d      	ldr	r3, [pc, #52]	; (8008828 <std+0x5c>)
 80087f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80087f6:	4b0d      	ldr	r3, [pc, #52]	; (800882c <std+0x60>)
 80087f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087fa:	4b0d      	ldr	r3, [pc, #52]	; (8008830 <std+0x64>)
 80087fc:	6323      	str	r3, [r4, #48]	; 0x30
 80087fe:	4b0d      	ldr	r3, [pc, #52]	; (8008834 <std+0x68>)
 8008800:	6224      	str	r4, [r4, #32]
 8008802:	429c      	cmp	r4, r3
 8008804:	d006      	beq.n	8008814 <std+0x48>
 8008806:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800880a:	4294      	cmp	r4, r2
 800880c:	d002      	beq.n	8008814 <std+0x48>
 800880e:	33d0      	adds	r3, #208	; 0xd0
 8008810:	429c      	cmp	r4, r3
 8008812:	d105      	bne.n	8008820 <std+0x54>
 8008814:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800881c:	f000 b966 	b.w	8008aec <__retarget_lock_init_recursive>
 8008820:	bd10      	pop	{r4, pc}
 8008822:	bf00      	nop
 8008824:	08008975 	.word	0x08008975
 8008828:	08008997 	.word	0x08008997
 800882c:	080089cf 	.word	0x080089cf
 8008830:	080089f3 	.word	0x080089f3
 8008834:	2000037c 	.word	0x2000037c

08008838 <stdio_exit_handler>:
 8008838:	4a02      	ldr	r2, [pc, #8]	; (8008844 <stdio_exit_handler+0xc>)
 800883a:	4903      	ldr	r1, [pc, #12]	; (8008848 <stdio_exit_handler+0x10>)
 800883c:	4803      	ldr	r0, [pc, #12]	; (800884c <stdio_exit_handler+0x14>)
 800883e:	f000 b869 	b.w	8008914 <_fwalk_sglue>
 8008842:	bf00      	nop
 8008844:	20000030 	.word	0x20000030
 8008848:	08009399 	.word	0x08009399
 800884c:	2000003c 	.word	0x2000003c

08008850 <cleanup_stdio>:
 8008850:	6841      	ldr	r1, [r0, #4]
 8008852:	4b0c      	ldr	r3, [pc, #48]	; (8008884 <cleanup_stdio+0x34>)
 8008854:	4299      	cmp	r1, r3
 8008856:	b510      	push	{r4, lr}
 8008858:	4604      	mov	r4, r0
 800885a:	d001      	beq.n	8008860 <cleanup_stdio+0x10>
 800885c:	f000 fd9c 	bl	8009398 <_fflush_r>
 8008860:	68a1      	ldr	r1, [r4, #8]
 8008862:	4b09      	ldr	r3, [pc, #36]	; (8008888 <cleanup_stdio+0x38>)
 8008864:	4299      	cmp	r1, r3
 8008866:	d002      	beq.n	800886e <cleanup_stdio+0x1e>
 8008868:	4620      	mov	r0, r4
 800886a:	f000 fd95 	bl	8009398 <_fflush_r>
 800886e:	68e1      	ldr	r1, [r4, #12]
 8008870:	4b06      	ldr	r3, [pc, #24]	; (800888c <cleanup_stdio+0x3c>)
 8008872:	4299      	cmp	r1, r3
 8008874:	d004      	beq.n	8008880 <cleanup_stdio+0x30>
 8008876:	4620      	mov	r0, r4
 8008878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800887c:	f000 bd8c 	b.w	8009398 <_fflush_r>
 8008880:	bd10      	pop	{r4, pc}
 8008882:	bf00      	nop
 8008884:	2000037c 	.word	0x2000037c
 8008888:	200003e4 	.word	0x200003e4
 800888c:	2000044c 	.word	0x2000044c

08008890 <global_stdio_init.part.0>:
 8008890:	b510      	push	{r4, lr}
 8008892:	4b0b      	ldr	r3, [pc, #44]	; (80088c0 <global_stdio_init.part.0+0x30>)
 8008894:	4c0b      	ldr	r4, [pc, #44]	; (80088c4 <global_stdio_init.part.0+0x34>)
 8008896:	4a0c      	ldr	r2, [pc, #48]	; (80088c8 <global_stdio_init.part.0+0x38>)
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	4620      	mov	r0, r4
 800889c:	2200      	movs	r2, #0
 800889e:	2104      	movs	r1, #4
 80088a0:	f7ff ff94 	bl	80087cc <std>
 80088a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80088a8:	2201      	movs	r2, #1
 80088aa:	2109      	movs	r1, #9
 80088ac:	f7ff ff8e 	bl	80087cc <std>
 80088b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80088b4:	2202      	movs	r2, #2
 80088b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ba:	2112      	movs	r1, #18
 80088bc:	f7ff bf86 	b.w	80087cc <std>
 80088c0:	200004b4 	.word	0x200004b4
 80088c4:	2000037c 	.word	0x2000037c
 80088c8:	08008839 	.word	0x08008839

080088cc <__sfp_lock_acquire>:
 80088cc:	4801      	ldr	r0, [pc, #4]	; (80088d4 <__sfp_lock_acquire+0x8>)
 80088ce:	f000 b90e 	b.w	8008aee <__retarget_lock_acquire_recursive>
 80088d2:	bf00      	nop
 80088d4:	200004bd 	.word	0x200004bd

080088d8 <__sfp_lock_release>:
 80088d8:	4801      	ldr	r0, [pc, #4]	; (80088e0 <__sfp_lock_release+0x8>)
 80088da:	f000 b909 	b.w	8008af0 <__retarget_lock_release_recursive>
 80088de:	bf00      	nop
 80088e0:	200004bd 	.word	0x200004bd

080088e4 <__sinit>:
 80088e4:	b510      	push	{r4, lr}
 80088e6:	4604      	mov	r4, r0
 80088e8:	f7ff fff0 	bl	80088cc <__sfp_lock_acquire>
 80088ec:	6a23      	ldr	r3, [r4, #32]
 80088ee:	b11b      	cbz	r3, 80088f8 <__sinit+0x14>
 80088f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088f4:	f7ff bff0 	b.w	80088d8 <__sfp_lock_release>
 80088f8:	4b04      	ldr	r3, [pc, #16]	; (800890c <__sinit+0x28>)
 80088fa:	6223      	str	r3, [r4, #32]
 80088fc:	4b04      	ldr	r3, [pc, #16]	; (8008910 <__sinit+0x2c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1f5      	bne.n	80088f0 <__sinit+0xc>
 8008904:	f7ff ffc4 	bl	8008890 <global_stdio_init.part.0>
 8008908:	e7f2      	b.n	80088f0 <__sinit+0xc>
 800890a:	bf00      	nop
 800890c:	08008851 	.word	0x08008851
 8008910:	200004b4 	.word	0x200004b4

08008914 <_fwalk_sglue>:
 8008914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008918:	4607      	mov	r7, r0
 800891a:	4688      	mov	r8, r1
 800891c:	4614      	mov	r4, r2
 800891e:	2600      	movs	r6, #0
 8008920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008924:	f1b9 0901 	subs.w	r9, r9, #1
 8008928:	d505      	bpl.n	8008936 <_fwalk_sglue+0x22>
 800892a:	6824      	ldr	r4, [r4, #0]
 800892c:	2c00      	cmp	r4, #0
 800892e:	d1f7      	bne.n	8008920 <_fwalk_sglue+0xc>
 8008930:	4630      	mov	r0, r6
 8008932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008936:	89ab      	ldrh	r3, [r5, #12]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d907      	bls.n	800894c <_fwalk_sglue+0x38>
 800893c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008940:	3301      	adds	r3, #1
 8008942:	d003      	beq.n	800894c <_fwalk_sglue+0x38>
 8008944:	4629      	mov	r1, r5
 8008946:	4638      	mov	r0, r7
 8008948:	47c0      	blx	r8
 800894a:	4306      	orrs	r6, r0
 800894c:	3568      	adds	r5, #104	; 0x68
 800894e:	e7e9      	b.n	8008924 <_fwalk_sglue+0x10>

08008950 <iprintf>:
 8008950:	b40f      	push	{r0, r1, r2, r3}
 8008952:	b507      	push	{r0, r1, r2, lr}
 8008954:	4906      	ldr	r1, [pc, #24]	; (8008970 <iprintf+0x20>)
 8008956:	ab04      	add	r3, sp, #16
 8008958:	6808      	ldr	r0, [r1, #0]
 800895a:	f853 2b04 	ldr.w	r2, [r3], #4
 800895e:	6881      	ldr	r1, [r0, #8]
 8008960:	9301      	str	r3, [sp, #4]
 8008962:	f000 f9e9 	bl	8008d38 <_vfiprintf_r>
 8008966:	b003      	add	sp, #12
 8008968:	f85d eb04 	ldr.w	lr, [sp], #4
 800896c:	b004      	add	sp, #16
 800896e:	4770      	bx	lr
 8008970:	20000088 	.word	0x20000088

08008974 <__sread>:
 8008974:	b510      	push	{r4, lr}
 8008976:	460c      	mov	r4, r1
 8008978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800897c:	f000 f868 	bl	8008a50 <_read_r>
 8008980:	2800      	cmp	r0, #0
 8008982:	bfab      	itete	ge
 8008984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008986:	89a3      	ldrhlt	r3, [r4, #12]
 8008988:	181b      	addge	r3, r3, r0
 800898a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800898e:	bfac      	ite	ge
 8008990:	6563      	strge	r3, [r4, #84]	; 0x54
 8008992:	81a3      	strhlt	r3, [r4, #12]
 8008994:	bd10      	pop	{r4, pc}

08008996 <__swrite>:
 8008996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800899a:	461f      	mov	r7, r3
 800899c:	898b      	ldrh	r3, [r1, #12]
 800899e:	05db      	lsls	r3, r3, #23
 80089a0:	4605      	mov	r5, r0
 80089a2:	460c      	mov	r4, r1
 80089a4:	4616      	mov	r6, r2
 80089a6:	d505      	bpl.n	80089b4 <__swrite+0x1e>
 80089a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ac:	2302      	movs	r3, #2
 80089ae:	2200      	movs	r2, #0
 80089b0:	f000 f83c 	bl	8008a2c <_lseek_r>
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	4632      	mov	r2, r6
 80089c2:	463b      	mov	r3, r7
 80089c4:	4628      	mov	r0, r5
 80089c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089ca:	f000 b853 	b.w	8008a74 <_write_r>

080089ce <__sseek>:
 80089ce:	b510      	push	{r4, lr}
 80089d0:	460c      	mov	r4, r1
 80089d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d6:	f000 f829 	bl	8008a2c <_lseek_r>
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	bf15      	itete	ne
 80089e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80089e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089ea:	81a3      	strheq	r3, [r4, #12]
 80089ec:	bf18      	it	ne
 80089ee:	81a3      	strhne	r3, [r4, #12]
 80089f0:	bd10      	pop	{r4, pc}

080089f2 <__sclose>:
 80089f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f6:	f000 b809 	b.w	8008a0c <_close_r>

080089fa <memset>:
 80089fa:	4402      	add	r2, r0
 80089fc:	4603      	mov	r3, r0
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d100      	bne.n	8008a04 <memset+0xa>
 8008a02:	4770      	bx	lr
 8008a04:	f803 1b01 	strb.w	r1, [r3], #1
 8008a08:	e7f9      	b.n	80089fe <memset+0x4>
	...

08008a0c <_close_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4d06      	ldr	r5, [pc, #24]	; (8008a28 <_close_r+0x1c>)
 8008a10:	2300      	movs	r3, #0
 8008a12:	4604      	mov	r4, r0
 8008a14:	4608      	mov	r0, r1
 8008a16:	602b      	str	r3, [r5, #0]
 8008a18:	f7fb f811 	bl	8003a3e <_close>
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	d102      	bne.n	8008a26 <_close_r+0x1a>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	b103      	cbz	r3, 8008a26 <_close_r+0x1a>
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	200004b8 	.word	0x200004b8

08008a2c <_lseek_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4d07      	ldr	r5, [pc, #28]	; (8008a4c <_lseek_r+0x20>)
 8008a30:	4604      	mov	r4, r0
 8008a32:	4608      	mov	r0, r1
 8008a34:	4611      	mov	r1, r2
 8008a36:	2200      	movs	r2, #0
 8008a38:	602a      	str	r2, [r5, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f7fb f826 	bl	8003a8c <_lseek>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	d102      	bne.n	8008a4a <_lseek_r+0x1e>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	b103      	cbz	r3, 8008a4a <_lseek_r+0x1e>
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	200004b8 	.word	0x200004b8

08008a50 <_read_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4d07      	ldr	r5, [pc, #28]	; (8008a70 <_read_r+0x20>)
 8008a54:	4604      	mov	r4, r0
 8008a56:	4608      	mov	r0, r1
 8008a58:	4611      	mov	r1, r2
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	602a      	str	r2, [r5, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f7fa ffd0 	bl	8003a04 <_read>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_read_r+0x1e>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_read_r+0x1e>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	200004b8 	.word	0x200004b8

08008a74 <_write_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d07      	ldr	r5, [pc, #28]	; (8008a94 <_write_r+0x20>)
 8008a78:	4604      	mov	r4, r0
 8008a7a:	4608      	mov	r0, r1
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	2200      	movs	r2, #0
 8008a80:	602a      	str	r2, [r5, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	f7fa f810 	bl	8002aa8 <_write>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_write_r+0x1e>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_write_r+0x1e>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	200004b8 	.word	0x200004b8

08008a98 <__errno>:
 8008a98:	4b01      	ldr	r3, [pc, #4]	; (8008aa0 <__errno+0x8>)
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	20000088 	.word	0x20000088

08008aa4 <__libc_init_array>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	4d0d      	ldr	r5, [pc, #52]	; (8008adc <__libc_init_array+0x38>)
 8008aa8:	4c0d      	ldr	r4, [pc, #52]	; (8008ae0 <__libc_init_array+0x3c>)
 8008aaa:	1b64      	subs	r4, r4, r5
 8008aac:	10a4      	asrs	r4, r4, #2
 8008aae:	2600      	movs	r6, #0
 8008ab0:	42a6      	cmp	r6, r4
 8008ab2:	d109      	bne.n	8008ac8 <__libc_init_array+0x24>
 8008ab4:	4d0b      	ldr	r5, [pc, #44]	; (8008ae4 <__libc_init_array+0x40>)
 8008ab6:	4c0c      	ldr	r4, [pc, #48]	; (8008ae8 <__libc_init_array+0x44>)
 8008ab8:	f001 ff5e 	bl	800a978 <_init>
 8008abc:	1b64      	subs	r4, r4, r5
 8008abe:	10a4      	asrs	r4, r4, #2
 8008ac0:	2600      	movs	r6, #0
 8008ac2:	42a6      	cmp	r6, r4
 8008ac4:	d105      	bne.n	8008ad2 <__libc_init_array+0x2e>
 8008ac6:	bd70      	pop	{r4, r5, r6, pc}
 8008ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008acc:	4798      	blx	r3
 8008ace:	3601      	adds	r6, #1
 8008ad0:	e7ee      	b.n	8008ab0 <__libc_init_array+0xc>
 8008ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad6:	4798      	blx	r3
 8008ad8:	3601      	adds	r6, #1
 8008ada:	e7f2      	b.n	8008ac2 <__libc_init_array+0x1e>
 8008adc:	0800bd90 	.word	0x0800bd90
 8008ae0:	0800bd90 	.word	0x0800bd90
 8008ae4:	0800bd90 	.word	0x0800bd90
 8008ae8:	0800bd94 	.word	0x0800bd94

08008aec <__retarget_lock_init_recursive>:
 8008aec:	4770      	bx	lr

08008aee <__retarget_lock_acquire_recursive>:
 8008aee:	4770      	bx	lr

08008af0 <__retarget_lock_release_recursive>:
 8008af0:	4770      	bx	lr
	...

08008af4 <_free_r>:
 8008af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008af6:	2900      	cmp	r1, #0
 8008af8:	d044      	beq.n	8008b84 <_free_r+0x90>
 8008afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008afe:	9001      	str	r0, [sp, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f1a1 0404 	sub.w	r4, r1, #4
 8008b06:	bfb8      	it	lt
 8008b08:	18e4      	addlt	r4, r4, r3
 8008b0a:	f000 f8df 	bl	8008ccc <__malloc_lock>
 8008b0e:	4a1e      	ldr	r2, [pc, #120]	; (8008b88 <_free_r+0x94>)
 8008b10:	9801      	ldr	r0, [sp, #4]
 8008b12:	6813      	ldr	r3, [r2, #0]
 8008b14:	b933      	cbnz	r3, 8008b24 <_free_r+0x30>
 8008b16:	6063      	str	r3, [r4, #4]
 8008b18:	6014      	str	r4, [r2, #0]
 8008b1a:	b003      	add	sp, #12
 8008b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b20:	f000 b8da 	b.w	8008cd8 <__malloc_unlock>
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	d908      	bls.n	8008b3a <_free_r+0x46>
 8008b28:	6825      	ldr	r5, [r4, #0]
 8008b2a:	1961      	adds	r1, r4, r5
 8008b2c:	428b      	cmp	r3, r1
 8008b2e:	bf01      	itttt	eq
 8008b30:	6819      	ldreq	r1, [r3, #0]
 8008b32:	685b      	ldreq	r3, [r3, #4]
 8008b34:	1949      	addeq	r1, r1, r5
 8008b36:	6021      	streq	r1, [r4, #0]
 8008b38:	e7ed      	b.n	8008b16 <_free_r+0x22>
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	b10b      	cbz	r3, 8008b44 <_free_r+0x50>
 8008b40:	42a3      	cmp	r3, r4
 8008b42:	d9fa      	bls.n	8008b3a <_free_r+0x46>
 8008b44:	6811      	ldr	r1, [r2, #0]
 8008b46:	1855      	adds	r5, r2, r1
 8008b48:	42a5      	cmp	r5, r4
 8008b4a:	d10b      	bne.n	8008b64 <_free_r+0x70>
 8008b4c:	6824      	ldr	r4, [r4, #0]
 8008b4e:	4421      	add	r1, r4
 8008b50:	1854      	adds	r4, r2, r1
 8008b52:	42a3      	cmp	r3, r4
 8008b54:	6011      	str	r1, [r2, #0]
 8008b56:	d1e0      	bne.n	8008b1a <_free_r+0x26>
 8008b58:	681c      	ldr	r4, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	6053      	str	r3, [r2, #4]
 8008b5e:	440c      	add	r4, r1
 8008b60:	6014      	str	r4, [r2, #0]
 8008b62:	e7da      	b.n	8008b1a <_free_r+0x26>
 8008b64:	d902      	bls.n	8008b6c <_free_r+0x78>
 8008b66:	230c      	movs	r3, #12
 8008b68:	6003      	str	r3, [r0, #0]
 8008b6a:	e7d6      	b.n	8008b1a <_free_r+0x26>
 8008b6c:	6825      	ldr	r5, [r4, #0]
 8008b6e:	1961      	adds	r1, r4, r5
 8008b70:	428b      	cmp	r3, r1
 8008b72:	bf04      	itt	eq
 8008b74:	6819      	ldreq	r1, [r3, #0]
 8008b76:	685b      	ldreq	r3, [r3, #4]
 8008b78:	6063      	str	r3, [r4, #4]
 8008b7a:	bf04      	itt	eq
 8008b7c:	1949      	addeq	r1, r1, r5
 8008b7e:	6021      	streq	r1, [r4, #0]
 8008b80:	6054      	str	r4, [r2, #4]
 8008b82:	e7ca      	b.n	8008b1a <_free_r+0x26>
 8008b84:	b003      	add	sp, #12
 8008b86:	bd30      	pop	{r4, r5, pc}
 8008b88:	200004c0 	.word	0x200004c0

08008b8c <sbrk_aligned>:
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	4e0e      	ldr	r6, [pc, #56]	; (8008bc8 <sbrk_aligned+0x3c>)
 8008b90:	460c      	mov	r4, r1
 8008b92:	6831      	ldr	r1, [r6, #0]
 8008b94:	4605      	mov	r5, r0
 8008b96:	b911      	cbnz	r1, 8008b9e <sbrk_aligned+0x12>
 8008b98:	f000 fcbc 	bl	8009514 <_sbrk_r>
 8008b9c:	6030      	str	r0, [r6, #0]
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	f000 fcb7 	bl	8009514 <_sbrk_r>
 8008ba6:	1c43      	adds	r3, r0, #1
 8008ba8:	d00a      	beq.n	8008bc0 <sbrk_aligned+0x34>
 8008baa:	1cc4      	adds	r4, r0, #3
 8008bac:	f024 0403 	bic.w	r4, r4, #3
 8008bb0:	42a0      	cmp	r0, r4
 8008bb2:	d007      	beq.n	8008bc4 <sbrk_aligned+0x38>
 8008bb4:	1a21      	subs	r1, r4, r0
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	f000 fcac 	bl	8009514 <_sbrk_r>
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d101      	bne.n	8008bc4 <sbrk_aligned+0x38>
 8008bc0:	f04f 34ff 	mov.w	r4, #4294967295
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	200004c4 	.word	0x200004c4

08008bcc <_malloc_r>:
 8008bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd0:	1ccd      	adds	r5, r1, #3
 8008bd2:	f025 0503 	bic.w	r5, r5, #3
 8008bd6:	3508      	adds	r5, #8
 8008bd8:	2d0c      	cmp	r5, #12
 8008bda:	bf38      	it	cc
 8008bdc:	250c      	movcc	r5, #12
 8008bde:	2d00      	cmp	r5, #0
 8008be0:	4607      	mov	r7, r0
 8008be2:	db01      	blt.n	8008be8 <_malloc_r+0x1c>
 8008be4:	42a9      	cmp	r1, r5
 8008be6:	d905      	bls.n	8008bf4 <_malloc_r+0x28>
 8008be8:	230c      	movs	r3, #12
 8008bea:	603b      	str	r3, [r7, #0]
 8008bec:	2600      	movs	r6, #0
 8008bee:	4630      	mov	r0, r6
 8008bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008cc8 <_malloc_r+0xfc>
 8008bf8:	f000 f868 	bl	8008ccc <__malloc_lock>
 8008bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8008c00:	461c      	mov	r4, r3
 8008c02:	bb5c      	cbnz	r4, 8008c5c <_malloc_r+0x90>
 8008c04:	4629      	mov	r1, r5
 8008c06:	4638      	mov	r0, r7
 8008c08:	f7ff ffc0 	bl	8008b8c <sbrk_aligned>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	4604      	mov	r4, r0
 8008c10:	d155      	bne.n	8008cbe <_malloc_r+0xf2>
 8008c12:	f8d8 4000 	ldr.w	r4, [r8]
 8008c16:	4626      	mov	r6, r4
 8008c18:	2e00      	cmp	r6, #0
 8008c1a:	d145      	bne.n	8008ca8 <_malloc_r+0xdc>
 8008c1c:	2c00      	cmp	r4, #0
 8008c1e:	d048      	beq.n	8008cb2 <_malloc_r+0xe6>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	4631      	mov	r1, r6
 8008c24:	4638      	mov	r0, r7
 8008c26:	eb04 0903 	add.w	r9, r4, r3
 8008c2a:	f000 fc73 	bl	8009514 <_sbrk_r>
 8008c2e:	4581      	cmp	r9, r0
 8008c30:	d13f      	bne.n	8008cb2 <_malloc_r+0xe6>
 8008c32:	6821      	ldr	r1, [r4, #0]
 8008c34:	1a6d      	subs	r5, r5, r1
 8008c36:	4629      	mov	r1, r5
 8008c38:	4638      	mov	r0, r7
 8008c3a:	f7ff ffa7 	bl	8008b8c <sbrk_aligned>
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d037      	beq.n	8008cb2 <_malloc_r+0xe6>
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	442b      	add	r3, r5
 8008c46:	6023      	str	r3, [r4, #0]
 8008c48:	f8d8 3000 	ldr.w	r3, [r8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d038      	beq.n	8008cc2 <_malloc_r+0xf6>
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	42a2      	cmp	r2, r4
 8008c54:	d12b      	bne.n	8008cae <_malloc_r+0xe2>
 8008c56:	2200      	movs	r2, #0
 8008c58:	605a      	str	r2, [r3, #4]
 8008c5a:	e00f      	b.n	8008c7c <_malloc_r+0xb0>
 8008c5c:	6822      	ldr	r2, [r4, #0]
 8008c5e:	1b52      	subs	r2, r2, r5
 8008c60:	d41f      	bmi.n	8008ca2 <_malloc_r+0xd6>
 8008c62:	2a0b      	cmp	r2, #11
 8008c64:	d917      	bls.n	8008c96 <_malloc_r+0xca>
 8008c66:	1961      	adds	r1, r4, r5
 8008c68:	42a3      	cmp	r3, r4
 8008c6a:	6025      	str	r5, [r4, #0]
 8008c6c:	bf18      	it	ne
 8008c6e:	6059      	strne	r1, [r3, #4]
 8008c70:	6863      	ldr	r3, [r4, #4]
 8008c72:	bf08      	it	eq
 8008c74:	f8c8 1000 	streq.w	r1, [r8]
 8008c78:	5162      	str	r2, [r4, r5]
 8008c7a:	604b      	str	r3, [r1, #4]
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f104 060b 	add.w	r6, r4, #11
 8008c82:	f000 f829 	bl	8008cd8 <__malloc_unlock>
 8008c86:	f026 0607 	bic.w	r6, r6, #7
 8008c8a:	1d23      	adds	r3, r4, #4
 8008c8c:	1af2      	subs	r2, r6, r3
 8008c8e:	d0ae      	beq.n	8008bee <_malloc_r+0x22>
 8008c90:	1b9b      	subs	r3, r3, r6
 8008c92:	50a3      	str	r3, [r4, r2]
 8008c94:	e7ab      	b.n	8008bee <_malloc_r+0x22>
 8008c96:	42a3      	cmp	r3, r4
 8008c98:	6862      	ldr	r2, [r4, #4]
 8008c9a:	d1dd      	bne.n	8008c58 <_malloc_r+0x8c>
 8008c9c:	f8c8 2000 	str.w	r2, [r8]
 8008ca0:	e7ec      	b.n	8008c7c <_malloc_r+0xb0>
 8008ca2:	4623      	mov	r3, r4
 8008ca4:	6864      	ldr	r4, [r4, #4]
 8008ca6:	e7ac      	b.n	8008c02 <_malloc_r+0x36>
 8008ca8:	4634      	mov	r4, r6
 8008caa:	6876      	ldr	r6, [r6, #4]
 8008cac:	e7b4      	b.n	8008c18 <_malloc_r+0x4c>
 8008cae:	4613      	mov	r3, r2
 8008cb0:	e7cc      	b.n	8008c4c <_malloc_r+0x80>
 8008cb2:	230c      	movs	r3, #12
 8008cb4:	603b      	str	r3, [r7, #0]
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	f000 f80e 	bl	8008cd8 <__malloc_unlock>
 8008cbc:	e797      	b.n	8008bee <_malloc_r+0x22>
 8008cbe:	6025      	str	r5, [r4, #0]
 8008cc0:	e7dc      	b.n	8008c7c <_malloc_r+0xb0>
 8008cc2:	605b      	str	r3, [r3, #4]
 8008cc4:	deff      	udf	#255	; 0xff
 8008cc6:	bf00      	nop
 8008cc8:	200004c0 	.word	0x200004c0

08008ccc <__malloc_lock>:
 8008ccc:	4801      	ldr	r0, [pc, #4]	; (8008cd4 <__malloc_lock+0x8>)
 8008cce:	f7ff bf0e 	b.w	8008aee <__retarget_lock_acquire_recursive>
 8008cd2:	bf00      	nop
 8008cd4:	200004bc 	.word	0x200004bc

08008cd8 <__malloc_unlock>:
 8008cd8:	4801      	ldr	r0, [pc, #4]	; (8008ce0 <__malloc_unlock+0x8>)
 8008cda:	f7ff bf09 	b.w	8008af0 <__retarget_lock_release_recursive>
 8008cde:	bf00      	nop
 8008ce0:	200004bc 	.word	0x200004bc

08008ce4 <__sfputc_r>:
 8008ce4:	6893      	ldr	r3, [r2, #8]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	b410      	push	{r4}
 8008cec:	6093      	str	r3, [r2, #8]
 8008cee:	da08      	bge.n	8008d02 <__sfputc_r+0x1e>
 8008cf0:	6994      	ldr	r4, [r2, #24]
 8008cf2:	42a3      	cmp	r3, r4
 8008cf4:	db01      	blt.n	8008cfa <__sfputc_r+0x16>
 8008cf6:	290a      	cmp	r1, #10
 8008cf8:	d103      	bne.n	8008d02 <__sfputc_r+0x1e>
 8008cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cfe:	f000 bb73 	b.w	80093e8 <__swbuf_r>
 8008d02:	6813      	ldr	r3, [r2, #0]
 8008d04:	1c58      	adds	r0, r3, #1
 8008d06:	6010      	str	r0, [r2, #0]
 8008d08:	7019      	strb	r1, [r3, #0]
 8008d0a:	4608      	mov	r0, r1
 8008d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <__sfputs_r>:
 8008d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d14:	4606      	mov	r6, r0
 8008d16:	460f      	mov	r7, r1
 8008d18:	4614      	mov	r4, r2
 8008d1a:	18d5      	adds	r5, r2, r3
 8008d1c:	42ac      	cmp	r4, r5
 8008d1e:	d101      	bne.n	8008d24 <__sfputs_r+0x12>
 8008d20:	2000      	movs	r0, #0
 8008d22:	e007      	b.n	8008d34 <__sfputs_r+0x22>
 8008d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d28:	463a      	mov	r2, r7
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f7ff ffda 	bl	8008ce4 <__sfputc_r>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d1f3      	bne.n	8008d1c <__sfputs_r+0xa>
 8008d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d38 <_vfiprintf_r>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	460d      	mov	r5, r1
 8008d3e:	b09d      	sub	sp, #116	; 0x74
 8008d40:	4614      	mov	r4, r2
 8008d42:	4698      	mov	r8, r3
 8008d44:	4606      	mov	r6, r0
 8008d46:	b118      	cbz	r0, 8008d50 <_vfiprintf_r+0x18>
 8008d48:	6a03      	ldr	r3, [r0, #32]
 8008d4a:	b90b      	cbnz	r3, 8008d50 <_vfiprintf_r+0x18>
 8008d4c:	f7ff fdca 	bl	80088e4 <__sinit>
 8008d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d52:	07d9      	lsls	r1, r3, #31
 8008d54:	d405      	bmi.n	8008d62 <_vfiprintf_r+0x2a>
 8008d56:	89ab      	ldrh	r3, [r5, #12]
 8008d58:	059a      	lsls	r2, r3, #22
 8008d5a:	d402      	bmi.n	8008d62 <_vfiprintf_r+0x2a>
 8008d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d5e:	f7ff fec6 	bl	8008aee <__retarget_lock_acquire_recursive>
 8008d62:	89ab      	ldrh	r3, [r5, #12]
 8008d64:	071b      	lsls	r3, r3, #28
 8008d66:	d501      	bpl.n	8008d6c <_vfiprintf_r+0x34>
 8008d68:	692b      	ldr	r3, [r5, #16]
 8008d6a:	b99b      	cbnz	r3, 8008d94 <_vfiprintf_r+0x5c>
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 fb78 	bl	8009464 <__swsetup_r>
 8008d74:	b170      	cbz	r0, 8008d94 <_vfiprintf_r+0x5c>
 8008d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d78:	07dc      	lsls	r4, r3, #31
 8008d7a:	d504      	bpl.n	8008d86 <_vfiprintf_r+0x4e>
 8008d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d80:	b01d      	add	sp, #116	; 0x74
 8008d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d86:	89ab      	ldrh	r3, [r5, #12]
 8008d88:	0598      	lsls	r0, r3, #22
 8008d8a:	d4f7      	bmi.n	8008d7c <_vfiprintf_r+0x44>
 8008d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d8e:	f7ff feaf 	bl	8008af0 <__retarget_lock_release_recursive>
 8008d92:	e7f3      	b.n	8008d7c <_vfiprintf_r+0x44>
 8008d94:	2300      	movs	r3, #0
 8008d96:	9309      	str	r3, [sp, #36]	; 0x24
 8008d98:	2320      	movs	r3, #32
 8008d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008da2:	2330      	movs	r3, #48	; 0x30
 8008da4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008f58 <_vfiprintf_r+0x220>
 8008da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dac:	f04f 0901 	mov.w	r9, #1
 8008db0:	4623      	mov	r3, r4
 8008db2:	469a      	mov	sl, r3
 8008db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008db8:	b10a      	cbz	r2, 8008dbe <_vfiprintf_r+0x86>
 8008dba:	2a25      	cmp	r2, #37	; 0x25
 8008dbc:	d1f9      	bne.n	8008db2 <_vfiprintf_r+0x7a>
 8008dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8008dc2:	d00b      	beq.n	8008ddc <_vfiprintf_r+0xa4>
 8008dc4:	465b      	mov	r3, fp
 8008dc6:	4622      	mov	r2, r4
 8008dc8:	4629      	mov	r1, r5
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f7ff ffa1 	bl	8008d12 <__sfputs_r>
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	f000 80a9 	beq.w	8008f28 <_vfiprintf_r+0x1f0>
 8008dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dd8:	445a      	add	r2, fp
 8008dda:	9209      	str	r2, [sp, #36]	; 0x24
 8008ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 80a1 	beq.w	8008f28 <_vfiprintf_r+0x1f0>
 8008de6:	2300      	movs	r3, #0
 8008de8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008df0:	f10a 0a01 	add.w	sl, sl, #1
 8008df4:	9304      	str	r3, [sp, #16]
 8008df6:	9307      	str	r3, [sp, #28]
 8008df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8008dfe:	4654      	mov	r4, sl
 8008e00:	2205      	movs	r2, #5
 8008e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e06:	4854      	ldr	r0, [pc, #336]	; (8008f58 <_vfiprintf_r+0x220>)
 8008e08:	f7f7 f9ea 	bl	80001e0 <memchr>
 8008e0c:	9a04      	ldr	r2, [sp, #16]
 8008e0e:	b9d8      	cbnz	r0, 8008e48 <_vfiprintf_r+0x110>
 8008e10:	06d1      	lsls	r1, r2, #27
 8008e12:	bf44      	itt	mi
 8008e14:	2320      	movmi	r3, #32
 8008e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e1a:	0713      	lsls	r3, r2, #28
 8008e1c:	bf44      	itt	mi
 8008e1e:	232b      	movmi	r3, #43	; 0x2b
 8008e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e24:	f89a 3000 	ldrb.w	r3, [sl]
 8008e28:	2b2a      	cmp	r3, #42	; 0x2a
 8008e2a:	d015      	beq.n	8008e58 <_vfiprintf_r+0x120>
 8008e2c:	9a07      	ldr	r2, [sp, #28]
 8008e2e:	4654      	mov	r4, sl
 8008e30:	2000      	movs	r0, #0
 8008e32:	f04f 0c0a 	mov.w	ip, #10
 8008e36:	4621      	mov	r1, r4
 8008e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e3c:	3b30      	subs	r3, #48	; 0x30
 8008e3e:	2b09      	cmp	r3, #9
 8008e40:	d94d      	bls.n	8008ede <_vfiprintf_r+0x1a6>
 8008e42:	b1b0      	cbz	r0, 8008e72 <_vfiprintf_r+0x13a>
 8008e44:	9207      	str	r2, [sp, #28]
 8008e46:	e014      	b.n	8008e72 <_vfiprintf_r+0x13a>
 8008e48:	eba0 0308 	sub.w	r3, r0, r8
 8008e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e50:	4313      	orrs	r3, r2
 8008e52:	9304      	str	r3, [sp, #16]
 8008e54:	46a2      	mov	sl, r4
 8008e56:	e7d2      	b.n	8008dfe <_vfiprintf_r+0xc6>
 8008e58:	9b03      	ldr	r3, [sp, #12]
 8008e5a:	1d19      	adds	r1, r3, #4
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	9103      	str	r1, [sp, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	bfbb      	ittet	lt
 8008e64:	425b      	neglt	r3, r3
 8008e66:	f042 0202 	orrlt.w	r2, r2, #2
 8008e6a:	9307      	strge	r3, [sp, #28]
 8008e6c:	9307      	strlt	r3, [sp, #28]
 8008e6e:	bfb8      	it	lt
 8008e70:	9204      	strlt	r2, [sp, #16]
 8008e72:	7823      	ldrb	r3, [r4, #0]
 8008e74:	2b2e      	cmp	r3, #46	; 0x2e
 8008e76:	d10c      	bne.n	8008e92 <_vfiprintf_r+0x15a>
 8008e78:	7863      	ldrb	r3, [r4, #1]
 8008e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e7c:	d134      	bne.n	8008ee8 <_vfiprintf_r+0x1b0>
 8008e7e:	9b03      	ldr	r3, [sp, #12]
 8008e80:	1d1a      	adds	r2, r3, #4
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	9203      	str	r2, [sp, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	bfb8      	it	lt
 8008e8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e8e:	3402      	adds	r4, #2
 8008e90:	9305      	str	r3, [sp, #20]
 8008e92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008f68 <_vfiprintf_r+0x230>
 8008e96:	7821      	ldrb	r1, [r4, #0]
 8008e98:	2203      	movs	r2, #3
 8008e9a:	4650      	mov	r0, sl
 8008e9c:	f7f7 f9a0 	bl	80001e0 <memchr>
 8008ea0:	b138      	cbz	r0, 8008eb2 <_vfiprintf_r+0x17a>
 8008ea2:	9b04      	ldr	r3, [sp, #16]
 8008ea4:	eba0 000a 	sub.w	r0, r0, sl
 8008ea8:	2240      	movs	r2, #64	; 0x40
 8008eaa:	4082      	lsls	r2, r0
 8008eac:	4313      	orrs	r3, r2
 8008eae:	3401      	adds	r4, #1
 8008eb0:	9304      	str	r3, [sp, #16]
 8008eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb6:	4829      	ldr	r0, [pc, #164]	; (8008f5c <_vfiprintf_r+0x224>)
 8008eb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ebc:	2206      	movs	r2, #6
 8008ebe:	f7f7 f98f 	bl	80001e0 <memchr>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	d03f      	beq.n	8008f46 <_vfiprintf_r+0x20e>
 8008ec6:	4b26      	ldr	r3, [pc, #152]	; (8008f60 <_vfiprintf_r+0x228>)
 8008ec8:	bb1b      	cbnz	r3, 8008f12 <_vfiprintf_r+0x1da>
 8008eca:	9b03      	ldr	r3, [sp, #12]
 8008ecc:	3307      	adds	r3, #7
 8008ece:	f023 0307 	bic.w	r3, r3, #7
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	9303      	str	r3, [sp, #12]
 8008ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed8:	443b      	add	r3, r7
 8008eda:	9309      	str	r3, [sp, #36]	; 0x24
 8008edc:	e768      	b.n	8008db0 <_vfiprintf_r+0x78>
 8008ede:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	2001      	movs	r0, #1
 8008ee6:	e7a6      	b.n	8008e36 <_vfiprintf_r+0xfe>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	3401      	adds	r4, #1
 8008eec:	9305      	str	r3, [sp, #20]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	f04f 0c0a 	mov.w	ip, #10
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008efa:	3a30      	subs	r2, #48	; 0x30
 8008efc:	2a09      	cmp	r2, #9
 8008efe:	d903      	bls.n	8008f08 <_vfiprintf_r+0x1d0>
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d0c6      	beq.n	8008e92 <_vfiprintf_r+0x15a>
 8008f04:	9105      	str	r1, [sp, #20]
 8008f06:	e7c4      	b.n	8008e92 <_vfiprintf_r+0x15a>
 8008f08:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e7f0      	b.n	8008ef4 <_vfiprintf_r+0x1bc>
 8008f12:	ab03      	add	r3, sp, #12
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	462a      	mov	r2, r5
 8008f18:	4b12      	ldr	r3, [pc, #72]	; (8008f64 <_vfiprintf_r+0x22c>)
 8008f1a:	a904      	add	r1, sp, #16
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	f3af 8000 	nop.w
 8008f22:	4607      	mov	r7, r0
 8008f24:	1c78      	adds	r0, r7, #1
 8008f26:	d1d6      	bne.n	8008ed6 <_vfiprintf_r+0x19e>
 8008f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f2a:	07d9      	lsls	r1, r3, #31
 8008f2c:	d405      	bmi.n	8008f3a <_vfiprintf_r+0x202>
 8008f2e:	89ab      	ldrh	r3, [r5, #12]
 8008f30:	059a      	lsls	r2, r3, #22
 8008f32:	d402      	bmi.n	8008f3a <_vfiprintf_r+0x202>
 8008f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f36:	f7ff fddb 	bl	8008af0 <__retarget_lock_release_recursive>
 8008f3a:	89ab      	ldrh	r3, [r5, #12]
 8008f3c:	065b      	lsls	r3, r3, #25
 8008f3e:	f53f af1d 	bmi.w	8008d7c <_vfiprintf_r+0x44>
 8008f42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f44:	e71c      	b.n	8008d80 <_vfiprintf_r+0x48>
 8008f46:	ab03      	add	r3, sp, #12
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	462a      	mov	r2, r5
 8008f4c:	4b05      	ldr	r3, [pc, #20]	; (8008f64 <_vfiprintf_r+0x22c>)
 8008f4e:	a904      	add	r1, sp, #16
 8008f50:	4630      	mov	r0, r6
 8008f52:	f000 f879 	bl	8009048 <_printf_i>
 8008f56:	e7e4      	b.n	8008f22 <_vfiprintf_r+0x1ea>
 8008f58:	0800bb78 	.word	0x0800bb78
 8008f5c:	0800bb82 	.word	0x0800bb82
 8008f60:	00000000 	.word	0x00000000
 8008f64:	08008d13 	.word	0x08008d13
 8008f68:	0800bb7e 	.word	0x0800bb7e

08008f6c <_printf_common>:
 8008f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	4616      	mov	r6, r2
 8008f72:	4699      	mov	r9, r3
 8008f74:	688a      	ldr	r2, [r1, #8]
 8008f76:	690b      	ldr	r3, [r1, #16]
 8008f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	bfb8      	it	lt
 8008f80:	4613      	movlt	r3, r2
 8008f82:	6033      	str	r3, [r6, #0]
 8008f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f88:	4607      	mov	r7, r0
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	b10a      	cbz	r2, 8008f92 <_printf_common+0x26>
 8008f8e:	3301      	adds	r3, #1
 8008f90:	6033      	str	r3, [r6, #0]
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	0699      	lsls	r1, r3, #26
 8008f96:	bf42      	ittt	mi
 8008f98:	6833      	ldrmi	r3, [r6, #0]
 8008f9a:	3302      	addmi	r3, #2
 8008f9c:	6033      	strmi	r3, [r6, #0]
 8008f9e:	6825      	ldr	r5, [r4, #0]
 8008fa0:	f015 0506 	ands.w	r5, r5, #6
 8008fa4:	d106      	bne.n	8008fb4 <_printf_common+0x48>
 8008fa6:	f104 0a19 	add.w	sl, r4, #25
 8008faa:	68e3      	ldr	r3, [r4, #12]
 8008fac:	6832      	ldr	r2, [r6, #0]
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	42ab      	cmp	r3, r5
 8008fb2:	dc26      	bgt.n	8009002 <_printf_common+0x96>
 8008fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fb8:	1e13      	subs	r3, r2, #0
 8008fba:	6822      	ldr	r2, [r4, #0]
 8008fbc:	bf18      	it	ne
 8008fbe:	2301      	movne	r3, #1
 8008fc0:	0692      	lsls	r2, r2, #26
 8008fc2:	d42b      	bmi.n	800901c <_printf_common+0xb0>
 8008fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fc8:	4649      	mov	r1, r9
 8008fca:	4638      	mov	r0, r7
 8008fcc:	47c0      	blx	r8
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d01e      	beq.n	8009010 <_printf_common+0xa4>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	6922      	ldr	r2, [r4, #16]
 8008fd6:	f003 0306 	and.w	r3, r3, #6
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	bf02      	ittt	eq
 8008fde:	68e5      	ldreq	r5, [r4, #12]
 8008fe0:	6833      	ldreq	r3, [r6, #0]
 8008fe2:	1aed      	subeq	r5, r5, r3
 8008fe4:	68a3      	ldr	r3, [r4, #8]
 8008fe6:	bf0c      	ite	eq
 8008fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fec:	2500      	movne	r5, #0
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	bfc4      	itt	gt
 8008ff2:	1a9b      	subgt	r3, r3, r2
 8008ff4:	18ed      	addgt	r5, r5, r3
 8008ff6:	2600      	movs	r6, #0
 8008ff8:	341a      	adds	r4, #26
 8008ffa:	42b5      	cmp	r5, r6
 8008ffc:	d11a      	bne.n	8009034 <_printf_common+0xc8>
 8008ffe:	2000      	movs	r0, #0
 8009000:	e008      	b.n	8009014 <_printf_common+0xa8>
 8009002:	2301      	movs	r3, #1
 8009004:	4652      	mov	r2, sl
 8009006:	4649      	mov	r1, r9
 8009008:	4638      	mov	r0, r7
 800900a:	47c0      	blx	r8
 800900c:	3001      	adds	r0, #1
 800900e:	d103      	bne.n	8009018 <_printf_common+0xac>
 8009010:	f04f 30ff 	mov.w	r0, #4294967295
 8009014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009018:	3501      	adds	r5, #1
 800901a:	e7c6      	b.n	8008faa <_printf_common+0x3e>
 800901c:	18e1      	adds	r1, r4, r3
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	2030      	movs	r0, #48	; 0x30
 8009022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009026:	4422      	add	r2, r4
 8009028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800902c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009030:	3302      	adds	r3, #2
 8009032:	e7c7      	b.n	8008fc4 <_printf_common+0x58>
 8009034:	2301      	movs	r3, #1
 8009036:	4622      	mov	r2, r4
 8009038:	4649      	mov	r1, r9
 800903a:	4638      	mov	r0, r7
 800903c:	47c0      	blx	r8
 800903e:	3001      	adds	r0, #1
 8009040:	d0e6      	beq.n	8009010 <_printf_common+0xa4>
 8009042:	3601      	adds	r6, #1
 8009044:	e7d9      	b.n	8008ffa <_printf_common+0x8e>
	...

08009048 <_printf_i>:
 8009048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800904c:	7e0f      	ldrb	r7, [r1, #24]
 800904e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009050:	2f78      	cmp	r7, #120	; 0x78
 8009052:	4691      	mov	r9, r2
 8009054:	4680      	mov	r8, r0
 8009056:	460c      	mov	r4, r1
 8009058:	469a      	mov	sl, r3
 800905a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800905e:	d807      	bhi.n	8009070 <_printf_i+0x28>
 8009060:	2f62      	cmp	r7, #98	; 0x62
 8009062:	d80a      	bhi.n	800907a <_printf_i+0x32>
 8009064:	2f00      	cmp	r7, #0
 8009066:	f000 80d4 	beq.w	8009212 <_printf_i+0x1ca>
 800906a:	2f58      	cmp	r7, #88	; 0x58
 800906c:	f000 80c0 	beq.w	80091f0 <_printf_i+0x1a8>
 8009070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009078:	e03a      	b.n	80090f0 <_printf_i+0xa8>
 800907a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800907e:	2b15      	cmp	r3, #21
 8009080:	d8f6      	bhi.n	8009070 <_printf_i+0x28>
 8009082:	a101      	add	r1, pc, #4	; (adr r1, 8009088 <_printf_i+0x40>)
 8009084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009088:	080090e1 	.word	0x080090e1
 800908c:	080090f5 	.word	0x080090f5
 8009090:	08009071 	.word	0x08009071
 8009094:	08009071 	.word	0x08009071
 8009098:	08009071 	.word	0x08009071
 800909c:	08009071 	.word	0x08009071
 80090a0:	080090f5 	.word	0x080090f5
 80090a4:	08009071 	.word	0x08009071
 80090a8:	08009071 	.word	0x08009071
 80090ac:	08009071 	.word	0x08009071
 80090b0:	08009071 	.word	0x08009071
 80090b4:	080091f9 	.word	0x080091f9
 80090b8:	08009121 	.word	0x08009121
 80090bc:	080091b3 	.word	0x080091b3
 80090c0:	08009071 	.word	0x08009071
 80090c4:	08009071 	.word	0x08009071
 80090c8:	0800921b 	.word	0x0800921b
 80090cc:	08009071 	.word	0x08009071
 80090d0:	08009121 	.word	0x08009121
 80090d4:	08009071 	.word	0x08009071
 80090d8:	08009071 	.word	0x08009071
 80090dc:	080091bb 	.word	0x080091bb
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	1d1a      	adds	r2, r3, #4
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	602a      	str	r2, [r5, #0]
 80090e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090f0:	2301      	movs	r3, #1
 80090f2:	e09f      	b.n	8009234 <_printf_i+0x1ec>
 80090f4:	6820      	ldr	r0, [r4, #0]
 80090f6:	682b      	ldr	r3, [r5, #0]
 80090f8:	0607      	lsls	r7, r0, #24
 80090fa:	f103 0104 	add.w	r1, r3, #4
 80090fe:	6029      	str	r1, [r5, #0]
 8009100:	d501      	bpl.n	8009106 <_printf_i+0xbe>
 8009102:	681e      	ldr	r6, [r3, #0]
 8009104:	e003      	b.n	800910e <_printf_i+0xc6>
 8009106:	0646      	lsls	r6, r0, #25
 8009108:	d5fb      	bpl.n	8009102 <_printf_i+0xba>
 800910a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800910e:	2e00      	cmp	r6, #0
 8009110:	da03      	bge.n	800911a <_printf_i+0xd2>
 8009112:	232d      	movs	r3, #45	; 0x2d
 8009114:	4276      	negs	r6, r6
 8009116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800911a:	485a      	ldr	r0, [pc, #360]	; (8009284 <_printf_i+0x23c>)
 800911c:	230a      	movs	r3, #10
 800911e:	e012      	b.n	8009146 <_printf_i+0xfe>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	6820      	ldr	r0, [r4, #0]
 8009124:	1d19      	adds	r1, r3, #4
 8009126:	6029      	str	r1, [r5, #0]
 8009128:	0605      	lsls	r5, r0, #24
 800912a:	d501      	bpl.n	8009130 <_printf_i+0xe8>
 800912c:	681e      	ldr	r6, [r3, #0]
 800912e:	e002      	b.n	8009136 <_printf_i+0xee>
 8009130:	0641      	lsls	r1, r0, #25
 8009132:	d5fb      	bpl.n	800912c <_printf_i+0xe4>
 8009134:	881e      	ldrh	r6, [r3, #0]
 8009136:	4853      	ldr	r0, [pc, #332]	; (8009284 <_printf_i+0x23c>)
 8009138:	2f6f      	cmp	r7, #111	; 0x6f
 800913a:	bf0c      	ite	eq
 800913c:	2308      	moveq	r3, #8
 800913e:	230a      	movne	r3, #10
 8009140:	2100      	movs	r1, #0
 8009142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009146:	6865      	ldr	r5, [r4, #4]
 8009148:	60a5      	str	r5, [r4, #8]
 800914a:	2d00      	cmp	r5, #0
 800914c:	bfa2      	ittt	ge
 800914e:	6821      	ldrge	r1, [r4, #0]
 8009150:	f021 0104 	bicge.w	r1, r1, #4
 8009154:	6021      	strge	r1, [r4, #0]
 8009156:	b90e      	cbnz	r6, 800915c <_printf_i+0x114>
 8009158:	2d00      	cmp	r5, #0
 800915a:	d04b      	beq.n	80091f4 <_printf_i+0x1ac>
 800915c:	4615      	mov	r5, r2
 800915e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009162:	fb03 6711 	mls	r7, r3, r1, r6
 8009166:	5dc7      	ldrb	r7, [r0, r7]
 8009168:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800916c:	4637      	mov	r7, r6
 800916e:	42bb      	cmp	r3, r7
 8009170:	460e      	mov	r6, r1
 8009172:	d9f4      	bls.n	800915e <_printf_i+0x116>
 8009174:	2b08      	cmp	r3, #8
 8009176:	d10b      	bne.n	8009190 <_printf_i+0x148>
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	07de      	lsls	r6, r3, #31
 800917c:	d508      	bpl.n	8009190 <_printf_i+0x148>
 800917e:	6923      	ldr	r3, [r4, #16]
 8009180:	6861      	ldr	r1, [r4, #4]
 8009182:	4299      	cmp	r1, r3
 8009184:	bfde      	ittt	le
 8009186:	2330      	movle	r3, #48	; 0x30
 8009188:	f805 3c01 	strble.w	r3, [r5, #-1]
 800918c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009190:	1b52      	subs	r2, r2, r5
 8009192:	6122      	str	r2, [r4, #16]
 8009194:	f8cd a000 	str.w	sl, [sp]
 8009198:	464b      	mov	r3, r9
 800919a:	aa03      	add	r2, sp, #12
 800919c:	4621      	mov	r1, r4
 800919e:	4640      	mov	r0, r8
 80091a0:	f7ff fee4 	bl	8008f6c <_printf_common>
 80091a4:	3001      	adds	r0, #1
 80091a6:	d14a      	bne.n	800923e <_printf_i+0x1f6>
 80091a8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ac:	b004      	add	sp, #16
 80091ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	f043 0320 	orr.w	r3, r3, #32
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	4833      	ldr	r0, [pc, #204]	; (8009288 <_printf_i+0x240>)
 80091bc:	2778      	movs	r7, #120	; 0x78
 80091be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	6829      	ldr	r1, [r5, #0]
 80091c6:	061f      	lsls	r7, r3, #24
 80091c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80091cc:	d402      	bmi.n	80091d4 <_printf_i+0x18c>
 80091ce:	065f      	lsls	r7, r3, #25
 80091d0:	bf48      	it	mi
 80091d2:	b2b6      	uxthmi	r6, r6
 80091d4:	07df      	lsls	r7, r3, #31
 80091d6:	bf48      	it	mi
 80091d8:	f043 0320 	orrmi.w	r3, r3, #32
 80091dc:	6029      	str	r1, [r5, #0]
 80091de:	bf48      	it	mi
 80091e0:	6023      	strmi	r3, [r4, #0]
 80091e2:	b91e      	cbnz	r6, 80091ec <_printf_i+0x1a4>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	f023 0320 	bic.w	r3, r3, #32
 80091ea:	6023      	str	r3, [r4, #0]
 80091ec:	2310      	movs	r3, #16
 80091ee:	e7a7      	b.n	8009140 <_printf_i+0xf8>
 80091f0:	4824      	ldr	r0, [pc, #144]	; (8009284 <_printf_i+0x23c>)
 80091f2:	e7e4      	b.n	80091be <_printf_i+0x176>
 80091f4:	4615      	mov	r5, r2
 80091f6:	e7bd      	b.n	8009174 <_printf_i+0x12c>
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	6826      	ldr	r6, [r4, #0]
 80091fc:	6961      	ldr	r1, [r4, #20]
 80091fe:	1d18      	adds	r0, r3, #4
 8009200:	6028      	str	r0, [r5, #0]
 8009202:	0635      	lsls	r5, r6, #24
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	d501      	bpl.n	800920c <_printf_i+0x1c4>
 8009208:	6019      	str	r1, [r3, #0]
 800920a:	e002      	b.n	8009212 <_printf_i+0x1ca>
 800920c:	0670      	lsls	r0, r6, #25
 800920e:	d5fb      	bpl.n	8009208 <_printf_i+0x1c0>
 8009210:	8019      	strh	r1, [r3, #0]
 8009212:	2300      	movs	r3, #0
 8009214:	6123      	str	r3, [r4, #16]
 8009216:	4615      	mov	r5, r2
 8009218:	e7bc      	b.n	8009194 <_printf_i+0x14c>
 800921a:	682b      	ldr	r3, [r5, #0]
 800921c:	1d1a      	adds	r2, r3, #4
 800921e:	602a      	str	r2, [r5, #0]
 8009220:	681d      	ldr	r5, [r3, #0]
 8009222:	6862      	ldr	r2, [r4, #4]
 8009224:	2100      	movs	r1, #0
 8009226:	4628      	mov	r0, r5
 8009228:	f7f6 ffda 	bl	80001e0 <memchr>
 800922c:	b108      	cbz	r0, 8009232 <_printf_i+0x1ea>
 800922e:	1b40      	subs	r0, r0, r5
 8009230:	6060      	str	r0, [r4, #4]
 8009232:	6863      	ldr	r3, [r4, #4]
 8009234:	6123      	str	r3, [r4, #16]
 8009236:	2300      	movs	r3, #0
 8009238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800923c:	e7aa      	b.n	8009194 <_printf_i+0x14c>
 800923e:	6923      	ldr	r3, [r4, #16]
 8009240:	462a      	mov	r2, r5
 8009242:	4649      	mov	r1, r9
 8009244:	4640      	mov	r0, r8
 8009246:	47d0      	blx	sl
 8009248:	3001      	adds	r0, #1
 800924a:	d0ad      	beq.n	80091a8 <_printf_i+0x160>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	079b      	lsls	r3, r3, #30
 8009250:	d413      	bmi.n	800927a <_printf_i+0x232>
 8009252:	68e0      	ldr	r0, [r4, #12]
 8009254:	9b03      	ldr	r3, [sp, #12]
 8009256:	4298      	cmp	r0, r3
 8009258:	bfb8      	it	lt
 800925a:	4618      	movlt	r0, r3
 800925c:	e7a6      	b.n	80091ac <_printf_i+0x164>
 800925e:	2301      	movs	r3, #1
 8009260:	4632      	mov	r2, r6
 8009262:	4649      	mov	r1, r9
 8009264:	4640      	mov	r0, r8
 8009266:	47d0      	blx	sl
 8009268:	3001      	adds	r0, #1
 800926a:	d09d      	beq.n	80091a8 <_printf_i+0x160>
 800926c:	3501      	adds	r5, #1
 800926e:	68e3      	ldr	r3, [r4, #12]
 8009270:	9903      	ldr	r1, [sp, #12]
 8009272:	1a5b      	subs	r3, r3, r1
 8009274:	42ab      	cmp	r3, r5
 8009276:	dcf2      	bgt.n	800925e <_printf_i+0x216>
 8009278:	e7eb      	b.n	8009252 <_printf_i+0x20a>
 800927a:	2500      	movs	r5, #0
 800927c:	f104 0619 	add.w	r6, r4, #25
 8009280:	e7f5      	b.n	800926e <_printf_i+0x226>
 8009282:	bf00      	nop
 8009284:	0800bb89 	.word	0x0800bb89
 8009288:	0800bb9a 	.word	0x0800bb9a

0800928c <__sflush_r>:
 800928c:	898a      	ldrh	r2, [r1, #12]
 800928e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009292:	4605      	mov	r5, r0
 8009294:	0710      	lsls	r0, r2, #28
 8009296:	460c      	mov	r4, r1
 8009298:	d458      	bmi.n	800934c <__sflush_r+0xc0>
 800929a:	684b      	ldr	r3, [r1, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	dc05      	bgt.n	80092ac <__sflush_r+0x20>
 80092a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	dc02      	bgt.n	80092ac <__sflush_r+0x20>
 80092a6:	2000      	movs	r0, #0
 80092a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092ae:	2e00      	cmp	r6, #0
 80092b0:	d0f9      	beq.n	80092a6 <__sflush_r+0x1a>
 80092b2:	2300      	movs	r3, #0
 80092b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092b8:	682f      	ldr	r7, [r5, #0]
 80092ba:	6a21      	ldr	r1, [r4, #32]
 80092bc:	602b      	str	r3, [r5, #0]
 80092be:	d032      	beq.n	8009326 <__sflush_r+0x9a>
 80092c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	075a      	lsls	r2, r3, #29
 80092c6:	d505      	bpl.n	80092d4 <__sflush_r+0x48>
 80092c8:	6863      	ldr	r3, [r4, #4]
 80092ca:	1ac0      	subs	r0, r0, r3
 80092cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092ce:	b10b      	cbz	r3, 80092d4 <__sflush_r+0x48>
 80092d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092d2:	1ac0      	subs	r0, r0, r3
 80092d4:	2300      	movs	r3, #0
 80092d6:	4602      	mov	r2, r0
 80092d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092da:	6a21      	ldr	r1, [r4, #32]
 80092dc:	4628      	mov	r0, r5
 80092de:	47b0      	blx	r6
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	d106      	bne.n	80092f4 <__sflush_r+0x68>
 80092e6:	6829      	ldr	r1, [r5, #0]
 80092e8:	291d      	cmp	r1, #29
 80092ea:	d82b      	bhi.n	8009344 <__sflush_r+0xb8>
 80092ec:	4a29      	ldr	r2, [pc, #164]	; (8009394 <__sflush_r+0x108>)
 80092ee:	410a      	asrs	r2, r1
 80092f0:	07d6      	lsls	r6, r2, #31
 80092f2:	d427      	bmi.n	8009344 <__sflush_r+0xb8>
 80092f4:	2200      	movs	r2, #0
 80092f6:	6062      	str	r2, [r4, #4]
 80092f8:	04d9      	lsls	r1, r3, #19
 80092fa:	6922      	ldr	r2, [r4, #16]
 80092fc:	6022      	str	r2, [r4, #0]
 80092fe:	d504      	bpl.n	800930a <__sflush_r+0x7e>
 8009300:	1c42      	adds	r2, r0, #1
 8009302:	d101      	bne.n	8009308 <__sflush_r+0x7c>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	b903      	cbnz	r3, 800930a <__sflush_r+0x7e>
 8009308:	6560      	str	r0, [r4, #84]	; 0x54
 800930a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800930c:	602f      	str	r7, [r5, #0]
 800930e:	2900      	cmp	r1, #0
 8009310:	d0c9      	beq.n	80092a6 <__sflush_r+0x1a>
 8009312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009316:	4299      	cmp	r1, r3
 8009318:	d002      	beq.n	8009320 <__sflush_r+0x94>
 800931a:	4628      	mov	r0, r5
 800931c:	f7ff fbea 	bl	8008af4 <_free_r>
 8009320:	2000      	movs	r0, #0
 8009322:	6360      	str	r0, [r4, #52]	; 0x34
 8009324:	e7c0      	b.n	80092a8 <__sflush_r+0x1c>
 8009326:	2301      	movs	r3, #1
 8009328:	4628      	mov	r0, r5
 800932a:	47b0      	blx	r6
 800932c:	1c41      	adds	r1, r0, #1
 800932e:	d1c8      	bne.n	80092c2 <__sflush_r+0x36>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d0c5      	beq.n	80092c2 <__sflush_r+0x36>
 8009336:	2b1d      	cmp	r3, #29
 8009338:	d001      	beq.n	800933e <__sflush_r+0xb2>
 800933a:	2b16      	cmp	r3, #22
 800933c:	d101      	bne.n	8009342 <__sflush_r+0xb6>
 800933e:	602f      	str	r7, [r5, #0]
 8009340:	e7b1      	b.n	80092a6 <__sflush_r+0x1a>
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009348:	81a3      	strh	r3, [r4, #12]
 800934a:	e7ad      	b.n	80092a8 <__sflush_r+0x1c>
 800934c:	690f      	ldr	r7, [r1, #16]
 800934e:	2f00      	cmp	r7, #0
 8009350:	d0a9      	beq.n	80092a6 <__sflush_r+0x1a>
 8009352:	0793      	lsls	r3, r2, #30
 8009354:	680e      	ldr	r6, [r1, #0]
 8009356:	bf08      	it	eq
 8009358:	694b      	ldreq	r3, [r1, #20]
 800935a:	600f      	str	r7, [r1, #0]
 800935c:	bf18      	it	ne
 800935e:	2300      	movne	r3, #0
 8009360:	eba6 0807 	sub.w	r8, r6, r7
 8009364:	608b      	str	r3, [r1, #8]
 8009366:	f1b8 0f00 	cmp.w	r8, #0
 800936a:	dd9c      	ble.n	80092a6 <__sflush_r+0x1a>
 800936c:	6a21      	ldr	r1, [r4, #32]
 800936e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009370:	4643      	mov	r3, r8
 8009372:	463a      	mov	r2, r7
 8009374:	4628      	mov	r0, r5
 8009376:	47b0      	blx	r6
 8009378:	2800      	cmp	r0, #0
 800937a:	dc06      	bgt.n	800938a <__sflush_r+0xfe>
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	f04f 30ff 	mov.w	r0, #4294967295
 8009388:	e78e      	b.n	80092a8 <__sflush_r+0x1c>
 800938a:	4407      	add	r7, r0
 800938c:	eba8 0800 	sub.w	r8, r8, r0
 8009390:	e7e9      	b.n	8009366 <__sflush_r+0xda>
 8009392:	bf00      	nop
 8009394:	dfbffffe 	.word	0xdfbffffe

08009398 <_fflush_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	690b      	ldr	r3, [r1, #16]
 800939c:	4605      	mov	r5, r0
 800939e:	460c      	mov	r4, r1
 80093a0:	b913      	cbnz	r3, 80093a8 <_fflush_r+0x10>
 80093a2:	2500      	movs	r5, #0
 80093a4:	4628      	mov	r0, r5
 80093a6:	bd38      	pop	{r3, r4, r5, pc}
 80093a8:	b118      	cbz	r0, 80093b2 <_fflush_r+0x1a>
 80093aa:	6a03      	ldr	r3, [r0, #32]
 80093ac:	b90b      	cbnz	r3, 80093b2 <_fflush_r+0x1a>
 80093ae:	f7ff fa99 	bl	80088e4 <__sinit>
 80093b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0f3      	beq.n	80093a2 <_fflush_r+0xa>
 80093ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093bc:	07d0      	lsls	r0, r2, #31
 80093be:	d404      	bmi.n	80093ca <_fflush_r+0x32>
 80093c0:	0599      	lsls	r1, r3, #22
 80093c2:	d402      	bmi.n	80093ca <_fflush_r+0x32>
 80093c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093c6:	f7ff fb92 	bl	8008aee <__retarget_lock_acquire_recursive>
 80093ca:	4628      	mov	r0, r5
 80093cc:	4621      	mov	r1, r4
 80093ce:	f7ff ff5d 	bl	800928c <__sflush_r>
 80093d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093d4:	07da      	lsls	r2, r3, #31
 80093d6:	4605      	mov	r5, r0
 80093d8:	d4e4      	bmi.n	80093a4 <_fflush_r+0xc>
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	059b      	lsls	r3, r3, #22
 80093de:	d4e1      	bmi.n	80093a4 <_fflush_r+0xc>
 80093e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093e2:	f7ff fb85 	bl	8008af0 <__retarget_lock_release_recursive>
 80093e6:	e7dd      	b.n	80093a4 <_fflush_r+0xc>

080093e8 <__swbuf_r>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	460e      	mov	r6, r1
 80093ec:	4614      	mov	r4, r2
 80093ee:	4605      	mov	r5, r0
 80093f0:	b118      	cbz	r0, 80093fa <__swbuf_r+0x12>
 80093f2:	6a03      	ldr	r3, [r0, #32]
 80093f4:	b90b      	cbnz	r3, 80093fa <__swbuf_r+0x12>
 80093f6:	f7ff fa75 	bl	80088e4 <__sinit>
 80093fa:	69a3      	ldr	r3, [r4, #24]
 80093fc:	60a3      	str	r3, [r4, #8]
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	071a      	lsls	r2, r3, #28
 8009402:	d525      	bpl.n	8009450 <__swbuf_r+0x68>
 8009404:	6923      	ldr	r3, [r4, #16]
 8009406:	b31b      	cbz	r3, 8009450 <__swbuf_r+0x68>
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	6922      	ldr	r2, [r4, #16]
 800940c:	1a98      	subs	r0, r3, r2
 800940e:	6963      	ldr	r3, [r4, #20]
 8009410:	b2f6      	uxtb	r6, r6
 8009412:	4283      	cmp	r3, r0
 8009414:	4637      	mov	r7, r6
 8009416:	dc04      	bgt.n	8009422 <__swbuf_r+0x3a>
 8009418:	4621      	mov	r1, r4
 800941a:	4628      	mov	r0, r5
 800941c:	f7ff ffbc 	bl	8009398 <_fflush_r>
 8009420:	b9e0      	cbnz	r0, 800945c <__swbuf_r+0x74>
 8009422:	68a3      	ldr	r3, [r4, #8]
 8009424:	3b01      	subs	r3, #1
 8009426:	60a3      	str	r3, [r4, #8]
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	6022      	str	r2, [r4, #0]
 800942e:	701e      	strb	r6, [r3, #0]
 8009430:	6962      	ldr	r2, [r4, #20]
 8009432:	1c43      	adds	r3, r0, #1
 8009434:	429a      	cmp	r2, r3
 8009436:	d004      	beq.n	8009442 <__swbuf_r+0x5a>
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	07db      	lsls	r3, r3, #31
 800943c:	d506      	bpl.n	800944c <__swbuf_r+0x64>
 800943e:	2e0a      	cmp	r6, #10
 8009440:	d104      	bne.n	800944c <__swbuf_r+0x64>
 8009442:	4621      	mov	r1, r4
 8009444:	4628      	mov	r0, r5
 8009446:	f7ff ffa7 	bl	8009398 <_fflush_r>
 800944a:	b938      	cbnz	r0, 800945c <__swbuf_r+0x74>
 800944c:	4638      	mov	r0, r7
 800944e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009450:	4621      	mov	r1, r4
 8009452:	4628      	mov	r0, r5
 8009454:	f000 f806 	bl	8009464 <__swsetup_r>
 8009458:	2800      	cmp	r0, #0
 800945a:	d0d5      	beq.n	8009408 <__swbuf_r+0x20>
 800945c:	f04f 37ff 	mov.w	r7, #4294967295
 8009460:	e7f4      	b.n	800944c <__swbuf_r+0x64>
	...

08009464 <__swsetup_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4b2a      	ldr	r3, [pc, #168]	; (8009510 <__swsetup_r+0xac>)
 8009468:	4605      	mov	r5, r0
 800946a:	6818      	ldr	r0, [r3, #0]
 800946c:	460c      	mov	r4, r1
 800946e:	b118      	cbz	r0, 8009478 <__swsetup_r+0x14>
 8009470:	6a03      	ldr	r3, [r0, #32]
 8009472:	b90b      	cbnz	r3, 8009478 <__swsetup_r+0x14>
 8009474:	f7ff fa36 	bl	80088e4 <__sinit>
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800947e:	0718      	lsls	r0, r3, #28
 8009480:	d422      	bmi.n	80094c8 <__swsetup_r+0x64>
 8009482:	06d9      	lsls	r1, r3, #27
 8009484:	d407      	bmi.n	8009496 <__swsetup_r+0x32>
 8009486:	2309      	movs	r3, #9
 8009488:	602b      	str	r3, [r5, #0]
 800948a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800948e:	81a3      	strh	r3, [r4, #12]
 8009490:	f04f 30ff 	mov.w	r0, #4294967295
 8009494:	e034      	b.n	8009500 <__swsetup_r+0x9c>
 8009496:	0758      	lsls	r0, r3, #29
 8009498:	d512      	bpl.n	80094c0 <__swsetup_r+0x5c>
 800949a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800949c:	b141      	cbz	r1, 80094b0 <__swsetup_r+0x4c>
 800949e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094a2:	4299      	cmp	r1, r3
 80094a4:	d002      	beq.n	80094ac <__swsetup_r+0x48>
 80094a6:	4628      	mov	r0, r5
 80094a8:	f7ff fb24 	bl	8008af4 <_free_r>
 80094ac:	2300      	movs	r3, #0
 80094ae:	6363      	str	r3, [r4, #52]	; 0x34
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	2300      	movs	r3, #0
 80094ba:	6063      	str	r3, [r4, #4]
 80094bc:	6923      	ldr	r3, [r4, #16]
 80094be:	6023      	str	r3, [r4, #0]
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	f043 0308 	orr.w	r3, r3, #8
 80094c6:	81a3      	strh	r3, [r4, #12]
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	b94b      	cbnz	r3, 80094e0 <__swsetup_r+0x7c>
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094d6:	d003      	beq.n	80094e0 <__swsetup_r+0x7c>
 80094d8:	4621      	mov	r1, r4
 80094da:	4628      	mov	r0, r5
 80094dc:	f000 f850 	bl	8009580 <__smakebuf_r>
 80094e0:	89a0      	ldrh	r0, [r4, #12]
 80094e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094e6:	f010 0301 	ands.w	r3, r0, #1
 80094ea:	d00a      	beq.n	8009502 <__swsetup_r+0x9e>
 80094ec:	2300      	movs	r3, #0
 80094ee:	60a3      	str	r3, [r4, #8]
 80094f0:	6963      	ldr	r3, [r4, #20]
 80094f2:	425b      	negs	r3, r3
 80094f4:	61a3      	str	r3, [r4, #24]
 80094f6:	6923      	ldr	r3, [r4, #16]
 80094f8:	b943      	cbnz	r3, 800950c <__swsetup_r+0xa8>
 80094fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80094fe:	d1c4      	bne.n	800948a <__swsetup_r+0x26>
 8009500:	bd38      	pop	{r3, r4, r5, pc}
 8009502:	0781      	lsls	r1, r0, #30
 8009504:	bf58      	it	pl
 8009506:	6963      	ldrpl	r3, [r4, #20]
 8009508:	60a3      	str	r3, [r4, #8]
 800950a:	e7f4      	b.n	80094f6 <__swsetup_r+0x92>
 800950c:	2000      	movs	r0, #0
 800950e:	e7f7      	b.n	8009500 <__swsetup_r+0x9c>
 8009510:	20000088 	.word	0x20000088

08009514 <_sbrk_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4d06      	ldr	r5, [pc, #24]	; (8009530 <_sbrk_r+0x1c>)
 8009518:	2300      	movs	r3, #0
 800951a:	4604      	mov	r4, r0
 800951c:	4608      	mov	r0, r1
 800951e:	602b      	str	r3, [r5, #0]
 8009520:	f7fa fac2 	bl	8003aa8 <_sbrk>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d102      	bne.n	800952e <_sbrk_r+0x1a>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	b103      	cbz	r3, 800952e <_sbrk_r+0x1a>
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	bd38      	pop	{r3, r4, r5, pc}
 8009530:	200004b8 	.word	0x200004b8

08009534 <__swhatbuf_r>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	460c      	mov	r4, r1
 8009538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800953c:	2900      	cmp	r1, #0
 800953e:	b096      	sub	sp, #88	; 0x58
 8009540:	4615      	mov	r5, r2
 8009542:	461e      	mov	r6, r3
 8009544:	da0d      	bge.n	8009562 <__swhatbuf_r+0x2e>
 8009546:	89a3      	ldrh	r3, [r4, #12]
 8009548:	f013 0f80 	tst.w	r3, #128	; 0x80
 800954c:	f04f 0100 	mov.w	r1, #0
 8009550:	bf0c      	ite	eq
 8009552:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009556:	2340      	movne	r3, #64	; 0x40
 8009558:	2000      	movs	r0, #0
 800955a:	6031      	str	r1, [r6, #0]
 800955c:	602b      	str	r3, [r5, #0]
 800955e:	b016      	add	sp, #88	; 0x58
 8009560:	bd70      	pop	{r4, r5, r6, pc}
 8009562:	466a      	mov	r2, sp
 8009564:	f000 f848 	bl	80095f8 <_fstat_r>
 8009568:	2800      	cmp	r0, #0
 800956a:	dbec      	blt.n	8009546 <__swhatbuf_r+0x12>
 800956c:	9901      	ldr	r1, [sp, #4]
 800956e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009572:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009576:	4259      	negs	r1, r3
 8009578:	4159      	adcs	r1, r3
 800957a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800957e:	e7eb      	b.n	8009558 <__swhatbuf_r+0x24>

08009580 <__smakebuf_r>:
 8009580:	898b      	ldrh	r3, [r1, #12]
 8009582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009584:	079d      	lsls	r5, r3, #30
 8009586:	4606      	mov	r6, r0
 8009588:	460c      	mov	r4, r1
 800958a:	d507      	bpl.n	800959c <__smakebuf_r+0x1c>
 800958c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	6123      	str	r3, [r4, #16]
 8009594:	2301      	movs	r3, #1
 8009596:	6163      	str	r3, [r4, #20]
 8009598:	b002      	add	sp, #8
 800959a:	bd70      	pop	{r4, r5, r6, pc}
 800959c:	ab01      	add	r3, sp, #4
 800959e:	466a      	mov	r2, sp
 80095a0:	f7ff ffc8 	bl	8009534 <__swhatbuf_r>
 80095a4:	9900      	ldr	r1, [sp, #0]
 80095a6:	4605      	mov	r5, r0
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7ff fb0f 	bl	8008bcc <_malloc_r>
 80095ae:	b948      	cbnz	r0, 80095c4 <__smakebuf_r+0x44>
 80095b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b4:	059a      	lsls	r2, r3, #22
 80095b6:	d4ef      	bmi.n	8009598 <__smakebuf_r+0x18>
 80095b8:	f023 0303 	bic.w	r3, r3, #3
 80095bc:	f043 0302 	orr.w	r3, r3, #2
 80095c0:	81a3      	strh	r3, [r4, #12]
 80095c2:	e7e3      	b.n	800958c <__smakebuf_r+0xc>
 80095c4:	89a3      	ldrh	r3, [r4, #12]
 80095c6:	6020      	str	r0, [r4, #0]
 80095c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095cc:	81a3      	strh	r3, [r4, #12]
 80095ce:	9b00      	ldr	r3, [sp, #0]
 80095d0:	6163      	str	r3, [r4, #20]
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	6120      	str	r0, [r4, #16]
 80095d6:	b15b      	cbz	r3, 80095f0 <__smakebuf_r+0x70>
 80095d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095dc:	4630      	mov	r0, r6
 80095de:	f000 f81d 	bl	800961c <_isatty_r>
 80095e2:	b128      	cbz	r0, 80095f0 <__smakebuf_r+0x70>
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	f023 0303 	bic.w	r3, r3, #3
 80095ea:	f043 0301 	orr.w	r3, r3, #1
 80095ee:	81a3      	strh	r3, [r4, #12]
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	431d      	orrs	r5, r3
 80095f4:	81a5      	strh	r5, [r4, #12]
 80095f6:	e7cf      	b.n	8009598 <__smakebuf_r+0x18>

080095f8 <_fstat_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	4d07      	ldr	r5, [pc, #28]	; (8009618 <_fstat_r+0x20>)
 80095fc:	2300      	movs	r3, #0
 80095fe:	4604      	mov	r4, r0
 8009600:	4608      	mov	r0, r1
 8009602:	4611      	mov	r1, r2
 8009604:	602b      	str	r3, [r5, #0]
 8009606:	f7fa fa26 	bl	8003a56 <_fstat>
 800960a:	1c43      	adds	r3, r0, #1
 800960c:	d102      	bne.n	8009614 <_fstat_r+0x1c>
 800960e:	682b      	ldr	r3, [r5, #0]
 8009610:	b103      	cbz	r3, 8009614 <_fstat_r+0x1c>
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	bd38      	pop	{r3, r4, r5, pc}
 8009616:	bf00      	nop
 8009618:	200004b8 	.word	0x200004b8

0800961c <_isatty_r>:
 800961c:	b538      	push	{r3, r4, r5, lr}
 800961e:	4d06      	ldr	r5, [pc, #24]	; (8009638 <_isatty_r+0x1c>)
 8009620:	2300      	movs	r3, #0
 8009622:	4604      	mov	r4, r0
 8009624:	4608      	mov	r0, r1
 8009626:	602b      	str	r3, [r5, #0]
 8009628:	f7fa fa25 	bl	8003a76 <_isatty>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d102      	bne.n	8009636 <_isatty_r+0x1a>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	b103      	cbz	r3, 8009636 <_isatty_r+0x1a>
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	200004b8 	.word	0x200004b8

0800963c <sqrt>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	ed2d 8b02 	vpush	{d8}
 8009642:	ec55 4b10 	vmov	r4, r5, d0
 8009646:	f000 f8d3 	bl	80097f0 <__ieee754_sqrt>
 800964a:	4622      	mov	r2, r4
 800964c:	462b      	mov	r3, r5
 800964e:	4620      	mov	r0, r4
 8009650:	4629      	mov	r1, r5
 8009652:	eeb0 8a40 	vmov.f32	s16, s0
 8009656:	eef0 8a60 	vmov.f32	s17, s1
 800965a:	f7f7 fa67 	bl	8000b2c <__aeabi_dcmpun>
 800965e:	b990      	cbnz	r0, 8009686 <sqrt+0x4a>
 8009660:	2200      	movs	r2, #0
 8009662:	2300      	movs	r3, #0
 8009664:	4620      	mov	r0, r4
 8009666:	4629      	mov	r1, r5
 8009668:	f7f7 fa38 	bl	8000adc <__aeabi_dcmplt>
 800966c:	b158      	cbz	r0, 8009686 <sqrt+0x4a>
 800966e:	f7ff fa13 	bl	8008a98 <__errno>
 8009672:	2321      	movs	r3, #33	; 0x21
 8009674:	6003      	str	r3, [r0, #0]
 8009676:	2200      	movs	r2, #0
 8009678:	2300      	movs	r3, #0
 800967a:	4610      	mov	r0, r2
 800967c:	4619      	mov	r1, r3
 800967e:	f7f7 f8e5 	bl	800084c <__aeabi_ddiv>
 8009682:	ec41 0b18 	vmov	d8, r0, r1
 8009686:	eeb0 0a48 	vmov.f32	s0, s16
 800968a:	eef0 0a68 	vmov.f32	s1, s17
 800968e:	ecbd 8b02 	vpop	{d8}
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	0000      	movs	r0, r0
	...

08009698 <cos>:
 8009698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800969a:	ec53 2b10 	vmov	r2, r3, d0
 800969e:	4826      	ldr	r0, [pc, #152]	; (8009738 <cos+0xa0>)
 80096a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80096a4:	4281      	cmp	r1, r0
 80096a6:	dc06      	bgt.n	80096b6 <cos+0x1e>
 80096a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009730 <cos+0x98>
 80096ac:	b005      	add	sp, #20
 80096ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80096b2:	f000 b979 	b.w	80099a8 <__kernel_cos>
 80096b6:	4821      	ldr	r0, [pc, #132]	; (800973c <cos+0xa4>)
 80096b8:	4281      	cmp	r1, r0
 80096ba:	dd09      	ble.n	80096d0 <cos+0x38>
 80096bc:	ee10 0a10 	vmov	r0, s0
 80096c0:	4619      	mov	r1, r3
 80096c2:	f7f6 fde1 	bl	8000288 <__aeabi_dsub>
 80096c6:	ec41 0b10 	vmov	d0, r0, r1
 80096ca:	b005      	add	sp, #20
 80096cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80096d0:	4668      	mov	r0, sp
 80096d2:	f000 faf1 	bl	8009cb8 <__ieee754_rem_pio2>
 80096d6:	f000 0003 	and.w	r0, r0, #3
 80096da:	2801      	cmp	r0, #1
 80096dc:	d00b      	beq.n	80096f6 <cos+0x5e>
 80096de:	2802      	cmp	r0, #2
 80096e0:	d016      	beq.n	8009710 <cos+0x78>
 80096e2:	b9e0      	cbnz	r0, 800971e <cos+0x86>
 80096e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096e8:	ed9d 0b00 	vldr	d0, [sp]
 80096ec:	f000 f95c 	bl	80099a8 <__kernel_cos>
 80096f0:	ec51 0b10 	vmov	r0, r1, d0
 80096f4:	e7e7      	b.n	80096c6 <cos+0x2e>
 80096f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096fa:	ed9d 0b00 	vldr	d0, [sp]
 80096fe:	f000 fa1b 	bl	8009b38 <__kernel_sin>
 8009702:	ec53 2b10 	vmov	r2, r3, d0
 8009706:	ee10 0a10 	vmov	r0, s0
 800970a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800970e:	e7da      	b.n	80096c6 <cos+0x2e>
 8009710:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009714:	ed9d 0b00 	vldr	d0, [sp]
 8009718:	f000 f946 	bl	80099a8 <__kernel_cos>
 800971c:	e7f1      	b.n	8009702 <cos+0x6a>
 800971e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009722:	ed9d 0b00 	vldr	d0, [sp]
 8009726:	2001      	movs	r0, #1
 8009728:	f000 fa06 	bl	8009b38 <__kernel_sin>
 800972c:	e7e0      	b.n	80096f0 <cos+0x58>
 800972e:	bf00      	nop
	...
 8009738:	3fe921fb 	.word	0x3fe921fb
 800973c:	7fefffff 	.word	0x7fefffff

08009740 <sin>:
 8009740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009742:	ec53 2b10 	vmov	r2, r3, d0
 8009746:	4828      	ldr	r0, [pc, #160]	; (80097e8 <sin+0xa8>)
 8009748:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800974c:	4281      	cmp	r1, r0
 800974e:	dc07      	bgt.n	8009760 <sin+0x20>
 8009750:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80097e0 <sin+0xa0>
 8009754:	2000      	movs	r0, #0
 8009756:	b005      	add	sp, #20
 8009758:	f85d eb04 	ldr.w	lr, [sp], #4
 800975c:	f000 b9ec 	b.w	8009b38 <__kernel_sin>
 8009760:	4822      	ldr	r0, [pc, #136]	; (80097ec <sin+0xac>)
 8009762:	4281      	cmp	r1, r0
 8009764:	dd09      	ble.n	800977a <sin+0x3a>
 8009766:	ee10 0a10 	vmov	r0, s0
 800976a:	4619      	mov	r1, r3
 800976c:	f7f6 fd8c 	bl	8000288 <__aeabi_dsub>
 8009770:	ec41 0b10 	vmov	d0, r0, r1
 8009774:	b005      	add	sp, #20
 8009776:	f85d fb04 	ldr.w	pc, [sp], #4
 800977a:	4668      	mov	r0, sp
 800977c:	f000 fa9c 	bl	8009cb8 <__ieee754_rem_pio2>
 8009780:	f000 0003 	and.w	r0, r0, #3
 8009784:	2801      	cmp	r0, #1
 8009786:	d00c      	beq.n	80097a2 <sin+0x62>
 8009788:	2802      	cmp	r0, #2
 800978a:	d011      	beq.n	80097b0 <sin+0x70>
 800978c:	b9f0      	cbnz	r0, 80097cc <sin+0x8c>
 800978e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009792:	ed9d 0b00 	vldr	d0, [sp]
 8009796:	2001      	movs	r0, #1
 8009798:	f000 f9ce 	bl	8009b38 <__kernel_sin>
 800979c:	ec51 0b10 	vmov	r0, r1, d0
 80097a0:	e7e6      	b.n	8009770 <sin+0x30>
 80097a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097a6:	ed9d 0b00 	vldr	d0, [sp]
 80097aa:	f000 f8fd 	bl	80099a8 <__kernel_cos>
 80097ae:	e7f5      	b.n	800979c <sin+0x5c>
 80097b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097b4:	ed9d 0b00 	vldr	d0, [sp]
 80097b8:	2001      	movs	r0, #1
 80097ba:	f000 f9bd 	bl	8009b38 <__kernel_sin>
 80097be:	ec53 2b10 	vmov	r2, r3, d0
 80097c2:	ee10 0a10 	vmov	r0, s0
 80097c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80097ca:	e7d1      	b.n	8009770 <sin+0x30>
 80097cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097d0:	ed9d 0b00 	vldr	d0, [sp]
 80097d4:	f000 f8e8 	bl	80099a8 <__kernel_cos>
 80097d8:	e7f1      	b.n	80097be <sin+0x7e>
 80097da:	bf00      	nop
 80097dc:	f3af 8000 	nop.w
	...
 80097e8:	3fe921fb 	.word	0x3fe921fb
 80097ec:	7fefffff 	.word	0x7fefffff

080097f0 <__ieee754_sqrt>:
 80097f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	ec55 4b10 	vmov	r4, r5, d0
 80097f8:	4e67      	ldr	r6, [pc, #412]	; (8009998 <__ieee754_sqrt+0x1a8>)
 80097fa:	43ae      	bics	r6, r5
 80097fc:	ee10 0a10 	vmov	r0, s0
 8009800:	ee10 2a10 	vmov	r2, s0
 8009804:	4629      	mov	r1, r5
 8009806:	462b      	mov	r3, r5
 8009808:	d10d      	bne.n	8009826 <__ieee754_sqrt+0x36>
 800980a:	f7f6 fef5 	bl	80005f8 <__aeabi_dmul>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4620      	mov	r0, r4
 8009814:	4629      	mov	r1, r5
 8009816:	f7f6 fd39 	bl	800028c <__adddf3>
 800981a:	4604      	mov	r4, r0
 800981c:	460d      	mov	r5, r1
 800981e:	ec45 4b10 	vmov	d0, r4, r5
 8009822:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009826:	2d00      	cmp	r5, #0
 8009828:	dc0b      	bgt.n	8009842 <__ieee754_sqrt+0x52>
 800982a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800982e:	4326      	orrs	r6, r4
 8009830:	d0f5      	beq.n	800981e <__ieee754_sqrt+0x2e>
 8009832:	b135      	cbz	r5, 8009842 <__ieee754_sqrt+0x52>
 8009834:	f7f6 fd28 	bl	8000288 <__aeabi_dsub>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	f7f7 f806 	bl	800084c <__aeabi_ddiv>
 8009840:	e7eb      	b.n	800981a <__ieee754_sqrt+0x2a>
 8009842:	1509      	asrs	r1, r1, #20
 8009844:	f000 808d 	beq.w	8009962 <__ieee754_sqrt+0x172>
 8009848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800984c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009854:	07c9      	lsls	r1, r1, #31
 8009856:	bf5c      	itt	pl
 8009858:	005b      	lslpl	r3, r3, #1
 800985a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800985e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009862:	bf58      	it	pl
 8009864:	0052      	lslpl	r2, r2, #1
 8009866:	2500      	movs	r5, #0
 8009868:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800986c:	1076      	asrs	r6, r6, #1
 800986e:	0052      	lsls	r2, r2, #1
 8009870:	f04f 0e16 	mov.w	lr, #22
 8009874:	46ac      	mov	ip, r5
 8009876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800987a:	eb0c 0001 	add.w	r0, ip, r1
 800987e:	4298      	cmp	r0, r3
 8009880:	bfde      	ittt	le
 8009882:	1a1b      	suble	r3, r3, r0
 8009884:	eb00 0c01 	addle.w	ip, r0, r1
 8009888:	186d      	addle	r5, r5, r1
 800988a:	005b      	lsls	r3, r3, #1
 800988c:	f1be 0e01 	subs.w	lr, lr, #1
 8009890:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009894:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009898:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800989c:	d1ed      	bne.n	800987a <__ieee754_sqrt+0x8a>
 800989e:	4674      	mov	r4, lr
 80098a0:	2720      	movs	r7, #32
 80098a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80098a6:	4563      	cmp	r3, ip
 80098a8:	eb01 000e 	add.w	r0, r1, lr
 80098ac:	dc02      	bgt.n	80098b4 <__ieee754_sqrt+0xc4>
 80098ae:	d113      	bne.n	80098d8 <__ieee754_sqrt+0xe8>
 80098b0:	4290      	cmp	r0, r2
 80098b2:	d811      	bhi.n	80098d8 <__ieee754_sqrt+0xe8>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	eb00 0e01 	add.w	lr, r0, r1
 80098ba:	da57      	bge.n	800996c <__ieee754_sqrt+0x17c>
 80098bc:	f1be 0f00 	cmp.w	lr, #0
 80098c0:	db54      	blt.n	800996c <__ieee754_sqrt+0x17c>
 80098c2:	f10c 0801 	add.w	r8, ip, #1
 80098c6:	eba3 030c 	sub.w	r3, r3, ip
 80098ca:	4290      	cmp	r0, r2
 80098cc:	bf88      	it	hi
 80098ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80098d2:	1a12      	subs	r2, r2, r0
 80098d4:	440c      	add	r4, r1
 80098d6:	46c4      	mov	ip, r8
 80098d8:	005b      	lsls	r3, r3, #1
 80098da:	3f01      	subs	r7, #1
 80098dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80098e0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80098e4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80098e8:	d1dd      	bne.n	80098a6 <__ieee754_sqrt+0xb6>
 80098ea:	4313      	orrs	r3, r2
 80098ec:	d01b      	beq.n	8009926 <__ieee754_sqrt+0x136>
 80098ee:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800999c <__ieee754_sqrt+0x1ac>
 80098f2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80099a0 <__ieee754_sqrt+0x1b0>
 80098f6:	e9da 0100 	ldrd	r0, r1, [sl]
 80098fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80098fe:	f7f6 fcc3 	bl	8000288 <__aeabi_dsub>
 8009902:	e9da 8900 	ldrd	r8, r9, [sl]
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4640      	mov	r0, r8
 800990c:	4649      	mov	r1, r9
 800990e:	f7f7 f8ef 	bl	8000af0 <__aeabi_dcmple>
 8009912:	b140      	cbz	r0, 8009926 <__ieee754_sqrt+0x136>
 8009914:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009918:	e9da 0100 	ldrd	r0, r1, [sl]
 800991c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009920:	d126      	bne.n	8009970 <__ieee754_sqrt+0x180>
 8009922:	3501      	adds	r5, #1
 8009924:	463c      	mov	r4, r7
 8009926:	106a      	asrs	r2, r5, #1
 8009928:	0863      	lsrs	r3, r4, #1
 800992a:	07e9      	lsls	r1, r5, #31
 800992c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009930:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009934:	bf48      	it	mi
 8009936:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800993a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800993e:	461c      	mov	r4, r3
 8009940:	e76d      	b.n	800981e <__ieee754_sqrt+0x2e>
 8009942:	0ad3      	lsrs	r3, r2, #11
 8009944:	3815      	subs	r0, #21
 8009946:	0552      	lsls	r2, r2, #21
 8009948:	2b00      	cmp	r3, #0
 800994a:	d0fa      	beq.n	8009942 <__ieee754_sqrt+0x152>
 800994c:	02dc      	lsls	r4, r3, #11
 800994e:	d50a      	bpl.n	8009966 <__ieee754_sqrt+0x176>
 8009950:	f1c1 0420 	rsb	r4, r1, #32
 8009954:	fa22 f404 	lsr.w	r4, r2, r4
 8009958:	1e4d      	subs	r5, r1, #1
 800995a:	408a      	lsls	r2, r1
 800995c:	4323      	orrs	r3, r4
 800995e:	1b41      	subs	r1, r0, r5
 8009960:	e772      	b.n	8009848 <__ieee754_sqrt+0x58>
 8009962:	4608      	mov	r0, r1
 8009964:	e7f0      	b.n	8009948 <__ieee754_sqrt+0x158>
 8009966:	005b      	lsls	r3, r3, #1
 8009968:	3101      	adds	r1, #1
 800996a:	e7ef      	b.n	800994c <__ieee754_sqrt+0x15c>
 800996c:	46e0      	mov	r8, ip
 800996e:	e7aa      	b.n	80098c6 <__ieee754_sqrt+0xd6>
 8009970:	f7f6 fc8c 	bl	800028c <__adddf3>
 8009974:	e9da 8900 	ldrd	r8, r9, [sl]
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4640      	mov	r0, r8
 800997e:	4649      	mov	r1, r9
 8009980:	f7f7 f8ac 	bl	8000adc <__aeabi_dcmplt>
 8009984:	b120      	cbz	r0, 8009990 <__ieee754_sqrt+0x1a0>
 8009986:	1ca0      	adds	r0, r4, #2
 8009988:	bf08      	it	eq
 800998a:	3501      	addeq	r5, #1
 800998c:	3402      	adds	r4, #2
 800998e:	e7ca      	b.n	8009926 <__ieee754_sqrt+0x136>
 8009990:	3401      	adds	r4, #1
 8009992:	f024 0401 	bic.w	r4, r4, #1
 8009996:	e7c6      	b.n	8009926 <__ieee754_sqrt+0x136>
 8009998:	7ff00000 	.word	0x7ff00000
 800999c:	20000090 	.word	0x20000090
 80099a0:	20000098 	.word	0x20000098
 80099a4:	00000000 	.word	0x00000000

080099a8 <__kernel_cos>:
 80099a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	ec57 6b10 	vmov	r6, r7, d0
 80099b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80099b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80099b8:	ed8d 1b00 	vstr	d1, [sp]
 80099bc:	da07      	bge.n	80099ce <__kernel_cos+0x26>
 80099be:	ee10 0a10 	vmov	r0, s0
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f7 f8c8 	bl	8000b58 <__aeabi_d2iz>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	f000 8088 	beq.w	8009ade <__kernel_cos+0x136>
 80099ce:	4632      	mov	r2, r6
 80099d0:	463b      	mov	r3, r7
 80099d2:	4630      	mov	r0, r6
 80099d4:	4639      	mov	r1, r7
 80099d6:	f7f6 fe0f 	bl	80005f8 <__aeabi_dmul>
 80099da:	4b51      	ldr	r3, [pc, #324]	; (8009b20 <__kernel_cos+0x178>)
 80099dc:	2200      	movs	r2, #0
 80099de:	4604      	mov	r4, r0
 80099e0:	460d      	mov	r5, r1
 80099e2:	f7f6 fe09 	bl	80005f8 <__aeabi_dmul>
 80099e6:	a340      	add	r3, pc, #256	; (adr r3, 8009ae8 <__kernel_cos+0x140>)
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	4682      	mov	sl, r0
 80099ee:	468b      	mov	fp, r1
 80099f0:	4620      	mov	r0, r4
 80099f2:	4629      	mov	r1, r5
 80099f4:	f7f6 fe00 	bl	80005f8 <__aeabi_dmul>
 80099f8:	a33d      	add	r3, pc, #244	; (adr r3, 8009af0 <__kernel_cos+0x148>)
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	f7f6 fc45 	bl	800028c <__adddf3>
 8009a02:	4622      	mov	r2, r4
 8009a04:	462b      	mov	r3, r5
 8009a06:	f7f6 fdf7 	bl	80005f8 <__aeabi_dmul>
 8009a0a:	a33b      	add	r3, pc, #236	; (adr r3, 8009af8 <__kernel_cos+0x150>)
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	f7f6 fc3a 	bl	8000288 <__aeabi_dsub>
 8009a14:	4622      	mov	r2, r4
 8009a16:	462b      	mov	r3, r5
 8009a18:	f7f6 fdee 	bl	80005f8 <__aeabi_dmul>
 8009a1c:	a338      	add	r3, pc, #224	; (adr r3, 8009b00 <__kernel_cos+0x158>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f7f6 fc33 	bl	800028c <__adddf3>
 8009a26:	4622      	mov	r2, r4
 8009a28:	462b      	mov	r3, r5
 8009a2a:	f7f6 fde5 	bl	80005f8 <__aeabi_dmul>
 8009a2e:	a336      	add	r3, pc, #216	; (adr r3, 8009b08 <__kernel_cos+0x160>)
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f7f6 fc28 	bl	8000288 <__aeabi_dsub>
 8009a38:	4622      	mov	r2, r4
 8009a3a:	462b      	mov	r3, r5
 8009a3c:	f7f6 fddc 	bl	80005f8 <__aeabi_dmul>
 8009a40:	a333      	add	r3, pc, #204	; (adr r3, 8009b10 <__kernel_cos+0x168>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f7f6 fc21 	bl	800028c <__adddf3>
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	462b      	mov	r3, r5
 8009a4e:	f7f6 fdd3 	bl	80005f8 <__aeabi_dmul>
 8009a52:	4622      	mov	r2, r4
 8009a54:	462b      	mov	r3, r5
 8009a56:	f7f6 fdcf 	bl	80005f8 <__aeabi_dmul>
 8009a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a5e:	4604      	mov	r4, r0
 8009a60:	460d      	mov	r5, r1
 8009a62:	4630      	mov	r0, r6
 8009a64:	4639      	mov	r1, r7
 8009a66:	f7f6 fdc7 	bl	80005f8 <__aeabi_dmul>
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	4629      	mov	r1, r5
 8009a70:	4620      	mov	r0, r4
 8009a72:	f7f6 fc09 	bl	8000288 <__aeabi_dsub>
 8009a76:	4b2b      	ldr	r3, [pc, #172]	; (8009b24 <__kernel_cos+0x17c>)
 8009a78:	4598      	cmp	r8, r3
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460f      	mov	r7, r1
 8009a7e:	dc10      	bgt.n	8009aa2 <__kernel_cos+0xfa>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	4650      	mov	r0, sl
 8009a86:	4659      	mov	r1, fp
 8009a88:	f7f6 fbfe 	bl	8000288 <__aeabi_dsub>
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4926      	ldr	r1, [pc, #152]	; (8009b28 <__kernel_cos+0x180>)
 8009a90:	4602      	mov	r2, r0
 8009a92:	2000      	movs	r0, #0
 8009a94:	f7f6 fbf8 	bl	8000288 <__aeabi_dsub>
 8009a98:	ec41 0b10 	vmov	d0, r0, r1
 8009a9c:	b003      	add	sp, #12
 8009a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa2:	4b22      	ldr	r3, [pc, #136]	; (8009b2c <__kernel_cos+0x184>)
 8009aa4:	4920      	ldr	r1, [pc, #128]	; (8009b28 <__kernel_cos+0x180>)
 8009aa6:	4598      	cmp	r8, r3
 8009aa8:	bfcc      	ite	gt
 8009aaa:	4d21      	ldrgt	r5, [pc, #132]	; (8009b30 <__kernel_cos+0x188>)
 8009aac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009ab0:	2400      	movs	r4, #0
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	462b      	mov	r3, r5
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	f7f6 fbe6 	bl	8000288 <__aeabi_dsub>
 8009abc:	4622      	mov	r2, r4
 8009abe:	4680      	mov	r8, r0
 8009ac0:	4689      	mov	r9, r1
 8009ac2:	462b      	mov	r3, r5
 8009ac4:	4650      	mov	r0, sl
 8009ac6:	4659      	mov	r1, fp
 8009ac8:	f7f6 fbde 	bl	8000288 <__aeabi_dsub>
 8009acc:	4632      	mov	r2, r6
 8009ace:	463b      	mov	r3, r7
 8009ad0:	f7f6 fbda 	bl	8000288 <__aeabi_dsub>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	4640      	mov	r0, r8
 8009ada:	4649      	mov	r1, r9
 8009adc:	e7da      	b.n	8009a94 <__kernel_cos+0xec>
 8009ade:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009b18 <__kernel_cos+0x170>
 8009ae2:	e7db      	b.n	8009a9c <__kernel_cos+0xf4>
 8009ae4:	f3af 8000 	nop.w
 8009ae8:	be8838d4 	.word	0xbe8838d4
 8009aec:	bda8fae9 	.word	0xbda8fae9
 8009af0:	bdb4b1c4 	.word	0xbdb4b1c4
 8009af4:	3e21ee9e 	.word	0x3e21ee9e
 8009af8:	809c52ad 	.word	0x809c52ad
 8009afc:	3e927e4f 	.word	0x3e927e4f
 8009b00:	19cb1590 	.word	0x19cb1590
 8009b04:	3efa01a0 	.word	0x3efa01a0
 8009b08:	16c15177 	.word	0x16c15177
 8009b0c:	3f56c16c 	.word	0x3f56c16c
 8009b10:	5555554c 	.word	0x5555554c
 8009b14:	3fa55555 	.word	0x3fa55555
 8009b18:	00000000 	.word	0x00000000
 8009b1c:	3ff00000 	.word	0x3ff00000
 8009b20:	3fe00000 	.word	0x3fe00000
 8009b24:	3fd33332 	.word	0x3fd33332
 8009b28:	3ff00000 	.word	0x3ff00000
 8009b2c:	3fe90000 	.word	0x3fe90000
 8009b30:	3fd20000 	.word	0x3fd20000
 8009b34:	00000000 	.word	0x00000000

08009b38 <__kernel_sin>:
 8009b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3c:	ed2d 8b04 	vpush	{d8-d9}
 8009b40:	eeb0 8a41 	vmov.f32	s16, s2
 8009b44:	eef0 8a61 	vmov.f32	s17, s3
 8009b48:	ec55 4b10 	vmov	r4, r5, d0
 8009b4c:	b083      	sub	sp, #12
 8009b4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009b52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009b56:	9001      	str	r0, [sp, #4]
 8009b58:	da06      	bge.n	8009b68 <__kernel_sin+0x30>
 8009b5a:	ee10 0a10 	vmov	r0, s0
 8009b5e:	4629      	mov	r1, r5
 8009b60:	f7f6 fffa 	bl	8000b58 <__aeabi_d2iz>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d051      	beq.n	8009c0c <__kernel_sin+0xd4>
 8009b68:	4622      	mov	r2, r4
 8009b6a:	462b      	mov	r3, r5
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f7f6 fd42 	bl	80005f8 <__aeabi_dmul>
 8009b74:	4682      	mov	sl, r0
 8009b76:	468b      	mov	fp, r1
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	4629      	mov	r1, r5
 8009b80:	f7f6 fd3a 	bl	80005f8 <__aeabi_dmul>
 8009b84:	a341      	add	r3, pc, #260	; (adr r3, 8009c8c <__kernel_sin+0x154>)
 8009b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8a:	4680      	mov	r8, r0
 8009b8c:	4689      	mov	r9, r1
 8009b8e:	4650      	mov	r0, sl
 8009b90:	4659      	mov	r1, fp
 8009b92:	f7f6 fd31 	bl	80005f8 <__aeabi_dmul>
 8009b96:	a33f      	add	r3, pc, #252	; (adr r3, 8009c94 <__kernel_sin+0x15c>)
 8009b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9c:	f7f6 fb74 	bl	8000288 <__aeabi_dsub>
 8009ba0:	4652      	mov	r2, sl
 8009ba2:	465b      	mov	r3, fp
 8009ba4:	f7f6 fd28 	bl	80005f8 <__aeabi_dmul>
 8009ba8:	a33c      	add	r3, pc, #240	; (adr r3, 8009c9c <__kernel_sin+0x164>)
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	f7f6 fb6d 	bl	800028c <__adddf3>
 8009bb2:	4652      	mov	r2, sl
 8009bb4:	465b      	mov	r3, fp
 8009bb6:	f7f6 fd1f 	bl	80005f8 <__aeabi_dmul>
 8009bba:	a33a      	add	r3, pc, #232	; (adr r3, 8009ca4 <__kernel_sin+0x16c>)
 8009bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc0:	f7f6 fb62 	bl	8000288 <__aeabi_dsub>
 8009bc4:	4652      	mov	r2, sl
 8009bc6:	465b      	mov	r3, fp
 8009bc8:	f7f6 fd16 	bl	80005f8 <__aeabi_dmul>
 8009bcc:	a337      	add	r3, pc, #220	; (adr r3, 8009cac <__kernel_sin+0x174>)
 8009bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd2:	f7f6 fb5b 	bl	800028c <__adddf3>
 8009bd6:	9b01      	ldr	r3, [sp, #4]
 8009bd8:	4606      	mov	r6, r0
 8009bda:	460f      	mov	r7, r1
 8009bdc:	b9eb      	cbnz	r3, 8009c1a <__kernel_sin+0xe2>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4650      	mov	r0, sl
 8009be4:	4659      	mov	r1, fp
 8009be6:	f7f6 fd07 	bl	80005f8 <__aeabi_dmul>
 8009bea:	a325      	add	r3, pc, #148	; (adr r3, 8009c80 <__kernel_sin+0x148>)
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	f7f6 fb4a 	bl	8000288 <__aeabi_dsub>
 8009bf4:	4642      	mov	r2, r8
 8009bf6:	464b      	mov	r3, r9
 8009bf8:	f7f6 fcfe 	bl	80005f8 <__aeabi_dmul>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	4620      	mov	r0, r4
 8009c02:	4629      	mov	r1, r5
 8009c04:	f7f6 fb42 	bl	800028c <__adddf3>
 8009c08:	4604      	mov	r4, r0
 8009c0a:	460d      	mov	r5, r1
 8009c0c:	ec45 4b10 	vmov	d0, r4, r5
 8009c10:	b003      	add	sp, #12
 8009c12:	ecbd 8b04 	vpop	{d8-d9}
 8009c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1a:	4b1b      	ldr	r3, [pc, #108]	; (8009c88 <__kernel_sin+0x150>)
 8009c1c:	ec51 0b18 	vmov	r0, r1, d8
 8009c20:	2200      	movs	r2, #0
 8009c22:	f7f6 fce9 	bl	80005f8 <__aeabi_dmul>
 8009c26:	4632      	mov	r2, r6
 8009c28:	ec41 0b19 	vmov	d9, r0, r1
 8009c2c:	463b      	mov	r3, r7
 8009c2e:	4640      	mov	r0, r8
 8009c30:	4649      	mov	r1, r9
 8009c32:	f7f6 fce1 	bl	80005f8 <__aeabi_dmul>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	ec51 0b19 	vmov	r0, r1, d9
 8009c3e:	f7f6 fb23 	bl	8000288 <__aeabi_dsub>
 8009c42:	4652      	mov	r2, sl
 8009c44:	465b      	mov	r3, fp
 8009c46:	f7f6 fcd7 	bl	80005f8 <__aeabi_dmul>
 8009c4a:	ec53 2b18 	vmov	r2, r3, d8
 8009c4e:	f7f6 fb1b 	bl	8000288 <__aeabi_dsub>
 8009c52:	a30b      	add	r3, pc, #44	; (adr r3, 8009c80 <__kernel_sin+0x148>)
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	4606      	mov	r6, r0
 8009c5a:	460f      	mov	r7, r1
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	4649      	mov	r1, r9
 8009c60:	f7f6 fcca 	bl	80005f8 <__aeabi_dmul>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4630      	mov	r0, r6
 8009c6a:	4639      	mov	r1, r7
 8009c6c:	f7f6 fb0e 	bl	800028c <__adddf3>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4620      	mov	r0, r4
 8009c76:	4629      	mov	r1, r5
 8009c78:	f7f6 fb06 	bl	8000288 <__aeabi_dsub>
 8009c7c:	e7c4      	b.n	8009c08 <__kernel_sin+0xd0>
 8009c7e:	bf00      	nop
 8009c80:	55555549 	.word	0x55555549
 8009c84:	3fc55555 	.word	0x3fc55555
 8009c88:	3fe00000 	.word	0x3fe00000
 8009c8c:	5acfd57c 	.word	0x5acfd57c
 8009c90:	3de5d93a 	.word	0x3de5d93a
 8009c94:	8a2b9ceb 	.word	0x8a2b9ceb
 8009c98:	3e5ae5e6 	.word	0x3e5ae5e6
 8009c9c:	57b1fe7d 	.word	0x57b1fe7d
 8009ca0:	3ec71de3 	.word	0x3ec71de3
 8009ca4:	19c161d5 	.word	0x19c161d5
 8009ca8:	3f2a01a0 	.word	0x3f2a01a0
 8009cac:	1110f8a6 	.word	0x1110f8a6
 8009cb0:	3f811111 	.word	0x3f811111
 8009cb4:	00000000 	.word	0x00000000

08009cb8 <__ieee754_rem_pio2>:
 8009cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cbc:	ed2d 8b02 	vpush	{d8}
 8009cc0:	ec55 4b10 	vmov	r4, r5, d0
 8009cc4:	4bca      	ldr	r3, [pc, #808]	; (8009ff0 <__ieee754_rem_pio2+0x338>)
 8009cc6:	b08b      	sub	sp, #44	; 0x2c
 8009cc8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009ccc:	4598      	cmp	r8, r3
 8009cce:	4682      	mov	sl, r0
 8009cd0:	9502      	str	r5, [sp, #8]
 8009cd2:	dc08      	bgt.n	8009ce6 <__ieee754_rem_pio2+0x2e>
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	ed80 0b00 	vstr	d0, [r0]
 8009cdc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009ce0:	f04f 0b00 	mov.w	fp, #0
 8009ce4:	e028      	b.n	8009d38 <__ieee754_rem_pio2+0x80>
 8009ce6:	4bc3      	ldr	r3, [pc, #780]	; (8009ff4 <__ieee754_rem_pio2+0x33c>)
 8009ce8:	4598      	cmp	r8, r3
 8009cea:	dc78      	bgt.n	8009dde <__ieee754_rem_pio2+0x126>
 8009cec:	9b02      	ldr	r3, [sp, #8]
 8009cee:	4ec2      	ldr	r6, [pc, #776]	; (8009ff8 <__ieee754_rem_pio2+0x340>)
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	ee10 0a10 	vmov	r0, s0
 8009cf6:	a3b0      	add	r3, pc, #704	; (adr r3, 8009fb8 <__ieee754_rem_pio2+0x300>)
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	dd39      	ble.n	8009d74 <__ieee754_rem_pio2+0xbc>
 8009d00:	f7f6 fac2 	bl	8000288 <__aeabi_dsub>
 8009d04:	45b0      	cmp	r8, r6
 8009d06:	4604      	mov	r4, r0
 8009d08:	460d      	mov	r5, r1
 8009d0a:	d01b      	beq.n	8009d44 <__ieee754_rem_pio2+0x8c>
 8009d0c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009fc0 <__ieee754_rem_pio2+0x308>)
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	f7f6 fab9 	bl	8000288 <__aeabi_dsub>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	e9ca 2300 	strd	r2, r3, [sl]
 8009d1e:	4620      	mov	r0, r4
 8009d20:	4629      	mov	r1, r5
 8009d22:	f7f6 fab1 	bl	8000288 <__aeabi_dsub>
 8009d26:	a3a6      	add	r3, pc, #664	; (adr r3, 8009fc0 <__ieee754_rem_pio2+0x308>)
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	f7f6 faac 	bl	8000288 <__aeabi_dsub>
 8009d30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009d34:	f04f 0b01 	mov.w	fp, #1
 8009d38:	4658      	mov	r0, fp
 8009d3a:	b00b      	add	sp, #44	; 0x2c
 8009d3c:	ecbd 8b02 	vpop	{d8}
 8009d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d44:	a3a0      	add	r3, pc, #640	; (adr r3, 8009fc8 <__ieee754_rem_pio2+0x310>)
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	f7f6 fa9d 	bl	8000288 <__aeabi_dsub>
 8009d4e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009fd0 <__ieee754_rem_pio2+0x318>)
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	4604      	mov	r4, r0
 8009d56:	460d      	mov	r5, r1
 8009d58:	f7f6 fa96 	bl	8000288 <__aeabi_dsub>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	e9ca 2300 	strd	r2, r3, [sl]
 8009d64:	4620      	mov	r0, r4
 8009d66:	4629      	mov	r1, r5
 8009d68:	f7f6 fa8e 	bl	8000288 <__aeabi_dsub>
 8009d6c:	a398      	add	r3, pc, #608	; (adr r3, 8009fd0 <__ieee754_rem_pio2+0x318>)
 8009d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d72:	e7db      	b.n	8009d2c <__ieee754_rem_pio2+0x74>
 8009d74:	f7f6 fa8a 	bl	800028c <__adddf3>
 8009d78:	45b0      	cmp	r8, r6
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	460d      	mov	r5, r1
 8009d7e:	d016      	beq.n	8009dae <__ieee754_rem_pio2+0xf6>
 8009d80:	a38f      	add	r3, pc, #572	; (adr r3, 8009fc0 <__ieee754_rem_pio2+0x308>)
 8009d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d86:	f7f6 fa81 	bl	800028c <__adddf3>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	e9ca 2300 	strd	r2, r3, [sl]
 8009d92:	4620      	mov	r0, r4
 8009d94:	4629      	mov	r1, r5
 8009d96:	f7f6 fa77 	bl	8000288 <__aeabi_dsub>
 8009d9a:	a389      	add	r3, pc, #548	; (adr r3, 8009fc0 <__ieee754_rem_pio2+0x308>)
 8009d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da0:	f7f6 fa74 	bl	800028c <__adddf3>
 8009da4:	f04f 3bff 	mov.w	fp, #4294967295
 8009da8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009dac:	e7c4      	b.n	8009d38 <__ieee754_rem_pio2+0x80>
 8009dae:	a386      	add	r3, pc, #536	; (adr r3, 8009fc8 <__ieee754_rem_pio2+0x310>)
 8009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db4:	f7f6 fa6a 	bl	800028c <__adddf3>
 8009db8:	a385      	add	r3, pc, #532	; (adr r3, 8009fd0 <__ieee754_rem_pio2+0x318>)
 8009dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	460d      	mov	r5, r1
 8009dc2:	f7f6 fa63 	bl	800028c <__adddf3>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	e9ca 2300 	strd	r2, r3, [sl]
 8009dce:	4620      	mov	r0, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	f7f6 fa59 	bl	8000288 <__aeabi_dsub>
 8009dd6:	a37e      	add	r3, pc, #504	; (adr r3, 8009fd0 <__ieee754_rem_pio2+0x318>)
 8009dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ddc:	e7e0      	b.n	8009da0 <__ieee754_rem_pio2+0xe8>
 8009dde:	4b87      	ldr	r3, [pc, #540]	; (8009ffc <__ieee754_rem_pio2+0x344>)
 8009de0:	4598      	cmp	r8, r3
 8009de2:	f300 80d8 	bgt.w	8009f96 <__ieee754_rem_pio2+0x2de>
 8009de6:	f000 f96d 	bl	800a0c4 <fabs>
 8009dea:	ec55 4b10 	vmov	r4, r5, d0
 8009dee:	ee10 0a10 	vmov	r0, s0
 8009df2:	a379      	add	r3, pc, #484	; (adr r3, 8009fd8 <__ieee754_rem_pio2+0x320>)
 8009df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df8:	4629      	mov	r1, r5
 8009dfa:	f7f6 fbfd 	bl	80005f8 <__aeabi_dmul>
 8009dfe:	4b80      	ldr	r3, [pc, #512]	; (800a000 <__ieee754_rem_pio2+0x348>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	f7f6 fa43 	bl	800028c <__adddf3>
 8009e06:	f7f6 fea7 	bl	8000b58 <__aeabi_d2iz>
 8009e0a:	4683      	mov	fp, r0
 8009e0c:	f7f6 fb8a 	bl	8000524 <__aeabi_i2d>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	ec43 2b18 	vmov	d8, r2, r3
 8009e18:	a367      	add	r3, pc, #412	; (adr r3, 8009fb8 <__ieee754_rem_pio2+0x300>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f7f6 fbeb 	bl	80005f8 <__aeabi_dmul>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	4620      	mov	r0, r4
 8009e28:	4629      	mov	r1, r5
 8009e2a:	f7f6 fa2d 	bl	8000288 <__aeabi_dsub>
 8009e2e:	a364      	add	r3, pc, #400	; (adr r3, 8009fc0 <__ieee754_rem_pio2+0x308>)
 8009e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e34:	4606      	mov	r6, r0
 8009e36:	460f      	mov	r7, r1
 8009e38:	ec51 0b18 	vmov	r0, r1, d8
 8009e3c:	f7f6 fbdc 	bl	80005f8 <__aeabi_dmul>
 8009e40:	f1bb 0f1f 	cmp.w	fp, #31
 8009e44:	4604      	mov	r4, r0
 8009e46:	460d      	mov	r5, r1
 8009e48:	dc0d      	bgt.n	8009e66 <__ieee754_rem_pio2+0x1ae>
 8009e4a:	4b6e      	ldr	r3, [pc, #440]	; (800a004 <__ieee754_rem_pio2+0x34c>)
 8009e4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e54:	4543      	cmp	r3, r8
 8009e56:	d006      	beq.n	8009e66 <__ieee754_rem_pio2+0x1ae>
 8009e58:	4622      	mov	r2, r4
 8009e5a:	462b      	mov	r3, r5
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	4639      	mov	r1, r7
 8009e60:	f7f6 fa12 	bl	8000288 <__aeabi_dsub>
 8009e64:	e00e      	b.n	8009e84 <__ieee754_rem_pio2+0x1cc>
 8009e66:	462b      	mov	r3, r5
 8009e68:	4622      	mov	r2, r4
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	f7f6 fa0b 	bl	8000288 <__aeabi_dsub>
 8009e72:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009e76:	9303      	str	r3, [sp, #12]
 8009e78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009e7c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009e80:	2b10      	cmp	r3, #16
 8009e82:	dc02      	bgt.n	8009e8a <__ieee754_rem_pio2+0x1d2>
 8009e84:	e9ca 0100 	strd	r0, r1, [sl]
 8009e88:	e039      	b.n	8009efe <__ieee754_rem_pio2+0x246>
 8009e8a:	a34f      	add	r3, pc, #316	; (adr r3, 8009fc8 <__ieee754_rem_pio2+0x310>)
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	ec51 0b18 	vmov	r0, r1, d8
 8009e94:	f7f6 fbb0 	bl	80005f8 <__aeabi_dmul>
 8009e98:	4604      	mov	r4, r0
 8009e9a:	460d      	mov	r5, r1
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	f7f6 f9f0 	bl	8000288 <__aeabi_dsub>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4680      	mov	r8, r0
 8009eae:	4689      	mov	r9, r1
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	4639      	mov	r1, r7
 8009eb4:	f7f6 f9e8 	bl	8000288 <__aeabi_dsub>
 8009eb8:	4622      	mov	r2, r4
 8009eba:	462b      	mov	r3, r5
 8009ebc:	f7f6 f9e4 	bl	8000288 <__aeabi_dsub>
 8009ec0:	a343      	add	r3, pc, #268	; (adr r3, 8009fd0 <__ieee754_rem_pio2+0x318>)
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	460d      	mov	r5, r1
 8009eca:	ec51 0b18 	vmov	r0, r1, d8
 8009ece:	f7f6 fb93 	bl	80005f8 <__aeabi_dmul>
 8009ed2:	4622      	mov	r2, r4
 8009ed4:	462b      	mov	r3, r5
 8009ed6:	f7f6 f9d7 	bl	8000288 <__aeabi_dsub>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4604      	mov	r4, r0
 8009ee0:	460d      	mov	r5, r1
 8009ee2:	4640      	mov	r0, r8
 8009ee4:	4649      	mov	r1, r9
 8009ee6:	f7f6 f9cf 	bl	8000288 <__aeabi_dsub>
 8009eea:	9a03      	ldr	r2, [sp, #12]
 8009eec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	2b31      	cmp	r3, #49	; 0x31
 8009ef4:	dc24      	bgt.n	8009f40 <__ieee754_rem_pio2+0x288>
 8009ef6:	e9ca 0100 	strd	r0, r1, [sl]
 8009efa:	4646      	mov	r6, r8
 8009efc:	464f      	mov	r7, r9
 8009efe:	e9da 8900 	ldrd	r8, r9, [sl]
 8009f02:	4630      	mov	r0, r6
 8009f04:	4642      	mov	r2, r8
 8009f06:	464b      	mov	r3, r9
 8009f08:	4639      	mov	r1, r7
 8009f0a:	f7f6 f9bd 	bl	8000288 <__aeabi_dsub>
 8009f0e:	462b      	mov	r3, r5
 8009f10:	4622      	mov	r2, r4
 8009f12:	f7f6 f9b9 	bl	8000288 <__aeabi_dsub>
 8009f16:	9b02      	ldr	r3, [sp, #8]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f1e:	f6bf af0b 	bge.w	8009d38 <__ieee754_rem_pio2+0x80>
 8009f22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009f26:	f8ca 3004 	str.w	r3, [sl, #4]
 8009f2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f2e:	f8ca 8000 	str.w	r8, [sl]
 8009f32:	f8ca 0008 	str.w	r0, [sl, #8]
 8009f36:	f8ca 300c 	str.w	r3, [sl, #12]
 8009f3a:	f1cb 0b00 	rsb	fp, fp, #0
 8009f3e:	e6fb      	b.n	8009d38 <__ieee754_rem_pio2+0x80>
 8009f40:	a327      	add	r3, pc, #156	; (adr r3, 8009fe0 <__ieee754_rem_pio2+0x328>)
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	ec51 0b18 	vmov	r0, r1, d8
 8009f4a:	f7f6 fb55 	bl	80005f8 <__aeabi_dmul>
 8009f4e:	4604      	mov	r4, r0
 8009f50:	460d      	mov	r5, r1
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	4640      	mov	r0, r8
 8009f58:	4649      	mov	r1, r9
 8009f5a:	f7f6 f995 	bl	8000288 <__aeabi_dsub>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4606      	mov	r6, r0
 8009f64:	460f      	mov	r7, r1
 8009f66:	4640      	mov	r0, r8
 8009f68:	4649      	mov	r1, r9
 8009f6a:	f7f6 f98d 	bl	8000288 <__aeabi_dsub>
 8009f6e:	4622      	mov	r2, r4
 8009f70:	462b      	mov	r3, r5
 8009f72:	f7f6 f989 	bl	8000288 <__aeabi_dsub>
 8009f76:	a31c      	add	r3, pc, #112	; (adr r3, 8009fe8 <__ieee754_rem_pio2+0x330>)
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	460d      	mov	r5, r1
 8009f80:	ec51 0b18 	vmov	r0, r1, d8
 8009f84:	f7f6 fb38 	bl	80005f8 <__aeabi_dmul>
 8009f88:	4622      	mov	r2, r4
 8009f8a:	462b      	mov	r3, r5
 8009f8c:	f7f6 f97c 	bl	8000288 <__aeabi_dsub>
 8009f90:	4604      	mov	r4, r0
 8009f92:	460d      	mov	r5, r1
 8009f94:	e760      	b.n	8009e58 <__ieee754_rem_pio2+0x1a0>
 8009f96:	4b1c      	ldr	r3, [pc, #112]	; (800a008 <__ieee754_rem_pio2+0x350>)
 8009f98:	4598      	cmp	r8, r3
 8009f9a:	dd37      	ble.n	800a00c <__ieee754_rem_pio2+0x354>
 8009f9c:	ee10 2a10 	vmov	r2, s0
 8009fa0:	462b      	mov	r3, r5
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	f7f6 f96f 	bl	8000288 <__aeabi_dsub>
 8009faa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009fae:	e9ca 0100 	strd	r0, r1, [sl]
 8009fb2:	e695      	b.n	8009ce0 <__ieee754_rem_pio2+0x28>
 8009fb4:	f3af 8000 	nop.w
 8009fb8:	54400000 	.word	0x54400000
 8009fbc:	3ff921fb 	.word	0x3ff921fb
 8009fc0:	1a626331 	.word	0x1a626331
 8009fc4:	3dd0b461 	.word	0x3dd0b461
 8009fc8:	1a600000 	.word	0x1a600000
 8009fcc:	3dd0b461 	.word	0x3dd0b461
 8009fd0:	2e037073 	.word	0x2e037073
 8009fd4:	3ba3198a 	.word	0x3ba3198a
 8009fd8:	6dc9c883 	.word	0x6dc9c883
 8009fdc:	3fe45f30 	.word	0x3fe45f30
 8009fe0:	2e000000 	.word	0x2e000000
 8009fe4:	3ba3198a 	.word	0x3ba3198a
 8009fe8:	252049c1 	.word	0x252049c1
 8009fec:	397b839a 	.word	0x397b839a
 8009ff0:	3fe921fb 	.word	0x3fe921fb
 8009ff4:	4002d97b 	.word	0x4002d97b
 8009ff8:	3ff921fb 	.word	0x3ff921fb
 8009ffc:	413921fb 	.word	0x413921fb
 800a000:	3fe00000 	.word	0x3fe00000
 800a004:	0800bbac 	.word	0x0800bbac
 800a008:	7fefffff 	.word	0x7fefffff
 800a00c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800a010:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800a014:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800a018:	4620      	mov	r0, r4
 800a01a:	460d      	mov	r5, r1
 800a01c:	f7f6 fd9c 	bl	8000b58 <__aeabi_d2iz>
 800a020:	f7f6 fa80 	bl	8000524 <__aeabi_i2d>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	4620      	mov	r0, r4
 800a02a:	4629      	mov	r1, r5
 800a02c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a030:	f7f6 f92a 	bl	8000288 <__aeabi_dsub>
 800a034:	4b21      	ldr	r3, [pc, #132]	; (800a0bc <__ieee754_rem_pio2+0x404>)
 800a036:	2200      	movs	r2, #0
 800a038:	f7f6 fade 	bl	80005f8 <__aeabi_dmul>
 800a03c:	460d      	mov	r5, r1
 800a03e:	4604      	mov	r4, r0
 800a040:	f7f6 fd8a 	bl	8000b58 <__aeabi_d2iz>
 800a044:	f7f6 fa6e 	bl	8000524 <__aeabi_i2d>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4620      	mov	r0, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a054:	f7f6 f918 	bl	8000288 <__aeabi_dsub>
 800a058:	4b18      	ldr	r3, [pc, #96]	; (800a0bc <__ieee754_rem_pio2+0x404>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	f7f6 facc 	bl	80005f8 <__aeabi_dmul>
 800a060:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a064:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800a068:	2703      	movs	r7, #3
 800a06a:	2400      	movs	r4, #0
 800a06c:	2500      	movs	r5, #0
 800a06e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800a072:	4622      	mov	r2, r4
 800a074:	462b      	mov	r3, r5
 800a076:	46b9      	mov	r9, r7
 800a078:	3f01      	subs	r7, #1
 800a07a:	f7f6 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d1f5      	bne.n	800a06e <__ieee754_rem_pio2+0x3b6>
 800a082:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <__ieee754_rem_pio2+0x408>)
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	2302      	movs	r3, #2
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	4632      	mov	r2, r6
 800a08c:	464b      	mov	r3, r9
 800a08e:	4651      	mov	r1, sl
 800a090:	a804      	add	r0, sp, #16
 800a092:	f000 f821 	bl	800a0d8 <__kernel_rem_pio2>
 800a096:	9b02      	ldr	r3, [sp, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	4683      	mov	fp, r0
 800a09c:	f6bf ae4c 	bge.w	8009d38 <__ieee754_rem_pio2+0x80>
 800a0a0:	e9da 2100 	ldrd	r2, r1, [sl]
 800a0a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0a8:	e9ca 2300 	strd	r2, r3, [sl]
 800a0ac:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a0b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0b4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a0b8:	e73f      	b.n	8009f3a <__ieee754_rem_pio2+0x282>
 800a0ba:	bf00      	nop
 800a0bc:	41700000 	.word	0x41700000
 800a0c0:	0800bc2c 	.word	0x0800bc2c

0800a0c4 <fabs>:
 800a0c4:	ec51 0b10 	vmov	r0, r1, d0
 800a0c8:	ee10 2a10 	vmov	r2, s0
 800a0cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0d0:	ec43 2b10 	vmov	d0, r2, r3
 800a0d4:	4770      	bx	lr
	...

0800a0d8 <__kernel_rem_pio2>:
 800a0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0dc:	ed2d 8b02 	vpush	{d8}
 800a0e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a0e4:	f112 0f14 	cmn.w	r2, #20
 800a0e8:	9306      	str	r3, [sp, #24]
 800a0ea:	9104      	str	r1, [sp, #16]
 800a0ec:	4bc2      	ldr	r3, [pc, #776]	; (800a3f8 <__kernel_rem_pio2+0x320>)
 800a0ee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a0f0:	9009      	str	r0, [sp, #36]	; 0x24
 800a0f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	9b06      	ldr	r3, [sp, #24]
 800a0fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0fe:	bfa8      	it	ge
 800a100:	1ed4      	subge	r4, r2, #3
 800a102:	9305      	str	r3, [sp, #20]
 800a104:	bfb2      	itee	lt
 800a106:	2400      	movlt	r4, #0
 800a108:	2318      	movge	r3, #24
 800a10a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a10e:	f06f 0317 	mvn.w	r3, #23
 800a112:	fb04 3303 	mla	r3, r4, r3, r3
 800a116:	eb03 0a02 	add.w	sl, r3, r2
 800a11a:	9b00      	ldr	r3, [sp, #0]
 800a11c:	9a05      	ldr	r2, [sp, #20]
 800a11e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800a3e8 <__kernel_rem_pio2+0x310>
 800a122:	eb03 0802 	add.w	r8, r3, r2
 800a126:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a128:	1aa7      	subs	r7, r4, r2
 800a12a:	ae20      	add	r6, sp, #128	; 0x80
 800a12c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a130:	2500      	movs	r5, #0
 800a132:	4545      	cmp	r5, r8
 800a134:	dd13      	ble.n	800a15e <__kernel_rem_pio2+0x86>
 800a136:	9b06      	ldr	r3, [sp, #24]
 800a138:	aa20      	add	r2, sp, #128	; 0x80
 800a13a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a13e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a142:	f04f 0800 	mov.w	r8, #0
 800a146:	9b00      	ldr	r3, [sp, #0]
 800a148:	4598      	cmp	r8, r3
 800a14a:	dc31      	bgt.n	800a1b0 <__kernel_rem_pio2+0xd8>
 800a14c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800a3e8 <__kernel_rem_pio2+0x310>
 800a150:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a154:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a158:	462f      	mov	r7, r5
 800a15a:	2600      	movs	r6, #0
 800a15c:	e01b      	b.n	800a196 <__kernel_rem_pio2+0xbe>
 800a15e:	42ef      	cmn	r7, r5
 800a160:	d407      	bmi.n	800a172 <__kernel_rem_pio2+0x9a>
 800a162:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a166:	f7f6 f9dd 	bl	8000524 <__aeabi_i2d>
 800a16a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a16e:	3501      	adds	r5, #1
 800a170:	e7df      	b.n	800a132 <__kernel_rem_pio2+0x5a>
 800a172:	ec51 0b18 	vmov	r0, r1, d8
 800a176:	e7f8      	b.n	800a16a <__kernel_rem_pio2+0x92>
 800a178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a17c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a180:	f7f6 fa3a 	bl	80005f8 <__aeabi_dmul>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a18c:	f7f6 f87e 	bl	800028c <__adddf3>
 800a190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a194:	3601      	adds	r6, #1
 800a196:	9b05      	ldr	r3, [sp, #20]
 800a198:	429e      	cmp	r6, r3
 800a19a:	f1a7 0708 	sub.w	r7, r7, #8
 800a19e:	ddeb      	ble.n	800a178 <__kernel_rem_pio2+0xa0>
 800a1a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1a4:	f108 0801 	add.w	r8, r8, #1
 800a1a8:	ecab 7b02 	vstmia	fp!, {d7}
 800a1ac:	3508      	adds	r5, #8
 800a1ae:	e7ca      	b.n	800a146 <__kernel_rem_pio2+0x6e>
 800a1b0:	9b00      	ldr	r3, [sp, #0]
 800a1b2:	aa0c      	add	r2, sp, #48	; 0x30
 800a1b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1ba:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a1bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a1c0:	9c00      	ldr	r4, [sp, #0]
 800a1c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a1c4:	00e3      	lsls	r3, r4, #3
 800a1c6:	9308      	str	r3, [sp, #32]
 800a1c8:	ab98      	add	r3, sp, #608	; 0x260
 800a1ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1ce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a1d2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800a1d6:	ab70      	add	r3, sp, #448	; 0x1c0
 800a1d8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a1dc:	46c3      	mov	fp, r8
 800a1de:	46a1      	mov	r9, r4
 800a1e0:	f1b9 0f00 	cmp.w	r9, #0
 800a1e4:	f1a5 0508 	sub.w	r5, r5, #8
 800a1e8:	dc77      	bgt.n	800a2da <__kernel_rem_pio2+0x202>
 800a1ea:	ec47 6b10 	vmov	d0, r6, r7
 800a1ee:	4650      	mov	r0, sl
 800a1f0:	f000 fac2 	bl	800a778 <scalbn>
 800a1f4:	ec57 6b10 	vmov	r6, r7, d0
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a1fe:	ee10 0a10 	vmov	r0, s0
 800a202:	4639      	mov	r1, r7
 800a204:	f7f6 f9f8 	bl	80005f8 <__aeabi_dmul>
 800a208:	ec41 0b10 	vmov	d0, r0, r1
 800a20c:	f000 fb34 	bl	800a878 <floor>
 800a210:	4b7a      	ldr	r3, [pc, #488]	; (800a3fc <__kernel_rem_pio2+0x324>)
 800a212:	ec51 0b10 	vmov	r0, r1, d0
 800a216:	2200      	movs	r2, #0
 800a218:	f7f6 f9ee 	bl	80005f8 <__aeabi_dmul>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	4630      	mov	r0, r6
 800a222:	4639      	mov	r1, r7
 800a224:	f7f6 f830 	bl	8000288 <__aeabi_dsub>
 800a228:	460f      	mov	r7, r1
 800a22a:	4606      	mov	r6, r0
 800a22c:	f7f6 fc94 	bl	8000b58 <__aeabi_d2iz>
 800a230:	9002      	str	r0, [sp, #8]
 800a232:	f7f6 f977 	bl	8000524 <__aeabi_i2d>
 800a236:	4602      	mov	r2, r0
 800a238:	460b      	mov	r3, r1
 800a23a:	4630      	mov	r0, r6
 800a23c:	4639      	mov	r1, r7
 800a23e:	f7f6 f823 	bl	8000288 <__aeabi_dsub>
 800a242:	f1ba 0f00 	cmp.w	sl, #0
 800a246:	4606      	mov	r6, r0
 800a248:	460f      	mov	r7, r1
 800a24a:	dd6d      	ble.n	800a328 <__kernel_rem_pio2+0x250>
 800a24c:	1e61      	subs	r1, r4, #1
 800a24e:	ab0c      	add	r3, sp, #48	; 0x30
 800a250:	9d02      	ldr	r5, [sp, #8]
 800a252:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a256:	f1ca 0018 	rsb	r0, sl, #24
 800a25a:	fa43 f200 	asr.w	r2, r3, r0
 800a25e:	4415      	add	r5, r2
 800a260:	4082      	lsls	r2, r0
 800a262:	1a9b      	subs	r3, r3, r2
 800a264:	aa0c      	add	r2, sp, #48	; 0x30
 800a266:	9502      	str	r5, [sp, #8]
 800a268:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a26c:	f1ca 0217 	rsb	r2, sl, #23
 800a270:	fa43 fb02 	asr.w	fp, r3, r2
 800a274:	f1bb 0f00 	cmp.w	fp, #0
 800a278:	dd65      	ble.n	800a346 <__kernel_rem_pio2+0x26e>
 800a27a:	9b02      	ldr	r3, [sp, #8]
 800a27c:	2200      	movs	r2, #0
 800a27e:	3301      	adds	r3, #1
 800a280:	9302      	str	r3, [sp, #8]
 800a282:	4615      	mov	r5, r2
 800a284:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a288:	4294      	cmp	r4, r2
 800a28a:	f300 809f 	bgt.w	800a3cc <__kernel_rem_pio2+0x2f4>
 800a28e:	f1ba 0f00 	cmp.w	sl, #0
 800a292:	dd07      	ble.n	800a2a4 <__kernel_rem_pio2+0x1cc>
 800a294:	f1ba 0f01 	cmp.w	sl, #1
 800a298:	f000 80c1 	beq.w	800a41e <__kernel_rem_pio2+0x346>
 800a29c:	f1ba 0f02 	cmp.w	sl, #2
 800a2a0:	f000 80c7 	beq.w	800a432 <__kernel_rem_pio2+0x35a>
 800a2a4:	f1bb 0f02 	cmp.w	fp, #2
 800a2a8:	d14d      	bne.n	800a346 <__kernel_rem_pio2+0x26e>
 800a2aa:	4632      	mov	r2, r6
 800a2ac:	463b      	mov	r3, r7
 800a2ae:	4954      	ldr	r1, [pc, #336]	; (800a400 <__kernel_rem_pio2+0x328>)
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	f7f5 ffe9 	bl	8000288 <__aeabi_dsub>
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	460f      	mov	r7, r1
 800a2ba:	2d00      	cmp	r5, #0
 800a2bc:	d043      	beq.n	800a346 <__kernel_rem_pio2+0x26e>
 800a2be:	4650      	mov	r0, sl
 800a2c0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800a3f0 <__kernel_rem_pio2+0x318>
 800a2c4:	f000 fa58 	bl	800a778 <scalbn>
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	ec53 2b10 	vmov	r2, r3, d0
 800a2d0:	f7f5 ffda 	bl	8000288 <__aeabi_dsub>
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	460f      	mov	r7, r1
 800a2d8:	e035      	b.n	800a346 <__kernel_rem_pio2+0x26e>
 800a2da:	4b4a      	ldr	r3, [pc, #296]	; (800a404 <__kernel_rem_pio2+0x32c>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	4630      	mov	r0, r6
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	f7f6 f989 	bl	80005f8 <__aeabi_dmul>
 800a2e6:	f7f6 fc37 	bl	8000b58 <__aeabi_d2iz>
 800a2ea:	f7f6 f91b 	bl	8000524 <__aeabi_i2d>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	ec43 2b18 	vmov	d8, r2, r3
 800a2f6:	4b44      	ldr	r3, [pc, #272]	; (800a408 <__kernel_rem_pio2+0x330>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f7f6 f97d 	bl	80005f8 <__aeabi_dmul>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4630      	mov	r0, r6
 800a304:	4639      	mov	r1, r7
 800a306:	f7f5 ffbf 	bl	8000288 <__aeabi_dsub>
 800a30a:	f7f6 fc25 	bl	8000b58 <__aeabi_d2iz>
 800a30e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a312:	f84b 0b04 	str.w	r0, [fp], #4
 800a316:	ec51 0b18 	vmov	r0, r1, d8
 800a31a:	f7f5 ffb7 	bl	800028c <__adddf3>
 800a31e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a322:	4606      	mov	r6, r0
 800a324:	460f      	mov	r7, r1
 800a326:	e75b      	b.n	800a1e0 <__kernel_rem_pio2+0x108>
 800a328:	d106      	bne.n	800a338 <__kernel_rem_pio2+0x260>
 800a32a:	1e63      	subs	r3, r4, #1
 800a32c:	aa0c      	add	r2, sp, #48	; 0x30
 800a32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a332:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800a336:	e79d      	b.n	800a274 <__kernel_rem_pio2+0x19c>
 800a338:	4b34      	ldr	r3, [pc, #208]	; (800a40c <__kernel_rem_pio2+0x334>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	f7f6 fbe2 	bl	8000b04 <__aeabi_dcmpge>
 800a340:	2800      	cmp	r0, #0
 800a342:	d140      	bne.n	800a3c6 <__kernel_rem_pio2+0x2ee>
 800a344:	4683      	mov	fp, r0
 800a346:	2200      	movs	r2, #0
 800a348:	2300      	movs	r3, #0
 800a34a:	4630      	mov	r0, r6
 800a34c:	4639      	mov	r1, r7
 800a34e:	f7f6 fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a352:	2800      	cmp	r0, #0
 800a354:	f000 80c1 	beq.w	800a4da <__kernel_rem_pio2+0x402>
 800a358:	1e65      	subs	r5, r4, #1
 800a35a:	462b      	mov	r3, r5
 800a35c:	2200      	movs	r2, #0
 800a35e:	9900      	ldr	r1, [sp, #0]
 800a360:	428b      	cmp	r3, r1
 800a362:	da6d      	bge.n	800a440 <__kernel_rem_pio2+0x368>
 800a364:	2a00      	cmp	r2, #0
 800a366:	f000 808a 	beq.w	800a47e <__kernel_rem_pio2+0x3a6>
 800a36a:	ab0c      	add	r3, sp, #48	; 0x30
 800a36c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a370:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a374:	2b00      	cmp	r3, #0
 800a376:	f000 80ae 	beq.w	800a4d6 <__kernel_rem_pio2+0x3fe>
 800a37a:	4650      	mov	r0, sl
 800a37c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800a3f0 <__kernel_rem_pio2+0x318>
 800a380:	f000 f9fa 	bl	800a778 <scalbn>
 800a384:	1c6b      	adds	r3, r5, #1
 800a386:	00da      	lsls	r2, r3, #3
 800a388:	9205      	str	r2, [sp, #20]
 800a38a:	ec57 6b10 	vmov	r6, r7, d0
 800a38e:	aa70      	add	r2, sp, #448	; 0x1c0
 800a390:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800a404 <__kernel_rem_pio2+0x32c>
 800a394:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800a398:	462c      	mov	r4, r5
 800a39a:	f04f 0800 	mov.w	r8, #0
 800a39e:	2c00      	cmp	r4, #0
 800a3a0:	f280 80d4 	bge.w	800a54c <__kernel_rem_pio2+0x474>
 800a3a4:	462c      	mov	r4, r5
 800a3a6:	2c00      	cmp	r4, #0
 800a3a8:	f2c0 8102 	blt.w	800a5b0 <__kernel_rem_pio2+0x4d8>
 800a3ac:	4b18      	ldr	r3, [pc, #96]	; (800a410 <__kernel_rem_pio2+0x338>)
 800a3ae:	461e      	mov	r6, r3
 800a3b0:	ab70      	add	r3, sp, #448	; 0x1c0
 800a3b2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800a3b6:	1b2b      	subs	r3, r5, r4
 800a3b8:	f04f 0900 	mov.w	r9, #0
 800a3bc:	f04f 0a00 	mov.w	sl, #0
 800a3c0:	2700      	movs	r7, #0
 800a3c2:	9306      	str	r3, [sp, #24]
 800a3c4:	e0e6      	b.n	800a594 <__kernel_rem_pio2+0x4bc>
 800a3c6:	f04f 0b02 	mov.w	fp, #2
 800a3ca:	e756      	b.n	800a27a <__kernel_rem_pio2+0x1a2>
 800a3cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a3d0:	bb05      	cbnz	r5, 800a414 <__kernel_rem_pio2+0x33c>
 800a3d2:	b123      	cbz	r3, 800a3de <__kernel_rem_pio2+0x306>
 800a3d4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a3d8:	f8c8 3000 	str.w	r3, [r8]
 800a3dc:	2301      	movs	r3, #1
 800a3de:	3201      	adds	r2, #1
 800a3e0:	f108 0804 	add.w	r8, r8, #4
 800a3e4:	461d      	mov	r5, r3
 800a3e6:	e74f      	b.n	800a288 <__kernel_rem_pio2+0x1b0>
	...
 800a3f4:	3ff00000 	.word	0x3ff00000
 800a3f8:	0800bd78 	.word	0x0800bd78
 800a3fc:	40200000 	.word	0x40200000
 800a400:	3ff00000 	.word	0x3ff00000
 800a404:	3e700000 	.word	0x3e700000
 800a408:	41700000 	.word	0x41700000
 800a40c:	3fe00000 	.word	0x3fe00000
 800a410:	0800bd38 	.word	0x0800bd38
 800a414:	1acb      	subs	r3, r1, r3
 800a416:	f8c8 3000 	str.w	r3, [r8]
 800a41a:	462b      	mov	r3, r5
 800a41c:	e7df      	b.n	800a3de <__kernel_rem_pio2+0x306>
 800a41e:	1e62      	subs	r2, r4, #1
 800a420:	ab0c      	add	r3, sp, #48	; 0x30
 800a422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a426:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a42a:	a90c      	add	r1, sp, #48	; 0x30
 800a42c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a430:	e738      	b.n	800a2a4 <__kernel_rem_pio2+0x1cc>
 800a432:	1e62      	subs	r2, r4, #1
 800a434:	ab0c      	add	r3, sp, #48	; 0x30
 800a436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a43e:	e7f4      	b.n	800a42a <__kernel_rem_pio2+0x352>
 800a440:	a90c      	add	r1, sp, #48	; 0x30
 800a442:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a446:	3b01      	subs	r3, #1
 800a448:	430a      	orrs	r2, r1
 800a44a:	e788      	b.n	800a35e <__kernel_rem_pio2+0x286>
 800a44c:	3301      	adds	r3, #1
 800a44e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a452:	2900      	cmp	r1, #0
 800a454:	d0fa      	beq.n	800a44c <__kernel_rem_pio2+0x374>
 800a456:	9a08      	ldr	r2, [sp, #32]
 800a458:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800a45c:	446a      	add	r2, sp
 800a45e:	3a98      	subs	r2, #152	; 0x98
 800a460:	9208      	str	r2, [sp, #32]
 800a462:	9a06      	ldr	r2, [sp, #24]
 800a464:	a920      	add	r1, sp, #128	; 0x80
 800a466:	18a2      	adds	r2, r4, r2
 800a468:	18e3      	adds	r3, r4, r3
 800a46a:	f104 0801 	add.w	r8, r4, #1
 800a46e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800a472:	9302      	str	r3, [sp, #8]
 800a474:	9b02      	ldr	r3, [sp, #8]
 800a476:	4543      	cmp	r3, r8
 800a478:	da04      	bge.n	800a484 <__kernel_rem_pio2+0x3ac>
 800a47a:	461c      	mov	r4, r3
 800a47c:	e6a2      	b.n	800a1c4 <__kernel_rem_pio2+0xec>
 800a47e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a480:	2301      	movs	r3, #1
 800a482:	e7e4      	b.n	800a44e <__kernel_rem_pio2+0x376>
 800a484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a486:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a48a:	f7f6 f84b 	bl	8000524 <__aeabi_i2d>
 800a48e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a494:	46ab      	mov	fp, r5
 800a496:	461c      	mov	r4, r3
 800a498:	f04f 0900 	mov.w	r9, #0
 800a49c:	2600      	movs	r6, #0
 800a49e:	2700      	movs	r7, #0
 800a4a0:	9b05      	ldr	r3, [sp, #20]
 800a4a2:	4599      	cmp	r9, r3
 800a4a4:	dd06      	ble.n	800a4b4 <__kernel_rem_pio2+0x3dc>
 800a4a6:	9b08      	ldr	r3, [sp, #32]
 800a4a8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a4ac:	f108 0801 	add.w	r8, r8, #1
 800a4b0:	9308      	str	r3, [sp, #32]
 800a4b2:	e7df      	b.n	800a474 <__kernel_rem_pio2+0x39c>
 800a4b4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a4b8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a4bc:	f7f6 f89c 	bl	80005f8 <__aeabi_dmul>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	f7f5 fee0 	bl	800028c <__adddf3>
 800a4cc:	f109 0901 	add.w	r9, r9, #1
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	460f      	mov	r7, r1
 800a4d4:	e7e4      	b.n	800a4a0 <__kernel_rem_pio2+0x3c8>
 800a4d6:	3d01      	subs	r5, #1
 800a4d8:	e747      	b.n	800a36a <__kernel_rem_pio2+0x292>
 800a4da:	ec47 6b10 	vmov	d0, r6, r7
 800a4de:	f1ca 0000 	rsb	r0, sl, #0
 800a4e2:	f000 f949 	bl	800a778 <scalbn>
 800a4e6:	ec57 6b10 	vmov	r6, r7, d0
 800a4ea:	4ba0      	ldr	r3, [pc, #640]	; (800a76c <__kernel_rem_pio2+0x694>)
 800a4ec:	ee10 0a10 	vmov	r0, s0
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	f7f6 fb06 	bl	8000b04 <__aeabi_dcmpge>
 800a4f8:	b1f8      	cbz	r0, 800a53a <__kernel_rem_pio2+0x462>
 800a4fa:	4b9d      	ldr	r3, [pc, #628]	; (800a770 <__kernel_rem_pio2+0x698>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4630      	mov	r0, r6
 800a500:	4639      	mov	r1, r7
 800a502:	f7f6 f879 	bl	80005f8 <__aeabi_dmul>
 800a506:	f7f6 fb27 	bl	8000b58 <__aeabi_d2iz>
 800a50a:	4680      	mov	r8, r0
 800a50c:	f7f6 f80a 	bl	8000524 <__aeabi_i2d>
 800a510:	4b96      	ldr	r3, [pc, #600]	; (800a76c <__kernel_rem_pio2+0x694>)
 800a512:	2200      	movs	r2, #0
 800a514:	f7f6 f870 	bl	80005f8 <__aeabi_dmul>
 800a518:	460b      	mov	r3, r1
 800a51a:	4602      	mov	r2, r0
 800a51c:	4639      	mov	r1, r7
 800a51e:	4630      	mov	r0, r6
 800a520:	f7f5 feb2 	bl	8000288 <__aeabi_dsub>
 800a524:	f7f6 fb18 	bl	8000b58 <__aeabi_d2iz>
 800a528:	1c65      	adds	r5, r4, #1
 800a52a:	ab0c      	add	r3, sp, #48	; 0x30
 800a52c:	f10a 0a18 	add.w	sl, sl, #24
 800a530:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a534:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a538:	e71f      	b.n	800a37a <__kernel_rem_pio2+0x2a2>
 800a53a:	4630      	mov	r0, r6
 800a53c:	4639      	mov	r1, r7
 800a53e:	f7f6 fb0b 	bl	8000b58 <__aeabi_d2iz>
 800a542:	ab0c      	add	r3, sp, #48	; 0x30
 800a544:	4625      	mov	r5, r4
 800a546:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a54a:	e716      	b.n	800a37a <__kernel_rem_pio2+0x2a2>
 800a54c:	ab0c      	add	r3, sp, #48	; 0x30
 800a54e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a552:	f7f5 ffe7 	bl	8000524 <__aeabi_i2d>
 800a556:	4632      	mov	r2, r6
 800a558:	463b      	mov	r3, r7
 800a55a:	f7f6 f84d 	bl	80005f8 <__aeabi_dmul>
 800a55e:	4642      	mov	r2, r8
 800a560:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a564:	464b      	mov	r3, r9
 800a566:	4630      	mov	r0, r6
 800a568:	4639      	mov	r1, r7
 800a56a:	f7f6 f845 	bl	80005f8 <__aeabi_dmul>
 800a56e:	3c01      	subs	r4, #1
 800a570:	4606      	mov	r6, r0
 800a572:	460f      	mov	r7, r1
 800a574:	e713      	b.n	800a39e <__kernel_rem_pio2+0x2c6>
 800a576:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a57a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800a57e:	f7f6 f83b 	bl	80005f8 <__aeabi_dmul>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	4648      	mov	r0, r9
 800a588:	4651      	mov	r1, sl
 800a58a:	f7f5 fe7f 	bl	800028c <__adddf3>
 800a58e:	3701      	adds	r7, #1
 800a590:	4681      	mov	r9, r0
 800a592:	468a      	mov	sl, r1
 800a594:	9b00      	ldr	r3, [sp, #0]
 800a596:	429f      	cmp	r7, r3
 800a598:	dc02      	bgt.n	800a5a0 <__kernel_rem_pio2+0x4c8>
 800a59a:	9b06      	ldr	r3, [sp, #24]
 800a59c:	429f      	cmp	r7, r3
 800a59e:	ddea      	ble.n	800a576 <__kernel_rem_pio2+0x49e>
 800a5a0:	9a06      	ldr	r2, [sp, #24]
 800a5a2:	ab48      	add	r3, sp, #288	; 0x120
 800a5a4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800a5a8:	e9c6 9a00 	strd	r9, sl, [r6]
 800a5ac:	3c01      	subs	r4, #1
 800a5ae:	e6fa      	b.n	800a3a6 <__kernel_rem_pio2+0x2ce>
 800a5b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	dc0b      	bgt.n	800a5ce <__kernel_rem_pio2+0x4f6>
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	dc39      	bgt.n	800a62e <__kernel_rem_pio2+0x556>
 800a5ba:	d05d      	beq.n	800a678 <__kernel_rem_pio2+0x5a0>
 800a5bc:	9b02      	ldr	r3, [sp, #8]
 800a5be:	f003 0007 	and.w	r0, r3, #7
 800a5c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a5c6:	ecbd 8b02 	vpop	{d8}
 800a5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	d1f3      	bne.n	800a5bc <__kernel_rem_pio2+0x4e4>
 800a5d4:	9b05      	ldr	r3, [sp, #20]
 800a5d6:	9500      	str	r5, [sp, #0]
 800a5d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a5dc:	eb0d 0403 	add.w	r4, sp, r3
 800a5e0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800a5e4:	46a2      	mov	sl, r4
 800a5e6:	9b00      	ldr	r3, [sp, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f1aa 0a08 	sub.w	sl, sl, #8
 800a5ee:	dc69      	bgt.n	800a6c4 <__kernel_rem_pio2+0x5ec>
 800a5f0:	46aa      	mov	sl, r5
 800a5f2:	f1ba 0f01 	cmp.w	sl, #1
 800a5f6:	f1a4 0408 	sub.w	r4, r4, #8
 800a5fa:	f300 8083 	bgt.w	800a704 <__kernel_rem_pio2+0x62c>
 800a5fe:	9c05      	ldr	r4, [sp, #20]
 800a600:	ab48      	add	r3, sp, #288	; 0x120
 800a602:	441c      	add	r4, r3
 800a604:	2000      	movs	r0, #0
 800a606:	2100      	movs	r1, #0
 800a608:	2d01      	cmp	r5, #1
 800a60a:	f300 809a 	bgt.w	800a742 <__kernel_rem_pio2+0x66a>
 800a60e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800a612:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a616:	f1bb 0f00 	cmp.w	fp, #0
 800a61a:	f040 8098 	bne.w	800a74e <__kernel_rem_pio2+0x676>
 800a61e:	9b04      	ldr	r3, [sp, #16]
 800a620:	e9c3 7800 	strd	r7, r8, [r3]
 800a624:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a628:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a62c:	e7c6      	b.n	800a5bc <__kernel_rem_pio2+0x4e4>
 800a62e:	9e05      	ldr	r6, [sp, #20]
 800a630:	ab48      	add	r3, sp, #288	; 0x120
 800a632:	441e      	add	r6, r3
 800a634:	462c      	mov	r4, r5
 800a636:	2000      	movs	r0, #0
 800a638:	2100      	movs	r1, #0
 800a63a:	2c00      	cmp	r4, #0
 800a63c:	da33      	bge.n	800a6a6 <__kernel_rem_pio2+0x5ce>
 800a63e:	f1bb 0f00 	cmp.w	fp, #0
 800a642:	d036      	beq.n	800a6b2 <__kernel_rem_pio2+0x5da>
 800a644:	4602      	mov	r2, r0
 800a646:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a64a:	9c04      	ldr	r4, [sp, #16]
 800a64c:	e9c4 2300 	strd	r2, r3, [r4]
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a658:	f7f5 fe16 	bl	8000288 <__aeabi_dsub>
 800a65c:	ae4a      	add	r6, sp, #296	; 0x128
 800a65e:	2401      	movs	r4, #1
 800a660:	42a5      	cmp	r5, r4
 800a662:	da29      	bge.n	800a6b8 <__kernel_rem_pio2+0x5e0>
 800a664:	f1bb 0f00 	cmp.w	fp, #0
 800a668:	d002      	beq.n	800a670 <__kernel_rem_pio2+0x598>
 800a66a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a66e:	4619      	mov	r1, r3
 800a670:	9b04      	ldr	r3, [sp, #16]
 800a672:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a676:	e7a1      	b.n	800a5bc <__kernel_rem_pio2+0x4e4>
 800a678:	9c05      	ldr	r4, [sp, #20]
 800a67a:	ab48      	add	r3, sp, #288	; 0x120
 800a67c:	441c      	add	r4, r3
 800a67e:	2000      	movs	r0, #0
 800a680:	2100      	movs	r1, #0
 800a682:	2d00      	cmp	r5, #0
 800a684:	da09      	bge.n	800a69a <__kernel_rem_pio2+0x5c2>
 800a686:	f1bb 0f00 	cmp.w	fp, #0
 800a68a:	d002      	beq.n	800a692 <__kernel_rem_pio2+0x5ba>
 800a68c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a690:	4619      	mov	r1, r3
 800a692:	9b04      	ldr	r3, [sp, #16]
 800a694:	e9c3 0100 	strd	r0, r1, [r3]
 800a698:	e790      	b.n	800a5bc <__kernel_rem_pio2+0x4e4>
 800a69a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a69e:	f7f5 fdf5 	bl	800028c <__adddf3>
 800a6a2:	3d01      	subs	r5, #1
 800a6a4:	e7ed      	b.n	800a682 <__kernel_rem_pio2+0x5aa>
 800a6a6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a6aa:	f7f5 fdef 	bl	800028c <__adddf3>
 800a6ae:	3c01      	subs	r4, #1
 800a6b0:	e7c3      	b.n	800a63a <__kernel_rem_pio2+0x562>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	e7c8      	b.n	800a64a <__kernel_rem_pio2+0x572>
 800a6b8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a6bc:	f7f5 fde6 	bl	800028c <__adddf3>
 800a6c0:	3401      	adds	r4, #1
 800a6c2:	e7cd      	b.n	800a660 <__kernel_rem_pio2+0x588>
 800a6c4:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6c8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a6cc:	9b00      	ldr	r3, [sp, #0]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	4632      	mov	r2, r6
 800a6d4:	463b      	mov	r3, r7
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	4649      	mov	r1, r9
 800a6da:	f7f5 fdd7 	bl	800028c <__adddf3>
 800a6de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4640      	mov	r0, r8
 800a6e8:	4649      	mov	r1, r9
 800a6ea:	f7f5 fdcd 	bl	8000288 <__aeabi_dsub>
 800a6ee:	4632      	mov	r2, r6
 800a6f0:	463b      	mov	r3, r7
 800a6f2:	f7f5 fdcb 	bl	800028c <__adddf3>
 800a6f6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a6fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a6fe:	ed8a 7b00 	vstr	d7, [sl]
 800a702:	e770      	b.n	800a5e6 <__kernel_rem_pio2+0x50e>
 800a704:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a708:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a70c:	4640      	mov	r0, r8
 800a70e:	4632      	mov	r2, r6
 800a710:	463b      	mov	r3, r7
 800a712:	4649      	mov	r1, r9
 800a714:	f7f5 fdba 	bl	800028c <__adddf3>
 800a718:	e9cd 0100 	strd	r0, r1, [sp]
 800a71c:	4602      	mov	r2, r0
 800a71e:	460b      	mov	r3, r1
 800a720:	4640      	mov	r0, r8
 800a722:	4649      	mov	r1, r9
 800a724:	f7f5 fdb0 	bl	8000288 <__aeabi_dsub>
 800a728:	4632      	mov	r2, r6
 800a72a:	463b      	mov	r3, r7
 800a72c:	f7f5 fdae 	bl	800028c <__adddf3>
 800a730:	ed9d 7b00 	vldr	d7, [sp]
 800a734:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a738:	ed84 7b00 	vstr	d7, [r4]
 800a73c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a740:	e757      	b.n	800a5f2 <__kernel_rem_pio2+0x51a>
 800a742:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a746:	f7f5 fda1 	bl	800028c <__adddf3>
 800a74a:	3d01      	subs	r5, #1
 800a74c:	e75c      	b.n	800a608 <__kernel_rem_pio2+0x530>
 800a74e:	9b04      	ldr	r3, [sp, #16]
 800a750:	9a04      	ldr	r2, [sp, #16]
 800a752:	601f      	str	r7, [r3, #0]
 800a754:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a758:	605c      	str	r4, [r3, #4]
 800a75a:	609d      	str	r5, [r3, #8]
 800a75c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a760:	60d3      	str	r3, [r2, #12]
 800a762:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a766:	6110      	str	r0, [r2, #16]
 800a768:	6153      	str	r3, [r2, #20]
 800a76a:	e727      	b.n	800a5bc <__kernel_rem_pio2+0x4e4>
 800a76c:	41700000 	.word	0x41700000
 800a770:	3e700000 	.word	0x3e700000
 800a774:	00000000 	.word	0x00000000

0800a778 <scalbn>:
 800a778:	b570      	push	{r4, r5, r6, lr}
 800a77a:	ec55 4b10 	vmov	r4, r5, d0
 800a77e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a782:	4606      	mov	r6, r0
 800a784:	462b      	mov	r3, r5
 800a786:	b999      	cbnz	r1, 800a7b0 <scalbn+0x38>
 800a788:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a78c:	4323      	orrs	r3, r4
 800a78e:	d03f      	beq.n	800a810 <scalbn+0x98>
 800a790:	4b35      	ldr	r3, [pc, #212]	; (800a868 <scalbn+0xf0>)
 800a792:	4629      	mov	r1, r5
 800a794:	ee10 0a10 	vmov	r0, s0
 800a798:	2200      	movs	r2, #0
 800a79a:	f7f5 ff2d 	bl	80005f8 <__aeabi_dmul>
 800a79e:	4b33      	ldr	r3, [pc, #204]	; (800a86c <scalbn+0xf4>)
 800a7a0:	429e      	cmp	r6, r3
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	460d      	mov	r5, r1
 800a7a6:	da10      	bge.n	800a7ca <scalbn+0x52>
 800a7a8:	a327      	add	r3, pc, #156	; (adr r3, 800a848 <scalbn+0xd0>)
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	e01f      	b.n	800a7f0 <scalbn+0x78>
 800a7b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a7b4:	4291      	cmp	r1, r2
 800a7b6:	d10c      	bne.n	800a7d2 <scalbn+0x5a>
 800a7b8:	ee10 2a10 	vmov	r2, s0
 800a7bc:	4620      	mov	r0, r4
 800a7be:	4629      	mov	r1, r5
 800a7c0:	f7f5 fd64 	bl	800028c <__adddf3>
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	460d      	mov	r5, r1
 800a7c8:	e022      	b.n	800a810 <scalbn+0x98>
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a7d0:	3936      	subs	r1, #54	; 0x36
 800a7d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a7d6:	4296      	cmp	r6, r2
 800a7d8:	dd0d      	ble.n	800a7f6 <scalbn+0x7e>
 800a7da:	2d00      	cmp	r5, #0
 800a7dc:	a11c      	add	r1, pc, #112	; (adr r1, 800a850 <scalbn+0xd8>)
 800a7de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7e2:	da02      	bge.n	800a7ea <scalbn+0x72>
 800a7e4:	a11c      	add	r1, pc, #112	; (adr r1, 800a858 <scalbn+0xe0>)
 800a7e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7ea:	a319      	add	r3, pc, #100	; (adr r3, 800a850 <scalbn+0xd8>)
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	f7f5 ff02 	bl	80005f8 <__aeabi_dmul>
 800a7f4:	e7e6      	b.n	800a7c4 <scalbn+0x4c>
 800a7f6:	1872      	adds	r2, r6, r1
 800a7f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a7fc:	428a      	cmp	r2, r1
 800a7fe:	dcec      	bgt.n	800a7da <scalbn+0x62>
 800a800:	2a00      	cmp	r2, #0
 800a802:	dd08      	ble.n	800a816 <scalbn+0x9e>
 800a804:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a808:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a80c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a810:	ec45 4b10 	vmov	d0, r4, r5
 800a814:	bd70      	pop	{r4, r5, r6, pc}
 800a816:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a81a:	da08      	bge.n	800a82e <scalbn+0xb6>
 800a81c:	2d00      	cmp	r5, #0
 800a81e:	a10a      	add	r1, pc, #40	; (adr r1, 800a848 <scalbn+0xd0>)
 800a820:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a824:	dac0      	bge.n	800a7a8 <scalbn+0x30>
 800a826:	a10e      	add	r1, pc, #56	; (adr r1, 800a860 <scalbn+0xe8>)
 800a828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a82c:	e7bc      	b.n	800a7a8 <scalbn+0x30>
 800a82e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a832:	3236      	adds	r2, #54	; 0x36
 800a834:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a838:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a83c:	4620      	mov	r0, r4
 800a83e:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <scalbn+0xf8>)
 800a840:	2200      	movs	r2, #0
 800a842:	e7d5      	b.n	800a7f0 <scalbn+0x78>
 800a844:	f3af 8000 	nop.w
 800a848:	c2f8f359 	.word	0xc2f8f359
 800a84c:	01a56e1f 	.word	0x01a56e1f
 800a850:	8800759c 	.word	0x8800759c
 800a854:	7e37e43c 	.word	0x7e37e43c
 800a858:	8800759c 	.word	0x8800759c
 800a85c:	fe37e43c 	.word	0xfe37e43c
 800a860:	c2f8f359 	.word	0xc2f8f359
 800a864:	81a56e1f 	.word	0x81a56e1f
 800a868:	43500000 	.word	0x43500000
 800a86c:	ffff3cb0 	.word	0xffff3cb0
 800a870:	3c900000 	.word	0x3c900000
 800a874:	00000000 	.word	0x00000000

0800a878 <floor>:
 800a878:	ec51 0b10 	vmov	r0, r1, d0
 800a87c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a884:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800a888:	2e13      	cmp	r6, #19
 800a88a:	ee10 5a10 	vmov	r5, s0
 800a88e:	ee10 8a10 	vmov	r8, s0
 800a892:	460c      	mov	r4, r1
 800a894:	dc31      	bgt.n	800a8fa <floor+0x82>
 800a896:	2e00      	cmp	r6, #0
 800a898:	da14      	bge.n	800a8c4 <floor+0x4c>
 800a89a:	a333      	add	r3, pc, #204	; (adr r3, 800a968 <floor+0xf0>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f7f5 fcf4 	bl	800028c <__adddf3>
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f7f6 f936 	bl	8000b18 <__aeabi_dcmpgt>
 800a8ac:	b138      	cbz	r0, 800a8be <floor+0x46>
 800a8ae:	2c00      	cmp	r4, #0
 800a8b0:	da53      	bge.n	800a95a <floor+0xe2>
 800a8b2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800a8b6:	4325      	orrs	r5, r4
 800a8b8:	d052      	beq.n	800a960 <floor+0xe8>
 800a8ba:	4c2d      	ldr	r4, [pc, #180]	; (800a970 <floor+0xf8>)
 800a8bc:	2500      	movs	r5, #0
 800a8be:	4621      	mov	r1, r4
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	e024      	b.n	800a90e <floor+0x96>
 800a8c4:	4f2b      	ldr	r7, [pc, #172]	; (800a974 <floor+0xfc>)
 800a8c6:	4137      	asrs	r7, r6
 800a8c8:	ea01 0307 	and.w	r3, r1, r7
 800a8cc:	4303      	orrs	r3, r0
 800a8ce:	d01e      	beq.n	800a90e <floor+0x96>
 800a8d0:	a325      	add	r3, pc, #148	; (adr r3, 800a968 <floor+0xf0>)
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	f7f5 fcd9 	bl	800028c <__adddf3>
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2300      	movs	r3, #0
 800a8de:	f7f6 f91b 	bl	8000b18 <__aeabi_dcmpgt>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	d0eb      	beq.n	800a8be <floor+0x46>
 800a8e6:	2c00      	cmp	r4, #0
 800a8e8:	bfbe      	ittt	lt
 800a8ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a8ee:	4133      	asrlt	r3, r6
 800a8f0:	18e4      	addlt	r4, r4, r3
 800a8f2:	ea24 0407 	bic.w	r4, r4, r7
 800a8f6:	2500      	movs	r5, #0
 800a8f8:	e7e1      	b.n	800a8be <floor+0x46>
 800a8fa:	2e33      	cmp	r6, #51	; 0x33
 800a8fc:	dd0b      	ble.n	800a916 <floor+0x9e>
 800a8fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a902:	d104      	bne.n	800a90e <floor+0x96>
 800a904:	ee10 2a10 	vmov	r2, s0
 800a908:	460b      	mov	r3, r1
 800a90a:	f7f5 fcbf 	bl	800028c <__adddf3>
 800a90e:	ec41 0b10 	vmov	d0, r0, r1
 800a912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a916:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800a91a:	f04f 37ff 	mov.w	r7, #4294967295
 800a91e:	40df      	lsrs	r7, r3
 800a920:	4238      	tst	r0, r7
 800a922:	d0f4      	beq.n	800a90e <floor+0x96>
 800a924:	a310      	add	r3, pc, #64	; (adr r3, 800a968 <floor+0xf0>)
 800a926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92a:	f7f5 fcaf 	bl	800028c <__adddf3>
 800a92e:	2200      	movs	r2, #0
 800a930:	2300      	movs	r3, #0
 800a932:	f7f6 f8f1 	bl	8000b18 <__aeabi_dcmpgt>
 800a936:	2800      	cmp	r0, #0
 800a938:	d0c1      	beq.n	800a8be <floor+0x46>
 800a93a:	2c00      	cmp	r4, #0
 800a93c:	da0a      	bge.n	800a954 <floor+0xdc>
 800a93e:	2e14      	cmp	r6, #20
 800a940:	d101      	bne.n	800a946 <floor+0xce>
 800a942:	3401      	adds	r4, #1
 800a944:	e006      	b.n	800a954 <floor+0xdc>
 800a946:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a94a:	2301      	movs	r3, #1
 800a94c:	40b3      	lsls	r3, r6
 800a94e:	441d      	add	r5, r3
 800a950:	45a8      	cmp	r8, r5
 800a952:	d8f6      	bhi.n	800a942 <floor+0xca>
 800a954:	ea25 0507 	bic.w	r5, r5, r7
 800a958:	e7b1      	b.n	800a8be <floor+0x46>
 800a95a:	2500      	movs	r5, #0
 800a95c:	462c      	mov	r4, r5
 800a95e:	e7ae      	b.n	800a8be <floor+0x46>
 800a960:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a964:	e7ab      	b.n	800a8be <floor+0x46>
 800a966:	bf00      	nop
 800a968:	8800759c 	.word	0x8800759c
 800a96c:	7e37e43c 	.word	0x7e37e43c
 800a970:	bff00000 	.word	0xbff00000
 800a974:	000fffff 	.word	0x000fffff

0800a978 <_init>:
 800a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97a:	bf00      	nop
 800a97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97e:	bc08      	pop	{r3}
 800a980:	469e      	mov	lr, r3
 800a982:	4770      	bx	lr

0800a984 <_fini>:
 800a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a986:	bf00      	nop
 800a988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a98a:	bc08      	pop	{r3}
 800a98c:	469e      	mov	lr, r3
 800a98e:	4770      	bx	lr
