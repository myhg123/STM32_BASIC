
ultraSonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005670  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005810  08005810  00015810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005868  08005868  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005870  08005870  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005878  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000090  08005908  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08005908  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ddc8  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002156  00000000  00000000  0002decb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00030028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a62  00000000  00000000  00030d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175ae  00000000  00000000  000317e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa51  00000000  00000000  00048d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ffd9  00000000  00000000  000587e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004034  00000000  00000000  000e87bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ec7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057f8 	.word	0x080057f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	080057f8 	.word	0x080057f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <movingAvgFilter>:

#include "filter.h"

#define maxValue	100

uint16_t movingAvgFilter(uint16_t inData){
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
   static uint16_t filterBuffer[maxValue];
   static uint32_t sumValue = 0;
   static uint16_t bufPos = 0;
   static _Bool	isFirst = 0;
   if(isFirst ==0){
 8000db2:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <movingAvgFilter+0xb8>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	f083 0301 	eor.w	r3, r3, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d010      	beq.n	8000de2 <movingAvgFilter+0x3a>
  	 isFirst = 1;
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <movingAvgFilter+0xb8>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
  	 for(int i=0;i<maxValue;i++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	e007      	b.n	8000ddc <movingAvgFilter+0x34>
  		 filterBuffer[i] = inData;
 8000dcc:	4925      	ldr	r1, [pc, #148]	; (8000e64 <movingAvgFilter+0xbc>)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	88fa      	ldrh	r2, [r7, #6]
 8000dd2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  	 for(int i=0;i<maxValue;i++)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b63      	cmp	r3, #99	; 0x63
 8000de0:	ddf4      	ble.n	8000dcc <movingAvgFilter+0x24>
   }
   // 합계에서 현재위치의 버퍼값을 빼기
   sumValue -= filterBuffer[bufPos];
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <movingAvgFilter+0xc0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <movingAvgFilter+0xc4>)
 8000de8:	8812      	ldrh	r2, [r2, #0]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <movingAvgFilter+0xbc>)
 8000dee:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <movingAvgFilter+0xc0>)
 8000df6:	6013      	str	r3, [r2, #0]
   // 현재위치의 버퍼값을
   filterBuffer[bufPos] = inData;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <movingAvgFilter+0xc4>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <movingAvgFilter+0xbc>)
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   // 합계에 현재위치의 버퍼값을 더하기
   sumValue += filterBuffer[bufPos];
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <movingAvgFilter+0xc4>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <movingAvgFilter+0xbc>)
 8000e0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <movingAvgFilter+0xc0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <movingAvgFilter+0xc0>)
 8000e1c:	6013      	str	r3, [r2, #0]
   // 현재위치 증가
   bufPos++;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <movingAvgFilter+0xc4>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <movingAvgFilter+0xc4>)
 8000e28:	801a      	strh	r2, [r3, #0]
   // 현재위치 리셋
   bufPos %= 100;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <movingAvgFilter+0xc4>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <movingAvgFilter+0xc8>)
 8000e30:	fba2 1203 	umull	r1, r2, r2, r3
 8000e34:	0952      	lsrs	r2, r2, #5
 8000e36:	2164      	movs	r1, #100	; 0x64
 8000e38:	fb01 f202 	mul.w	r2, r1, r2
 8000e3c:	1a9b      	subs	r3, r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <movingAvgFilter+0xc4>)
 8000e42:	801a      	strh	r2, [r3, #0]
   return sumValue / 100;
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <movingAvgFilter+0xc0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <movingAvgFilter+0xc8>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	b29b      	uxth	r3, r3
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200000ac 	.word	0x200000ac
 8000e64:	200000b0 	.word	0x200000b0
 8000e68:	20000178 	.word	0x20000178
 8000e6c:	2000017c 	.word	0x2000017c
 8000e70:	51eb851f 	.word	0x51eb851f

08000e74 <Kalman>:

double Kalman(double inData) {
 8000e74:	b5b0      	push	{r4, r5, r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	ed87 0b00 	vstr	d0, [r7]
static double varP = 0.0001; // pow(0.01, 2)				프로세스 변동성
static double R = 0.25;//pow(0.5, 2);								측정치 오차의 공분산
static double K = 1.0;//														칼만 이득
static double X = 20.0;//														현재 추정된 상태
// Kalman Simple Filter
P = P + varP;
 8000e7e:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <Kalman+0xe4>)
 8000e80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e84:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <Kalman+0xe8>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	f7ff f9ff 	bl	800028c <__adddf3>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4931      	ldr	r1, [pc, #196]	; (8000f58 <Kalman+0xe4>)
 8000e94:	e9c1 2300 	strd	r2, r3, [r1]
K = P / (P + R);
 8000e98:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <Kalman+0xe4>)
 8000e9a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <Kalman+0xe4>)
 8000ea0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ea4:	4b2e      	ldr	r3, [pc, #184]	; (8000f60 <Kalman+0xec>)
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	f7ff f9ef 	bl	800028c <__adddf3>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	4629      	mov	r1, r5
 8000eb6:	f7ff fcc9 	bl	800084c <__aeabi_ddiv>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4929      	ldr	r1, [pc, #164]	; (8000f64 <Kalman+0xf0>)
 8000ec0:	e9c1 2300 	strd	r2, r3, [r1]
X = (K * inData) + (1 - K) * X;
 8000ec4:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <Kalman+0xf0>)
 8000ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ece:	f7ff fb93 	bl	80005f8 <__aeabi_dmul>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4614      	mov	r4, r2
 8000ed8:	461d      	mov	r5, r3
 8000eda:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <Kalman+0xf0>)
 8000edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee0:	f04f 0000 	mov.w	r0, #0
 8000ee4:	4920      	ldr	r1, [pc, #128]	; (8000f68 <Kalman+0xf4>)
 8000ee6:	f7ff f9cf 	bl	8000288 <__aeabi_dsub>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <Kalman+0xf8>)
 8000ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef8:	f7ff fb7e 	bl	80005f8 <__aeabi_dmul>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4620      	mov	r0, r4
 8000f02:	4629      	mov	r1, r5
 8000f04:	f7ff f9c2 	bl	800028c <__adddf3>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4917      	ldr	r1, [pc, #92]	; (8000f6c <Kalman+0xf8>)
 8000f0e:	e9c1 2300 	strd	r2, r3, [r1]
P = (1 - K) * P;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <Kalman+0xf0>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f04f 0000 	mov.w	r0, #0
 8000f1c:	4912      	ldr	r1, [pc, #72]	; (8000f68 <Kalman+0xf4>)
 8000f1e:	f7ff f9b3 	bl	8000288 <__aeabi_dsub>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4610      	mov	r0, r2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <Kalman+0xe4>)
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	f7ff fb62 	bl	80005f8 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <Kalman+0xe4>)
 8000f3a:	e9c1 2300 	strd	r2, r3, [r1]
return X;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <Kalman+0xf8>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f48:	eeb0 0a47 	vmov.f32	s0, s14
 8000f4c:	eef0 0a67 	vmov.f32	s1, s15
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bdb0      	pop	{r4, r5, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000010 	.word	0x20000010
 8000f64:	20000018 	.word	0x20000018
 8000f68:	3ff00000 	.word	0x3ff00000
 8000f6c:	20000020 	.word	0x20000020

08000f70 <delayUs>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delayUs(uint16_t time){
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
	htim10.Instance->CNT = 0;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <delayUs+0x30>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim10.Instance->CNT < time);
 8000f82:	bf00      	nop
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <delayUs+0x30>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d3f9      	bcc.n	8000f84 <delayUs+0x14>
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	200001c8 	.word	0x200001c8
 8000fa4:	00000000 	.word	0x00000000

08000fa8 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2 =0;
uint32_t Difference =0;
uint8_t IsFirstCaptured =0;
uint32_t Distance =0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7f1b      	ldrb	r3, [r3, #28]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	f040 8082 	bne.w	80010be <HAL_TIM_IC_CaptureCallback+0x116>
		//?��?�� ?��?��?��?��
		if(IsFirstCaptured ==0){
 8000fba:	4b45      	ldr	r3, [pc, #276]	; (80010d0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d11a      	bne.n	8000ff8 <HAL_TIM_IC_CaptureCallback+0x50>
			//???���? 값을 ?��?��
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f002 f931 	bl	800322c <HAL_TIM_ReadCapturedValue>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a41      	ldr	r2, [pc, #260]	; (80010d4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fce:	6013      	str	r3, [r2, #0]
			IsFirstCaptured =1;
 8000fd0:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
			//?��?�� ?��?��?��?���? ?��강해?�� 발생?��?���? ?��?��
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6a1a      	ldr	r2, [r3, #32]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 020a 	bic.w	r2, r2, #10
 8000fe4:	621a      	str	r2, [r3, #32]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6a1a      	ldr	r2, [r3, #32]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f042 0202 	orr.w	r2, r2, #2
 8000ff4:	621a      	str	r2, [r3, #32]
			IsFirstCaptured =0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim,TIM_IT_CC1);
		}
	}
}
 8000ff6:	e062      	b.n	80010be <HAL_TIM_IC_CaptureCallback+0x116>
		else if(IsFirstCaptured == 1){
 8000ff8:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d15e      	bne.n	80010be <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001000:	2100      	movs	r1, #0
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f002 f912 	bl	800322c <HAL_TIM_ReadCapturedValue>
 8001008:	4603      	mov	r3, r0
 800100a:	4a33      	ldr	r2, [pc, #204]	; (80010d8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800100c:	6013      	str	r3, [r2, #0]
			htim->Instance->CNT =0;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
			if(IC_Val2 > IC_Val1) Difference = IC_Val2-IC_Val1;
 8001016:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d907      	bls.n	8001032 <HAL_TIM_IC_CaptureCallback+0x8a>
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	4a2b      	ldr	r2, [pc, #172]	; (80010dc <HAL_TIM_IC_CaptureCallback+0x134>)
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	e00f      	b.n	8001052 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if(IC_Val1 > IC_Val2) Difference = (0xffff-IC_Val1) + IC_Val2;
 8001032:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d909      	bls.n	8001052 <HAL_TIM_IC_CaptureCallback+0xaa>
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800104c:	33ff      	adds	r3, #255	; 0xff
 800104e:	4a23      	ldr	r2, [pc, #140]	; (80010dc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001050:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034/2;
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa54 	bl	8000504 <__aeabi_ui2d>
 800105c:	a31a      	add	r3, pc, #104	; (adr r3, 80010c8 <HAL_TIM_IC_CaptureCallback+0x120>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff fac9 	bl	80005f8 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001076:	f7ff fbe9 	bl	800084c <__aeabi_ddiv>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fcf3 	bl	8000a6c <__aeabi_d2uiz>
 8001086:	4603      	mov	r3, r0
 8001088:	4a15      	ldr	r2, [pc, #84]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800108a:	6013      	str	r3, [r2, #0]
			IsFirstCaptured =0;
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6a1a      	ldr	r2, [r3, #32]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 020a 	bic.w	r2, r2, #10
 80010a0:	621a      	str	r2, [r3, #32]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6a12      	ldr	r2, [r2, #32]
 80010ac:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim,TIM_IT_CC1);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0202 	bic.w	r2, r2, #2
 80010bc:	60da      	str	r2, [r3, #12]
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	b020c49c 	.word	0xb020c49c
 80010cc:	3fa16872 	.word	0x3fa16872
 80010d0:	20000264 	.word	0x20000264
 80010d4:	20000258 	.word	0x20000258
 80010d8:	2000025c 	.word	0x2000025c
 80010dc:	20000260 	.word	0x20000260
 80010e0:	20000268 	.word	0x20000268

080010e4 <getDistance>:

uint32_t getDistance(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, 1);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <getDistance+0x3c>)
 80010f0:	f000 ffb8 	bl	8002064 <HAL_GPIO_WritePin>
	delayUs(10);
 80010f4:	200a      	movs	r0, #10
 80010f6:	f7ff ff3b 	bl	8000f70 <delayUs>
	HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <getDistance+0x3c>)
 8001102:	f000 ffaf 	bl	8002064 <HAL_GPIO_WritePin>
	//?��?��?��?�� ?��?��
	__HAL_TIM_ENABLE_IT(&htim1,TIM_IT_CC1);
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <getDistance+0x40>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <getDistance+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 0202 	orr.w	r2, r2, #2
 8001114:	60da      	str	r2, [r3, #12]
	return Distance;
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <getDistance+0x44>)
 8001118:	681b      	ldr	r3, [r3, #0]
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40020000 	.word	0x40020000
 8001124:	20000180 	.word	0x20000180
 8001128:	20000268 	.word	0x20000268

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001132:	f000 fbd9 	bl	80018e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001136:	f000 f83f 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113a:	f000 f95d 	bl	80013f8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800113e:	f000 f899 	bl	8001274 <MX_TIM1_Init>
  MX_TIM10_Init();
 8001142:	f000 f90b 	bl	800135c <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8001146:	f000 f92d 	bl	80013a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initUart(&huart2);
 800114a:	4817      	ldr	r0, [pc, #92]	; (80011a8 <main+0x7c>)
 800114c:	f000 fb44 	bl	80017d8 <initUart>
  HAL_TIM_Base_Start(&htim10);
 8001150:	4816      	ldr	r0, [pc, #88]	; (80011ac <main+0x80>)
 8001152:	f001 fc49 	bl	80029e8 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001156:	2100      	movs	r1, #0
 8001158:	4815      	ldr	r0, [pc, #84]	; (80011b0 <main+0x84>)
 800115a:	f001 fcf9 	bl	8002b50 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	uint16_t value = getDistance();
 800115e:	f7ff ffc1 	bl	80010e4 <getDistance>
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
  	     printf("%d\t%d\t%d\n",value,movingAvgFilter(value), (int)Kalman((double)value));
 8001166:	88fc      	ldrh	r4, [r7, #6]
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fe1c 	bl	8000da8 <movingAvgFilter>
 8001170:	4603      	mov	r3, r0
 8001172:	461d      	mov	r5, r3
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9c4 	bl	8000504 <__aeabi_ui2d>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	ec43 2b10 	vmov	d0, r2, r3
 8001184:	f7ff fe76 	bl	8000e74 <Kalman>
 8001188:	ec53 2b10 	vmov	r2, r3, d0
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fc44 	bl	8000a1c <__aeabi_d2iz>
 8001194:	4603      	mov	r3, r0
 8001196:	462a      	mov	r2, r5
 8001198:	4621      	mov	r1, r4
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <main+0x88>)
 800119c:	f003 fcb6 	bl	8004b0c <iprintf>
  	     HAL_Delay(50);
 80011a0:	2032      	movs	r0, #50	; 0x32
 80011a2:	f000 fc13 	bl	80019cc <HAL_Delay>
  {
 80011a6:	e7da      	b.n	800115e <main+0x32>
 80011a8:	20000210 	.word	0x20000210
 80011ac:	200001c8 	.word	0x200001c8
 80011b0:	20000180 	.word	0x20000180
 80011b4:	08005810 	.word	0x08005810

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b094      	sub	sp, #80	; 0x50
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	2230      	movs	r2, #48	; 0x30
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 fcf5 	bl	8004bb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <SystemClock_Config+0xb4>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a21      	ldr	r2, [pc, #132]	; (800126c <SystemClock_Config+0xb4>)
 80011e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <SystemClock_Config+0xb4>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <SystemClock_Config+0xb8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <SystemClock_Config+0xb8>)
 8001202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <SystemClock_Config+0xb8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001214:	2302      	movs	r3, #2
 8001216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121c:	2310      	movs	r3, #16
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	4618      	mov	r0, r3
 800122a:	f000 ff35 	bl	8002098 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001234:	f000 f914 	bl	8001460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001238:	230f      	movs	r3, #15
 800123a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f001 f998 	bl	8002588 <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800125e:	f000 f8ff 	bl	8001460 <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	3750      	adds	r7, #80	; 0x50
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0318 	add.w	r3, r7, #24
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001292:	463b      	mov	r3, r7
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <MX_TIM1_Init+0xe0>)
 80012a0:	4a2d      	ldr	r2, [pc, #180]	; (8001358 <MX_TIM1_Init+0xe4>)
 80012a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <MX_TIM1_Init+0xe0>)
 80012a6:	220f      	movs	r2, #15
 80012a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <MX_TIM1_Init+0xe0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <MX_TIM1_Init+0xe0>)
 80012b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_TIM1_Init+0xe0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <MX_TIM1_Init+0xe0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	4b23      	ldr	r3, [pc, #140]	; (8001354 <MX_TIM1_Init+0xe0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ca:	4822      	ldr	r0, [pc, #136]	; (8001354 <MX_TIM1_Init+0xe0>)
 80012cc:	f001 fb3c 	bl	8002948 <HAL_TIM_Base_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80012d6:	f000 f8c3 	bl	8001460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4619      	mov	r1, r3
 80012e6:	481b      	ldr	r0, [pc, #108]	; (8001354 <MX_TIM1_Init+0xe0>)
 80012e8:	f001 fed8 	bl	800309c <HAL_TIM_ConfigClockSource>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80012f2:	f000 f8b5 	bl	8001460 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80012f6:	4817      	ldr	r0, [pc, #92]	; (8001354 <MX_TIM1_Init+0xe0>)
 80012f8:	f001 fbd0 	bl	8002a9c <HAL_TIM_IC_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001302:	f000 f8ad 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4619      	mov	r1, r3
 8001314:	480f      	ldr	r0, [pc, #60]	; (8001354 <MX_TIM1_Init+0xe0>)
 8001316:	f002 fa5f 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001320:	f000 f89e 	bl	8001460 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001324:	2300      	movs	r3, #0
 8001326:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001328:	2301      	movs	r3, #1
 800132a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_TIM1_Init+0xe0>)
 800133c:	f001 fe12 	bl	8002f64 <HAL_TIM_IC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001346:	f000 f88b 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000180 	.word	0x20000180
 8001358:	40010000 	.word	0x40010000

0800135c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_TIM10_Init+0x40>)
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <MX_TIM10_Init+0x44>)
 8001364:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16-1;
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <MX_TIM10_Init+0x40>)
 8001368:	220f      	movs	r2, #15
 800136a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_TIM10_Init+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <MX_TIM10_Init+0x40>)
 8001374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001378:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_TIM10_Init+0x40>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_TIM10_Init+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM10_Init+0x40>)
 8001388:	f001 fade 	bl	8002948 <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001392:	f000 f865 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200001c8 	.word	0x200001c8
 80013a0:	40014400 	.word	0x40014400

080013a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <MX_USART2_UART_Init+0x50>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013dc:	f002 fa7e 	bl	80038dc <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013e6:	f000 f83b 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000210 	.word	0x20000210
 80013f4:	40004400 	.word	0x40004400

080013f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_GPIO_Init+0x60>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4a10      	ldr	r2, [pc, #64]	; (8001458 <MX_GPIO_Init+0x60>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6313      	str	r3, [r2, #48]	; 0x30
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_GPIO_Init+0x60>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <MX_GPIO_Init+0x64>)
 8001430:	f000 fe18 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : trigger_Pin */
  GPIO_InitStruct.Pin = trigger_Pin;
 8001434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001438:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(trigger_GPIO_Port, &GPIO_InitStruct);
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	4619      	mov	r1, r3
 800144a:	4804      	ldr	r0, [pc, #16]	; (800145c <MX_GPIO_Init+0x64>)
 800144c:	f000 fc86 	bl	8001d5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001450:	bf00      	nop
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	40020000 	.word	0x40020000

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	e7fe      	b.n	8001468 <Error_Handler+0x8>
	...

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_MspInit+0x4c>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_MspInit+0x4c>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a27      	ldr	r2, [pc, #156]	; (8001578 <HAL_TIM_Base_MspInit+0xbc>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d135      	bne.n	800154a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_TIM_Base_MspInit+0xc0>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a25      	ldr	r2, [pc, #148]	; (800157c <HAL_TIM_Base_MspInit+0xc0>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_TIM_Base_MspInit+0xc0>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_TIM_Base_MspInit+0xc0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a1e      	ldr	r2, [pc, #120]	; (800157c <HAL_TIM_Base_MspInit+0xc0>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_TIM_Base_MspInit+0xc0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = echo_Pin;
 8001516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001528:	2301      	movs	r3, #1
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(echo_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4813      	ldr	r0, [pc, #76]	; (8001580 <HAL_TIM_Base_MspInit+0xc4>)
 8001534:	f000 fc12 	bl	8001d5c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	201b      	movs	r0, #27
 800153e:	f000 fb44 	bl	8001bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001542:	201b      	movs	r0, #27
 8001544:	f000 fb5d 	bl	8001c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001548:	e012      	b.n	8001570 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM10)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_TIM_Base_MspInit+0xc8>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d10d      	bne.n	8001570 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_TIM_Base_MspInit+0xc0>)
 800155a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_TIM_Base_MspInit+0xc0>)
 800155e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001562:	6453      	str	r3, [r2, #68]	; 0x44
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_TIM_Base_MspInit+0xc0>)
 8001566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40010000 	.word	0x40010000
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000
 8001584:	40014400 	.word	0x40014400

08001588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1d      	ldr	r2, [pc, #116]	; (800161c <HAL_UART_MspInit+0x94>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d133      	bne.n	8001612 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <HAL_UART_MspInit+0x98>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a1b      	ldr	r2, [pc, #108]	; (8001620 <HAL_UART_MspInit+0x98>)
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_UART_MspInit+0x98>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_UART_MspInit+0x98>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a14      	ldr	r2, [pc, #80]	; (8001620 <HAL_UART_MspInit+0x98>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_UART_MspInit+0x98>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015e2:	230c      	movs	r3, #12
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f2:	2307      	movs	r3, #7
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <HAL_UART_MspInit+0x9c>)
 80015fe:	f000 fbad 	bl	8001d5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2026      	movs	r0, #38	; 0x26
 8001608:	f000 fadf 	bl	8001bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800160c:	2026      	movs	r0, #38	; 0x26
 800160e:	f000 faf8 	bl	8001c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40004400 	.word	0x40004400
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001674:	f000 f98a 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <TIM1_CC_IRQHandler+0x10>)
 8001682:	f001 fb7f 	bl	8002d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000180 	.word	0x20000180

08001690 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <USART2_IRQHandler+0x10>)
 8001696:	f002 fa21 	bl	8003adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000210 	.word	0x20000210

080016a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	e00a      	b.n	80016cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b6:	f3af 8000 	nop.w
 80016ba:	4601      	mov	r1, r0
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	60ba      	str	r2, [r7, #8]
 80016c2:	b2ca      	uxtb	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3301      	adds	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbf0      	blt.n	80016b6 <_read+0x12>
  }

  return len;
 80016d4:	687b      	ldr	r3, [r7, #4]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <_close>:
  }
  return len;
}

int _close(int file)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001706:	605a      	str	r2, [r3, #4]
  return 0;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <_isatty>:

int _isatty(int file)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f003 fa6c 	bl	8004c54 <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20020000 	.word	0x20020000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	2000026c 	.word	0x2000026c
 80017b0:	200004c8 	.word	0x200004c8

080017b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <SystemInit+0x20>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <SystemInit+0x20>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <initUart>:
int rxBufferPp; // put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// init device
void initUart(UART_HandleTypeDef *inHuart){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	myHuart = inHuart;
 80017e0:	4a06      	ldr	r2, [pc, #24]	; (80017fc <initUart+0x24>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <initUart+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2201      	movs	r2, #1
 80017ec:	4904      	ldr	r1, [pc, #16]	; (8001800 <initUart+0x28>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 f94f 	bl	8003a92 <HAL_UART_Receive_IT>
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000270 	.word	0x20000270
 8001800:	20000377 	.word	0x20000377

08001804 <HAL_UART_RxCpltCallback>:

// process received charactor
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++]=rxChar;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_UART_RxCpltCallback+0x50>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	4910      	ldr	r1, [pc, #64]	; (8001854 <HAL_UART_RxCpltCallback+0x50>)
 8001814:	600a      	str	r2, [r1, #0]
 8001816:	4a10      	ldr	r2, [pc, #64]	; (8001858 <HAL_UART_RxCpltCallback+0x54>)
 8001818:	7811      	ldrb	r1, [r2, #0]
 800181a:	4a10      	ldr	r2, [pc, #64]	; (800185c <HAL_UART_RxCpltCallback+0x58>)
 800181c:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_UART_RxCpltCallback+0x50>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_UART_RxCpltCallback+0x5c>)
 8001824:	fb83 1302 	smull	r1, r3, r3, r2
 8001828:	4413      	add	r3, r2
 800182a:	11d9      	asrs	r1, r3, #7
 800182c:	17d3      	asrs	r3, r2, #31
 800182e:	1ac9      	subs	r1, r1, r3
 8001830:	460b      	mov	r3, r1
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	1a5b      	subs	r3, r3, r1
 8001836:	1ad1      	subs	r1, r2, r3
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_UART_RxCpltCallback+0x50>)
 800183a:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_UART_RxCpltCallback+0x60>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2201      	movs	r2, #1
 8001842:	4905      	ldr	r1, [pc, #20]	; (8001858 <HAL_UART_RxCpltCallback+0x54>)
 8001844:	4618      	mov	r0, r3
 8001846:	f002 f924 	bl	8003a92 <HAL_UART_Receive_IT>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000274 	.word	0x20000274
 8001858:	20000377 	.word	0x20000377
 800185c:	20000278 	.word	0x20000278
 8001860:	80808081 	.word	0x80808081
 8001864:	20000270 	.word	0x20000270

08001868 <_write>:

}



int _write(int file, char *p, int len) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, p, len, 10);
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <_write+0x28>)
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	b29a      	uxth	r2, r3
 800187c:	230a      	movs	r3, #10
 800187e:	68b9      	ldr	r1, [r7, #8]
 8001880:	f002 f87c 	bl	800397c <HAL_UART_Transmit>
	return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000270 	.word	0x20000270

08001894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001898:	f7ff ff8c 	bl	80017b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189e:	490d      	ldr	r1, [pc, #52]	; (80018d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b4:	4c0a      	ldr	r4, [pc, #40]	; (80018e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018c2:	f003 f9cd 	bl	8004c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c6:	f7ff fc31 	bl	800112c <main>
  bx  lr    
 80018ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80018d8:	08005878 	.word	0x08005878
  ldr r2, =_sbss
 80018dc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80018e0:	200004c8 	.word	0x200004c8

080018e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC_IRQHandler>
	...

080018e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <HAL_Init+0x40>)
 80018f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <HAL_Init+0x40>)
 80018fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_Init+0x40>)
 800190a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001910:	2003      	movs	r0, #3
 8001912:	f000 f94f 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001916:	200f      	movs	r0, #15
 8001918:	f000 f808 	bl	800192c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191c:	f7ff fda6 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023c00 	.word	0x40023c00

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_InitTick+0x54>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_InitTick+0x58>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f967 	bl	8001c1e <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f000 f92f 	bl	8001bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	; (8001988 <HAL_InitTick+0x5c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000028 	.word	0x20000028
 8001984:	20000030 	.word	0x20000030
 8001988:	2000002c 	.word	0x2000002c

0800198c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_IncTick+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_IncTick+0x24>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <HAL_IncTick+0x24>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000030 	.word	0x20000030
 80019b0:	20000378 	.word	0x20000378

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000378 	.word	0x20000378

080019cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff ffee 	bl	80019b4 <HAL_GetTick>
 80019d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d005      	beq.n	80019f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_Delay+0x44>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019f2:	bf00      	nop
 80019f4:	f7ff ffde 	bl	80019b4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8f7      	bhi.n	80019f4 <HAL_Delay+0x28>
  {
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000030 	.word	0x20000030

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a46:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60d3      	str	r3, [r2, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <__NVIC_EnableIRQ+0x38>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	; (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	; (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
         );
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b80:	d301      	bcc.n	8001b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00f      	b.n	8001ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <SysTick_Config+0x40>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8e:	210f      	movs	r1, #15
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f7ff ff8e 	bl	8001ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <SysTick_Config+0x40>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SysTick_Config+0x40>)
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	e000e010 	.word	0xe000e010

08001bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff29 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bdc:	f7ff ff3e 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	6978      	ldr	r0, [r7, #20]
 8001be8:	f7ff ff8e 	bl	8001b08 <NVIC_EncodePriority>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff5d 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff31 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffa2 	bl	8001b70 <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff feb6 	bl	80019b4 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d008      	beq.n	8001c68 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e052      	b.n	8001d0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0216 	bic.w	r2, r2, #22
 8001c76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c86:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d103      	bne.n	8001c98 <HAL_DMA_Abort+0x62>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d007      	beq.n	8001ca8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0208 	bic.w	r2, r2, #8
 8001ca6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0201 	bic.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb8:	e013      	b.n	8001ce2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cba:	f7ff fe7b 	bl	80019b4 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d90c      	bls.n	8001ce2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e015      	b.n	8001d0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e4      	bne.n	8001cba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	223f      	movs	r2, #63	; 0x3f
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d004      	beq.n	8001d34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2280      	movs	r2, #128	; 0x80
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e00c      	b.n	8001d4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2205      	movs	r2, #5
 8001d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	e159      	b.n	800202c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	f040 8148 	bne.w	8002026 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d005      	beq.n	8001dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d130      	bne.n	8001e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 0201 	and.w	r2, r3, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d017      	beq.n	8001e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d123      	bne.n	8001ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	69b9      	ldr	r1, [r7, #24]
 8001e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a2 	beq.w	8002026 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b57      	ldr	r3, [pc, #348]	; (8002044 <HAL_GPIO_Init+0x2e8>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a56      	ldr	r2, [pc, #344]	; (8002044 <HAL_GPIO_Init+0x2e8>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b54      	ldr	r3, [pc, #336]	; (8002044 <HAL_GPIO_Init+0x2e8>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001efe:	4a52      	ldr	r2, [pc, #328]	; (8002048 <HAL_GPIO_Init+0x2ec>)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	3302      	adds	r3, #2
 8001f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a49      	ldr	r2, [pc, #292]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d019      	beq.n	8001f5e <HAL_GPIO_Init+0x202>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a48      	ldr	r2, [pc, #288]	; (8002050 <HAL_GPIO_Init+0x2f4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_GPIO_Init+0x1fe>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a47      	ldr	r2, [pc, #284]	; (8002054 <HAL_GPIO_Init+0x2f8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00d      	beq.n	8001f56 <HAL_GPIO_Init+0x1fa>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a46      	ldr	r2, [pc, #280]	; (8002058 <HAL_GPIO_Init+0x2fc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d007      	beq.n	8001f52 <HAL_GPIO_Init+0x1f6>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a45      	ldr	r2, [pc, #276]	; (800205c <HAL_GPIO_Init+0x300>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_GPIO_Init+0x1f2>
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	e008      	b.n	8001f60 <HAL_GPIO_Init+0x204>
 8001f4e:	2307      	movs	r3, #7
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x204>
 8001f52:	2303      	movs	r3, #3
 8001f54:	e004      	b.n	8001f60 <HAL_GPIO_Init+0x204>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_Init+0x204>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_GPIO_Init+0x204>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	f002 0203 	and.w	r2, r2, #3
 8001f66:	0092      	lsls	r2, r2, #2
 8001f68:	4093      	lsls	r3, r2
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f70:	4935      	ldr	r1, [pc, #212]	; (8002048 <HAL_GPIO_Init+0x2ec>)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fa2:	4a2f      	ldr	r2, [pc, #188]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fcc:	4a24      	ldr	r2, [pc, #144]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fd2:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ff6:	4a1a      	ldr	r2, [pc, #104]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002020:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <HAL_GPIO_Init+0x304>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3301      	adds	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	2b0f      	cmp	r3, #15
 8002030:	f67f aea2 	bls.w	8001d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	40013800 	.word	0x40013800
 800204c:	40020000 	.word	0x40020000
 8002050:	40020400 	.word	0x40020400
 8002054:	40020800 	.word	0x40020800
 8002058:	40020c00 	.word	0x40020c00
 800205c:	40021000 	.word	0x40021000
 8002060:	40013c00 	.word	0x40013c00

08002064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002074:	787b      	ldrb	r3, [r7, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002080:	e003      	b.n	800208a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	041a      	lsls	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	619a      	str	r2, [r3, #24]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e267      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d075      	beq.n	80021a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020b6:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d00c      	beq.n	80020dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c2:	4b85      	ldr	r3, [pc, #532]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d112      	bne.n	80020f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ce:	4b82      	ldr	r3, [pc, #520]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020da:	d10b      	bne.n	80020f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	4b7e      	ldr	r3, [pc, #504]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d05b      	beq.n	80021a0 <HAL_RCC_OscConfig+0x108>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d157      	bne.n	80021a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e242      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fc:	d106      	bne.n	800210c <HAL_RCC_OscConfig+0x74>
 80020fe:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a75      	ldr	r2, [pc, #468]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e01d      	b.n	8002148 <HAL_RCC_OscConfig+0xb0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x98>
 8002116:	4b70      	ldr	r3, [pc, #448]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6f      	ldr	r2, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 800211c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b6d      	ldr	r3, [pc, #436]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a6c      	ldr	r2, [pc, #432]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0xb0>
 8002130:	4b69      	ldr	r3, [pc, #420]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a68      	ldr	r2, [pc, #416]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b66      	ldr	r3, [pc, #408]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a65      	ldr	r2, [pc, #404]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff fc30 	bl	80019b4 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002158:	f7ff fc2c 	bl	80019b4 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e207      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	4b5b      	ldr	r3, [pc, #364]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0xc0>
 8002176:	e014      	b.n	80021a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7ff fc1c 	bl	80019b4 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002180:	f7ff fc18 	bl	80019b4 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	; 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e1f3      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002192:	4b51      	ldr	r3, [pc, #324]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0xe8>
 800219e:	e000      	b.n	80021a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d063      	beq.n	8002276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ae:	4b4a      	ldr	r3, [pc, #296]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d11c      	bne.n	8002200 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021c6:	4b44      	ldr	r3, [pc, #272]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d116      	bne.n	8002200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_RCC_OscConfig+0x152>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d001      	beq.n	80021ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e1c7      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ea:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4937      	ldr	r1, [pc, #220]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	e03a      	b.n	8002276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d020      	beq.n	800224a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002208:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_RCC_OscConfig+0x244>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7ff fbd1 	bl	80019b4 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002216:	f7ff fbcd 	bl	80019b4 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e1a8      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4925      	ldr	r1, [pc, #148]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]
 8002248:	e015      	b.n	8002276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_RCC_OscConfig+0x244>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7ff fbb0 	bl	80019b4 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002258:	f7ff fbac 	bl	80019b4 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e187      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d036      	beq.n	80022f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d016      	beq.n	80022b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_RCC_OscConfig+0x248>)
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7ff fb90 	bl	80019b4 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002298:	f7ff fb8c 	bl	80019b4 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e167      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80022ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x200>
 80022b6:	e01b      	b.n	80022f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_OscConfig+0x248>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7ff fb79 	bl	80019b4 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	e00e      	b.n	80022e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c6:	f7ff fb75 	bl	80019b4 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d907      	bls.n	80022e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e150      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
 80022d8:	40023800 	.word	0x40023800
 80022dc:	42470000 	.word	0x42470000
 80022e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e4:	4b88      	ldr	r3, [pc, #544]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80022e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1ea      	bne.n	80022c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8097 	beq.w	800242c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002302:	4b81      	ldr	r3, [pc, #516]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	4b7d      	ldr	r3, [pc, #500]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	4a7c      	ldr	r2, [pc, #496]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231c:	6413      	str	r3, [r2, #64]	; 0x40
 800231e:	4b7a      	ldr	r3, [pc, #488]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232a:	2301      	movs	r3, #1
 800232c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232e:	4b77      	ldr	r3, [pc, #476]	; (800250c <HAL_RCC_OscConfig+0x474>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d118      	bne.n	800236c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233a:	4b74      	ldr	r3, [pc, #464]	; (800250c <HAL_RCC_OscConfig+0x474>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a73      	ldr	r2, [pc, #460]	; (800250c <HAL_RCC_OscConfig+0x474>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002346:	f7ff fb35 	bl	80019b4 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7ff fb31 	bl	80019b4 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e10c      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b6a      	ldr	r3, [pc, #424]	; (800250c <HAL_RCC_OscConfig+0x474>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x2ea>
 8002374:	4b64      	ldr	r3, [pc, #400]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002378:	4a63      	ldr	r2, [pc, #396]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6713      	str	r3, [r2, #112]	; 0x70
 8002380:	e01c      	b.n	80023bc <HAL_RCC_OscConfig+0x324>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x30c>
 800238a:	4b5f      	ldr	r3, [pc, #380]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238e:	4a5e      	ldr	r2, [pc, #376]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	6713      	str	r3, [r2, #112]	; 0x70
 8002396:	4b5c      	ldr	r3, [pc, #368]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	4a5b      	ldr	r2, [pc, #364]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6713      	str	r3, [r2, #112]	; 0x70
 80023a2:	e00b      	b.n	80023bc <HAL_RCC_OscConfig+0x324>
 80023a4:	4b58      	ldr	r3, [pc, #352]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	4a57      	ldr	r2, [pc, #348]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	6713      	str	r3, [r2, #112]	; 0x70
 80023b0:	4b55      	ldr	r3, [pc, #340]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	4a54      	ldr	r2, [pc, #336]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80023b6:	f023 0304 	bic.w	r3, r3, #4
 80023ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d015      	beq.n	80023f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c4:	f7ff faf6 	bl	80019b4 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7ff faf2 	bl	80019b4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0cb      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	4b49      	ldr	r3, [pc, #292]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0ee      	beq.n	80023cc <HAL_RCC_OscConfig+0x334>
 80023ee:	e014      	b.n	800241a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f0:	f7ff fae0 	bl	80019b4 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7ff fadc 	bl	80019b4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0b5      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240e:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1ee      	bne.n	80023f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800241a:	7dfb      	ldrb	r3, [r7, #23]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002420:	4b39      	ldr	r3, [pc, #228]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	4a38      	ldr	r2, [pc, #224]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80a1 	beq.w	8002578 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002436:	4b34      	ldr	r3, [pc, #208]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b08      	cmp	r3, #8
 8002440:	d05c      	beq.n	80024fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d141      	bne.n	80024ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244a:	4b31      	ldr	r3, [pc, #196]	; (8002510 <HAL_RCC_OscConfig+0x478>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7ff fab0 	bl	80019b4 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff faac 	bl	80019b4 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e087      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	4b27      	ldr	r3, [pc, #156]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	019b      	lsls	r3, r3, #6
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	085b      	lsrs	r3, r3, #1
 800248e:	3b01      	subs	r3, #1
 8002490:	041b      	lsls	r3, r3, #16
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	061b      	lsls	r3, r3, #24
 800249a:	491b      	ldr	r1, [pc, #108]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_RCC_OscConfig+0x478>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7ff fa85 	bl	80019b4 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ae:	f7ff fa81 	bl	80019b4 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e05c      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x416>
 80024cc:	e054      	b.n	8002578 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_RCC_OscConfig+0x478>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7ff fa6e 	bl	80019b4 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024dc:	f7ff fa6a 	bl	80019b4 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e045      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x444>
 80024fa:	e03d      	b.n	8002578 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d107      	bne.n	8002514 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e038      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
 8002508:	40023800 	.word	0x40023800
 800250c:	40007000 	.word	0x40007000
 8002510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x4ec>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d028      	beq.n	8002574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d121      	bne.n	8002574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d11a      	bne.n	8002574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002544:	4013      	ands	r3, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800254a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800254c:	4293      	cmp	r3, r2
 800254e:	d111      	bne.n	8002574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	085b      	lsrs	r3, r3, #1
 800255c:	3b01      	subs	r3, #1
 800255e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d107      	bne.n	8002574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800

08002588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0cc      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800259c:	4b68      	ldr	r3, [pc, #416]	; (8002740 <HAL_RCC_ClockConfig+0x1b8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d90c      	bls.n	80025c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b65      	ldr	r3, [pc, #404]	; (8002740 <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	4b63      	ldr	r3, [pc, #396]	; (8002740 <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0b8      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d020      	beq.n	8002612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025dc:	4b59      	ldr	r3, [pc, #356]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	4a58      	ldr	r2, [pc, #352]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f4:	4b53      	ldr	r3, [pc, #332]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a52      	ldr	r2, [pc, #328]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002600:	4b50      	ldr	r3, [pc, #320]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	494d      	ldr	r1, [pc, #308]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d044      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	4b47      	ldr	r3, [pc, #284]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d119      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e07f      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d003      	beq.n	8002646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002642:	2b03      	cmp	r3, #3
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002646:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e06f      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002656:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e067      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002666:	4b37      	ldr	r3, [pc, #220]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f023 0203 	bic.w	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4934      	ldr	r1, [pc, #208]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	4313      	orrs	r3, r2
 8002676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002678:	f7ff f99c 	bl	80019b4 <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	e00a      	b.n	8002696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7ff f998 	bl	80019b4 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	; 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e04f      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 020c 	and.w	r2, r3, #12
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d1eb      	bne.n	8002680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a8:	4b25      	ldr	r3, [pc, #148]	; (8002740 <HAL_RCC_ClockConfig+0x1b8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d20c      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_RCC_ClockConfig+0x1b8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e032      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4916      	ldr	r1, [pc, #88]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	490e      	ldr	r1, [pc, #56]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800270e:	f000 f821 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8002712:	4602      	mov	r2, r0
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	490a      	ldr	r1, [pc, #40]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	5ccb      	ldrb	r3, [r1, r3]
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	4a09      	ldr	r2, [pc, #36]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff f8fc 	bl	800192c <HAL_InitTick>

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023c00 	.word	0x40023c00
 8002744:	40023800 	.word	0x40023800
 8002748:	0800581c 	.word	0x0800581c
 800274c:	20000028 	.word	0x20000028
 8002750:	2000002c 	.word	0x2000002c

08002754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002758:	b090      	sub	sp, #64	; 0x40
 800275a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	637b      	str	r3, [r7, #52]	; 0x34
 8002760:	2300      	movs	r3, #0
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002764:	2300      	movs	r3, #0
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b08      	cmp	r3, #8
 8002776:	d00d      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0x40>
 8002778:	2b08      	cmp	r3, #8
 800277a:	f200 80a1 	bhi.w	80028c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x34>
 8002782:	2b04      	cmp	r3, #4
 8002784:	d003      	beq.n	800278e <HAL_RCC_GetSysClockFreq+0x3a>
 8002786:	e09b      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002788:	4b53      	ldr	r3, [pc, #332]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800278a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800278c:	e09b      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800278e:	4b53      	ldr	r3, [pc, #332]	; (80028dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002790:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002792:	e098      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002794:	4b4f      	ldr	r3, [pc, #316]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800279c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800279e:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d028      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027aa:	4b4a      	ldr	r3, [pc, #296]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	099b      	lsrs	r3, r3, #6
 80027b0:	2200      	movs	r2, #0
 80027b2:	623b      	str	r3, [r7, #32]
 80027b4:	627a      	str	r2, [r7, #36]	; 0x24
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027bc:	2100      	movs	r1, #0
 80027be:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HAL_RCC_GetSysClockFreq+0x188>)
 80027c0:	fb03 f201 	mul.w	r2, r3, r1
 80027c4:	2300      	movs	r3, #0
 80027c6:	fb00 f303 	mul.w	r3, r0, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	4a43      	ldr	r2, [pc, #268]	; (80028dc <HAL_RCC_GetSysClockFreq+0x188>)
 80027ce:	fba0 1202 	umull	r1, r2, r0, r2
 80027d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027d4:	460a      	mov	r2, r1
 80027d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80027d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027da:	4413      	add	r3, r2
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e0:	2200      	movs	r2, #0
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	61fa      	str	r2, [r7, #28]
 80027e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027ee:	f7fe f95d 	bl	8000aac <__aeabi_uldivmod>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4613      	mov	r3, r2
 80027f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027fa:	e053      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fc:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	2200      	movs	r2, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	617a      	str	r2, [r7, #20]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800280e:	f04f 0b00 	mov.w	fp, #0
 8002812:	4652      	mov	r2, sl
 8002814:	465b      	mov	r3, fp
 8002816:	f04f 0000 	mov.w	r0, #0
 800281a:	f04f 0100 	mov.w	r1, #0
 800281e:	0159      	lsls	r1, r3, #5
 8002820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002824:	0150      	lsls	r0, r2, #5
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	ebb2 080a 	subs.w	r8, r2, sl
 800282e:	eb63 090b 	sbc.w	r9, r3, fp
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800283e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002842:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002846:	ebb2 0408 	subs.w	r4, r2, r8
 800284a:	eb63 0509 	sbc.w	r5, r3, r9
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	00eb      	lsls	r3, r5, #3
 8002858:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800285c:	00e2      	lsls	r2, r4, #3
 800285e:	4614      	mov	r4, r2
 8002860:	461d      	mov	r5, r3
 8002862:	eb14 030a 	adds.w	r3, r4, sl
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	eb45 030b 	adc.w	r3, r5, fp
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800287a:	4629      	mov	r1, r5
 800287c:	028b      	lsls	r3, r1, #10
 800287e:	4621      	mov	r1, r4
 8002880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002884:	4621      	mov	r1, r4
 8002886:	028a      	lsls	r2, r1, #10
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288e:	2200      	movs	r2, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	60fa      	str	r2, [r7, #12]
 8002894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002898:	f7fe f908 	bl	8000aac <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4613      	mov	r3, r2
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	3301      	adds	r3, #1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028be:	e002      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80028c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3740      	adds	r7, #64	; 0x40
 80028cc:	46bd      	mov	sp, r7
 80028ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	00f42400 	.word	0x00f42400
 80028dc:	017d7840 	.word	0x017d7840

080028e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000028 	.word	0x20000028

080028f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028fc:	f7ff fff0 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	0a9b      	lsrs	r3, r3, #10
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	; (800291c <HAL_RCC_GetPCLK1Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	0800582c 	.word	0x0800582c

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002924:	f7ff ffdc 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	0b5b      	lsrs	r3, r3, #13
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4903      	ldr	r1, [pc, #12]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800
 8002944:	0800582c 	.word	0x0800582c

08002948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e041      	b.n	80029de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe fda4 	bl	80014bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3304      	adds	r3, #4
 8002984:	4619      	mov	r1, r3
 8002986:	4610      	mov	r0, r2
 8002988:	f000 fcbc 	bl	8003304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d001      	beq.n	8002a00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e03c      	b.n	8002a7a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <HAL_TIM_Base_Start+0xa0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d018      	beq.n	8002a44 <HAL_TIM_Base_Start+0x5c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d013      	beq.n	8002a44 <HAL_TIM_Base_Start+0x5c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1a      	ldr	r2, [pc, #104]	; (8002a8c <HAL_TIM_Base_Start+0xa4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00e      	beq.n	8002a44 <HAL_TIM_Base_Start+0x5c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <HAL_TIM_Base_Start+0xa8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d009      	beq.n	8002a44 <HAL_TIM_Base_Start+0x5c>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a17      	ldr	r2, [pc, #92]	; (8002a94 <HAL_TIM_Base_Start+0xac>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_TIM_Base_Start+0x5c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a16      	ldr	r2, [pc, #88]	; (8002a98 <HAL_TIM_Base_Start+0xb0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d111      	bne.n	8002a68 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d010      	beq.n	8002a78 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a66:	e007      	b.n	8002a78 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40000800 	.word	0x40000800
 8002a94:	40000c00 	.word	0x40000c00
 8002a98:	40014000 	.word	0x40014000

08002a9c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e041      	b.n	8002b32 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f839 	bl	8002b3a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f000 fc12 	bl	8003304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d104      	bne.n	8002b6e <HAL_TIM_IC_Start_IT+0x1e>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	e013      	b.n	8002b96 <HAL_TIM_IC_Start_IT+0x46>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d104      	bne.n	8002b7e <HAL_TIM_IC_Start_IT+0x2e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	e00b      	b.n	8002b96 <HAL_TIM_IC_Start_IT+0x46>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d104      	bne.n	8002b8e <HAL_TIM_IC_Start_IT+0x3e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	e003      	b.n	8002b96 <HAL_TIM_IC_Start_IT+0x46>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d104      	bne.n	8002ba8 <HAL_TIM_IC_Start_IT+0x58>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e013      	b.n	8002bd0 <HAL_TIM_IC_Start_IT+0x80>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d104      	bne.n	8002bb8 <HAL_TIM_IC_Start_IT+0x68>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e00b      	b.n	8002bd0 <HAL_TIM_IC_Start_IT+0x80>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d104      	bne.n	8002bc8 <HAL_TIM_IC_Start_IT+0x78>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e003      	b.n	8002bd0 <HAL_TIM_IC_Start_IT+0x80>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bd2:	7bbb      	ldrb	r3, [r7, #14]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d102      	bne.n	8002bde <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bd8:	7b7b      	ldrb	r3, [r7, #13]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d001      	beq.n	8002be2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e0c2      	b.n	8002d68 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <HAL_TIM_IC_Start_IT+0xa2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf0:	e013      	b.n	8002c1a <HAL_TIM_IC_Start_IT+0xca>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_IC_Start_IT+0xb2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c00:	e00b      	b.n	8002c1a <HAL_TIM_IC_Start_IT+0xca>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d104      	bne.n	8002c12 <HAL_TIM_IC_Start_IT+0xc2>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c10:	e003      	b.n	8002c1a <HAL_TIM_IC_Start_IT+0xca>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <HAL_TIM_IC_Start_IT+0xda>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c28:	e013      	b.n	8002c52 <HAL_TIM_IC_Start_IT+0x102>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d104      	bne.n	8002c3a <HAL_TIM_IC_Start_IT+0xea>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c38:	e00b      	b.n	8002c52 <HAL_TIM_IC_Start_IT+0x102>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d104      	bne.n	8002c4a <HAL_TIM_IC_Start_IT+0xfa>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c48:	e003      	b.n	8002c52 <HAL_TIM_IC_Start_IT+0x102>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b0c      	cmp	r3, #12
 8002c56:	d841      	bhi.n	8002cdc <HAL_TIM_IC_Start_IT+0x18c>
 8002c58:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <HAL_TIM_IC_Start_IT+0x110>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002c95 	.word	0x08002c95
 8002c64:	08002cdd 	.word	0x08002cdd
 8002c68:	08002cdd 	.word	0x08002cdd
 8002c6c:	08002cdd 	.word	0x08002cdd
 8002c70:	08002ca7 	.word	0x08002ca7
 8002c74:	08002cdd 	.word	0x08002cdd
 8002c78:	08002cdd 	.word	0x08002cdd
 8002c7c:	08002cdd 	.word	0x08002cdd
 8002c80:	08002cb9 	.word	0x08002cb9
 8002c84:	08002cdd 	.word	0x08002cdd
 8002c88:	08002cdd 	.word	0x08002cdd
 8002c8c:	08002cdd 	.word	0x08002cdd
 8002c90:	08002ccb 	.word	0x08002ccb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0202 	orr.w	r2, r2, #2
 8002ca2:	60da      	str	r2, [r3, #12]
      break;
 8002ca4:	e01d      	b.n	8002ce2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 0204 	orr.w	r2, r2, #4
 8002cb4:	60da      	str	r2, [r3, #12]
      break;
 8002cb6:	e014      	b.n	8002ce2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0208 	orr.w	r2, r2, #8
 8002cc6:	60da      	str	r2, [r3, #12]
      break;
 8002cc8:	e00b      	b.n	8002ce2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0210 	orr.w	r2, r2, #16
 8002cd8:	60da      	str	r2, [r3, #12]
      break;
 8002cda:	e002      	b.n	8002ce2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d13e      	bne.n	8002d66 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2201      	movs	r2, #1
 8002cee:	6839      	ldr	r1, [r7, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fd4b 	bl	800378c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <HAL_TIM_IC_Start_IT+0x220>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d018      	beq.n	8002d32 <HAL_TIM_IC_Start_IT+0x1e2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d08:	d013      	beq.n	8002d32 <HAL_TIM_IC_Start_IT+0x1e2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <HAL_TIM_IC_Start_IT+0x224>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00e      	beq.n	8002d32 <HAL_TIM_IC_Start_IT+0x1e2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <HAL_TIM_IC_Start_IT+0x228>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d009      	beq.n	8002d32 <HAL_TIM_IC_Start_IT+0x1e2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <HAL_TIM_IC_Start_IT+0x22c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d004      	beq.n	8002d32 <HAL_TIM_IC_Start_IT+0x1e2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <HAL_TIM_IC_Start_IT+0x230>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d111      	bne.n	8002d56 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b06      	cmp	r3, #6
 8002d42:	d010      	beq.n	8002d66 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d54:	e007      	b.n	8002d66 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40010000 	.word	0x40010000
 8002d74:	40000400 	.word	0x40000400
 8002d78:	40000800 	.word	0x40000800
 8002d7c:	40000c00 	.word	0x40000c00
 8002d80:	40014000 	.word	0x40014000

08002d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d020      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01b      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0202 	mvn.w	r2, #2
 8002db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe f8ea 	bl	8000fa8 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa76 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fa7d 	bl	80032dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d020      	beq.n	8002e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01b      	beq.n	8002e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0204 	mvn.w	r2, #4
 8002e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe f8c4 	bl	8000fa8 <HAL_TIM_IC_CaptureCallback>
 8002e20:	e005      	b.n	8002e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fa50 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fa57 	bl	80032dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d020      	beq.n	8002e80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01b      	beq.n	8002e80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0208 	mvn.w	r2, #8
 8002e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2204      	movs	r2, #4
 8002e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe f89e 	bl	8000fa8 <HAL_TIM_IC_CaptureCallback>
 8002e6c:	e005      	b.n	8002e7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fa2a 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fa31 	bl	80032dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d020      	beq.n	8002ecc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01b      	beq.n	8002ecc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0210 	mvn.w	r2, #16
 8002e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe f878 	bl	8000fa8 <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fa04 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fa0b 	bl	80032dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0201 	mvn.w	r2, #1
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f9e2 	bl	80032b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fcda 	bl	80038c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00c      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f9dc 	bl	80032f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00c      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0220 	mvn.w	r2, #32
 8002f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fcac 	bl	80038b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e088      	b.n	8003094 <HAL_TIM_IC_ConfigChannel+0x130>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002fa0:	f000 fa3c 	bl	800341c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 020c 	bic.w	r2, r2, #12
 8002fb2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6999      	ldr	r1, [r3, #24]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	619a      	str	r2, [r3, #24]
 8002fc6:	e060      	b.n	800308a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d11c      	bne.n	8003008 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002fde:	f000 fab4 	bl	800354a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ff0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6999      	ldr	r1, [r3, #24]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	021a      	lsls	r2, r3, #8
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	619a      	str	r2, [r3, #24]
 8003006:	e040      	b.n	800308a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b08      	cmp	r3, #8
 800300c:	d11b      	bne.n	8003046 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800301e:	f000 fb01 	bl	8003624 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 020c 	bic.w	r2, r2, #12
 8003030:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69d9      	ldr	r1, [r3, #28]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	61da      	str	r2, [r3, #28]
 8003044:	e021      	b.n	800308a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b0c      	cmp	r3, #12
 800304a:	d11c      	bne.n	8003086 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800305c:	f000 fb1e 	bl	800369c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800306e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69d9      	ldr	r1, [r3, #28]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	021a      	lsls	r2, r3, #8
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	61da      	str	r2, [r3, #28]
 8003084:	e001      	b.n	800308a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003092:	7dfb      	ldrb	r3, [r7, #23]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_TIM_ConfigClockSource+0x1c>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e0b4      	b.n	8003222 <HAL_TIM_ConfigClockSource+0x186>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f0:	d03e      	beq.n	8003170 <HAL_TIM_ConfigClockSource+0xd4>
 80030f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f6:	f200 8087 	bhi.w	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 80030fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fe:	f000 8086 	beq.w	800320e <HAL_TIM_ConfigClockSource+0x172>
 8003102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003106:	d87f      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003108:	2b70      	cmp	r3, #112	; 0x70
 800310a:	d01a      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0xa6>
 800310c:	2b70      	cmp	r3, #112	; 0x70
 800310e:	d87b      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003110:	2b60      	cmp	r3, #96	; 0x60
 8003112:	d050      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003114:	2b60      	cmp	r3, #96	; 0x60
 8003116:	d877      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003118:	2b50      	cmp	r3, #80	; 0x50
 800311a:	d03c      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0xfa>
 800311c:	2b50      	cmp	r3, #80	; 0x50
 800311e:	d873      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d058      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d86f      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b30      	cmp	r3, #48	; 0x30
 800312a:	d064      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x15a>
 800312c:	2b30      	cmp	r3, #48	; 0x30
 800312e:	d86b      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b20      	cmp	r3, #32
 8003132:	d060      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003134:	2b20      	cmp	r3, #32
 8003136:	d867      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d05c      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x15a>
 800313c:	2b10      	cmp	r3, #16
 800313e:	d05a      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003140:	e062      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003152:	f000 fafb 	bl	800374c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	609a      	str	r2, [r3, #8]
      break;
 800316e:	e04f      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003180:	f000 fae4 	bl	800374c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003192:	609a      	str	r2, [r3, #8]
      break;
 8003194:	e03c      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a2:	461a      	mov	r2, r3
 80031a4:	f000 f9a2 	bl	80034ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2150      	movs	r1, #80	; 0x50
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fab1 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 80031b4:	e02c      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031c2:	461a      	mov	r2, r3
 80031c4:	f000 f9fe 	bl	80035c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2160      	movs	r1, #96	; 0x60
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 faa1 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 80031d4:	e01c      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e2:	461a      	mov	r2, r3
 80031e4:	f000 f982 	bl	80034ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2140      	movs	r1, #64	; 0x40
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fa91 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 80031f4:	e00c      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f000 fa88 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 8003206:	e003      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
      break;
 800320c:	e000      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800320e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003220:	7bfb      	ldrb	r3, [r7, #15]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b0c      	cmp	r3, #12
 800323e:	d831      	bhi.n	80032a4 <HAL_TIM_ReadCapturedValue+0x78>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	0800327d 	.word	0x0800327d
 800324c:	080032a5 	.word	0x080032a5
 8003250:	080032a5 	.word	0x080032a5
 8003254:	080032a5 	.word	0x080032a5
 8003258:	08003287 	.word	0x08003287
 800325c:	080032a5 	.word	0x080032a5
 8003260:	080032a5 	.word	0x080032a5
 8003264:	080032a5 	.word	0x080032a5
 8003268:	08003291 	.word	0x08003291
 800326c:	080032a5 	.word	0x080032a5
 8003270:	080032a5 	.word	0x080032a5
 8003274:	080032a5 	.word	0x080032a5
 8003278:	0800329b 	.word	0x0800329b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003282:	60fb      	str	r3, [r7, #12]

      break;
 8003284:	e00f      	b.n	80032a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	60fb      	str	r3, [r7, #12]

      break;
 800328e:	e00a      	b.n	80032a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	60fb      	str	r3, [r7, #12]

      break;
 8003298:	e005      	b.n	80032a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	60fb      	str	r3, [r7, #12]

      break;
 80032a2:	e000      	b.n	80032a6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80032a4:	bf00      	nop
  }

  return tmpreg;
 80032a6:	68fb      	ldr	r3, [r7, #12]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a3a      	ldr	r2, [pc, #232]	; (8003400 <TIM_Base_SetConfig+0xfc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d00f      	beq.n	800333c <TIM_Base_SetConfig+0x38>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003322:	d00b      	beq.n	800333c <TIM_Base_SetConfig+0x38>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a37      	ldr	r2, [pc, #220]	; (8003404 <TIM_Base_SetConfig+0x100>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d007      	beq.n	800333c <TIM_Base_SetConfig+0x38>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a36      	ldr	r2, [pc, #216]	; (8003408 <TIM_Base_SetConfig+0x104>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d003      	beq.n	800333c <TIM_Base_SetConfig+0x38>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a35      	ldr	r2, [pc, #212]	; (800340c <TIM_Base_SetConfig+0x108>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d108      	bne.n	800334e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a2b      	ldr	r2, [pc, #172]	; (8003400 <TIM_Base_SetConfig+0xfc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d01b      	beq.n	800338e <TIM_Base_SetConfig+0x8a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335c:	d017      	beq.n	800338e <TIM_Base_SetConfig+0x8a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a28      	ldr	r2, [pc, #160]	; (8003404 <TIM_Base_SetConfig+0x100>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <TIM_Base_SetConfig+0x8a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a27      	ldr	r2, [pc, #156]	; (8003408 <TIM_Base_SetConfig+0x104>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00f      	beq.n	800338e <TIM_Base_SetConfig+0x8a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a26      	ldr	r2, [pc, #152]	; (800340c <TIM_Base_SetConfig+0x108>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00b      	beq.n	800338e <TIM_Base_SetConfig+0x8a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a25      	ldr	r2, [pc, #148]	; (8003410 <TIM_Base_SetConfig+0x10c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <TIM_Base_SetConfig+0x8a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a24      	ldr	r2, [pc, #144]	; (8003414 <TIM_Base_SetConfig+0x110>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d003      	beq.n	800338e <TIM_Base_SetConfig+0x8a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a23      	ldr	r2, [pc, #140]	; (8003418 <TIM_Base_SetConfig+0x114>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d108      	bne.n	80033a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <TIM_Base_SetConfig+0xfc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d103      	bne.n	80033d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d105      	bne.n	80033f2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f023 0201 	bic.w	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	611a      	str	r2, [r3, #16]
  }
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40010000 	.word	0x40010000
 8003404:	40000400 	.word	0x40000400
 8003408:	40000800 	.word	0x40000800
 800340c:	40000c00 	.word	0x40000c00
 8003410:	40014000 	.word	0x40014000
 8003414:	40014400 	.word	0x40014400
 8003418:	40014800 	.word	0x40014800

0800341c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f023 0201 	bic.w	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a24      	ldr	r2, [pc, #144]	; (80034d8 <TIM_TI1_SetConfig+0xbc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <TIM_TI1_SetConfig+0x56>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003450:	d00f      	beq.n	8003472 <TIM_TI1_SetConfig+0x56>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a21      	ldr	r2, [pc, #132]	; (80034dc <TIM_TI1_SetConfig+0xc0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00b      	beq.n	8003472 <TIM_TI1_SetConfig+0x56>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a20      	ldr	r2, [pc, #128]	; (80034e0 <TIM_TI1_SetConfig+0xc4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d007      	beq.n	8003472 <TIM_TI1_SetConfig+0x56>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <TIM_TI1_SetConfig+0xc8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <TIM_TI1_SetConfig+0x56>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <TIM_TI1_SetConfig+0xcc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <TIM_TI1_SetConfig+0x5a>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <TIM_TI1_SetConfig+0x5c>
 8003476:	2300      	movs	r3, #0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f023 0303 	bic.w	r3, r3, #3
 8003482:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e003      	b.n	8003496 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800349c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f023 030a 	bic.w	r3, r3, #10
 80034b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f003 030a 	and.w	r3, r3, #10
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	621a      	str	r2, [r3, #32]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40010000 	.word	0x40010000
 80034dc:	40000400 	.word	0x40000400
 80034e0:	40000800 	.word	0x40000800
 80034e4:	40000c00 	.word	0x40000c00
 80034e8:	40014000 	.word	0x40014000

080034ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f023 0201 	bic.w	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f023 030a 	bic.w	r3, r3, #10
 8003528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800354a:	b480      	push	{r7}
 800354c:	b087      	sub	sp, #28
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f023 0210 	bic.w	r2, r3, #16
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003588:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	031b      	lsls	r3, r3, #12
 800358e:	b29b      	uxth	r3, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800359c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	621a      	str	r2, [r3, #32]
}
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f023 0210 	bic.w	r2, r3, #16
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	031b      	lsls	r3, r3, #12
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003600:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	621a      	str	r2, [r3, #32]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f023 0303 	bic.w	r3, r3, #3
 8003650:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003660:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	b2db      	uxtb	r3, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003674:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	621a      	str	r2, [r3, #32]
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	021b      	lsls	r3, r3, #8
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	031b      	lsls	r3, r3, #12
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80036ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	031b      	lsls	r3, r3, #12
 80036f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	f043 0307 	orr.w	r3, r3, #7
 8003738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	021a      	lsls	r2, r3, #8
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	431a      	orrs	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	609a      	str	r2, [r3, #8]
}
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2201      	movs	r2, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e050      	b.n	8003892 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d018      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383c:	d013      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a16      	ldr	r2, [pc, #88]	; (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a15      	ldr	r2, [pc, #84]	; (80038ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d10c      	bne.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800386c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	4313      	orrs	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40000400 	.word	0x40000400
 80038a8:	40000800 	.word	0x40000800
 80038ac:	40000c00 	.word	0x40000c00
 80038b0:	40014000 	.word	0x40014000

080038b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e042      	b.n	8003974 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fe40 	bl	8001588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	; 0x24
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800391e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fdbd 	bl	80044a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b20      	cmp	r3, #32
 800399a:	d175      	bne.n	8003a88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_UART_Transmit+0x2c>
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e06e      	b.n	8003a8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2221      	movs	r2, #33	; 0x21
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ba:	f7fd fffb 	bl	80019b4 <HAL_GetTick>
 80039be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	88fa      	ldrh	r2, [r7, #6]
 80039c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	88fa      	ldrh	r2, [r7, #6]
 80039ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d4:	d108      	bne.n	80039e8 <HAL_UART_Transmit+0x6c>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d104      	bne.n	80039e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	e003      	b.n	80039f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039f0:	e02e      	b.n	8003a50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	2180      	movs	r1, #128	; 0x80
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fb1f 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e03a      	b.n	8003a8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10b      	bne.n	8003a32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	e007      	b.n	8003a42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	781a      	ldrb	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1cb      	bne.n	80039f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2140      	movs	r1, #64	; 0x40
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 faeb 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e006      	b.n	8003a8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e000      	b.n	8003a8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d112      	bne.n	8003ad2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_UART_Receive_IT+0x26>
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e00b      	b.n	8003ad4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fb12 	bl	80040f2 <UART_Start_Receive_IT>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	e000      	b.n	8003ad4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b0ba      	sub	sp, #232	; 0xe8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_UART_IRQHandler+0x66>
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fbf2 	bl	8004324 <UART_Receive_IT>
      return;
 8003b40:	e25b      	b.n	8003ffa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80de 	beq.w	8003d08 <HAL_UART_IRQHandler+0x22c>
 8003b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80d1 	beq.w	8003d08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HAL_UART_IRQHandler+0xae>
 8003b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f043 0201 	orr.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_UART_IRQHandler+0xd2>
 8003b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f043 0202 	orr.w	r2, r3, #2
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xf6>
 8003bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	f043 0204 	orr.w	r2, r3, #4
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d011      	beq.n	8003c02 <HAL_UART_IRQHandler+0x126>
 8003bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d105      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	f043 0208 	orr.w	r2, r3, #8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 81f2 	beq.w	8003ff0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_UART_IRQHandler+0x14e>
 8003c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fb7d 	bl	8004324 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <HAL_UART_IRQHandler+0x17a>
 8003c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d04f      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa85 	bl	8004166 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d141      	bne.n	8003cee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3314      	adds	r3, #20
 8003c70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3314      	adds	r3, #20
 8003c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1d9      	bne.n	8003c6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d013      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc2:	4a7e      	ldr	r2, [pc, #504]	; (8003ebc <HAL_UART_IRQHandler+0x3e0>)
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe f823 	bl	8001d16 <HAL_DMA_Abort_IT>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d016      	beq.n	8003d04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce4:	e00e      	b.n	8003d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f994 	bl	8004014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	e00a      	b.n	8003d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f990 	bl	8004014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	e006      	b.n	8003d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f98c 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003d02:	e175      	b.n	8003ff0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	bf00      	nop
    return;
 8003d06:	e173      	b.n	8003ff0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f040 814f 	bne.w	8003fb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 8148 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8141 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	f040 80b6 	bne.w	8003ec0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8145 	beq.w	8003ff4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d72:	429a      	cmp	r2, r3
 8003d74:	f080 813e 	bcs.w	8003ff4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8a:	f000 8088 	beq.w	8003e9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	330c      	adds	r3, #12
 8003db6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003dba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1d9      	bne.n	8003d8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3314      	adds	r3, #20
 8003dfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e1      	bne.n	8003dda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3314      	adds	r3, #20
 8003e36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e3      	bne.n	8003e16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6e:	f023 0310 	bic.w	r3, r3, #16
 8003e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e80:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e3      	bne.n	8003e5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fd fecc 	bl	8001c36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f8b7 	bl	8004028 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eba:	e09b      	b.n	8003ff4 <HAL_UART_IRQHandler+0x518>
 8003ebc:	0800422d 	.word	0x0800422d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 808e 	beq.w	8003ff8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 8089 	beq.w	8003ff8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003efc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	330c      	adds	r3, #12
 8003f06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f0a:	647a      	str	r2, [r7, #68]	; 0x44
 8003f0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e3      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3314      	adds	r3, #20
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f42:	633a      	str	r2, [r7, #48]	; 0x30
 8003f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e3      	bne.n	8003f1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0310 	bic.w	r3, r3, #16
 8003f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f88:	61fa      	str	r2, [r7, #28]
 8003f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	69b9      	ldr	r1, [r7, #24]
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	617b      	str	r3, [r7, #20]
   return(result);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e3      	bne.n	8003f64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f83d 	bl	8004028 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fae:	e023      	b.n	8003ff8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <HAL_UART_IRQHandler+0x4f4>
 8003fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f943 	bl	8004254 <UART_Transmit_IT>
    return;
 8003fce:	e014      	b.n	8003ffa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00e      	beq.n	8003ffa <HAL_UART_IRQHandler+0x51e>
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f983 	bl	80042f4 <UART_EndTransmit_IT>
    return;
 8003fee:	e004      	b.n	8003ffa <HAL_UART_IRQHandler+0x51e>
    return;
 8003ff0:	bf00      	nop
 8003ff2:	e002      	b.n	8003ffa <HAL_UART_IRQHandler+0x51e>
      return;
 8003ff4:	bf00      	nop
 8003ff6:	e000      	b.n	8003ffa <HAL_UART_IRQHandler+0x51e>
      return;
 8003ff8:	bf00      	nop
  }
}
 8003ffa:	37e8      	adds	r7, #232	; 0xe8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004050:	e03b      	b.n	80040ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d037      	beq.n	80040ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405a:	f7fd fcab 	bl	80019b4 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	6a3a      	ldr	r2, [r7, #32]
 8004066:	429a      	cmp	r2, r3
 8004068:	d302      	bcc.n	8004070 <UART_WaitOnFlagUntilTimeout+0x30>
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e03a      	b.n	80040ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	d023      	beq.n	80040ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b80      	cmp	r3, #128	; 0x80
 8004086:	d020      	beq.n	80040ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d01d      	beq.n	80040ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b08      	cmp	r3, #8
 800409a:	d116      	bne.n	80040ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f857 	bl	8004166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2208      	movs	r2, #8
 80040bc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e00f      	b.n	80040ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4013      	ands	r3, r2
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	bf0c      	ite	eq
 80040da:	2301      	moveq	r3, #1
 80040dc:	2300      	movne	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d0b4      	beq.n	8004052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	4613      	mov	r3, r2
 80040fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	88fa      	ldrh	r2, [r7, #6]
 8004110:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2222      	movs	r2, #34	; 0x22
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004136:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0220 	orr.w	r2, r2, #32
 8004156:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004166:	b480      	push	{r7}
 8004168:	b095      	sub	sp, #84	; 0x54
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004184:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	330c      	adds	r3, #12
 800418c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800418e:	643a      	str	r2, [r7, #64]	; 0x40
 8004190:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004194:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e5      	bne.n	800416e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3314      	adds	r3, #20
 80041a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3314      	adds	r3, #20
 80041c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e5      	bne.n	80041a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d119      	bne.n	8004212 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f023 0310 	bic.w	r3, r3, #16
 80041f4:	647b      	str	r3, [r7, #68]	; 0x44
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041fe:	61ba      	str	r2, [r7, #24]
 8004200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6979      	ldr	r1, [r7, #20]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	613b      	str	r3, [r7, #16]
   return(result);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e5      	bne.n	80041de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004220:	bf00      	nop
 8004222:	3754      	adds	r7, #84	; 0x54
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7ff fee4 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800424c:	bf00      	nop
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b21      	cmp	r3, #33	; 0x21
 8004266:	d13e      	bne.n	80042e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004270:	d114      	bne.n	800429c <UART_Transmit_IT+0x48>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d110      	bne.n	800429c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800428e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	1c9a      	adds	r2, r3, #2
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	621a      	str	r2, [r3, #32]
 800429a:	e008      	b.n	80042ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	1c59      	adds	r1, r3, #1
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6211      	str	r1, [r2, #32]
 80042a6:	781a      	ldrb	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	4619      	mov	r1, r3
 80042bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10f      	bne.n	80042e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e000      	b.n	80042e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
  }
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff fe73 	bl	8004000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08c      	sub	sp, #48	; 0x30
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b22      	cmp	r3, #34	; 0x22
 8004336:	f040 80ae 	bne.w	8004496 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	d117      	bne.n	8004374 <UART_Receive_IT+0x50>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d113      	bne.n	8004374 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800434c:	2300      	movs	r3, #0
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004362:	b29a      	uxth	r2, r3
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	1c9a      	adds	r2, r3, #2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	629a      	str	r2, [r3, #40]	; 0x28
 8004372:	e026      	b.n	80043c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004386:	d007      	beq.n	8004398 <UART_Receive_IT+0x74>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <UART_Receive_IT+0x82>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	e008      	b.n	80043b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4619      	mov	r1, r3
 80043d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d15d      	bne.n	8004492 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0220 	bic.w	r2, r2, #32
 80043e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695a      	ldr	r2, [r3, #20]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	2b01      	cmp	r3, #1
 800441a:	d135      	bne.n	8004488 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	330c      	adds	r3, #12
 8004428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	613b      	str	r3, [r7, #16]
   return(result);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f023 0310 	bic.w	r3, r3, #16
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004442:	623a      	str	r2, [r7, #32]
 8004444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	69f9      	ldr	r1, [r7, #28]
 8004448:	6a3a      	ldr	r2, [r7, #32]
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e5      	bne.n	8004422 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b10      	cmp	r3, #16
 8004462:	d10a      	bne.n	800447a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800447e:	4619      	mov	r1, r3
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fdd1 	bl	8004028 <HAL_UARTEx_RxEventCallback>
 8004486:	e002      	b.n	800448e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fd f9bb 	bl	8001804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e002      	b.n	8004498 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3730      	adds	r7, #48	; 0x30
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a4:	b0c0      	sub	sp, #256	; 0x100
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044bc:	68d9      	ldr	r1, [r3, #12]
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	ea40 0301 	orr.w	r3, r0, r1
 80044c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	431a      	orrs	r2, r3
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044f8:	f021 010c 	bic.w	r1, r1, #12
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004506:	430b      	orrs	r3, r1
 8004508:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451a:	6999      	ldr	r1, [r3, #24]
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	ea40 0301 	orr.w	r3, r0, r1
 8004526:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b8f      	ldr	r3, [pc, #572]	; (800476c <UART_SetConfig+0x2cc>)
 8004530:	429a      	cmp	r2, r3
 8004532:	d005      	beq.n	8004540 <UART_SetConfig+0xa0>
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4b8d      	ldr	r3, [pc, #564]	; (8004770 <UART_SetConfig+0x2d0>)
 800453c:	429a      	cmp	r2, r3
 800453e:	d104      	bne.n	800454a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004540:	f7fe f9ee 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 8004544:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004548:	e003      	b.n	8004552 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800454a:	f7fe f9d5 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 800454e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455c:	f040 810c 	bne.w	8004778 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004564:	2200      	movs	r2, #0
 8004566:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800456a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800456e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004572:	4622      	mov	r2, r4
 8004574:	462b      	mov	r3, r5
 8004576:	1891      	adds	r1, r2, r2
 8004578:	65b9      	str	r1, [r7, #88]	; 0x58
 800457a:	415b      	adcs	r3, r3
 800457c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800457e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004582:	4621      	mov	r1, r4
 8004584:	eb12 0801 	adds.w	r8, r2, r1
 8004588:	4629      	mov	r1, r5
 800458a:	eb43 0901 	adc.w	r9, r3, r1
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800459a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800459e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045a2:	4690      	mov	r8, r2
 80045a4:	4699      	mov	r9, r3
 80045a6:	4623      	mov	r3, r4
 80045a8:	eb18 0303 	adds.w	r3, r8, r3
 80045ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045b0:	462b      	mov	r3, r5
 80045b2:	eb49 0303 	adc.w	r3, r9, r3
 80045b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045ce:	460b      	mov	r3, r1
 80045d0:	18db      	adds	r3, r3, r3
 80045d2:	653b      	str	r3, [r7, #80]	; 0x50
 80045d4:	4613      	mov	r3, r2
 80045d6:	eb42 0303 	adc.w	r3, r2, r3
 80045da:	657b      	str	r3, [r7, #84]	; 0x54
 80045dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045e4:	f7fc fa62 	bl	8000aac <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4b61      	ldr	r3, [pc, #388]	; (8004774 <UART_SetConfig+0x2d4>)
 80045ee:	fba3 2302 	umull	r2, r3, r3, r2
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	011c      	lsls	r4, r3, #4
 80045f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004600:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004604:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004608:	4642      	mov	r2, r8
 800460a:	464b      	mov	r3, r9
 800460c:	1891      	adds	r1, r2, r2
 800460e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004610:	415b      	adcs	r3, r3
 8004612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004614:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004618:	4641      	mov	r1, r8
 800461a:	eb12 0a01 	adds.w	sl, r2, r1
 800461e:	4649      	mov	r1, r9
 8004620:	eb43 0b01 	adc.w	fp, r3, r1
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004630:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004638:	4692      	mov	sl, r2
 800463a:	469b      	mov	fp, r3
 800463c:	4643      	mov	r3, r8
 800463e:	eb1a 0303 	adds.w	r3, sl, r3
 8004642:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004646:	464b      	mov	r3, r9
 8004648:	eb4b 0303 	adc.w	r3, fp, r3
 800464c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800465c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004660:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004664:	460b      	mov	r3, r1
 8004666:	18db      	adds	r3, r3, r3
 8004668:	643b      	str	r3, [r7, #64]	; 0x40
 800466a:	4613      	mov	r3, r2
 800466c:	eb42 0303 	adc.w	r3, r2, r3
 8004670:	647b      	str	r3, [r7, #68]	; 0x44
 8004672:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004676:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800467a:	f7fc fa17 	bl	8000aac <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4611      	mov	r1, r2
 8004684:	4b3b      	ldr	r3, [pc, #236]	; (8004774 <UART_SetConfig+0x2d4>)
 8004686:	fba3 2301 	umull	r2, r3, r3, r1
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2264      	movs	r2, #100	; 0x64
 800468e:	fb02 f303 	mul.w	r3, r2, r3
 8004692:	1acb      	subs	r3, r1, r3
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800469a:	4b36      	ldr	r3, [pc, #216]	; (8004774 <UART_SetConfig+0x2d4>)
 800469c:	fba3 2302 	umull	r2, r3, r3, r2
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046a8:	441c      	add	r4, r3
 80046aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046bc:	4642      	mov	r2, r8
 80046be:	464b      	mov	r3, r9
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80046c4:	415b      	adcs	r3, r3
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046cc:	4641      	mov	r1, r8
 80046ce:	1851      	adds	r1, r2, r1
 80046d0:	6339      	str	r1, [r7, #48]	; 0x30
 80046d2:	4649      	mov	r1, r9
 80046d4:	414b      	adcs	r3, r1
 80046d6:	637b      	str	r3, [r7, #52]	; 0x34
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046e4:	4659      	mov	r1, fp
 80046e6:	00cb      	lsls	r3, r1, #3
 80046e8:	4651      	mov	r1, sl
 80046ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ee:	4651      	mov	r1, sl
 80046f0:	00ca      	lsls	r2, r1, #3
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	4642      	mov	r2, r8
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004700:	464b      	mov	r3, r9
 8004702:	460a      	mov	r2, r1
 8004704:	eb42 0303 	adc.w	r3, r2, r3
 8004708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004718:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800471c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004720:	460b      	mov	r3, r1
 8004722:	18db      	adds	r3, r3, r3
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
 8004726:	4613      	mov	r3, r2
 8004728:	eb42 0303 	adc.w	r3, r2, r3
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800472e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004732:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004736:	f7fc f9b9 	bl	8000aac <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <UART_SetConfig+0x2d4>)
 8004740:	fba3 1302 	umull	r1, r3, r3, r2
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	2164      	movs	r1, #100	; 0x64
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	3332      	adds	r3, #50	; 0x32
 8004752:	4a08      	ldr	r2, [pc, #32]	; (8004774 <UART_SetConfig+0x2d4>)
 8004754:	fba2 2303 	umull	r2, r3, r2, r3
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	f003 0207 	and.w	r2, r3, #7
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4422      	add	r2, r4
 8004766:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004768:	e106      	b.n	8004978 <UART_SetConfig+0x4d8>
 800476a:	bf00      	nop
 800476c:	40011000 	.word	0x40011000
 8004770:	40011400 	.word	0x40011400
 8004774:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800477c:	2200      	movs	r2, #0
 800477e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004782:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004786:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800478a:	4642      	mov	r2, r8
 800478c:	464b      	mov	r3, r9
 800478e:	1891      	adds	r1, r2, r2
 8004790:	6239      	str	r1, [r7, #32]
 8004792:	415b      	adcs	r3, r3
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800479a:	4641      	mov	r1, r8
 800479c:	1854      	adds	r4, r2, r1
 800479e:	4649      	mov	r1, r9
 80047a0:	eb43 0501 	adc.w	r5, r3, r1
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	00eb      	lsls	r3, r5, #3
 80047ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b2:	00e2      	lsls	r2, r4, #3
 80047b4:	4614      	mov	r4, r2
 80047b6:	461d      	mov	r5, r3
 80047b8:	4643      	mov	r3, r8
 80047ba:	18e3      	adds	r3, r4, r3
 80047bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047c0:	464b      	mov	r3, r9
 80047c2:	eb45 0303 	adc.w	r3, r5, r3
 80047c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047e6:	4629      	mov	r1, r5
 80047e8:	008b      	lsls	r3, r1, #2
 80047ea:	4621      	mov	r1, r4
 80047ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f0:	4621      	mov	r1, r4
 80047f2:	008a      	lsls	r2, r1, #2
 80047f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047f8:	f7fc f958 	bl	8000aac <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4b60      	ldr	r3, [pc, #384]	; (8004984 <UART_SetConfig+0x4e4>)
 8004802:	fba3 2302 	umull	r2, r3, r3, r2
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	011c      	lsls	r4, r3, #4
 800480a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004814:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004818:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	1891      	adds	r1, r2, r2
 8004822:	61b9      	str	r1, [r7, #24]
 8004824:	415b      	adcs	r3, r3
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800482c:	4641      	mov	r1, r8
 800482e:	1851      	adds	r1, r2, r1
 8004830:	6139      	str	r1, [r7, #16]
 8004832:	4649      	mov	r1, r9
 8004834:	414b      	adcs	r3, r1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004844:	4659      	mov	r1, fp
 8004846:	00cb      	lsls	r3, r1, #3
 8004848:	4651      	mov	r1, sl
 800484a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484e:	4651      	mov	r1, sl
 8004850:	00ca      	lsls	r2, r1, #3
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	4603      	mov	r3, r0
 8004858:	4642      	mov	r2, r8
 800485a:	189b      	adds	r3, r3, r2
 800485c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004860:	464b      	mov	r3, r9
 8004862:	460a      	mov	r2, r1
 8004864:	eb42 0303 	adc.w	r3, r2, r3
 8004868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	67bb      	str	r3, [r7, #120]	; 0x78
 8004876:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004884:	4649      	mov	r1, r9
 8004886:	008b      	lsls	r3, r1, #2
 8004888:	4641      	mov	r1, r8
 800488a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800488e:	4641      	mov	r1, r8
 8004890:	008a      	lsls	r2, r1, #2
 8004892:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004896:	f7fc f909 	bl	8000aac <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4611      	mov	r1, r2
 80048a0:	4b38      	ldr	r3, [pc, #224]	; (8004984 <UART_SetConfig+0x4e4>)
 80048a2:	fba3 2301 	umull	r2, r3, r3, r1
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2264      	movs	r2, #100	; 0x64
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	1acb      	subs	r3, r1, r3
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	3332      	adds	r3, #50	; 0x32
 80048b4:	4a33      	ldr	r2, [pc, #204]	; (8004984 <UART_SetConfig+0x4e4>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c0:	441c      	add	r4, r3
 80048c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c6:	2200      	movs	r2, #0
 80048c8:	673b      	str	r3, [r7, #112]	; 0x70
 80048ca:	677a      	str	r2, [r7, #116]	; 0x74
 80048cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048d0:	4642      	mov	r2, r8
 80048d2:	464b      	mov	r3, r9
 80048d4:	1891      	adds	r1, r2, r2
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	415b      	adcs	r3, r3
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048e0:	4641      	mov	r1, r8
 80048e2:	1851      	adds	r1, r2, r1
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	4649      	mov	r1, r9
 80048e8:	414b      	adcs	r3, r1
 80048ea:	607b      	str	r3, [r7, #4]
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048f8:	4659      	mov	r1, fp
 80048fa:	00cb      	lsls	r3, r1, #3
 80048fc:	4651      	mov	r1, sl
 80048fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004902:	4651      	mov	r1, sl
 8004904:	00ca      	lsls	r2, r1, #3
 8004906:	4610      	mov	r0, r2
 8004908:	4619      	mov	r1, r3
 800490a:	4603      	mov	r3, r0
 800490c:	4642      	mov	r2, r8
 800490e:	189b      	adds	r3, r3, r2
 8004910:	66bb      	str	r3, [r7, #104]	; 0x68
 8004912:	464b      	mov	r3, r9
 8004914:	460a      	mov	r2, r1
 8004916:	eb42 0303 	adc.w	r3, r2, r3
 800491a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	663b      	str	r3, [r7, #96]	; 0x60
 8004926:	667a      	str	r2, [r7, #100]	; 0x64
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004934:	4649      	mov	r1, r9
 8004936:	008b      	lsls	r3, r1, #2
 8004938:	4641      	mov	r1, r8
 800493a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800493e:	4641      	mov	r1, r8
 8004940:	008a      	lsls	r2, r1, #2
 8004942:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004946:	f7fc f8b1 	bl	8000aac <__aeabi_uldivmod>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <UART_SetConfig+0x4e4>)
 8004950:	fba3 1302 	umull	r1, r3, r3, r2
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	2164      	movs	r1, #100	; 0x64
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	3332      	adds	r3, #50	; 0x32
 8004962:	4a08      	ldr	r2, [pc, #32]	; (8004984 <UART_SetConfig+0x4e4>)
 8004964:	fba2 2303 	umull	r2, r3, r2, r3
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	f003 020f 	and.w	r2, r3, #15
 800496e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4422      	add	r2, r4
 8004976:	609a      	str	r2, [r3, #8]
}
 8004978:	bf00      	nop
 800497a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800497e:	46bd      	mov	sp, r7
 8004980:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004984:	51eb851f 	.word	0x51eb851f

08004988 <std>:
 8004988:	2300      	movs	r3, #0
 800498a:	b510      	push	{r4, lr}
 800498c:	4604      	mov	r4, r0
 800498e:	e9c0 3300 	strd	r3, r3, [r0]
 8004992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004996:	6083      	str	r3, [r0, #8]
 8004998:	8181      	strh	r1, [r0, #12]
 800499a:	6643      	str	r3, [r0, #100]	; 0x64
 800499c:	81c2      	strh	r2, [r0, #14]
 800499e:	6183      	str	r3, [r0, #24]
 80049a0:	4619      	mov	r1, r3
 80049a2:	2208      	movs	r2, #8
 80049a4:	305c      	adds	r0, #92	; 0x5c
 80049a6:	f000 f906 	bl	8004bb6 <memset>
 80049aa:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <std+0x58>)
 80049ac:	6263      	str	r3, [r4, #36]	; 0x24
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <std+0x5c>)
 80049b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80049b2:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <std+0x60>)
 80049b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <std+0x64>)
 80049b8:	6323      	str	r3, [r4, #48]	; 0x30
 80049ba:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <std+0x68>)
 80049bc:	6224      	str	r4, [r4, #32]
 80049be:	429c      	cmp	r4, r3
 80049c0:	d006      	beq.n	80049d0 <std+0x48>
 80049c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80049c6:	4294      	cmp	r4, r2
 80049c8:	d002      	beq.n	80049d0 <std+0x48>
 80049ca:	33d0      	adds	r3, #208	; 0xd0
 80049cc:	429c      	cmp	r4, r3
 80049ce:	d105      	bne.n	80049dc <std+0x54>
 80049d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d8:	f000 b966 	b.w	8004ca8 <__retarget_lock_init_recursive>
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	bf00      	nop
 80049e0:	08004b31 	.word	0x08004b31
 80049e4:	08004b53 	.word	0x08004b53
 80049e8:	08004b8b 	.word	0x08004b8b
 80049ec:	08004baf 	.word	0x08004baf
 80049f0:	2000037c 	.word	0x2000037c

080049f4 <stdio_exit_handler>:
 80049f4:	4a02      	ldr	r2, [pc, #8]	; (8004a00 <stdio_exit_handler+0xc>)
 80049f6:	4903      	ldr	r1, [pc, #12]	; (8004a04 <stdio_exit_handler+0x10>)
 80049f8:	4803      	ldr	r0, [pc, #12]	; (8004a08 <stdio_exit_handler+0x14>)
 80049fa:	f000 b869 	b.w	8004ad0 <_fwalk_sglue>
 80049fe:	bf00      	nop
 8004a00:	20000034 	.word	0x20000034
 8004a04:	08005555 	.word	0x08005555
 8004a08:	20000040 	.word	0x20000040

08004a0c <cleanup_stdio>:
 8004a0c:	6841      	ldr	r1, [r0, #4]
 8004a0e:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <cleanup_stdio+0x34>)
 8004a10:	4299      	cmp	r1, r3
 8004a12:	b510      	push	{r4, lr}
 8004a14:	4604      	mov	r4, r0
 8004a16:	d001      	beq.n	8004a1c <cleanup_stdio+0x10>
 8004a18:	f000 fd9c 	bl	8005554 <_fflush_r>
 8004a1c:	68a1      	ldr	r1, [r4, #8]
 8004a1e:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <cleanup_stdio+0x38>)
 8004a20:	4299      	cmp	r1, r3
 8004a22:	d002      	beq.n	8004a2a <cleanup_stdio+0x1e>
 8004a24:	4620      	mov	r0, r4
 8004a26:	f000 fd95 	bl	8005554 <_fflush_r>
 8004a2a:	68e1      	ldr	r1, [r4, #12]
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <cleanup_stdio+0x3c>)
 8004a2e:	4299      	cmp	r1, r3
 8004a30:	d004      	beq.n	8004a3c <cleanup_stdio+0x30>
 8004a32:	4620      	mov	r0, r4
 8004a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a38:	f000 bd8c 	b.w	8005554 <_fflush_r>
 8004a3c:	bd10      	pop	{r4, pc}
 8004a3e:	bf00      	nop
 8004a40:	2000037c 	.word	0x2000037c
 8004a44:	200003e4 	.word	0x200003e4
 8004a48:	2000044c 	.word	0x2000044c

08004a4c <global_stdio_init.part.0>:
 8004a4c:	b510      	push	{r4, lr}
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <global_stdio_init.part.0+0x30>)
 8004a50:	4c0b      	ldr	r4, [pc, #44]	; (8004a80 <global_stdio_init.part.0+0x34>)
 8004a52:	4a0c      	ldr	r2, [pc, #48]	; (8004a84 <global_stdio_init.part.0+0x38>)
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	4620      	mov	r0, r4
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2104      	movs	r1, #4
 8004a5c:	f7ff ff94 	bl	8004988 <std>
 8004a60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a64:	2201      	movs	r2, #1
 8004a66:	2109      	movs	r1, #9
 8004a68:	f7ff ff8e 	bl	8004988 <std>
 8004a6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a70:	2202      	movs	r2, #2
 8004a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a76:	2112      	movs	r1, #18
 8004a78:	f7ff bf86 	b.w	8004988 <std>
 8004a7c:	200004b4 	.word	0x200004b4
 8004a80:	2000037c 	.word	0x2000037c
 8004a84:	080049f5 	.word	0x080049f5

08004a88 <__sfp_lock_acquire>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__sfp_lock_acquire+0x8>)
 8004a8a:	f000 b90e 	b.w	8004caa <__retarget_lock_acquire_recursive>
 8004a8e:	bf00      	nop
 8004a90:	200004bd 	.word	0x200004bd

08004a94 <__sfp_lock_release>:
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <__sfp_lock_release+0x8>)
 8004a96:	f000 b909 	b.w	8004cac <__retarget_lock_release_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	200004bd 	.word	0x200004bd

08004aa0 <__sinit>:
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	f7ff fff0 	bl	8004a88 <__sfp_lock_acquire>
 8004aa8:	6a23      	ldr	r3, [r4, #32]
 8004aaa:	b11b      	cbz	r3, 8004ab4 <__sinit+0x14>
 8004aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ab0:	f7ff bff0 	b.w	8004a94 <__sfp_lock_release>
 8004ab4:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <__sinit+0x28>)
 8004ab6:	6223      	str	r3, [r4, #32]
 8004ab8:	4b04      	ldr	r3, [pc, #16]	; (8004acc <__sinit+0x2c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f5      	bne.n	8004aac <__sinit+0xc>
 8004ac0:	f7ff ffc4 	bl	8004a4c <global_stdio_init.part.0>
 8004ac4:	e7f2      	b.n	8004aac <__sinit+0xc>
 8004ac6:	bf00      	nop
 8004ac8:	08004a0d 	.word	0x08004a0d
 8004acc:	200004b4 	.word	0x200004b4

08004ad0 <_fwalk_sglue>:
 8004ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad4:	4607      	mov	r7, r0
 8004ad6:	4688      	mov	r8, r1
 8004ad8:	4614      	mov	r4, r2
 8004ada:	2600      	movs	r6, #0
 8004adc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ae0:	f1b9 0901 	subs.w	r9, r9, #1
 8004ae4:	d505      	bpl.n	8004af2 <_fwalk_sglue+0x22>
 8004ae6:	6824      	ldr	r4, [r4, #0]
 8004ae8:	2c00      	cmp	r4, #0
 8004aea:	d1f7      	bne.n	8004adc <_fwalk_sglue+0xc>
 8004aec:	4630      	mov	r0, r6
 8004aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004af2:	89ab      	ldrh	r3, [r5, #12]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d907      	bls.n	8004b08 <_fwalk_sglue+0x38>
 8004af8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004afc:	3301      	adds	r3, #1
 8004afe:	d003      	beq.n	8004b08 <_fwalk_sglue+0x38>
 8004b00:	4629      	mov	r1, r5
 8004b02:	4638      	mov	r0, r7
 8004b04:	47c0      	blx	r8
 8004b06:	4306      	orrs	r6, r0
 8004b08:	3568      	adds	r5, #104	; 0x68
 8004b0a:	e7e9      	b.n	8004ae0 <_fwalk_sglue+0x10>

08004b0c <iprintf>:
 8004b0c:	b40f      	push	{r0, r1, r2, r3}
 8004b0e:	b507      	push	{r0, r1, r2, lr}
 8004b10:	4906      	ldr	r1, [pc, #24]	; (8004b2c <iprintf+0x20>)
 8004b12:	ab04      	add	r3, sp, #16
 8004b14:	6808      	ldr	r0, [r1, #0]
 8004b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b1a:	6881      	ldr	r1, [r0, #8]
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	f000 f9e9 	bl	8004ef4 <_vfiprintf_r>
 8004b22:	b003      	add	sp, #12
 8004b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b28:	b004      	add	sp, #16
 8004b2a:	4770      	bx	lr
 8004b2c:	2000008c 	.word	0x2000008c

08004b30 <__sread>:
 8004b30:	b510      	push	{r4, lr}
 8004b32:	460c      	mov	r4, r1
 8004b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b38:	f000 f868 	bl	8004c0c <_read_r>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	bfab      	itete	ge
 8004b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b42:	89a3      	ldrhlt	r3, [r4, #12]
 8004b44:	181b      	addge	r3, r3, r0
 8004b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b4a:	bfac      	ite	ge
 8004b4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b4e:	81a3      	strhlt	r3, [r4, #12]
 8004b50:	bd10      	pop	{r4, pc}

08004b52 <__swrite>:
 8004b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b56:	461f      	mov	r7, r3
 8004b58:	898b      	ldrh	r3, [r1, #12]
 8004b5a:	05db      	lsls	r3, r3, #23
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	460c      	mov	r4, r1
 8004b60:	4616      	mov	r6, r2
 8004b62:	d505      	bpl.n	8004b70 <__swrite+0x1e>
 8004b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b68:	2302      	movs	r3, #2
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f000 f83c 	bl	8004be8 <_lseek_r>
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b7a:	81a3      	strh	r3, [r4, #12]
 8004b7c:	4632      	mov	r2, r6
 8004b7e:	463b      	mov	r3, r7
 8004b80:	4628      	mov	r0, r5
 8004b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b86:	f000 b853 	b.w	8004c30 <_write_r>

08004b8a <__sseek>:
 8004b8a:	b510      	push	{r4, lr}
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b92:	f000 f829 	bl	8004be8 <_lseek_r>
 8004b96:	1c43      	adds	r3, r0, #1
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	bf15      	itete	ne
 8004b9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ba6:	81a3      	strheq	r3, [r4, #12]
 8004ba8:	bf18      	it	ne
 8004baa:	81a3      	strhne	r3, [r4, #12]
 8004bac:	bd10      	pop	{r4, pc}

08004bae <__sclose>:
 8004bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb2:	f000 b809 	b.w	8004bc8 <_close_r>

08004bb6 <memset>:
 8004bb6:	4402      	add	r2, r0
 8004bb8:	4603      	mov	r3, r0
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d100      	bne.n	8004bc0 <memset+0xa>
 8004bbe:	4770      	bx	lr
 8004bc0:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc4:	e7f9      	b.n	8004bba <memset+0x4>
	...

08004bc8 <_close_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4d06      	ldr	r5, [pc, #24]	; (8004be4 <_close_r+0x1c>)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4604      	mov	r4, r0
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	602b      	str	r3, [r5, #0]
 8004bd4:	f7fc fd83 	bl	80016de <_close>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_close_r+0x1a>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_close_r+0x1a>
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	200004b8 	.word	0x200004b8

08004be8 <_lseek_r>:
 8004be8:	b538      	push	{r3, r4, r5, lr}
 8004bea:	4d07      	ldr	r5, [pc, #28]	; (8004c08 <_lseek_r+0x20>)
 8004bec:	4604      	mov	r4, r0
 8004bee:	4608      	mov	r0, r1
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	602a      	str	r2, [r5, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f7fc fd98 	bl	800172c <_lseek>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	d102      	bne.n	8004c06 <_lseek_r+0x1e>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	b103      	cbz	r3, 8004c06 <_lseek_r+0x1e>
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	bd38      	pop	{r3, r4, r5, pc}
 8004c08:	200004b8 	.word	0x200004b8

08004c0c <_read_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4d07      	ldr	r5, [pc, #28]	; (8004c2c <_read_r+0x20>)
 8004c10:	4604      	mov	r4, r0
 8004c12:	4608      	mov	r0, r1
 8004c14:	4611      	mov	r1, r2
 8004c16:	2200      	movs	r2, #0
 8004c18:	602a      	str	r2, [r5, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f7fc fd42 	bl	80016a4 <_read>
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	d102      	bne.n	8004c2a <_read_r+0x1e>
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	b103      	cbz	r3, 8004c2a <_read_r+0x1e>
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
 8004c2c:	200004b8 	.word	0x200004b8

08004c30 <_write_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d07      	ldr	r5, [pc, #28]	; (8004c50 <_write_r+0x20>)
 8004c34:	4604      	mov	r4, r0
 8004c36:	4608      	mov	r0, r1
 8004c38:	4611      	mov	r1, r2
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	602a      	str	r2, [r5, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f7fc fe12 	bl	8001868 <_write>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d102      	bne.n	8004c4e <_write_r+0x1e>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <_write_r+0x1e>
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	200004b8 	.word	0x200004b8

08004c54 <__errno>:
 8004c54:	4b01      	ldr	r3, [pc, #4]	; (8004c5c <__errno+0x8>)
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	2000008c 	.word	0x2000008c

08004c60 <__libc_init_array>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	4d0d      	ldr	r5, [pc, #52]	; (8004c98 <__libc_init_array+0x38>)
 8004c64:	4c0d      	ldr	r4, [pc, #52]	; (8004c9c <__libc_init_array+0x3c>)
 8004c66:	1b64      	subs	r4, r4, r5
 8004c68:	10a4      	asrs	r4, r4, #2
 8004c6a:	2600      	movs	r6, #0
 8004c6c:	42a6      	cmp	r6, r4
 8004c6e:	d109      	bne.n	8004c84 <__libc_init_array+0x24>
 8004c70:	4d0b      	ldr	r5, [pc, #44]	; (8004ca0 <__libc_init_array+0x40>)
 8004c72:	4c0c      	ldr	r4, [pc, #48]	; (8004ca4 <__libc_init_array+0x44>)
 8004c74:	f000 fdc0 	bl	80057f8 <_init>
 8004c78:	1b64      	subs	r4, r4, r5
 8004c7a:	10a4      	asrs	r4, r4, #2
 8004c7c:	2600      	movs	r6, #0
 8004c7e:	42a6      	cmp	r6, r4
 8004c80:	d105      	bne.n	8004c8e <__libc_init_array+0x2e>
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
 8004c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c88:	4798      	blx	r3
 8004c8a:	3601      	adds	r6, #1
 8004c8c:	e7ee      	b.n	8004c6c <__libc_init_array+0xc>
 8004c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c92:	4798      	blx	r3
 8004c94:	3601      	adds	r6, #1
 8004c96:	e7f2      	b.n	8004c7e <__libc_init_array+0x1e>
 8004c98:	08005870 	.word	0x08005870
 8004c9c:	08005870 	.word	0x08005870
 8004ca0:	08005870 	.word	0x08005870
 8004ca4:	08005874 	.word	0x08005874

08004ca8 <__retarget_lock_init_recursive>:
 8004ca8:	4770      	bx	lr

08004caa <__retarget_lock_acquire_recursive>:
 8004caa:	4770      	bx	lr

08004cac <__retarget_lock_release_recursive>:
 8004cac:	4770      	bx	lr
	...

08004cb0 <_free_r>:
 8004cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cb2:	2900      	cmp	r1, #0
 8004cb4:	d044      	beq.n	8004d40 <_free_r+0x90>
 8004cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cba:	9001      	str	r0, [sp, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8004cc2:	bfb8      	it	lt
 8004cc4:	18e4      	addlt	r4, r4, r3
 8004cc6:	f000 f8df 	bl	8004e88 <__malloc_lock>
 8004cca:	4a1e      	ldr	r2, [pc, #120]	; (8004d44 <_free_r+0x94>)
 8004ccc:	9801      	ldr	r0, [sp, #4]
 8004cce:	6813      	ldr	r3, [r2, #0]
 8004cd0:	b933      	cbnz	r3, 8004ce0 <_free_r+0x30>
 8004cd2:	6063      	str	r3, [r4, #4]
 8004cd4:	6014      	str	r4, [r2, #0]
 8004cd6:	b003      	add	sp, #12
 8004cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cdc:	f000 b8da 	b.w	8004e94 <__malloc_unlock>
 8004ce0:	42a3      	cmp	r3, r4
 8004ce2:	d908      	bls.n	8004cf6 <_free_r+0x46>
 8004ce4:	6825      	ldr	r5, [r4, #0]
 8004ce6:	1961      	adds	r1, r4, r5
 8004ce8:	428b      	cmp	r3, r1
 8004cea:	bf01      	itttt	eq
 8004cec:	6819      	ldreq	r1, [r3, #0]
 8004cee:	685b      	ldreq	r3, [r3, #4]
 8004cf0:	1949      	addeq	r1, r1, r5
 8004cf2:	6021      	streq	r1, [r4, #0]
 8004cf4:	e7ed      	b.n	8004cd2 <_free_r+0x22>
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	b10b      	cbz	r3, 8004d00 <_free_r+0x50>
 8004cfc:	42a3      	cmp	r3, r4
 8004cfe:	d9fa      	bls.n	8004cf6 <_free_r+0x46>
 8004d00:	6811      	ldr	r1, [r2, #0]
 8004d02:	1855      	adds	r5, r2, r1
 8004d04:	42a5      	cmp	r5, r4
 8004d06:	d10b      	bne.n	8004d20 <_free_r+0x70>
 8004d08:	6824      	ldr	r4, [r4, #0]
 8004d0a:	4421      	add	r1, r4
 8004d0c:	1854      	adds	r4, r2, r1
 8004d0e:	42a3      	cmp	r3, r4
 8004d10:	6011      	str	r1, [r2, #0]
 8004d12:	d1e0      	bne.n	8004cd6 <_free_r+0x26>
 8004d14:	681c      	ldr	r4, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	6053      	str	r3, [r2, #4]
 8004d1a:	440c      	add	r4, r1
 8004d1c:	6014      	str	r4, [r2, #0]
 8004d1e:	e7da      	b.n	8004cd6 <_free_r+0x26>
 8004d20:	d902      	bls.n	8004d28 <_free_r+0x78>
 8004d22:	230c      	movs	r3, #12
 8004d24:	6003      	str	r3, [r0, #0]
 8004d26:	e7d6      	b.n	8004cd6 <_free_r+0x26>
 8004d28:	6825      	ldr	r5, [r4, #0]
 8004d2a:	1961      	adds	r1, r4, r5
 8004d2c:	428b      	cmp	r3, r1
 8004d2e:	bf04      	itt	eq
 8004d30:	6819      	ldreq	r1, [r3, #0]
 8004d32:	685b      	ldreq	r3, [r3, #4]
 8004d34:	6063      	str	r3, [r4, #4]
 8004d36:	bf04      	itt	eq
 8004d38:	1949      	addeq	r1, r1, r5
 8004d3a:	6021      	streq	r1, [r4, #0]
 8004d3c:	6054      	str	r4, [r2, #4]
 8004d3e:	e7ca      	b.n	8004cd6 <_free_r+0x26>
 8004d40:	b003      	add	sp, #12
 8004d42:	bd30      	pop	{r4, r5, pc}
 8004d44:	200004c0 	.word	0x200004c0

08004d48 <sbrk_aligned>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	4e0e      	ldr	r6, [pc, #56]	; (8004d84 <sbrk_aligned+0x3c>)
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	6831      	ldr	r1, [r6, #0]
 8004d50:	4605      	mov	r5, r0
 8004d52:	b911      	cbnz	r1, 8004d5a <sbrk_aligned+0x12>
 8004d54:	f000 fcbc 	bl	80056d0 <_sbrk_r>
 8004d58:	6030      	str	r0, [r6, #0]
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	f000 fcb7 	bl	80056d0 <_sbrk_r>
 8004d62:	1c43      	adds	r3, r0, #1
 8004d64:	d00a      	beq.n	8004d7c <sbrk_aligned+0x34>
 8004d66:	1cc4      	adds	r4, r0, #3
 8004d68:	f024 0403 	bic.w	r4, r4, #3
 8004d6c:	42a0      	cmp	r0, r4
 8004d6e:	d007      	beq.n	8004d80 <sbrk_aligned+0x38>
 8004d70:	1a21      	subs	r1, r4, r0
 8004d72:	4628      	mov	r0, r5
 8004d74:	f000 fcac 	bl	80056d0 <_sbrk_r>
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d101      	bne.n	8004d80 <sbrk_aligned+0x38>
 8004d7c:	f04f 34ff 	mov.w	r4, #4294967295
 8004d80:	4620      	mov	r0, r4
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	200004c4 	.word	0x200004c4

08004d88 <_malloc_r>:
 8004d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d8c:	1ccd      	adds	r5, r1, #3
 8004d8e:	f025 0503 	bic.w	r5, r5, #3
 8004d92:	3508      	adds	r5, #8
 8004d94:	2d0c      	cmp	r5, #12
 8004d96:	bf38      	it	cc
 8004d98:	250c      	movcc	r5, #12
 8004d9a:	2d00      	cmp	r5, #0
 8004d9c:	4607      	mov	r7, r0
 8004d9e:	db01      	blt.n	8004da4 <_malloc_r+0x1c>
 8004da0:	42a9      	cmp	r1, r5
 8004da2:	d905      	bls.n	8004db0 <_malloc_r+0x28>
 8004da4:	230c      	movs	r3, #12
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	2600      	movs	r6, #0
 8004daa:	4630      	mov	r0, r6
 8004dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004db0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e84 <_malloc_r+0xfc>
 8004db4:	f000 f868 	bl	8004e88 <__malloc_lock>
 8004db8:	f8d8 3000 	ldr.w	r3, [r8]
 8004dbc:	461c      	mov	r4, r3
 8004dbe:	bb5c      	cbnz	r4, 8004e18 <_malloc_r+0x90>
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f7ff ffc0 	bl	8004d48 <sbrk_aligned>
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	4604      	mov	r4, r0
 8004dcc:	d155      	bne.n	8004e7a <_malloc_r+0xf2>
 8004dce:	f8d8 4000 	ldr.w	r4, [r8]
 8004dd2:	4626      	mov	r6, r4
 8004dd4:	2e00      	cmp	r6, #0
 8004dd6:	d145      	bne.n	8004e64 <_malloc_r+0xdc>
 8004dd8:	2c00      	cmp	r4, #0
 8004dda:	d048      	beq.n	8004e6e <_malloc_r+0xe6>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	4631      	mov	r1, r6
 8004de0:	4638      	mov	r0, r7
 8004de2:	eb04 0903 	add.w	r9, r4, r3
 8004de6:	f000 fc73 	bl	80056d0 <_sbrk_r>
 8004dea:	4581      	cmp	r9, r0
 8004dec:	d13f      	bne.n	8004e6e <_malloc_r+0xe6>
 8004dee:	6821      	ldr	r1, [r4, #0]
 8004df0:	1a6d      	subs	r5, r5, r1
 8004df2:	4629      	mov	r1, r5
 8004df4:	4638      	mov	r0, r7
 8004df6:	f7ff ffa7 	bl	8004d48 <sbrk_aligned>
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d037      	beq.n	8004e6e <_malloc_r+0xe6>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	442b      	add	r3, r5
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	f8d8 3000 	ldr.w	r3, [r8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d038      	beq.n	8004e7e <_malloc_r+0xf6>
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	42a2      	cmp	r2, r4
 8004e10:	d12b      	bne.n	8004e6a <_malloc_r+0xe2>
 8004e12:	2200      	movs	r2, #0
 8004e14:	605a      	str	r2, [r3, #4]
 8004e16:	e00f      	b.n	8004e38 <_malloc_r+0xb0>
 8004e18:	6822      	ldr	r2, [r4, #0]
 8004e1a:	1b52      	subs	r2, r2, r5
 8004e1c:	d41f      	bmi.n	8004e5e <_malloc_r+0xd6>
 8004e1e:	2a0b      	cmp	r2, #11
 8004e20:	d917      	bls.n	8004e52 <_malloc_r+0xca>
 8004e22:	1961      	adds	r1, r4, r5
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	6025      	str	r5, [r4, #0]
 8004e28:	bf18      	it	ne
 8004e2a:	6059      	strne	r1, [r3, #4]
 8004e2c:	6863      	ldr	r3, [r4, #4]
 8004e2e:	bf08      	it	eq
 8004e30:	f8c8 1000 	streq.w	r1, [r8]
 8004e34:	5162      	str	r2, [r4, r5]
 8004e36:	604b      	str	r3, [r1, #4]
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f104 060b 	add.w	r6, r4, #11
 8004e3e:	f000 f829 	bl	8004e94 <__malloc_unlock>
 8004e42:	f026 0607 	bic.w	r6, r6, #7
 8004e46:	1d23      	adds	r3, r4, #4
 8004e48:	1af2      	subs	r2, r6, r3
 8004e4a:	d0ae      	beq.n	8004daa <_malloc_r+0x22>
 8004e4c:	1b9b      	subs	r3, r3, r6
 8004e4e:	50a3      	str	r3, [r4, r2]
 8004e50:	e7ab      	b.n	8004daa <_malloc_r+0x22>
 8004e52:	42a3      	cmp	r3, r4
 8004e54:	6862      	ldr	r2, [r4, #4]
 8004e56:	d1dd      	bne.n	8004e14 <_malloc_r+0x8c>
 8004e58:	f8c8 2000 	str.w	r2, [r8]
 8004e5c:	e7ec      	b.n	8004e38 <_malloc_r+0xb0>
 8004e5e:	4623      	mov	r3, r4
 8004e60:	6864      	ldr	r4, [r4, #4]
 8004e62:	e7ac      	b.n	8004dbe <_malloc_r+0x36>
 8004e64:	4634      	mov	r4, r6
 8004e66:	6876      	ldr	r6, [r6, #4]
 8004e68:	e7b4      	b.n	8004dd4 <_malloc_r+0x4c>
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	e7cc      	b.n	8004e08 <_malloc_r+0x80>
 8004e6e:	230c      	movs	r3, #12
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4638      	mov	r0, r7
 8004e74:	f000 f80e 	bl	8004e94 <__malloc_unlock>
 8004e78:	e797      	b.n	8004daa <_malloc_r+0x22>
 8004e7a:	6025      	str	r5, [r4, #0]
 8004e7c:	e7dc      	b.n	8004e38 <_malloc_r+0xb0>
 8004e7e:	605b      	str	r3, [r3, #4]
 8004e80:	deff      	udf	#255	; 0xff
 8004e82:	bf00      	nop
 8004e84:	200004c0 	.word	0x200004c0

08004e88 <__malloc_lock>:
 8004e88:	4801      	ldr	r0, [pc, #4]	; (8004e90 <__malloc_lock+0x8>)
 8004e8a:	f7ff bf0e 	b.w	8004caa <__retarget_lock_acquire_recursive>
 8004e8e:	bf00      	nop
 8004e90:	200004bc 	.word	0x200004bc

08004e94 <__malloc_unlock>:
 8004e94:	4801      	ldr	r0, [pc, #4]	; (8004e9c <__malloc_unlock+0x8>)
 8004e96:	f7ff bf09 	b.w	8004cac <__retarget_lock_release_recursive>
 8004e9a:	bf00      	nop
 8004e9c:	200004bc 	.word	0x200004bc

08004ea0 <__sfputc_r>:
 8004ea0:	6893      	ldr	r3, [r2, #8]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	b410      	push	{r4}
 8004ea8:	6093      	str	r3, [r2, #8]
 8004eaa:	da08      	bge.n	8004ebe <__sfputc_r+0x1e>
 8004eac:	6994      	ldr	r4, [r2, #24]
 8004eae:	42a3      	cmp	r3, r4
 8004eb0:	db01      	blt.n	8004eb6 <__sfputc_r+0x16>
 8004eb2:	290a      	cmp	r1, #10
 8004eb4:	d103      	bne.n	8004ebe <__sfputc_r+0x1e>
 8004eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eba:	f000 bb73 	b.w	80055a4 <__swbuf_r>
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	1c58      	adds	r0, r3, #1
 8004ec2:	6010      	str	r0, [r2, #0]
 8004ec4:	7019      	strb	r1, [r3, #0]
 8004ec6:	4608      	mov	r0, r1
 8004ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <__sfputs_r>:
 8004ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	460f      	mov	r7, r1
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	18d5      	adds	r5, r2, r3
 8004ed8:	42ac      	cmp	r4, r5
 8004eda:	d101      	bne.n	8004ee0 <__sfputs_r+0x12>
 8004edc:	2000      	movs	r0, #0
 8004ede:	e007      	b.n	8004ef0 <__sfputs_r+0x22>
 8004ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee4:	463a      	mov	r2, r7
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f7ff ffda 	bl	8004ea0 <__sfputc_r>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d1f3      	bne.n	8004ed8 <__sfputs_r+0xa>
 8004ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ef4 <_vfiprintf_r>:
 8004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	460d      	mov	r5, r1
 8004efa:	b09d      	sub	sp, #116	; 0x74
 8004efc:	4614      	mov	r4, r2
 8004efe:	4698      	mov	r8, r3
 8004f00:	4606      	mov	r6, r0
 8004f02:	b118      	cbz	r0, 8004f0c <_vfiprintf_r+0x18>
 8004f04:	6a03      	ldr	r3, [r0, #32]
 8004f06:	b90b      	cbnz	r3, 8004f0c <_vfiprintf_r+0x18>
 8004f08:	f7ff fdca 	bl	8004aa0 <__sinit>
 8004f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f0e:	07d9      	lsls	r1, r3, #31
 8004f10:	d405      	bmi.n	8004f1e <_vfiprintf_r+0x2a>
 8004f12:	89ab      	ldrh	r3, [r5, #12]
 8004f14:	059a      	lsls	r2, r3, #22
 8004f16:	d402      	bmi.n	8004f1e <_vfiprintf_r+0x2a>
 8004f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f1a:	f7ff fec6 	bl	8004caa <__retarget_lock_acquire_recursive>
 8004f1e:	89ab      	ldrh	r3, [r5, #12]
 8004f20:	071b      	lsls	r3, r3, #28
 8004f22:	d501      	bpl.n	8004f28 <_vfiprintf_r+0x34>
 8004f24:	692b      	ldr	r3, [r5, #16]
 8004f26:	b99b      	cbnz	r3, 8004f50 <_vfiprintf_r+0x5c>
 8004f28:	4629      	mov	r1, r5
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	f000 fb78 	bl	8005620 <__swsetup_r>
 8004f30:	b170      	cbz	r0, 8004f50 <_vfiprintf_r+0x5c>
 8004f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f34:	07dc      	lsls	r4, r3, #31
 8004f36:	d504      	bpl.n	8004f42 <_vfiprintf_r+0x4e>
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	b01d      	add	sp, #116	; 0x74
 8004f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f42:	89ab      	ldrh	r3, [r5, #12]
 8004f44:	0598      	lsls	r0, r3, #22
 8004f46:	d4f7      	bmi.n	8004f38 <_vfiprintf_r+0x44>
 8004f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f4a:	f7ff feaf 	bl	8004cac <__retarget_lock_release_recursive>
 8004f4e:	e7f3      	b.n	8004f38 <_vfiprintf_r+0x44>
 8004f50:	2300      	movs	r3, #0
 8004f52:	9309      	str	r3, [sp, #36]	; 0x24
 8004f54:	2320      	movs	r3, #32
 8004f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f5e:	2330      	movs	r3, #48	; 0x30
 8004f60:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005114 <_vfiprintf_r+0x220>
 8004f64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f68:	f04f 0901 	mov.w	r9, #1
 8004f6c:	4623      	mov	r3, r4
 8004f6e:	469a      	mov	sl, r3
 8004f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f74:	b10a      	cbz	r2, 8004f7a <_vfiprintf_r+0x86>
 8004f76:	2a25      	cmp	r2, #37	; 0x25
 8004f78:	d1f9      	bne.n	8004f6e <_vfiprintf_r+0x7a>
 8004f7a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f7e:	d00b      	beq.n	8004f98 <_vfiprintf_r+0xa4>
 8004f80:	465b      	mov	r3, fp
 8004f82:	4622      	mov	r2, r4
 8004f84:	4629      	mov	r1, r5
 8004f86:	4630      	mov	r0, r6
 8004f88:	f7ff ffa1 	bl	8004ece <__sfputs_r>
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	f000 80a9 	beq.w	80050e4 <_vfiprintf_r+0x1f0>
 8004f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f94:	445a      	add	r2, fp
 8004f96:	9209      	str	r2, [sp, #36]	; 0x24
 8004f98:	f89a 3000 	ldrb.w	r3, [sl]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80a1 	beq.w	80050e4 <_vfiprintf_r+0x1f0>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fac:	f10a 0a01 	add.w	sl, sl, #1
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	9307      	str	r3, [sp, #28]
 8004fb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fb8:	931a      	str	r3, [sp, #104]	; 0x68
 8004fba:	4654      	mov	r4, sl
 8004fbc:	2205      	movs	r2, #5
 8004fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc2:	4854      	ldr	r0, [pc, #336]	; (8005114 <_vfiprintf_r+0x220>)
 8004fc4:	f7fb f90c 	bl	80001e0 <memchr>
 8004fc8:	9a04      	ldr	r2, [sp, #16]
 8004fca:	b9d8      	cbnz	r0, 8005004 <_vfiprintf_r+0x110>
 8004fcc:	06d1      	lsls	r1, r2, #27
 8004fce:	bf44      	itt	mi
 8004fd0:	2320      	movmi	r3, #32
 8004fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd6:	0713      	lsls	r3, r2, #28
 8004fd8:	bf44      	itt	mi
 8004fda:	232b      	movmi	r3, #43	; 0x2b
 8004fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe6:	d015      	beq.n	8005014 <_vfiprintf_r+0x120>
 8004fe8:	9a07      	ldr	r2, [sp, #28]
 8004fea:	4654      	mov	r4, sl
 8004fec:	2000      	movs	r0, #0
 8004fee:	f04f 0c0a 	mov.w	ip, #10
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff8:	3b30      	subs	r3, #48	; 0x30
 8004ffa:	2b09      	cmp	r3, #9
 8004ffc:	d94d      	bls.n	800509a <_vfiprintf_r+0x1a6>
 8004ffe:	b1b0      	cbz	r0, 800502e <_vfiprintf_r+0x13a>
 8005000:	9207      	str	r2, [sp, #28]
 8005002:	e014      	b.n	800502e <_vfiprintf_r+0x13a>
 8005004:	eba0 0308 	sub.w	r3, r0, r8
 8005008:	fa09 f303 	lsl.w	r3, r9, r3
 800500c:	4313      	orrs	r3, r2
 800500e:	9304      	str	r3, [sp, #16]
 8005010:	46a2      	mov	sl, r4
 8005012:	e7d2      	b.n	8004fba <_vfiprintf_r+0xc6>
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	1d19      	adds	r1, r3, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	9103      	str	r1, [sp, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	bfbb      	ittet	lt
 8005020:	425b      	neglt	r3, r3
 8005022:	f042 0202 	orrlt.w	r2, r2, #2
 8005026:	9307      	strge	r3, [sp, #28]
 8005028:	9307      	strlt	r3, [sp, #28]
 800502a:	bfb8      	it	lt
 800502c:	9204      	strlt	r2, [sp, #16]
 800502e:	7823      	ldrb	r3, [r4, #0]
 8005030:	2b2e      	cmp	r3, #46	; 0x2e
 8005032:	d10c      	bne.n	800504e <_vfiprintf_r+0x15a>
 8005034:	7863      	ldrb	r3, [r4, #1]
 8005036:	2b2a      	cmp	r3, #42	; 0x2a
 8005038:	d134      	bne.n	80050a4 <_vfiprintf_r+0x1b0>
 800503a:	9b03      	ldr	r3, [sp, #12]
 800503c:	1d1a      	adds	r2, r3, #4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	9203      	str	r2, [sp, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	bfb8      	it	lt
 8005046:	f04f 33ff 	movlt.w	r3, #4294967295
 800504a:	3402      	adds	r4, #2
 800504c:	9305      	str	r3, [sp, #20]
 800504e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005124 <_vfiprintf_r+0x230>
 8005052:	7821      	ldrb	r1, [r4, #0]
 8005054:	2203      	movs	r2, #3
 8005056:	4650      	mov	r0, sl
 8005058:	f7fb f8c2 	bl	80001e0 <memchr>
 800505c:	b138      	cbz	r0, 800506e <_vfiprintf_r+0x17a>
 800505e:	9b04      	ldr	r3, [sp, #16]
 8005060:	eba0 000a 	sub.w	r0, r0, sl
 8005064:	2240      	movs	r2, #64	; 0x40
 8005066:	4082      	lsls	r2, r0
 8005068:	4313      	orrs	r3, r2
 800506a:	3401      	adds	r4, #1
 800506c:	9304      	str	r3, [sp, #16]
 800506e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005072:	4829      	ldr	r0, [pc, #164]	; (8005118 <_vfiprintf_r+0x224>)
 8005074:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005078:	2206      	movs	r2, #6
 800507a:	f7fb f8b1 	bl	80001e0 <memchr>
 800507e:	2800      	cmp	r0, #0
 8005080:	d03f      	beq.n	8005102 <_vfiprintf_r+0x20e>
 8005082:	4b26      	ldr	r3, [pc, #152]	; (800511c <_vfiprintf_r+0x228>)
 8005084:	bb1b      	cbnz	r3, 80050ce <_vfiprintf_r+0x1da>
 8005086:	9b03      	ldr	r3, [sp, #12]
 8005088:	3307      	adds	r3, #7
 800508a:	f023 0307 	bic.w	r3, r3, #7
 800508e:	3308      	adds	r3, #8
 8005090:	9303      	str	r3, [sp, #12]
 8005092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005094:	443b      	add	r3, r7
 8005096:	9309      	str	r3, [sp, #36]	; 0x24
 8005098:	e768      	b.n	8004f6c <_vfiprintf_r+0x78>
 800509a:	fb0c 3202 	mla	r2, ip, r2, r3
 800509e:	460c      	mov	r4, r1
 80050a0:	2001      	movs	r0, #1
 80050a2:	e7a6      	b.n	8004ff2 <_vfiprintf_r+0xfe>
 80050a4:	2300      	movs	r3, #0
 80050a6:	3401      	adds	r4, #1
 80050a8:	9305      	str	r3, [sp, #20]
 80050aa:	4619      	mov	r1, r3
 80050ac:	f04f 0c0a 	mov.w	ip, #10
 80050b0:	4620      	mov	r0, r4
 80050b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050b6:	3a30      	subs	r2, #48	; 0x30
 80050b8:	2a09      	cmp	r2, #9
 80050ba:	d903      	bls.n	80050c4 <_vfiprintf_r+0x1d0>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0c6      	beq.n	800504e <_vfiprintf_r+0x15a>
 80050c0:	9105      	str	r1, [sp, #20]
 80050c2:	e7c4      	b.n	800504e <_vfiprintf_r+0x15a>
 80050c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c8:	4604      	mov	r4, r0
 80050ca:	2301      	movs	r3, #1
 80050cc:	e7f0      	b.n	80050b0 <_vfiprintf_r+0x1bc>
 80050ce:	ab03      	add	r3, sp, #12
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	462a      	mov	r2, r5
 80050d4:	4b12      	ldr	r3, [pc, #72]	; (8005120 <_vfiprintf_r+0x22c>)
 80050d6:	a904      	add	r1, sp, #16
 80050d8:	4630      	mov	r0, r6
 80050da:	f3af 8000 	nop.w
 80050de:	4607      	mov	r7, r0
 80050e0:	1c78      	adds	r0, r7, #1
 80050e2:	d1d6      	bne.n	8005092 <_vfiprintf_r+0x19e>
 80050e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050e6:	07d9      	lsls	r1, r3, #31
 80050e8:	d405      	bmi.n	80050f6 <_vfiprintf_r+0x202>
 80050ea:	89ab      	ldrh	r3, [r5, #12]
 80050ec:	059a      	lsls	r2, r3, #22
 80050ee:	d402      	bmi.n	80050f6 <_vfiprintf_r+0x202>
 80050f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050f2:	f7ff fddb 	bl	8004cac <__retarget_lock_release_recursive>
 80050f6:	89ab      	ldrh	r3, [r5, #12]
 80050f8:	065b      	lsls	r3, r3, #25
 80050fa:	f53f af1d 	bmi.w	8004f38 <_vfiprintf_r+0x44>
 80050fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005100:	e71c      	b.n	8004f3c <_vfiprintf_r+0x48>
 8005102:	ab03      	add	r3, sp, #12
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	462a      	mov	r2, r5
 8005108:	4b05      	ldr	r3, [pc, #20]	; (8005120 <_vfiprintf_r+0x22c>)
 800510a:	a904      	add	r1, sp, #16
 800510c:	4630      	mov	r0, r6
 800510e:	f000 f879 	bl	8005204 <_printf_i>
 8005112:	e7e4      	b.n	80050de <_vfiprintf_r+0x1ea>
 8005114:	08005834 	.word	0x08005834
 8005118:	0800583e 	.word	0x0800583e
 800511c:	00000000 	.word	0x00000000
 8005120:	08004ecf 	.word	0x08004ecf
 8005124:	0800583a 	.word	0x0800583a

08005128 <_printf_common>:
 8005128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800512c:	4616      	mov	r6, r2
 800512e:	4699      	mov	r9, r3
 8005130:	688a      	ldr	r2, [r1, #8]
 8005132:	690b      	ldr	r3, [r1, #16]
 8005134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005138:	4293      	cmp	r3, r2
 800513a:	bfb8      	it	lt
 800513c:	4613      	movlt	r3, r2
 800513e:	6033      	str	r3, [r6, #0]
 8005140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005144:	4607      	mov	r7, r0
 8005146:	460c      	mov	r4, r1
 8005148:	b10a      	cbz	r2, 800514e <_printf_common+0x26>
 800514a:	3301      	adds	r3, #1
 800514c:	6033      	str	r3, [r6, #0]
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	0699      	lsls	r1, r3, #26
 8005152:	bf42      	ittt	mi
 8005154:	6833      	ldrmi	r3, [r6, #0]
 8005156:	3302      	addmi	r3, #2
 8005158:	6033      	strmi	r3, [r6, #0]
 800515a:	6825      	ldr	r5, [r4, #0]
 800515c:	f015 0506 	ands.w	r5, r5, #6
 8005160:	d106      	bne.n	8005170 <_printf_common+0x48>
 8005162:	f104 0a19 	add.w	sl, r4, #25
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	6832      	ldr	r2, [r6, #0]
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	42ab      	cmp	r3, r5
 800516e:	dc26      	bgt.n	80051be <_printf_common+0x96>
 8005170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005174:	1e13      	subs	r3, r2, #0
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	bf18      	it	ne
 800517a:	2301      	movne	r3, #1
 800517c:	0692      	lsls	r2, r2, #26
 800517e:	d42b      	bmi.n	80051d8 <_printf_common+0xb0>
 8005180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005184:	4649      	mov	r1, r9
 8005186:	4638      	mov	r0, r7
 8005188:	47c0      	blx	r8
 800518a:	3001      	adds	r0, #1
 800518c:	d01e      	beq.n	80051cc <_printf_common+0xa4>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	6922      	ldr	r2, [r4, #16]
 8005192:	f003 0306 	and.w	r3, r3, #6
 8005196:	2b04      	cmp	r3, #4
 8005198:	bf02      	ittt	eq
 800519a:	68e5      	ldreq	r5, [r4, #12]
 800519c:	6833      	ldreq	r3, [r6, #0]
 800519e:	1aed      	subeq	r5, r5, r3
 80051a0:	68a3      	ldr	r3, [r4, #8]
 80051a2:	bf0c      	ite	eq
 80051a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a8:	2500      	movne	r5, #0
 80051aa:	4293      	cmp	r3, r2
 80051ac:	bfc4      	itt	gt
 80051ae:	1a9b      	subgt	r3, r3, r2
 80051b0:	18ed      	addgt	r5, r5, r3
 80051b2:	2600      	movs	r6, #0
 80051b4:	341a      	adds	r4, #26
 80051b6:	42b5      	cmp	r5, r6
 80051b8:	d11a      	bne.n	80051f0 <_printf_common+0xc8>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e008      	b.n	80051d0 <_printf_common+0xa8>
 80051be:	2301      	movs	r3, #1
 80051c0:	4652      	mov	r2, sl
 80051c2:	4649      	mov	r1, r9
 80051c4:	4638      	mov	r0, r7
 80051c6:	47c0      	blx	r8
 80051c8:	3001      	adds	r0, #1
 80051ca:	d103      	bne.n	80051d4 <_printf_common+0xac>
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295
 80051d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d4:	3501      	adds	r5, #1
 80051d6:	e7c6      	b.n	8005166 <_printf_common+0x3e>
 80051d8:	18e1      	adds	r1, r4, r3
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	2030      	movs	r0, #48	; 0x30
 80051de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051e2:	4422      	add	r2, r4
 80051e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ec:	3302      	adds	r3, #2
 80051ee:	e7c7      	b.n	8005180 <_printf_common+0x58>
 80051f0:	2301      	movs	r3, #1
 80051f2:	4622      	mov	r2, r4
 80051f4:	4649      	mov	r1, r9
 80051f6:	4638      	mov	r0, r7
 80051f8:	47c0      	blx	r8
 80051fa:	3001      	adds	r0, #1
 80051fc:	d0e6      	beq.n	80051cc <_printf_common+0xa4>
 80051fe:	3601      	adds	r6, #1
 8005200:	e7d9      	b.n	80051b6 <_printf_common+0x8e>
	...

08005204 <_printf_i>:
 8005204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	7e0f      	ldrb	r7, [r1, #24]
 800520a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800520c:	2f78      	cmp	r7, #120	; 0x78
 800520e:	4691      	mov	r9, r2
 8005210:	4680      	mov	r8, r0
 8005212:	460c      	mov	r4, r1
 8005214:	469a      	mov	sl, r3
 8005216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800521a:	d807      	bhi.n	800522c <_printf_i+0x28>
 800521c:	2f62      	cmp	r7, #98	; 0x62
 800521e:	d80a      	bhi.n	8005236 <_printf_i+0x32>
 8005220:	2f00      	cmp	r7, #0
 8005222:	f000 80d4 	beq.w	80053ce <_printf_i+0x1ca>
 8005226:	2f58      	cmp	r7, #88	; 0x58
 8005228:	f000 80c0 	beq.w	80053ac <_printf_i+0x1a8>
 800522c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005234:	e03a      	b.n	80052ac <_printf_i+0xa8>
 8005236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800523a:	2b15      	cmp	r3, #21
 800523c:	d8f6      	bhi.n	800522c <_printf_i+0x28>
 800523e:	a101      	add	r1, pc, #4	; (adr r1, 8005244 <_printf_i+0x40>)
 8005240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005244:	0800529d 	.word	0x0800529d
 8005248:	080052b1 	.word	0x080052b1
 800524c:	0800522d 	.word	0x0800522d
 8005250:	0800522d 	.word	0x0800522d
 8005254:	0800522d 	.word	0x0800522d
 8005258:	0800522d 	.word	0x0800522d
 800525c:	080052b1 	.word	0x080052b1
 8005260:	0800522d 	.word	0x0800522d
 8005264:	0800522d 	.word	0x0800522d
 8005268:	0800522d 	.word	0x0800522d
 800526c:	0800522d 	.word	0x0800522d
 8005270:	080053b5 	.word	0x080053b5
 8005274:	080052dd 	.word	0x080052dd
 8005278:	0800536f 	.word	0x0800536f
 800527c:	0800522d 	.word	0x0800522d
 8005280:	0800522d 	.word	0x0800522d
 8005284:	080053d7 	.word	0x080053d7
 8005288:	0800522d 	.word	0x0800522d
 800528c:	080052dd 	.word	0x080052dd
 8005290:	0800522d 	.word	0x0800522d
 8005294:	0800522d 	.word	0x0800522d
 8005298:	08005377 	.word	0x08005377
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	1d1a      	adds	r2, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	602a      	str	r2, [r5, #0]
 80052a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052ac:	2301      	movs	r3, #1
 80052ae:	e09f      	b.n	80053f0 <_printf_i+0x1ec>
 80052b0:	6820      	ldr	r0, [r4, #0]
 80052b2:	682b      	ldr	r3, [r5, #0]
 80052b4:	0607      	lsls	r7, r0, #24
 80052b6:	f103 0104 	add.w	r1, r3, #4
 80052ba:	6029      	str	r1, [r5, #0]
 80052bc:	d501      	bpl.n	80052c2 <_printf_i+0xbe>
 80052be:	681e      	ldr	r6, [r3, #0]
 80052c0:	e003      	b.n	80052ca <_printf_i+0xc6>
 80052c2:	0646      	lsls	r6, r0, #25
 80052c4:	d5fb      	bpl.n	80052be <_printf_i+0xba>
 80052c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	da03      	bge.n	80052d6 <_printf_i+0xd2>
 80052ce:	232d      	movs	r3, #45	; 0x2d
 80052d0:	4276      	negs	r6, r6
 80052d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d6:	485a      	ldr	r0, [pc, #360]	; (8005440 <_printf_i+0x23c>)
 80052d8:	230a      	movs	r3, #10
 80052da:	e012      	b.n	8005302 <_printf_i+0xfe>
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	6820      	ldr	r0, [r4, #0]
 80052e0:	1d19      	adds	r1, r3, #4
 80052e2:	6029      	str	r1, [r5, #0]
 80052e4:	0605      	lsls	r5, r0, #24
 80052e6:	d501      	bpl.n	80052ec <_printf_i+0xe8>
 80052e8:	681e      	ldr	r6, [r3, #0]
 80052ea:	e002      	b.n	80052f2 <_printf_i+0xee>
 80052ec:	0641      	lsls	r1, r0, #25
 80052ee:	d5fb      	bpl.n	80052e8 <_printf_i+0xe4>
 80052f0:	881e      	ldrh	r6, [r3, #0]
 80052f2:	4853      	ldr	r0, [pc, #332]	; (8005440 <_printf_i+0x23c>)
 80052f4:	2f6f      	cmp	r7, #111	; 0x6f
 80052f6:	bf0c      	ite	eq
 80052f8:	2308      	moveq	r3, #8
 80052fa:	230a      	movne	r3, #10
 80052fc:	2100      	movs	r1, #0
 80052fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005302:	6865      	ldr	r5, [r4, #4]
 8005304:	60a5      	str	r5, [r4, #8]
 8005306:	2d00      	cmp	r5, #0
 8005308:	bfa2      	ittt	ge
 800530a:	6821      	ldrge	r1, [r4, #0]
 800530c:	f021 0104 	bicge.w	r1, r1, #4
 8005310:	6021      	strge	r1, [r4, #0]
 8005312:	b90e      	cbnz	r6, 8005318 <_printf_i+0x114>
 8005314:	2d00      	cmp	r5, #0
 8005316:	d04b      	beq.n	80053b0 <_printf_i+0x1ac>
 8005318:	4615      	mov	r5, r2
 800531a:	fbb6 f1f3 	udiv	r1, r6, r3
 800531e:	fb03 6711 	mls	r7, r3, r1, r6
 8005322:	5dc7      	ldrb	r7, [r0, r7]
 8005324:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005328:	4637      	mov	r7, r6
 800532a:	42bb      	cmp	r3, r7
 800532c:	460e      	mov	r6, r1
 800532e:	d9f4      	bls.n	800531a <_printf_i+0x116>
 8005330:	2b08      	cmp	r3, #8
 8005332:	d10b      	bne.n	800534c <_printf_i+0x148>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	07de      	lsls	r6, r3, #31
 8005338:	d508      	bpl.n	800534c <_printf_i+0x148>
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	6861      	ldr	r1, [r4, #4]
 800533e:	4299      	cmp	r1, r3
 8005340:	bfde      	ittt	le
 8005342:	2330      	movle	r3, #48	; 0x30
 8005344:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005348:	f105 35ff 	addle.w	r5, r5, #4294967295
 800534c:	1b52      	subs	r2, r2, r5
 800534e:	6122      	str	r2, [r4, #16]
 8005350:	f8cd a000 	str.w	sl, [sp]
 8005354:	464b      	mov	r3, r9
 8005356:	aa03      	add	r2, sp, #12
 8005358:	4621      	mov	r1, r4
 800535a:	4640      	mov	r0, r8
 800535c:	f7ff fee4 	bl	8005128 <_printf_common>
 8005360:	3001      	adds	r0, #1
 8005362:	d14a      	bne.n	80053fa <_printf_i+0x1f6>
 8005364:	f04f 30ff 	mov.w	r0, #4294967295
 8005368:	b004      	add	sp, #16
 800536a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	f043 0320 	orr.w	r3, r3, #32
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	4833      	ldr	r0, [pc, #204]	; (8005444 <_printf_i+0x240>)
 8005378:	2778      	movs	r7, #120	; 0x78
 800537a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	6829      	ldr	r1, [r5, #0]
 8005382:	061f      	lsls	r7, r3, #24
 8005384:	f851 6b04 	ldr.w	r6, [r1], #4
 8005388:	d402      	bmi.n	8005390 <_printf_i+0x18c>
 800538a:	065f      	lsls	r7, r3, #25
 800538c:	bf48      	it	mi
 800538e:	b2b6      	uxthmi	r6, r6
 8005390:	07df      	lsls	r7, r3, #31
 8005392:	bf48      	it	mi
 8005394:	f043 0320 	orrmi.w	r3, r3, #32
 8005398:	6029      	str	r1, [r5, #0]
 800539a:	bf48      	it	mi
 800539c:	6023      	strmi	r3, [r4, #0]
 800539e:	b91e      	cbnz	r6, 80053a8 <_printf_i+0x1a4>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	f023 0320 	bic.w	r3, r3, #32
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	2310      	movs	r3, #16
 80053aa:	e7a7      	b.n	80052fc <_printf_i+0xf8>
 80053ac:	4824      	ldr	r0, [pc, #144]	; (8005440 <_printf_i+0x23c>)
 80053ae:	e7e4      	b.n	800537a <_printf_i+0x176>
 80053b0:	4615      	mov	r5, r2
 80053b2:	e7bd      	b.n	8005330 <_printf_i+0x12c>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	6826      	ldr	r6, [r4, #0]
 80053b8:	6961      	ldr	r1, [r4, #20]
 80053ba:	1d18      	adds	r0, r3, #4
 80053bc:	6028      	str	r0, [r5, #0]
 80053be:	0635      	lsls	r5, r6, #24
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	d501      	bpl.n	80053c8 <_printf_i+0x1c4>
 80053c4:	6019      	str	r1, [r3, #0]
 80053c6:	e002      	b.n	80053ce <_printf_i+0x1ca>
 80053c8:	0670      	lsls	r0, r6, #25
 80053ca:	d5fb      	bpl.n	80053c4 <_printf_i+0x1c0>
 80053cc:	8019      	strh	r1, [r3, #0]
 80053ce:	2300      	movs	r3, #0
 80053d0:	6123      	str	r3, [r4, #16]
 80053d2:	4615      	mov	r5, r2
 80053d4:	e7bc      	b.n	8005350 <_printf_i+0x14c>
 80053d6:	682b      	ldr	r3, [r5, #0]
 80053d8:	1d1a      	adds	r2, r3, #4
 80053da:	602a      	str	r2, [r5, #0]
 80053dc:	681d      	ldr	r5, [r3, #0]
 80053de:	6862      	ldr	r2, [r4, #4]
 80053e0:	2100      	movs	r1, #0
 80053e2:	4628      	mov	r0, r5
 80053e4:	f7fa fefc 	bl	80001e0 <memchr>
 80053e8:	b108      	cbz	r0, 80053ee <_printf_i+0x1ea>
 80053ea:	1b40      	subs	r0, r0, r5
 80053ec:	6060      	str	r0, [r4, #4]
 80053ee:	6863      	ldr	r3, [r4, #4]
 80053f0:	6123      	str	r3, [r4, #16]
 80053f2:	2300      	movs	r3, #0
 80053f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f8:	e7aa      	b.n	8005350 <_printf_i+0x14c>
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	462a      	mov	r2, r5
 80053fe:	4649      	mov	r1, r9
 8005400:	4640      	mov	r0, r8
 8005402:	47d0      	blx	sl
 8005404:	3001      	adds	r0, #1
 8005406:	d0ad      	beq.n	8005364 <_printf_i+0x160>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	079b      	lsls	r3, r3, #30
 800540c:	d413      	bmi.n	8005436 <_printf_i+0x232>
 800540e:	68e0      	ldr	r0, [r4, #12]
 8005410:	9b03      	ldr	r3, [sp, #12]
 8005412:	4298      	cmp	r0, r3
 8005414:	bfb8      	it	lt
 8005416:	4618      	movlt	r0, r3
 8005418:	e7a6      	b.n	8005368 <_printf_i+0x164>
 800541a:	2301      	movs	r3, #1
 800541c:	4632      	mov	r2, r6
 800541e:	4649      	mov	r1, r9
 8005420:	4640      	mov	r0, r8
 8005422:	47d0      	blx	sl
 8005424:	3001      	adds	r0, #1
 8005426:	d09d      	beq.n	8005364 <_printf_i+0x160>
 8005428:	3501      	adds	r5, #1
 800542a:	68e3      	ldr	r3, [r4, #12]
 800542c:	9903      	ldr	r1, [sp, #12]
 800542e:	1a5b      	subs	r3, r3, r1
 8005430:	42ab      	cmp	r3, r5
 8005432:	dcf2      	bgt.n	800541a <_printf_i+0x216>
 8005434:	e7eb      	b.n	800540e <_printf_i+0x20a>
 8005436:	2500      	movs	r5, #0
 8005438:	f104 0619 	add.w	r6, r4, #25
 800543c:	e7f5      	b.n	800542a <_printf_i+0x226>
 800543e:	bf00      	nop
 8005440:	08005845 	.word	0x08005845
 8005444:	08005856 	.word	0x08005856

08005448 <__sflush_r>:
 8005448:	898a      	ldrh	r2, [r1, #12]
 800544a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800544e:	4605      	mov	r5, r0
 8005450:	0710      	lsls	r0, r2, #28
 8005452:	460c      	mov	r4, r1
 8005454:	d458      	bmi.n	8005508 <__sflush_r+0xc0>
 8005456:	684b      	ldr	r3, [r1, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	dc05      	bgt.n	8005468 <__sflush_r+0x20>
 800545c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	dc02      	bgt.n	8005468 <__sflush_r+0x20>
 8005462:	2000      	movs	r0, #0
 8005464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800546a:	2e00      	cmp	r6, #0
 800546c:	d0f9      	beq.n	8005462 <__sflush_r+0x1a>
 800546e:	2300      	movs	r3, #0
 8005470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005474:	682f      	ldr	r7, [r5, #0]
 8005476:	6a21      	ldr	r1, [r4, #32]
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	d032      	beq.n	80054e2 <__sflush_r+0x9a>
 800547c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	075a      	lsls	r2, r3, #29
 8005482:	d505      	bpl.n	8005490 <__sflush_r+0x48>
 8005484:	6863      	ldr	r3, [r4, #4]
 8005486:	1ac0      	subs	r0, r0, r3
 8005488:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800548a:	b10b      	cbz	r3, 8005490 <__sflush_r+0x48>
 800548c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800548e:	1ac0      	subs	r0, r0, r3
 8005490:	2300      	movs	r3, #0
 8005492:	4602      	mov	r2, r0
 8005494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005496:	6a21      	ldr	r1, [r4, #32]
 8005498:	4628      	mov	r0, r5
 800549a:	47b0      	blx	r6
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	d106      	bne.n	80054b0 <__sflush_r+0x68>
 80054a2:	6829      	ldr	r1, [r5, #0]
 80054a4:	291d      	cmp	r1, #29
 80054a6:	d82b      	bhi.n	8005500 <__sflush_r+0xb8>
 80054a8:	4a29      	ldr	r2, [pc, #164]	; (8005550 <__sflush_r+0x108>)
 80054aa:	410a      	asrs	r2, r1
 80054ac:	07d6      	lsls	r6, r2, #31
 80054ae:	d427      	bmi.n	8005500 <__sflush_r+0xb8>
 80054b0:	2200      	movs	r2, #0
 80054b2:	6062      	str	r2, [r4, #4]
 80054b4:	04d9      	lsls	r1, r3, #19
 80054b6:	6922      	ldr	r2, [r4, #16]
 80054b8:	6022      	str	r2, [r4, #0]
 80054ba:	d504      	bpl.n	80054c6 <__sflush_r+0x7e>
 80054bc:	1c42      	adds	r2, r0, #1
 80054be:	d101      	bne.n	80054c4 <__sflush_r+0x7c>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b903      	cbnz	r3, 80054c6 <__sflush_r+0x7e>
 80054c4:	6560      	str	r0, [r4, #84]	; 0x54
 80054c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054c8:	602f      	str	r7, [r5, #0]
 80054ca:	2900      	cmp	r1, #0
 80054cc:	d0c9      	beq.n	8005462 <__sflush_r+0x1a>
 80054ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054d2:	4299      	cmp	r1, r3
 80054d4:	d002      	beq.n	80054dc <__sflush_r+0x94>
 80054d6:	4628      	mov	r0, r5
 80054d8:	f7ff fbea 	bl	8004cb0 <_free_r>
 80054dc:	2000      	movs	r0, #0
 80054de:	6360      	str	r0, [r4, #52]	; 0x34
 80054e0:	e7c0      	b.n	8005464 <__sflush_r+0x1c>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b0      	blx	r6
 80054e8:	1c41      	adds	r1, r0, #1
 80054ea:	d1c8      	bne.n	800547e <__sflush_r+0x36>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0c5      	beq.n	800547e <__sflush_r+0x36>
 80054f2:	2b1d      	cmp	r3, #29
 80054f4:	d001      	beq.n	80054fa <__sflush_r+0xb2>
 80054f6:	2b16      	cmp	r3, #22
 80054f8:	d101      	bne.n	80054fe <__sflush_r+0xb6>
 80054fa:	602f      	str	r7, [r5, #0]
 80054fc:	e7b1      	b.n	8005462 <__sflush_r+0x1a>
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005504:	81a3      	strh	r3, [r4, #12]
 8005506:	e7ad      	b.n	8005464 <__sflush_r+0x1c>
 8005508:	690f      	ldr	r7, [r1, #16]
 800550a:	2f00      	cmp	r7, #0
 800550c:	d0a9      	beq.n	8005462 <__sflush_r+0x1a>
 800550e:	0793      	lsls	r3, r2, #30
 8005510:	680e      	ldr	r6, [r1, #0]
 8005512:	bf08      	it	eq
 8005514:	694b      	ldreq	r3, [r1, #20]
 8005516:	600f      	str	r7, [r1, #0]
 8005518:	bf18      	it	ne
 800551a:	2300      	movne	r3, #0
 800551c:	eba6 0807 	sub.w	r8, r6, r7
 8005520:	608b      	str	r3, [r1, #8]
 8005522:	f1b8 0f00 	cmp.w	r8, #0
 8005526:	dd9c      	ble.n	8005462 <__sflush_r+0x1a>
 8005528:	6a21      	ldr	r1, [r4, #32]
 800552a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800552c:	4643      	mov	r3, r8
 800552e:	463a      	mov	r2, r7
 8005530:	4628      	mov	r0, r5
 8005532:	47b0      	blx	r6
 8005534:	2800      	cmp	r0, #0
 8005536:	dc06      	bgt.n	8005546 <__sflush_r+0xfe>
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800553e:	81a3      	strh	r3, [r4, #12]
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	e78e      	b.n	8005464 <__sflush_r+0x1c>
 8005546:	4407      	add	r7, r0
 8005548:	eba8 0800 	sub.w	r8, r8, r0
 800554c:	e7e9      	b.n	8005522 <__sflush_r+0xda>
 800554e:	bf00      	nop
 8005550:	dfbffffe 	.word	0xdfbffffe

08005554 <_fflush_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	690b      	ldr	r3, [r1, #16]
 8005558:	4605      	mov	r5, r0
 800555a:	460c      	mov	r4, r1
 800555c:	b913      	cbnz	r3, 8005564 <_fflush_r+0x10>
 800555e:	2500      	movs	r5, #0
 8005560:	4628      	mov	r0, r5
 8005562:	bd38      	pop	{r3, r4, r5, pc}
 8005564:	b118      	cbz	r0, 800556e <_fflush_r+0x1a>
 8005566:	6a03      	ldr	r3, [r0, #32]
 8005568:	b90b      	cbnz	r3, 800556e <_fflush_r+0x1a>
 800556a:	f7ff fa99 	bl	8004aa0 <__sinit>
 800556e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0f3      	beq.n	800555e <_fflush_r+0xa>
 8005576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005578:	07d0      	lsls	r0, r2, #31
 800557a:	d404      	bmi.n	8005586 <_fflush_r+0x32>
 800557c:	0599      	lsls	r1, r3, #22
 800557e:	d402      	bmi.n	8005586 <_fflush_r+0x32>
 8005580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005582:	f7ff fb92 	bl	8004caa <__retarget_lock_acquire_recursive>
 8005586:	4628      	mov	r0, r5
 8005588:	4621      	mov	r1, r4
 800558a:	f7ff ff5d 	bl	8005448 <__sflush_r>
 800558e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005590:	07da      	lsls	r2, r3, #31
 8005592:	4605      	mov	r5, r0
 8005594:	d4e4      	bmi.n	8005560 <_fflush_r+0xc>
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	059b      	lsls	r3, r3, #22
 800559a:	d4e1      	bmi.n	8005560 <_fflush_r+0xc>
 800559c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800559e:	f7ff fb85 	bl	8004cac <__retarget_lock_release_recursive>
 80055a2:	e7dd      	b.n	8005560 <_fflush_r+0xc>

080055a4 <__swbuf_r>:
 80055a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a6:	460e      	mov	r6, r1
 80055a8:	4614      	mov	r4, r2
 80055aa:	4605      	mov	r5, r0
 80055ac:	b118      	cbz	r0, 80055b6 <__swbuf_r+0x12>
 80055ae:	6a03      	ldr	r3, [r0, #32]
 80055b0:	b90b      	cbnz	r3, 80055b6 <__swbuf_r+0x12>
 80055b2:	f7ff fa75 	bl	8004aa0 <__sinit>
 80055b6:	69a3      	ldr	r3, [r4, #24]
 80055b8:	60a3      	str	r3, [r4, #8]
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	071a      	lsls	r2, r3, #28
 80055be:	d525      	bpl.n	800560c <__swbuf_r+0x68>
 80055c0:	6923      	ldr	r3, [r4, #16]
 80055c2:	b31b      	cbz	r3, 800560c <__swbuf_r+0x68>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	6922      	ldr	r2, [r4, #16]
 80055c8:	1a98      	subs	r0, r3, r2
 80055ca:	6963      	ldr	r3, [r4, #20]
 80055cc:	b2f6      	uxtb	r6, r6
 80055ce:	4283      	cmp	r3, r0
 80055d0:	4637      	mov	r7, r6
 80055d2:	dc04      	bgt.n	80055de <__swbuf_r+0x3a>
 80055d4:	4621      	mov	r1, r4
 80055d6:	4628      	mov	r0, r5
 80055d8:	f7ff ffbc 	bl	8005554 <_fflush_r>
 80055dc:	b9e0      	cbnz	r0, 8005618 <__swbuf_r+0x74>
 80055de:	68a3      	ldr	r3, [r4, #8]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	60a3      	str	r3, [r4, #8]
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	6022      	str	r2, [r4, #0]
 80055ea:	701e      	strb	r6, [r3, #0]
 80055ec:	6962      	ldr	r2, [r4, #20]
 80055ee:	1c43      	adds	r3, r0, #1
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d004      	beq.n	80055fe <__swbuf_r+0x5a>
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	07db      	lsls	r3, r3, #31
 80055f8:	d506      	bpl.n	8005608 <__swbuf_r+0x64>
 80055fa:	2e0a      	cmp	r6, #10
 80055fc:	d104      	bne.n	8005608 <__swbuf_r+0x64>
 80055fe:	4621      	mov	r1, r4
 8005600:	4628      	mov	r0, r5
 8005602:	f7ff ffa7 	bl	8005554 <_fflush_r>
 8005606:	b938      	cbnz	r0, 8005618 <__swbuf_r+0x74>
 8005608:	4638      	mov	r0, r7
 800560a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800560c:	4621      	mov	r1, r4
 800560e:	4628      	mov	r0, r5
 8005610:	f000 f806 	bl	8005620 <__swsetup_r>
 8005614:	2800      	cmp	r0, #0
 8005616:	d0d5      	beq.n	80055c4 <__swbuf_r+0x20>
 8005618:	f04f 37ff 	mov.w	r7, #4294967295
 800561c:	e7f4      	b.n	8005608 <__swbuf_r+0x64>
	...

08005620 <__swsetup_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <__swsetup_r+0xac>)
 8005624:	4605      	mov	r5, r0
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	460c      	mov	r4, r1
 800562a:	b118      	cbz	r0, 8005634 <__swsetup_r+0x14>
 800562c:	6a03      	ldr	r3, [r0, #32]
 800562e:	b90b      	cbnz	r3, 8005634 <__swsetup_r+0x14>
 8005630:	f7ff fa36 	bl	8004aa0 <__sinit>
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800563a:	0718      	lsls	r0, r3, #28
 800563c:	d422      	bmi.n	8005684 <__swsetup_r+0x64>
 800563e:	06d9      	lsls	r1, r3, #27
 8005640:	d407      	bmi.n	8005652 <__swsetup_r+0x32>
 8005642:	2309      	movs	r3, #9
 8005644:	602b      	str	r3, [r5, #0]
 8005646:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800564a:	81a3      	strh	r3, [r4, #12]
 800564c:	f04f 30ff 	mov.w	r0, #4294967295
 8005650:	e034      	b.n	80056bc <__swsetup_r+0x9c>
 8005652:	0758      	lsls	r0, r3, #29
 8005654:	d512      	bpl.n	800567c <__swsetup_r+0x5c>
 8005656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005658:	b141      	cbz	r1, 800566c <__swsetup_r+0x4c>
 800565a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800565e:	4299      	cmp	r1, r3
 8005660:	d002      	beq.n	8005668 <__swsetup_r+0x48>
 8005662:	4628      	mov	r0, r5
 8005664:	f7ff fb24 	bl	8004cb0 <_free_r>
 8005668:	2300      	movs	r3, #0
 800566a:	6363      	str	r3, [r4, #52]	; 0x34
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005672:	81a3      	strh	r3, [r4, #12]
 8005674:	2300      	movs	r3, #0
 8005676:	6063      	str	r3, [r4, #4]
 8005678:	6923      	ldr	r3, [r4, #16]
 800567a:	6023      	str	r3, [r4, #0]
 800567c:	89a3      	ldrh	r3, [r4, #12]
 800567e:	f043 0308 	orr.w	r3, r3, #8
 8005682:	81a3      	strh	r3, [r4, #12]
 8005684:	6923      	ldr	r3, [r4, #16]
 8005686:	b94b      	cbnz	r3, 800569c <__swsetup_r+0x7c>
 8005688:	89a3      	ldrh	r3, [r4, #12]
 800568a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800568e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005692:	d003      	beq.n	800569c <__swsetup_r+0x7c>
 8005694:	4621      	mov	r1, r4
 8005696:	4628      	mov	r0, r5
 8005698:	f000 f850 	bl	800573c <__smakebuf_r>
 800569c:	89a0      	ldrh	r0, [r4, #12]
 800569e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056a2:	f010 0301 	ands.w	r3, r0, #1
 80056a6:	d00a      	beq.n	80056be <__swsetup_r+0x9e>
 80056a8:	2300      	movs	r3, #0
 80056aa:	60a3      	str	r3, [r4, #8]
 80056ac:	6963      	ldr	r3, [r4, #20]
 80056ae:	425b      	negs	r3, r3
 80056b0:	61a3      	str	r3, [r4, #24]
 80056b2:	6923      	ldr	r3, [r4, #16]
 80056b4:	b943      	cbnz	r3, 80056c8 <__swsetup_r+0xa8>
 80056b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056ba:	d1c4      	bne.n	8005646 <__swsetup_r+0x26>
 80056bc:	bd38      	pop	{r3, r4, r5, pc}
 80056be:	0781      	lsls	r1, r0, #30
 80056c0:	bf58      	it	pl
 80056c2:	6963      	ldrpl	r3, [r4, #20]
 80056c4:	60a3      	str	r3, [r4, #8]
 80056c6:	e7f4      	b.n	80056b2 <__swsetup_r+0x92>
 80056c8:	2000      	movs	r0, #0
 80056ca:	e7f7      	b.n	80056bc <__swsetup_r+0x9c>
 80056cc:	2000008c 	.word	0x2000008c

080056d0 <_sbrk_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4d06      	ldr	r5, [pc, #24]	; (80056ec <_sbrk_r+0x1c>)
 80056d4:	2300      	movs	r3, #0
 80056d6:	4604      	mov	r4, r0
 80056d8:	4608      	mov	r0, r1
 80056da:	602b      	str	r3, [r5, #0]
 80056dc:	f7fc f834 	bl	8001748 <_sbrk>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d102      	bne.n	80056ea <_sbrk_r+0x1a>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	b103      	cbz	r3, 80056ea <_sbrk_r+0x1a>
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	200004b8 	.word	0x200004b8

080056f0 <__swhatbuf_r>:
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	460c      	mov	r4, r1
 80056f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f8:	2900      	cmp	r1, #0
 80056fa:	b096      	sub	sp, #88	; 0x58
 80056fc:	4615      	mov	r5, r2
 80056fe:	461e      	mov	r6, r3
 8005700:	da0d      	bge.n	800571e <__swhatbuf_r+0x2e>
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005708:	f04f 0100 	mov.w	r1, #0
 800570c:	bf0c      	ite	eq
 800570e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005712:	2340      	movne	r3, #64	; 0x40
 8005714:	2000      	movs	r0, #0
 8005716:	6031      	str	r1, [r6, #0]
 8005718:	602b      	str	r3, [r5, #0]
 800571a:	b016      	add	sp, #88	; 0x58
 800571c:	bd70      	pop	{r4, r5, r6, pc}
 800571e:	466a      	mov	r2, sp
 8005720:	f000 f848 	bl	80057b4 <_fstat_r>
 8005724:	2800      	cmp	r0, #0
 8005726:	dbec      	blt.n	8005702 <__swhatbuf_r+0x12>
 8005728:	9901      	ldr	r1, [sp, #4]
 800572a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800572e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005732:	4259      	negs	r1, r3
 8005734:	4159      	adcs	r1, r3
 8005736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800573a:	e7eb      	b.n	8005714 <__swhatbuf_r+0x24>

0800573c <__smakebuf_r>:
 800573c:	898b      	ldrh	r3, [r1, #12]
 800573e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005740:	079d      	lsls	r5, r3, #30
 8005742:	4606      	mov	r6, r0
 8005744:	460c      	mov	r4, r1
 8005746:	d507      	bpl.n	8005758 <__smakebuf_r+0x1c>
 8005748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	6123      	str	r3, [r4, #16]
 8005750:	2301      	movs	r3, #1
 8005752:	6163      	str	r3, [r4, #20]
 8005754:	b002      	add	sp, #8
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	ab01      	add	r3, sp, #4
 800575a:	466a      	mov	r2, sp
 800575c:	f7ff ffc8 	bl	80056f0 <__swhatbuf_r>
 8005760:	9900      	ldr	r1, [sp, #0]
 8005762:	4605      	mov	r5, r0
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff fb0f 	bl	8004d88 <_malloc_r>
 800576a:	b948      	cbnz	r0, 8005780 <__smakebuf_r+0x44>
 800576c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005770:	059a      	lsls	r2, r3, #22
 8005772:	d4ef      	bmi.n	8005754 <__smakebuf_r+0x18>
 8005774:	f023 0303 	bic.w	r3, r3, #3
 8005778:	f043 0302 	orr.w	r3, r3, #2
 800577c:	81a3      	strh	r3, [r4, #12]
 800577e:	e7e3      	b.n	8005748 <__smakebuf_r+0xc>
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	6020      	str	r0, [r4, #0]
 8005784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005788:	81a3      	strh	r3, [r4, #12]
 800578a:	9b00      	ldr	r3, [sp, #0]
 800578c:	6163      	str	r3, [r4, #20]
 800578e:	9b01      	ldr	r3, [sp, #4]
 8005790:	6120      	str	r0, [r4, #16]
 8005792:	b15b      	cbz	r3, 80057ac <__smakebuf_r+0x70>
 8005794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005798:	4630      	mov	r0, r6
 800579a:	f000 f81d 	bl	80057d8 <_isatty_r>
 800579e:	b128      	cbz	r0, 80057ac <__smakebuf_r+0x70>
 80057a0:	89a3      	ldrh	r3, [r4, #12]
 80057a2:	f023 0303 	bic.w	r3, r3, #3
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	81a3      	strh	r3, [r4, #12]
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	431d      	orrs	r5, r3
 80057b0:	81a5      	strh	r5, [r4, #12]
 80057b2:	e7cf      	b.n	8005754 <__smakebuf_r+0x18>

080057b4 <_fstat_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4d07      	ldr	r5, [pc, #28]	; (80057d4 <_fstat_r+0x20>)
 80057b8:	2300      	movs	r3, #0
 80057ba:	4604      	mov	r4, r0
 80057bc:	4608      	mov	r0, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	602b      	str	r3, [r5, #0]
 80057c2:	f7fb ff98 	bl	80016f6 <_fstat>
 80057c6:	1c43      	adds	r3, r0, #1
 80057c8:	d102      	bne.n	80057d0 <_fstat_r+0x1c>
 80057ca:	682b      	ldr	r3, [r5, #0]
 80057cc:	b103      	cbz	r3, 80057d0 <_fstat_r+0x1c>
 80057ce:	6023      	str	r3, [r4, #0]
 80057d0:	bd38      	pop	{r3, r4, r5, pc}
 80057d2:	bf00      	nop
 80057d4:	200004b8 	.word	0x200004b8

080057d8 <_isatty_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4d06      	ldr	r5, [pc, #24]	; (80057f4 <_isatty_r+0x1c>)
 80057dc:	2300      	movs	r3, #0
 80057de:	4604      	mov	r4, r0
 80057e0:	4608      	mov	r0, r1
 80057e2:	602b      	str	r3, [r5, #0]
 80057e4:	f7fb ff97 	bl	8001716 <_isatty>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d102      	bne.n	80057f2 <_isatty_r+0x1a>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	b103      	cbz	r3, 80057f2 <_isatty_r+0x1a>
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	200004b8 	.word	0x200004b8

080057f8 <_init>:
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fa:	bf00      	nop
 80057fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fe:	bc08      	pop	{r3}
 8005800:	469e      	mov	lr, r3
 8005802:	4770      	bx	lr

08005804 <_fini>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	bf00      	nop
 8005808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580a:	bc08      	pop	{r3}
 800580c:	469e      	mov	lr, r3
 800580e:	4770      	bx	lr
