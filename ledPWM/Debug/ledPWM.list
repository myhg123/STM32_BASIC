
ledPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005400  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005598  08005598  00015598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005788  08005788  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005790  08005790  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005794  08005794  00015794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08005798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000002c  080057c4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  080057c4  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d21e  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e5a  00000000  00000000  0002d2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  0002f118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c1  00000000  00000000  0002fd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b28  00000000  00000000  00030749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4c1  00000000  00000000  00046271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008de64  00000000  00000000  00054732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003838  00000000  00000000  000e2598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e5dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005580 	.word	0x08005580

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	08005580 	.word	0x08005580

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b970 	b.w	8000dcc <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9e08      	ldr	r6, [sp, #32]
 8000b0a:	460d      	mov	r5, r1
 8000b0c:	4604      	mov	r4, r0
 8000b0e:	460f      	mov	r7, r1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d14a      	bne.n	8000baa <__udivmoddi4+0xa6>
 8000b14:	428a      	cmp	r2, r1
 8000b16:	4694      	mov	ip, r2
 8000b18:	d965      	bls.n	8000be6 <__udivmoddi4+0xe2>
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	b143      	cbz	r3, 8000b32 <__udivmoddi4+0x2e>
 8000b20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b24:	f1c3 0220 	rsb	r2, r3, #32
 8000b28:	409f      	lsls	r7, r3
 8000b2a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2e:	4317      	orrs	r7, r2
 8000b30:	409c      	lsls	r4, r3
 8000b32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b36:	fa1f f58c 	uxth.w	r5, ip
 8000b3a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b3e:	0c22      	lsrs	r2, r4, #16
 8000b40:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b44:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b48:	fb01 f005 	mul.w	r0, r1, r5
 8000b4c:	4290      	cmp	r0, r2
 8000b4e:	d90a      	bls.n	8000b66 <__udivmoddi4+0x62>
 8000b50:	eb1c 0202 	adds.w	r2, ip, r2
 8000b54:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b58:	f080 811c 	bcs.w	8000d94 <__udivmoddi4+0x290>
 8000b5c:	4290      	cmp	r0, r2
 8000b5e:	f240 8119 	bls.w	8000d94 <__udivmoddi4+0x290>
 8000b62:	3902      	subs	r1, #2
 8000b64:	4462      	add	r2, ip
 8000b66:	1a12      	subs	r2, r2, r0
 8000b68:	b2a4      	uxth	r4, r4
 8000b6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b76:	fb00 f505 	mul.w	r5, r0, r5
 8000b7a:	42a5      	cmp	r5, r4
 8000b7c:	d90a      	bls.n	8000b94 <__udivmoddi4+0x90>
 8000b7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b82:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b86:	f080 8107 	bcs.w	8000d98 <__udivmoddi4+0x294>
 8000b8a:	42a5      	cmp	r5, r4
 8000b8c:	f240 8104 	bls.w	8000d98 <__udivmoddi4+0x294>
 8000b90:	4464      	add	r4, ip
 8000b92:	3802      	subs	r0, #2
 8000b94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b98:	1b64      	subs	r4, r4, r5
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	b11e      	cbz	r6, 8000ba6 <__udivmoddi4+0xa2>
 8000b9e:	40dc      	lsrs	r4, r3
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0xbc>
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	f000 80ed 	beq.w	8000d8e <__udivmoddi4+0x28a>
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc0:	fab3 f183 	clz	r1, r3
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	d149      	bne.n	8000c5c <__udivmoddi4+0x158>
 8000bc8:	42ab      	cmp	r3, r5
 8000bca:	d302      	bcc.n	8000bd2 <__udivmoddi4+0xce>
 8000bcc:	4282      	cmp	r2, r0
 8000bce:	f200 80f8 	bhi.w	8000dc2 <__udivmoddi4+0x2be>
 8000bd2:	1a84      	subs	r4, r0, r2
 8000bd4:	eb65 0203 	sbc.w	r2, r5, r3
 8000bd8:	2001      	movs	r0, #1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	2e00      	cmp	r6, #0
 8000bde:	d0e2      	beq.n	8000ba6 <__udivmoddi4+0xa2>
 8000be0:	e9c6 4700 	strd	r4, r7, [r6]
 8000be4:	e7df      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000be6:	b902      	cbnz	r2, 8000bea <__udivmoddi4+0xe6>
 8000be8:	deff      	udf	#255	; 0xff
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8090 	bne.w	8000d14 <__udivmoddi4+0x210>
 8000bf4:	1a8a      	subs	r2, r1, r2
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2101      	movs	r1, #1
 8000c00:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c04:	fb07 2015 	mls	r0, r7, r5, r2
 8000c08:	0c22      	lsrs	r2, r4, #16
 8000c0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c0e:	fb0e f005 	mul.w	r0, lr, r5
 8000c12:	4290      	cmp	r0, r2
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x124>
 8000c16:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x122>
 8000c20:	4290      	cmp	r0, r2
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2b8>
 8000c26:	4645      	mov	r5, r8
 8000c28:	1a12      	subs	r2, r2, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c30:	fb07 2210 	mls	r2, r7, r0, r2
 8000c34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x14e>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x14c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2c2>
 8000c50:	4610      	mov	r0, r2
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c5a:	e79f      	b.n	8000b9c <__udivmoddi4+0x98>
 8000c5c:	f1c1 0720 	rsb	r7, r1, #32
 8000c60:	408b      	lsls	r3, r1
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c72:	40fd      	lsrs	r5, r7
 8000c74:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c78:	4323      	orrs	r3, r4
 8000c7a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	fb09 5518 	mls	r5, r9, r8, r5
 8000c86:	0c1c      	lsrs	r4, r3, #16
 8000c88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c8c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	fa02 f201 	lsl.w	r2, r2, r1
 8000c96:	fa00 f001 	lsl.w	r0, r0, r1
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b0>
 8000c9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2b4>
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2b4>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4464      	add	r4, ip
 8000cb4:	1b64      	subs	r4, r4, r5
 8000cb6:	b29d      	uxth	r5, r3
 8000cb8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cbc:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cc4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1da>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2ac>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2ac>
 8000cda:	3b02      	subs	r3, #2
 8000cdc:	4464      	add	r4, ip
 8000cde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ce2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ce6:	eba4 040e 	sub.w	r4, r4, lr
 8000cea:	42ac      	cmp	r4, r5
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46ae      	mov	lr, r5
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x29c>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x298>
 8000cf4:	b156      	cbz	r6, 8000d0c <__udivmoddi4+0x208>
 8000cf6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cfa:	eb64 040e 	sbc.w	r4, r4, lr
 8000cfe:	fa04 f707 	lsl.w	r7, r4, r7
 8000d02:	40ca      	lsrs	r2, r1
 8000d04:	40cc      	lsrs	r4, r1
 8000d06:	4317      	orrs	r7, r2
 8000d08:	e9c6 7400 	strd	r7, r4, [r6]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	2100      	movs	r1, #0
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	f1c3 0120 	rsb	r1, r3, #32
 8000d18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d1c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d20:	fa25 f101 	lsr.w	r1, r5, r1
 8000d24:	409d      	lsls	r5, r3
 8000d26:	432a      	orrs	r2, r5
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1510 	mls	r5, r7, r0, r1
 8000d38:	0c11      	lsrs	r1, r2, #16
 8000d3a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d3e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d42:	428d      	cmp	r5, r1
 8000d44:	fa04 f403 	lsl.w	r4, r4, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x258>
 8000d4a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b0>
 8000d54:	428d      	cmp	r5, r1
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b0>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1b49      	subs	r1, r1, r5
 8000d5e:	b292      	uxth	r2, r2
 8000d60:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d64:	fb07 1115 	mls	r1, r7, r5, r1
 8000d68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d6c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d70:	4291      	cmp	r1, r2
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x282>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2a8>
 8000d7e:	4291      	cmp	r1, r2
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2a8>
 8000d82:	3d02      	subs	r5, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a52      	subs	r2, r2, r1
 8000d88:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0xfc>
 8000d8e:	4631      	mov	r1, r6
 8000d90:	4630      	mov	r0, r6
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000d94:	4639      	mov	r1, r7
 8000d96:	e6e6      	b.n	8000b66 <__udivmoddi4+0x62>
 8000d98:	4610      	mov	r0, r2
 8000d9a:	e6fb      	b.n	8000b94 <__udivmoddi4+0x90>
 8000d9c:	4548      	cmp	r0, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f0>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000da8:	3b01      	subs	r3, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f0>
 8000dac:	4645      	mov	r5, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x282>
 8000db0:	462b      	mov	r3, r5
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1da>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x258>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b0>
 8000dbc:	3d02      	subs	r5, #2
 8000dbe:	4462      	add	r2, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x124>
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	e70a      	b.n	8000bdc <__udivmoddi4+0xd8>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x14e>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <SysTickCallback>:
int countPulseLed =0;
int countSound = 0;

int soundLUT[]={131,147,165,175,196,220,247,262};

void	SysTickCallback(){
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
	if(countSinLed>0) countSinLed--;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <SysTickCallback+0x44>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	dd04      	ble.n	8000de6 <SysTickCallback+0x16>
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <SysTickCallback+0x44>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <SysTickCallback+0x44>)
 8000de4:	6013      	str	r3, [r2, #0]
	if(countPulseLed>0) countPulseLed--;
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <SysTickCallback+0x48>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	dd04      	ble.n	8000df8 <SysTickCallback+0x28>
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <SysTickCallback+0x48>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <SysTickCallback+0x48>)
 8000df6:	6013      	str	r3, [r2, #0]
	if(countSound>0)	countSound--;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <SysTickCallback+0x4c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	dd04      	ble.n	8000e0a <SysTickCallback+0x3a>
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SysTickCallback+0x4c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <SysTickCallback+0x4c>)
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	20000120 	.word	0x20000120
 8000e18:	20000124 	.word	0x20000124
 8000e1c:	20000128 	.word	0x20000128

08000e20 <setSound>:

void	setSound(int freq){
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	htim3.Instance->ARR = 1000000/ freq -1;
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <setSound+0x34>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e30:	1e5a      	subs	r2, r3, #1
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <setSound+0x38>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
	htim3.Instance->CCR1 = htim3.Instance->ARR/2;
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <setSound+0x38>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <setSound+0x38>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	0852      	lsrs	r2, r2, #1
 8000e44:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	000f4240 	.word	0x000f4240
 8000e58:	20000090 	.word	0x20000090

08000e5c <stopSound>:

void stopSound(){
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1 =0;
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <stopSound+0x18>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2200      	movs	r2, #0
 8000e66:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000090 	.word	0x20000090

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f000 fcfd 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f923 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 fac3 	bl	8001410 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e8a:	f000 f97d 	bl	8001188 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e8e:	f000 fa1d 	bl	80012cc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000e92:	f000 fa93 	bl	80013bc <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  initUart(&huart2);
 8000e96:	4882      	ldr	r0, [pc, #520]	; (80010a0 <main+0x228>)
 8000e98:	f000 fc4c 	bl	8001734 <initUart>
  // start pwm
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4881      	ldr	r0, [pc, #516]	; (80010a4 <main+0x22c>)
 8000ea0:	f001 fdba 	bl	8002a18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4880      	ldr	r0, [pc, #512]	; (80010a8 <main+0x230>)
 8000ea8:	f001 fdb6 	bl	8002a18 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if(countSinLed == 0){
 8000eac:	4b7f      	ldr	r3, [pc, #508]	; (80010ac <main+0x234>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d150      	bne.n	8000f56 <main+0xde>
  		countSinLed = 5;
 8000eb4:	4b7d      	ldr	r3, [pc, #500]	; (80010ac <main+0x234>)
 8000eb6:	2205      	movs	r2, #5
 8000eb8:	601a      	str	r2, [r3, #0]
    	static int angle = 0;
    	angle++;
 8000eba:	4b7d      	ldr	r3, [pc, #500]	; (80010b0 <main+0x238>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	4a7b      	ldr	r2, [pc, #492]	; (80010b0 <main+0x238>)
 8000ec2:	6013      	str	r3, [r2, #0]
    	angle %= 360;
 8000ec4:	4b7a      	ldr	r3, [pc, #488]	; (80010b0 <main+0x238>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a7a      	ldr	r2, [pc, #488]	; (80010b4 <main+0x23c>)
 8000eca:	fb82 1203 	smull	r1, r2, r2, r3
 8000ece:	441a      	add	r2, r3
 8000ed0:	1211      	asrs	r1, r2, #8
 8000ed2:	17da      	asrs	r2, r3, #31
 8000ed4:	1a8a      	subs	r2, r1, r2
 8000ed6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000eda:	fb01 f202 	mul.w	r2, r1, r2
 8000ede:	1a9a      	subs	r2, r3, r2
 8000ee0:	4b73      	ldr	r3, [pc, #460]	; (80010b0 <main+0x238>)
 8000ee2:	601a      	str	r2, [r3, #0]
    	int value = sin(angle*3.14/180) * 499 + 499;
 8000ee4:	4b72      	ldr	r3, [pc, #456]	; (80010b0 <main+0x238>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fac7 	bl	800047c <__aeabi_i2d>
 8000eee:	a368      	add	r3, pc, #416	; (adr r3, 8001090 <main+0x218>)
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	f7ff fb2c 	bl	8000550 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4610      	mov	r0, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	4b6c      	ldr	r3, [pc, #432]	; (80010b8 <main+0x240>)
 8000f06:	f7ff fc4d 	bl	80007a4 <__aeabi_ddiv>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	ec43 2b17 	vmov	d7, r2, r3
 8000f12:	eeb0 0a47 	vmov.f32	s0, s14
 8000f16:	eef0 0a67 	vmov.f32	s1, s15
 8000f1a:	f003 faf1 	bl	8004500 <sin>
 8000f1e:	ec51 0b10 	vmov	r0, r1, d0
 8000f22:	a35d      	add	r3, pc, #372	; (adr r3, 8001098 <main+0x220>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	f7ff fb12 	bl	8000550 <__aeabi_dmul>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4610      	mov	r0, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	a358      	add	r3, pc, #352	; (adr r3, 8001098 <main+0x220>)
 8000f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3a:	f7ff f953 	bl	80001e4 <__adddf3>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4610      	mov	r0, r2
 8000f44:	4619      	mov	r1, r3
 8000f46:	f7ff fd9d 	bl	8000a84 <__aeabi_d2iz>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	607b      	str	r3, [r7, #4]
    	htim1.Instance->CCR1=value;
 8000f4e:	4b55      	ldr	r3, [pc, #340]	; (80010a4 <main+0x22c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	635a      	str	r2, [r3, #52]	; 0x34
  	}
  	if(countPulseLed ==0){
 8000f56:	4b59      	ldr	r3, [pc, #356]	; (80010bc <main+0x244>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d107      	bne.n	8000f6e <main+0xf6>
  		countPulseLed = 125;
 8000f5e:	4b57      	ldr	r3, [pc, #348]	; (80010bc <main+0x244>)
 8000f60:	227d      	movs	r2, #125	; 0x7d
 8000f62:	601a      	str	r2, [r3, #0]
  		HAL_GPIO_TogglePin(Pulse_GPIO_Port, Pulse_Pin);
 8000f64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f68:	4855      	ldr	r0, [pc, #340]	; (80010c0 <main+0x248>)
 8000f6a:	f001 f83a 	bl	8001fe2 <HAL_GPIO_TogglePin>
  	}

  	if(countSound == 0){
 8000f6e:	4b55      	ldr	r3, [pc, #340]	; (80010c4 <main+0x24c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d19a      	bne.n	8000eac <main+0x34>
  		countSound = 500;
 8000f76:	4b53      	ldr	r3, [pc, #332]	; (80010c4 <main+0x24c>)
 8000f78:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f7c:	601a      	str	r2, [r3, #0]
  		stopSound();
 8000f7e:	f7ff ff6d 	bl	8000e5c <stopSound>
  		char ch = getChar();
 8000f82:	f000 fc1f 	bl	80017c4 <getChar>
 8000f86:	4603      	mov	r3, r0
 8000f88:	70fb      	strb	r3, [r7, #3]
  		switch(ch){
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	3b43      	subs	r3, #67	; 0x43
 8000f8e:	2b24      	cmp	r3, #36	; 0x24
 8000f90:	d88c      	bhi.n	8000eac <main+0x34>
 8000f92:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <main+0x120>)
 8000f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f98:	08001081 	.word	0x08001081
 8000f9c:	08000ead 	.word	0x08000ead
 8000fa0:	08000ead 	.word	0x08000ead
 8000fa4:	08000ead 	.word	0x08000ead
 8000fa8:	08000ead 	.word	0x08000ead
 8000fac:	08000ead 	.word	0x08000ead
 8000fb0:	08000ead 	.word	0x08000ead
 8000fb4:	08000ead 	.word	0x08000ead
 8000fb8:	08000ead 	.word	0x08000ead
 8000fbc:	08000ead 	.word	0x08000ead
 8000fc0:	08000ead 	.word	0x08000ead
 8000fc4:	08000ead 	.word	0x08000ead
 8000fc8:	08000ead 	.word	0x08000ead
 8000fcc:	08000ead 	.word	0x08000ead
 8000fd0:	08000ead 	.word	0x08000ead
 8000fd4:	08000ead 	.word	0x08000ead
 8000fd8:	08000ead 	.word	0x08000ead
 8000fdc:	08000ead 	.word	0x08000ead
 8000fe0:	08000ead 	.word	0x08000ead
 8000fe4:	08000ead 	.word	0x08000ead
 8000fe8:	08000ead 	.word	0x08000ead
 8000fec:	08000ead 	.word	0x08000ead
 8000ff0:	08000ead 	.word	0x08000ead
 8000ff4:	08000ead 	.word	0x08000ead
 8000ff8:	08000ead 	.word	0x08000ead
 8000ffc:	08000ead 	.word	0x08000ead
 8001000:	08000ead 	.word	0x08000ead
 8001004:	08000ead 	.word	0x08000ead
 8001008:	08000ead 	.word	0x08000ead
 800100c:	08000ead 	.word	0x08000ead
 8001010:	08001069 	.word	0x08001069
 8001014:	08001075 	.word	0x08001075
 8001018:	0800102d 	.word	0x0800102d
 800101c:	08001039 	.word	0x08001039
 8001020:	08001045 	.word	0x08001045
 8001024:	08001051 	.word	0x08001051
 8001028:	0800105d 	.word	0x0800105d
  		case 'c':
  			setSound(soundLUT[0]);
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <main+0x250>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fef5 	bl	8000e20 <setSound>
  			break;
 8001036:	e02a      	b.n	800108e <main+0x216>
  		case 'd':
  			setSound(soundLUT[1]);
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <main+0x250>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff feef 	bl	8000e20 <setSound>
  			break;
 8001042:	e024      	b.n	800108e <main+0x216>
  		case 'e':
  			setSound(soundLUT[2]);
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <main+0x250>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fee9 	bl	8000e20 <setSound>
  			break;
 800104e:	e01e      	b.n	800108e <main+0x216>
  		case 'f':
  			setSound(soundLUT[3]);
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <main+0x250>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fee3 	bl	8000e20 <setSound>
  			break;
 800105a:	e018      	b.n	800108e <main+0x216>
  		case 'g':
  			setSound(soundLUT[4]);
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <main+0x250>)
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fedd 	bl	8000e20 <setSound>
  			break;
 8001066:	e012      	b.n	800108e <main+0x216>
  		case 'a':
  			setSound(soundLUT[5]);
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <main+0x250>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fed7 	bl	8000e20 <setSound>
  			break;
 8001072:	e00c      	b.n	800108e <main+0x216>
  		case 'b':
  			setSound(soundLUT[6]);
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <main+0x250>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fed1 	bl	8000e20 <setSound>
  			break;
 800107e:	e006      	b.n	800108e <main+0x216>
  		case 'C':
  			setSound(soundLUT[7]);
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <main+0x250>)
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fecb 	bl	8000e20 <setSound>
  			break;
 800108a:	bf00      	nop
 800108c:	e70e      	b.n	8000eac <main+0x34>
  	if(countSinLed == 0){
 800108e:	e70d      	b.n	8000eac <main+0x34>
 8001090:	51eb851f 	.word	0x51eb851f
 8001094:	40091eb8 	.word	0x40091eb8
 8001098:	00000000 	.word	0x00000000
 800109c:	407f3000 	.word	0x407f3000
 80010a0:	200000d8 	.word	0x200000d8
 80010a4:	20000048 	.word	0x20000048
 80010a8:	20000090 	.word	0x20000090
 80010ac:	20000120 	.word	0x20000120
 80010b0:	2000012c 	.word	0x2000012c
 80010b4:	b60b60b7 	.word	0xb60b60b7
 80010b8:	40668000 	.word	0x40668000
 80010bc:	20000124 	.word	0x20000124
 80010c0:	40020000 	.word	0x40020000
 80010c4:	20000128 	.word	0x20000128
 80010c8:	20000000 	.word	0x20000000

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	; 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	2230      	movs	r2, #48	; 0x30
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 f9e2 	bl	80044a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <SystemClock_Config+0xb4>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <SystemClock_Config+0xb4>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <SystemClock_Config+0xb4>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <SystemClock_Config+0xb8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <SystemClock_Config+0xb8>)
 8001116:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <SystemClock_Config+0xb8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001128:	2302      	movs	r3, #2
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112c:	2301      	movs	r3, #1
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001130:	2310      	movs	r3, #16
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001134:	2300      	movs	r3, #0
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	4618      	mov	r0, r3
 800113e:	f000 ff6b 	bl	8002018 <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001148:	f000 f996 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114c:	230f      	movs	r3, #15
 800114e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f001 f9ce 	bl	8002508 <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001172:	f000 f981 	bl	8001478 <Error_Handler>
  }
}
 8001176:	bf00      	nop
 8001178:	3750      	adds	r7, #80	; 0x50
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000

08001188 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b096      	sub	sp, #88	; 0x58
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2220      	movs	r2, #32
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f003 f96f 	bl	80044a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c6:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <MX_TIM1_Init+0x13c>)
 80011c8:	4a3f      	ldr	r2, [pc, #252]	; (80012c8 <MX_TIM1_Init+0x140>)
 80011ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80011cc:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <MX_TIM1_Init+0x13c>)
 80011ce:	220f      	movs	r2, #15
 80011d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <MX_TIM1_Init+0x13c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80011d8:	4b3a      	ldr	r3, [pc, #232]	; (80012c4 <MX_TIM1_Init+0x13c>)
 80011da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <MX_TIM1_Init+0x13c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <MX_TIM1_Init+0x13c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <MX_TIM1_Init+0x13c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011f2:	4834      	ldr	r0, [pc, #208]	; (80012c4 <MX_TIM1_Init+0x13c>)
 80011f4:	f001 fb68 	bl	80028c8 <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011fe:	f000 f93b 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001208:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800120c:	4619      	mov	r1, r3
 800120e:	482d      	ldr	r0, [pc, #180]	; (80012c4 <MX_TIM1_Init+0x13c>)
 8001210:	f001 fd74 	bl	8002cfc <HAL_TIM_ConfigClockSource>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800121a:	f000 f92d 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800121e:	4829      	ldr	r0, [pc, #164]	; (80012c4 <MX_TIM1_Init+0x13c>)
 8001220:	f001 fba1 	bl	8002966 <HAL_TIM_PWM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800122a:	f000 f925 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001236:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800123a:	4619      	mov	r1, r3
 800123c:	4821      	ldr	r0, [pc, #132]	; (80012c4 <MX_TIM1_Init+0x13c>)
 800123e:	f002 f8fd 	bl	800343c <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001248:	f000 f916 	bl	8001478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124c:	2360      	movs	r3, #96	; 0x60
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500-1;
 8001250:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	2200      	movs	r2, #0
 8001270:	4619      	mov	r1, r3
 8001272:	4814      	ldr	r0, [pc, #80]	; (80012c4 <MX_TIM1_Init+0x13c>)
 8001274:	f001 fc80 	bl	8002b78 <HAL_TIM_PWM_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800127e:	f000 f8fb 	bl	8001478 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4807      	ldr	r0, [pc, #28]	; (80012c4 <MX_TIM1_Init+0x13c>)
 80012a6:	f002 f937 	bl	8003518 <HAL_TIMEx_ConfigBreakDeadTime>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80012b0:	f000 f8e2 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <MX_TIM1_Init+0x13c>)
 80012b6:	f000 f945 	bl	8001544 <HAL_TIM_MspPostInit>

}
 80012ba:	bf00      	nop
 80012bc:	3758      	adds	r7, #88	; 0x58
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000048 	.word	0x20000048
 80012c8:	40010000 	.word	0x40010000

080012cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	; 0x38
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012fc:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <MX_TIM3_Init+0xe8>)
 80012fe:	4a2e      	ldr	r2, [pc, #184]	; (80013b8 <MX_TIM3_Init+0xec>)
 8001300:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <MX_TIM3_Init+0xe8>)
 8001304:	220f      	movs	r2, #15
 8001306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <MX_TIM3_Init+0xe8>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800130e:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <MX_TIM3_Init+0xe8>)
 8001310:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001314:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001316:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <MX_TIM3_Init+0xe8>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <MX_TIM3_Init+0xe8>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001322:	4824      	ldr	r0, [pc, #144]	; (80013b4 <MX_TIM3_Init+0xe8>)
 8001324:	f001 fad0 	bl	80028c8 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800132e:	f000 f8a3 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133c:	4619      	mov	r1, r3
 800133e:	481d      	ldr	r0, [pc, #116]	; (80013b4 <MX_TIM3_Init+0xe8>)
 8001340:	f001 fcdc 	bl	8002cfc <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800134a:	f000 f895 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800134e:	4819      	ldr	r0, [pc, #100]	; (80013b4 <MX_TIM3_Init+0xe8>)
 8001350:	f001 fb09 	bl	8002966 <HAL_TIM_PWM_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800135a:	f000 f88d 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	4619      	mov	r1, r3
 800136c:	4811      	ldr	r0, [pc, #68]	; (80013b4 <MX_TIM3_Init+0xe8>)
 800136e:	f002 f865 	bl	800343c <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001378:	f000 f87e 	bl	8001478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137c:	2360      	movs	r3, #96	; 0x60
 800137e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001380:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	4807      	ldr	r0, [pc, #28]	; (80013b4 <MX_TIM3_Init+0xe8>)
 8001396:	f001 fbef 	bl	8002b78 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80013a0:	f000 f86a 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <MX_TIM3_Init+0xe8>)
 80013a6:	f000 f8cd 	bl	8001544 <HAL_TIM_MspPostInit>

}
 80013aa:	bf00      	nop
 80013ac:	3738      	adds	r7, #56	; 0x38
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000090 	.word	0x20000090
 80013b8:	40000400 	.word	0x40000400

080013bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <MX_USART2_UART_Init+0x50>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013f4:	f002 f8e2 	bl	80035bc <HAL_UART_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013fe:	f000 f83b 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200000d8 	.word	0x200000d8
 800140c:	40004400 	.word	0x40004400

08001410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_GPIO_Init+0x60>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a10      	ldr	r2, [pc, #64]	; (8001470 <MX_GPIO_Init+0x60>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6313      	str	r3, [r2, #48]	; 0x30
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_GPIO_Init+0x60>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pulse_GPIO_Port, Pulse_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001446:	480b      	ldr	r0, [pc, #44]	; (8001474 <MX_GPIO_Init+0x64>)
 8001448:	f000 fdb2 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Pulse_Pin */
  GPIO_InitStruct.Pin = Pulse_Pin;
 800144c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001450:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Pulse_GPIO_Port, &GPIO_InitStruct);
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_GPIO_Init+0x64>)
 8001464:	f000 fc20 	bl	8001ca8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001468:	bf00      	nop
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	40020000 	.word	0x40020000

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
	...

08001484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <HAL_MspInit+0x4c>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_MspInit+0x4c>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_MspInit+0x4c>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a15      	ldr	r2, [pc, #84]	; (8001538 <HAL_TIM_Base_MspInit+0x64>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d10e      	bne.n	8001504 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <HAL_TIM_Base_MspInit+0x68>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a13      	ldr	r2, [pc, #76]	; (800153c <HAL_TIM_Base_MspInit+0x68>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_TIM_Base_MspInit+0x68>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001502:	e012      	b.n	800152a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <HAL_TIM_Base_MspInit+0x6c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d10d      	bne.n	800152a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_TIM_Base_MspInit+0x68>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_TIM_Base_MspInit+0x68>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <HAL_TIM_Base_MspInit+0x68>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40010000 	.word	0x40010000
 800153c:	40023800 	.word	0x40023800
 8001540:	40000400 	.word	0x40000400

08001544 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <HAL_TIM_MspPostInit+0xb0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d11f      	bne.n	80015a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <HAL_TIM_MspPostInit+0xb4>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <HAL_TIM_MspPostInit+0xb4>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_TIM_MspPostInit+0xb4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001594:	2301      	movs	r3, #1
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4817      	ldr	r0, [pc, #92]	; (80015fc <HAL_TIM_MspPostInit+0xb8>)
 80015a0:	f000 fb82 	bl	8001ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015a4:	e022      	b.n	80015ec <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a15      	ldr	r2, [pc, #84]	; (8001600 <HAL_TIM_MspPostInit+0xbc>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d11d      	bne.n	80015ec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_TIM_MspPostInit+0xb4>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <HAL_TIM_MspPostInit+0xb4>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6313      	str	r3, [r2, #48]	; 0x30
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_TIM_MspPostInit+0xb4>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015cc:	2340      	movs	r3, #64	; 0x40
 80015ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015dc:	2302      	movs	r3, #2
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_TIM_MspPostInit+0xb8>)
 80015e8:	f000 fb5e 	bl	8001ca8 <HAL_GPIO_Init>
}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	; 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40010000 	.word	0x40010000
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40000400 	.word	0x40000400

08001604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_UART_MspInit+0x94>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d133      	bne.n	800168e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <HAL_UART_MspInit+0x98>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a1b      	ldr	r2, [pc, #108]	; (800169c <HAL_UART_MspInit+0x98>)
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_UART_MspInit+0x98>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_UART_MspInit+0x98>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a14      	ldr	r2, [pc, #80]	; (800169c <HAL_UART_MspInit+0x98>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_UART_MspInit+0x98>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800165e:	230c      	movs	r3, #12
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800166e:	2307      	movs	r3, #7
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4809      	ldr	r0, [pc, #36]	; (80016a0 <HAL_UART_MspInit+0x9c>)
 800167a:	f000 fb15 	bl	8001ca8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	2026      	movs	r0, #38	; 0x26
 8001684:	f000 fa47 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001688:	2026      	movs	r0, #38	; 0x26
 800168a:	f000 fa60 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	3728      	adds	r7, #40	; 0x28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40004400 	.word	0x40004400
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020000 	.word	0x40020000

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SysTickCallback();
 80016f0:	f7ff fb6e 	bl	8000dd0 <SysTickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f4:	f000 f914 	bl	8001920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <USART2_IRQHandler+0x10>)
 8001702:	f001 ffd1 	bl	80036a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200000d8 	.word	0x200000d8

08001710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <SystemInit+0x20>)
 8001716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <SystemInit+0x20>)
 800171c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <initUart>:
int rxBufferPp; // put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// init device
void initUart(UART_HandleTypeDef *inHuart){
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	myHuart = inHuart;
 800173c:	4a06      	ldr	r2, [pc, #24]	; (8001758 <initUart+0x24>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <initUart+0x24>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2201      	movs	r2, #1
 8001748:	4904      	ldr	r1, [pc, #16]	; (800175c <initUart+0x28>)
 800174a:	4618      	mov	r0, r3
 800174c:	f001 ff86 	bl	800365c <HAL_UART_Receive_IT>
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000130 	.word	0x20000130
 800175c:	2000023b 	.word	0x2000023b

08001760 <HAL_UART_RxCpltCallback>:

// process received charactor
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++]=rxChar;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_UART_RxCpltCallback+0x50>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	4910      	ldr	r1, [pc, #64]	; (80017b0 <HAL_UART_RxCpltCallback+0x50>)
 8001770:	600a      	str	r2, [r1, #0]
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <HAL_UART_RxCpltCallback+0x54>)
 8001774:	7811      	ldrb	r1, [r2, #0]
 8001776:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <HAL_UART_RxCpltCallback+0x58>)
 8001778:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <HAL_UART_RxCpltCallback+0x50>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_UART_RxCpltCallback+0x5c>)
 8001780:	fb83 1302 	smull	r1, r3, r3, r2
 8001784:	4413      	add	r3, r2
 8001786:	11d9      	asrs	r1, r3, #7
 8001788:	17d3      	asrs	r3, r2, #31
 800178a:	1ac9      	subs	r1, r1, r3
 800178c:	460b      	mov	r3, r1
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	1a5b      	subs	r3, r3, r1
 8001792:	1ad1      	subs	r1, r2, r3
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_UART_RxCpltCallback+0x50>)
 8001796:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_UART_RxCpltCallback+0x60>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	4905      	ldr	r1, [pc, #20]	; (80017b4 <HAL_UART_RxCpltCallback+0x54>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f001 ff5b 	bl	800365c <HAL_UART_Receive_IT>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000138 	.word	0x20000138
 80017b4:	2000023b 	.word	0x2000023b
 80017b8:	2000013c 	.word	0x2000013c
 80017bc:	80808081 	.word	0x80808081
 80017c0:	20000130 	.word	0x20000130

080017c4 <getChar>:

// get charator from buffer
uint8_t getChar(){
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
	uint8_t result;
	if(rxBufferGp == rxBufferPp) return 0;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <getChar+0x54>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <getChar+0x58>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d101      	bne.n	80017da <getChar+0x16>
 80017d6:	2300      	movs	r3, #0
 80017d8:	e017      	b.n	800180a <getChar+0x46>
	result = rxBuffer[rxBufferGp++];
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <getChar+0x54>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	490d      	ldr	r1, [pc, #52]	; (8001818 <getChar+0x54>)
 80017e2:	600a      	str	r2, [r1, #0]
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <getChar+0x5c>)
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	71fb      	strb	r3, [r7, #7]
	rxBufferGp %= rxBufferMax;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <getChar+0x54>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <getChar+0x60>)
 80017f0:	fb83 1302 	smull	r1, r3, r3, r2
 80017f4:	4413      	add	r3, r2
 80017f6:	11d9      	asrs	r1, r3, #7
 80017f8:	17d3      	asrs	r3, r2, #31
 80017fa:	1ac9      	subs	r1, r1, r3
 80017fc:	460b      	mov	r3, r1
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	1a5b      	subs	r3, r3, r1
 8001802:	1ad1      	subs	r1, r2, r3
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <getChar+0x54>)
 8001806:	6019      	str	r1, [r3, #0]
	return result;
 8001808:	79fb      	ldrb	r3, [r7, #7]
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000134 	.word	0x20000134
 800181c:	20000138 	.word	0x20000138
 8001820:	2000013c 	.word	0x2000013c
 8001824:	80808081 	.word	0x80808081

08001828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001860 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800182c:	f7ff ff70 	bl	8001710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001832:	490d      	ldr	r1, [pc, #52]	; (8001868 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001848:	4c0a      	ldr	r4, [pc, #40]	; (8001874 <LoopFillZerobss+0x22>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001856:	f002 fe2d 	bl	80044b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185a:	f7ff fb0d 	bl	8000e78 <main>
  bx  lr    
 800185e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001860:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800186c:	08005798 	.word	0x08005798
  ldr r2, =_sbss
 8001870:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001874:	20000240 	.word	0x20000240

08001878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC_IRQHandler>
	...

0800187c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_Init+0x40>)
 8001886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <HAL_Init+0x40>)
 8001892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001896:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_Init+0x40>)
 800189e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f000 f92b 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018aa:	200f      	movs	r0, #15
 80018ac:	f000 f808 	bl	80018c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b0:	f7ff fde8 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023c00 	.word	0x40023c00

080018c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x54>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_InitTick+0x58>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018da:	fbb2 f3f3 	udiv	r3, r2, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f943 	bl	8001b6a <HAL_SYSTICK_Config>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00e      	b.n	800190c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b0f      	cmp	r3, #15
 80018f2:	d80a      	bhi.n	800190a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f4:	2200      	movs	r2, #0
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f000 f90b 	bl	8001b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <HAL_InitTick+0x5c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000020 	.word	0x20000020
 8001918:	20000028 	.word	0x20000028
 800191c:	20000024 	.word	0x20000024

08001920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_IncTick+0x20>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_IncTick+0x24>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <HAL_IncTick+0x24>)
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000028 	.word	0x20000028
 8001944:	2000023c 	.word	0x2000023c

08001948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_GetTick+0x14>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	2000023c 	.word	0x2000023c

08001960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800198c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0b      	blt.n	80019ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	4907      	ldr	r1, [pc, #28]	; (80019fc <__NVIC_EnableIRQ+0x38>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	2001      	movs	r0, #1
 80019e6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db0a      	blt.n	8001a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	490c      	ldr	r1, [pc, #48]	; (8001a4c <__NVIC_SetPriority+0x4c>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a28:	e00a      	b.n	8001a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4908      	ldr	r1, [pc, #32]	; (8001a50 <__NVIC_SetPriority+0x50>)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3b04      	subs	r3, #4
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	761a      	strb	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e100 	.word	0xe000e100
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f1c3 0307 	rsb	r3, r3, #7
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf28      	it	cs
 8001a72:	2304      	movcs	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d902      	bls.n	8001a84 <NVIC_EncodePriority+0x30>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	e000      	b.n	8001a86 <NVIC_EncodePriority+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	4313      	orrs	r3, r2
         );
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001acc:	d301      	bcc.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00f      	b.n	8001af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <SysTick_Config+0x40>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	210f      	movs	r1, #15
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f7ff ff8e 	bl	8001a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SysTick_Config+0x40>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <SysTick_Config+0x40>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff29 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff3e 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff8e 	bl	8001a54 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5d 	bl	8001a00 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff31 	bl	80019c4 <__NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffa2 	bl	8001abc <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff feda 	bl	8001948 <HAL_GetTick>
 8001b94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d008      	beq.n	8001bb4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e052      	b.n	8001c5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0216 	bic.w	r2, r2, #22
 8001bc2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bd2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d103      	bne.n	8001be4 <HAL_DMA_Abort+0x62>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d007      	beq.n	8001bf4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0208 	bic.w	r2, r2, #8
 8001bf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c04:	e013      	b.n	8001c2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c06:	f7ff fe9f 	bl	8001948 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d90c      	bls.n	8001c2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e015      	b.n	8001c5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1e4      	bne.n	8001c06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c40:	223f      	movs	r2, #63	; 0x3f
 8001c42:	409a      	lsls	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d004      	beq.n	8001c80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e00c      	b.n	8001c9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2205      	movs	r2, #5
 8001c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	e159      	b.n	8001f78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	f040 8148 	bne.w	8001f72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d005      	beq.n	8001cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d130      	bne.n	8001d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	2203      	movs	r2, #3
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d30:	2201      	movs	r2, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 0201 	and.w	r2, r3, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d017      	beq.n	8001d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d123      	bne.n	8001dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	08da      	lsrs	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3208      	adds	r2, #8
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	08da      	lsrs	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3208      	adds	r2, #8
 8001de6:	69b9      	ldr	r1, [r7, #24]
 8001de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0203 	and.w	r2, r3, #3
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a2 	beq.w	8001f72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a56      	ldr	r2, [pc, #344]	; (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b54      	ldr	r3, [pc, #336]	; (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4a:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3302      	adds	r3, #2
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	220f      	movs	r2, #15
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a49      	ldr	r2, [pc, #292]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d019      	beq.n	8001eaa <HAL_GPIO_Init+0x202>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_GPIO_Init+0x2f4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0x1fe>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a47      	ldr	r2, [pc, #284]	; (8001fa0 <HAL_GPIO_Init+0x2f8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00d      	beq.n	8001ea2 <HAL_GPIO_Init+0x1fa>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a46      	ldr	r2, [pc, #280]	; (8001fa4 <HAL_GPIO_Init+0x2fc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x1f6>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a45      	ldr	r2, [pc, #276]	; (8001fa8 <HAL_GPIO_Init+0x300>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_Init+0x1f2>
 8001e96:	2304      	movs	r3, #4
 8001e98:	e008      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e004      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	f002 0203 	and.w	r2, r2, #3
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ebc:	4935      	ldr	r1, [pc, #212]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eca:	4b38      	ldr	r3, [pc, #224]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eee:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f18:	4a24      	ldr	r2, [pc, #144]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f42:	4a1a      	ldr	r2, [pc, #104]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f6c:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3301      	adds	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b0f      	cmp	r3, #15
 8001f7c:	f67f aea2 	bls.w	8001cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40013800 	.word	0x40013800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	40020c00 	.word	0x40020c00
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40013c00 	.word	0x40013c00

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fcc:	e003      	b.n	8001fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	041a      	lsls	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	619a      	str	r2, [r3, #24]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ff4:	887a      	ldrh	r2, [r7, #2]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	041a      	lsls	r2, r3, #16
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	887b      	ldrh	r3, [r7, #2]
 8002002:	400b      	ands	r3, r1
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	619a      	str	r2, [r3, #24]
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e267      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d075      	beq.n	8002122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002036:	4b88      	ldr	r3, [pc, #544]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b04      	cmp	r3, #4
 8002040:	d00c      	beq.n	800205c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002042:	4b85      	ldr	r3, [pc, #532]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800204a:	2b08      	cmp	r3, #8
 800204c:	d112      	bne.n	8002074 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800204e:	4b82      	ldr	r3, [pc, #520]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800205a:	d10b      	bne.n	8002074 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	4b7e      	ldr	r3, [pc, #504]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d05b      	beq.n	8002120 <HAL_RCC_OscConfig+0x108>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d157      	bne.n	8002120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e242      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207c:	d106      	bne.n	800208c <HAL_RCC_OscConfig+0x74>
 800207e:	4b76      	ldr	r3, [pc, #472]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a75      	ldr	r2, [pc, #468]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e01d      	b.n	80020c8 <HAL_RCC_OscConfig+0xb0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x98>
 8002096:	4b70      	ldr	r3, [pc, #448]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a6f      	ldr	r2, [pc, #444]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 800209c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b6d      	ldr	r3, [pc, #436]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a6c      	ldr	r2, [pc, #432]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_OscConfig+0xb0>
 80020b0:	4b69      	ldr	r3, [pc, #420]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a68      	ldr	r2, [pc, #416]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4b66      	ldr	r3, [pc, #408]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a65      	ldr	r2, [pc, #404]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d013      	beq.n	80020f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff fc3a 	bl	8001948 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d8:	f7ff fc36 	bl	8001948 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e207      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b5b      	ldr	r3, [pc, #364]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0xc0>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff fc26 	bl	8001948 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002100:	f7ff fc22 	bl	8001948 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e1f3      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	4b51      	ldr	r3, [pc, #324]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0xe8>
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d063      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800212e:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002142:	2b08      	cmp	r3, #8
 8002144:	d11c      	bne.n	8002180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002146:	4b44      	ldr	r3, [pc, #272]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d116      	bne.n	8002180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	4b41      	ldr	r3, [pc, #260]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_RCC_OscConfig+0x152>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e1c7      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216a:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4937      	ldr	r1, [pc, #220]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	e03a      	b.n	80021f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d020      	beq.n	80021ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002188:	4b34      	ldr	r3, [pc, #208]	; (800225c <HAL_RCC_OscConfig+0x244>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7ff fbdb 	bl	8001948 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002196:	f7ff fbd7 	bl	8001948 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1a8      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4925      	ldr	r1, [pc, #148]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]
 80021c8:	e015      	b.n	80021f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ca:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_RCC_OscConfig+0x244>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff fbba 	bl	8001948 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d8:	f7ff fbb6 	bl	8001948 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e187      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d036      	beq.n	8002270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d016      	beq.n	8002238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_RCC_OscConfig+0x248>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7ff fb9a 	bl	8001948 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002218:	f7ff fb96 	bl	8001948 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e167      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 800222c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x200>
 8002236:	e01b      	b.n	8002270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_RCC_OscConfig+0x248>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7ff fb83 	bl	8001948 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002244:	e00e      	b.n	8002264 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002246:	f7ff fb7f 	bl	8001948 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d907      	bls.n	8002264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e150      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
 8002258:	40023800 	.word	0x40023800
 800225c:	42470000 	.word	0x42470000
 8002260:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	4b88      	ldr	r3, [pc, #544]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ea      	bne.n	8002246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8097 	beq.w	80023ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002282:	4b81      	ldr	r3, [pc, #516]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	4b7d      	ldr	r3, [pc, #500]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	4a7c      	ldr	r2, [pc, #496]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	6413      	str	r3, [r2, #64]	; 0x40
 800229e:	4b7a      	ldr	r3, [pc, #488]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b77      	ldr	r3, [pc, #476]	; (800248c <HAL_RCC_OscConfig+0x474>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ba:	4b74      	ldr	r3, [pc, #464]	; (800248c <HAL_RCC_OscConfig+0x474>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a73      	ldr	r2, [pc, #460]	; (800248c <HAL_RCC_OscConfig+0x474>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7ff fb3f 	bl	8001948 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7ff fb3b 	bl	8001948 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e10c      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_RCC_OscConfig+0x474>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x2ea>
 80022f4:	4b64      	ldr	r3, [pc, #400]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	4a63      	ldr	r2, [pc, #396]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002300:	e01c      	b.n	800233c <HAL_RCC_OscConfig+0x324>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b05      	cmp	r3, #5
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x30c>
 800230a:	4b5f      	ldr	r3, [pc, #380]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	4a5e      	ldr	r2, [pc, #376]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	6713      	str	r3, [r2, #112]	; 0x70
 8002316:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231a:	4a5b      	ldr	r2, [pc, #364]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6713      	str	r3, [r2, #112]	; 0x70
 8002322:	e00b      	b.n	800233c <HAL_RCC_OscConfig+0x324>
 8002324:	4b58      	ldr	r3, [pc, #352]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	4a57      	ldr	r2, [pc, #348]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	6713      	str	r3, [r2, #112]	; 0x70
 8002330:	4b55      	ldr	r3, [pc, #340]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	4a54      	ldr	r2, [pc, #336]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002336:	f023 0304 	bic.w	r3, r3, #4
 800233a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d015      	beq.n	8002370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7ff fb00 	bl	8001948 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	e00a      	b.n	8002362 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7ff fafc 	bl	8001948 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	; 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e0cb      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002362:	4b49      	ldr	r3, [pc, #292]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0ee      	beq.n	800234c <HAL_RCC_OscConfig+0x334>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002370:	f7ff faea 	bl	8001948 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002376:	e00a      	b.n	800238e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f7ff fae6 	bl	8001948 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	; 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0b5      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238e:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1ee      	bne.n	8002378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a0:	4b39      	ldr	r3, [pc, #228]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	4a38      	ldr	r2, [pc, #224]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80023a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80a1 	beq.w	80024f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b6:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d05c      	beq.n	800247c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d141      	bne.n	800244e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <HAL_RCC_OscConfig+0x478>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7ff faba 	bl	8001948 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d8:	f7ff fab6 	bl	8001948 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e087      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ea:	4b27      	ldr	r3, [pc, #156]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	019b      	lsls	r3, r3, #6
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	3b01      	subs	r3, #1
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	061b      	lsls	r3, r3, #24
 800241a:	491b      	ldr	r1, [pc, #108]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_RCC_OscConfig+0x478>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7ff fa8f 	bl	8001948 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242e:	f7ff fa8b 	bl	8001948 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e05c      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x416>
 800244c:	e054      	b.n	80024f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_RCC_OscConfig+0x478>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff fa78 	bl	8001948 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245c:	f7ff fa74 	bl	8001948 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e045      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x444>
 800247a:	e03d      	b.n	80024f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d107      	bne.n	8002494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e038      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
 8002488:	40023800 	.word	0x40023800
 800248c:	40007000 	.word	0x40007000
 8002490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_RCC_OscConfig+0x4ec>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d028      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d121      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d11a      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d111      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	085b      	lsrs	r3, r3, #1
 80024dc:	3b01      	subs	r3, #1
 80024de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800

08002508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0cc      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b68      	ldr	r3, [pc, #416]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d90c      	bls.n	8002544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b65      	ldr	r3, [pc, #404]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b63      	ldr	r3, [pc, #396]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0b8      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800255c:	4b59      	ldr	r3, [pc, #356]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a58      	ldr	r2, [pc, #352]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002574:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4a52      	ldr	r2, [pc, #328]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800257e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002580:	4b50      	ldr	r3, [pc, #320]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	494d      	ldr	r1, [pc, #308]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d044      	beq.n	8002628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d119      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e07f      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b3f      	ldr	r3, [pc, #252]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e06f      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e067      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e6:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4934      	ldr	r1, [pc, #208]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f8:	f7ff f9a6 	bl	8001948 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7ff f9a2 	bl	8001948 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e04f      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 020c 	and.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	429a      	cmp	r2, r3
 8002626:	d1eb      	bne.n	8002600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002628:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d20c      	bcs.n	8002650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e032      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4916      	ldr	r1, [pc, #88]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	490e      	ldr	r1, [pc, #56]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800268e:	f000 f821 	bl	80026d4 <HAL_RCC_GetSysClockFreq>
 8002692:	4602      	mov	r2, r0
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	490a      	ldr	r1, [pc, #40]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	5ccb      	ldrb	r3, [r1, r3]
 80026a2:	fa22 f303 	lsr.w	r3, r2, r3
 80026a6:	4a09      	ldr	r2, [pc, #36]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f906 	bl	80018c0 <HAL_InitTick>

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023c00 	.word	0x40023c00
 80026c4:	40023800 	.word	0x40023800
 80026c8:	08005598 	.word	0x08005598
 80026cc:	20000020 	.word	0x20000020
 80026d0:	20000024 	.word	0x20000024

080026d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d8:	b090      	sub	sp, #64	; 0x40
 80026da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
 80026e0:	2300      	movs	r3, #0
 80026e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026e4:	2300      	movs	r3, #0
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ec:	4b59      	ldr	r3, [pc, #356]	; (8002854 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d00d      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x40>
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	f200 80a1 	bhi.w	8002840 <HAL_RCC_GetSysClockFreq+0x16c>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x34>
 8002702:	2b04      	cmp	r3, #4
 8002704:	d003      	beq.n	800270e <HAL_RCC_GetSysClockFreq+0x3a>
 8002706:	e09b      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002708:	4b53      	ldr	r3, [pc, #332]	; (8002858 <HAL_RCC_GetSysClockFreq+0x184>)
 800270a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800270c:	e09b      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800270e:	4b53      	ldr	r3, [pc, #332]	; (800285c <HAL_RCC_GetSysClockFreq+0x188>)
 8002710:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002712:	e098      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002714:	4b4f      	ldr	r3, [pc, #316]	; (8002854 <HAL_RCC_GetSysClockFreq+0x180>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800271e:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <HAL_RCC_GetSysClockFreq+0x180>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d028      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272a:	4b4a      	ldr	r3, [pc, #296]	; (8002854 <HAL_RCC_GetSysClockFreq+0x180>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	099b      	lsrs	r3, r3, #6
 8002730:	2200      	movs	r2, #0
 8002732:	623b      	str	r3, [r7, #32]
 8002734:	627a      	str	r2, [r7, #36]	; 0x24
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800273c:	2100      	movs	r1, #0
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <HAL_RCC_GetSysClockFreq+0x188>)
 8002740:	fb03 f201 	mul.w	r2, r3, r1
 8002744:	2300      	movs	r3, #0
 8002746:	fb00 f303 	mul.w	r3, r0, r3
 800274a:	4413      	add	r3, r2
 800274c:	4a43      	ldr	r2, [pc, #268]	; (800285c <HAL_RCC_GetSysClockFreq+0x188>)
 800274e:	fba0 1202 	umull	r1, r2, r0, r2
 8002752:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002754:	460a      	mov	r2, r1
 8002756:	62ba      	str	r2, [r7, #40]	; 0x28
 8002758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275a:	4413      	add	r3, r2
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002760:	2200      	movs	r2, #0
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	61fa      	str	r2, [r7, #28]
 8002766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800276a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800276e:	f7fe f9b1 	bl	8000ad4 <__aeabi_uldivmod>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4613      	mov	r3, r2
 8002778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800277a:	e053      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277c:	4b35      	ldr	r3, [pc, #212]	; (8002854 <HAL_RCC_GetSysClockFreq+0x180>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	2200      	movs	r2, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	617a      	str	r2, [r7, #20]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800278e:	f04f 0b00 	mov.w	fp, #0
 8002792:	4652      	mov	r2, sl
 8002794:	465b      	mov	r3, fp
 8002796:	f04f 0000 	mov.w	r0, #0
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	0159      	lsls	r1, r3, #5
 80027a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a4:	0150      	lsls	r0, r2, #5
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	ebb2 080a 	subs.w	r8, r2, sl
 80027ae:	eb63 090b 	sbc.w	r9, r3, fp
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027c6:	ebb2 0408 	subs.w	r4, r2, r8
 80027ca:	eb63 0509 	sbc.w	r5, r3, r9
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	00eb      	lsls	r3, r5, #3
 80027d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027dc:	00e2      	lsls	r2, r4, #3
 80027de:	4614      	mov	r4, r2
 80027e0:	461d      	mov	r5, r3
 80027e2:	eb14 030a 	adds.w	r3, r4, sl
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	eb45 030b 	adc.w	r3, r5, fp
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027fa:	4629      	mov	r1, r5
 80027fc:	028b      	lsls	r3, r1, #10
 80027fe:	4621      	mov	r1, r4
 8002800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002804:	4621      	mov	r1, r4
 8002806:	028a      	lsls	r2, r1, #10
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280e:	2200      	movs	r2, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	60fa      	str	r2, [r7, #12]
 8002814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002818:	f7fe f95c 	bl	8000ad4 <__aeabi_uldivmod>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4613      	mov	r3, r2
 8002822:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_GetSysClockFreq+0x180>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	0c1b      	lsrs	r3, r3, #16
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	3301      	adds	r3, #1
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800283e:	e002      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCC_GetSysClockFreq+0x184>)
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002848:	4618      	mov	r0, r3
 800284a:	3740      	adds	r7, #64	; 0x40
 800284c:	46bd      	mov	sp, r7
 800284e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800
 8002858:	00f42400 	.word	0x00f42400
 800285c:	017d7840 	.word	0x017d7840

08002860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002864:	4b03      	ldr	r3, [pc, #12]	; (8002874 <HAL_RCC_GetHCLKFreq+0x14>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000020 	.word	0x20000020

08002878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800287c:	f7ff fff0 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0a9b      	lsrs	r3, r3, #10
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4903      	ldr	r1, [pc, #12]	; (800289c <HAL_RCC_GetPCLK1Freq+0x24>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40023800 	.word	0x40023800
 800289c:	080055a8 	.word	0x080055a8

080028a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028a4:	f7ff ffdc 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	0b5b      	lsrs	r3, r3, #13
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4903      	ldr	r1, [pc, #12]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	080055a8 	.word	0x080055a8

080028c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e041      	b.n	800295e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe fdf0 	bl	80014d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f000 fac0 	bl	8002e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e041      	b.n	80029fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f839 	bl	8002a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3304      	adds	r3, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	4610      	mov	r0, r2
 80029a6:	f000 fa71 	bl	8002e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d109      	bne.n	8002a3c <HAL_TIM_PWM_Start+0x24>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e022      	b.n	8002a82 <HAL_TIM_PWM_Start+0x6a>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d109      	bne.n	8002a56 <HAL_TIM_PWM_Start+0x3e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	e015      	b.n	8002a82 <HAL_TIM_PWM_Start+0x6a>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d109      	bne.n	8002a70 <HAL_TIM_PWM_Start+0x58>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e008      	b.n	8002a82 <HAL_TIM_PWM_Start+0x6a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e068      	b.n	8002b5c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d104      	bne.n	8002a9a <HAL_TIM_PWM_Start+0x82>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a98:	e013      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xaa>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d104      	bne.n	8002aaa <HAL_TIM_PWM_Start+0x92>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa8:	e00b      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xaa>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d104      	bne.n	8002aba <HAL_TIM_PWM_Start+0xa2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab8:	e003      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xaa>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	6839      	ldr	r1, [r7, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fc90 	bl	80033f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <HAL_TIM_PWM_Start+0x14c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d107      	bne.n	8002aea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_TIM_PWM_Start+0x14c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d018      	beq.n	8002b26 <HAL_TIM_PWM_Start+0x10e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afc:	d013      	beq.n	8002b26 <HAL_TIM_PWM_Start+0x10e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <HAL_TIM_PWM_Start+0x150>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00e      	beq.n	8002b26 <HAL_TIM_PWM_Start+0x10e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <HAL_TIM_PWM_Start+0x154>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d009      	beq.n	8002b26 <HAL_TIM_PWM_Start+0x10e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a16      	ldr	r2, [pc, #88]	; (8002b70 <HAL_TIM_PWM_Start+0x158>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d004      	beq.n	8002b26 <HAL_TIM_PWM_Start+0x10e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <HAL_TIM_PWM_Start+0x15c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d111      	bne.n	8002b4a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b06      	cmp	r3, #6
 8002b36:	d010      	beq.n	8002b5a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b48:	e007      	b.n	8002b5a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40014000 	.word	0x40014000

08002b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e0ae      	b.n	8002cf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b0c      	cmp	r3, #12
 8002ba2:	f200 809f 	bhi.w	8002ce4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ba6:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bac:	08002be1 	.word	0x08002be1
 8002bb0:	08002ce5 	.word	0x08002ce5
 8002bb4:	08002ce5 	.word	0x08002ce5
 8002bb8:	08002ce5 	.word	0x08002ce5
 8002bbc:	08002c21 	.word	0x08002c21
 8002bc0:	08002ce5 	.word	0x08002ce5
 8002bc4:	08002ce5 	.word	0x08002ce5
 8002bc8:	08002ce5 	.word	0x08002ce5
 8002bcc:	08002c63 	.word	0x08002c63
 8002bd0:	08002ce5 	.word	0x08002ce5
 8002bd4:	08002ce5 	.word	0x08002ce5
 8002bd8:	08002ce5 	.word	0x08002ce5
 8002bdc:	08002ca3 	.word	0x08002ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f9dc 	bl	8002fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0208 	orr.w	r2, r2, #8
 8002bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0204 	bic.w	r2, r2, #4
 8002c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6999      	ldr	r1, [r3, #24]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	619a      	str	r2, [r3, #24]
      break;
 8002c1e:	e064      	b.n	8002cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fa22 	bl	8003070 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6999      	ldr	r1, [r3, #24]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	021a      	lsls	r2, r3, #8
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	619a      	str	r2, [r3, #24]
      break;
 8002c60:	e043      	b.n	8002cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fa6d 	bl	8003148 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69da      	ldr	r2, [r3, #28]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0208 	orr.w	r2, r2, #8
 8002c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0204 	bic.w	r2, r2, #4
 8002c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69d9      	ldr	r1, [r3, #28]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	61da      	str	r2, [r3, #28]
      break;
 8002ca0:	e023      	b.n	8002cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fab7 	bl	800321c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69d9      	ldr	r1, [r3, #28]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	021a      	lsls	r2, r3, #8
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	61da      	str	r2, [r3, #28]
      break;
 8002ce2:	e002      	b.n	8002cea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_TIM_ConfigClockSource+0x1c>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e0b4      	b.n	8002e82 <HAL_TIM_ConfigClockSource+0x186>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d50:	d03e      	beq.n	8002dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8002d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d56:	f200 8087 	bhi.w	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5e:	f000 8086 	beq.w	8002e6e <HAL_TIM_ConfigClockSource+0x172>
 8002d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d66:	d87f      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d68:	2b70      	cmp	r3, #112	; 0x70
 8002d6a:	d01a      	beq.n	8002da2 <HAL_TIM_ConfigClockSource+0xa6>
 8002d6c:	2b70      	cmp	r3, #112	; 0x70
 8002d6e:	d87b      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d70:	2b60      	cmp	r3, #96	; 0x60
 8002d72:	d050      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x11a>
 8002d74:	2b60      	cmp	r3, #96	; 0x60
 8002d76:	d877      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d78:	2b50      	cmp	r3, #80	; 0x50
 8002d7a:	d03c      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0xfa>
 8002d7c:	2b50      	cmp	r3, #80	; 0x50
 8002d7e:	d873      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d058      	beq.n	8002e36 <HAL_TIM_ConfigClockSource+0x13a>
 8002d84:	2b40      	cmp	r3, #64	; 0x40
 8002d86:	d86f      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d88:	2b30      	cmp	r3, #48	; 0x30
 8002d8a:	d064      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0x15a>
 8002d8c:	2b30      	cmp	r3, #48	; 0x30
 8002d8e:	d86b      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d060      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0x15a>
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d867      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d05c      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0x15a>
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d05a      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0x15a>
 8002da0:	e062      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002db2:	f000 fafd 	bl	80033b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	609a      	str	r2, [r3, #8]
      break;
 8002dce:	e04f      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002de0:	f000 fae6 	bl	80033b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df2:	609a      	str	r2, [r3, #8]
      break;
 8002df4:	e03c      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e02:	461a      	mov	r2, r3
 8002e04:	f000 fa5a 	bl	80032bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2150      	movs	r1, #80	; 0x50
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fab3 	bl	800337a <TIM_ITRx_SetConfig>
      break;
 8002e14:	e02c      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e22:	461a      	mov	r2, r3
 8002e24:	f000 fa79 	bl	800331a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2160      	movs	r1, #96	; 0x60
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 faa3 	bl	800337a <TIM_ITRx_SetConfig>
      break;
 8002e34:	e01c      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e42:	461a      	mov	r2, r3
 8002e44:	f000 fa3a 	bl	80032bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2140      	movs	r1, #64	; 0x40
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fa93 	bl	800337a <TIM_ITRx_SetConfig>
      break;
 8002e54:	e00c      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4610      	mov	r0, r2
 8002e62:	f000 fa8a 	bl	800337a <TIM_ITRx_SetConfig>
      break;
 8002e66:	e003      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e6c:	e000      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a3a      	ldr	r2, [pc, #232]	; (8002f88 <TIM_Base_SetConfig+0xfc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00f      	beq.n	8002ec4 <TIM_Base_SetConfig+0x38>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eaa:	d00b      	beq.n	8002ec4 <TIM_Base_SetConfig+0x38>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a37      	ldr	r2, [pc, #220]	; (8002f8c <TIM_Base_SetConfig+0x100>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <TIM_Base_SetConfig+0x38>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a36      	ldr	r2, [pc, #216]	; (8002f90 <TIM_Base_SetConfig+0x104>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <TIM_Base_SetConfig+0x38>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a35      	ldr	r2, [pc, #212]	; (8002f94 <TIM_Base_SetConfig+0x108>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d108      	bne.n	8002ed6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <TIM_Base_SetConfig+0xfc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01b      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee4:	d017      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	; (8002f8c <TIM_Base_SetConfig+0x100>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	; (8002f90 <TIM_Base_SetConfig+0x104>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00f      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a26      	ldr	r2, [pc, #152]	; (8002f94 <TIM_Base_SetConfig+0x108>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00b      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <TIM_Base_SetConfig+0x10c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <TIM_Base_SetConfig+0x110>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d003      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a23      	ldr	r2, [pc, #140]	; (8002fa0 <TIM_Base_SetConfig+0x114>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d108      	bne.n	8002f28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <TIM_Base_SetConfig+0xfc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d103      	bne.n	8002f5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f023 0201 	bic.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	611a      	str	r2, [r3, #16]
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40010000 	.word	0x40010000
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40000800 	.word	0x40000800
 8002f94:	40000c00 	.word	0x40000c00
 8002f98:	40014000 	.word	0x40014000
 8002f9c:	40014400 	.word	0x40014400
 8002fa0:	40014800 	.word	0x40014800

08002fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f023 0201 	bic.w	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f023 0302 	bic.w	r3, r3, #2
 8002fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a1c      	ldr	r2, [pc, #112]	; (800306c <TIM_OC1_SetConfig+0xc8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10c      	bne.n	800301a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0308 	bic.w	r3, r3, #8
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a13      	ldr	r2, [pc, #76]	; (800306c <TIM_OC1_SetConfig+0xc8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d111      	bne.n	8003046 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	621a      	str	r2, [r3, #32]
}
 8003060:	bf00      	nop
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	40010000 	.word	0x40010000

08003070 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f023 0210 	bic.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f023 0320 	bic.w	r3, r3, #32
 80030ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <TIM_OC2_SetConfig+0xd4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d10d      	bne.n	80030ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a15      	ldr	r2, [pc, #84]	; (8003144 <TIM_OC2_SetConfig+0xd4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d113      	bne.n	800311c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003102:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	621a      	str	r2, [r3, #32]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40010000 	.word	0x40010000

08003148 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <TIM_OC3_SetConfig+0xd0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d10d      	bne.n	80031c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a14      	ldr	r2, [pc, #80]	; (8003218 <TIM_OC3_SetConfig+0xd0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d113      	bne.n	80031f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	621a      	str	r2, [r3, #32]
}
 800320c:	bf00      	nop
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	40010000 	.word	0x40010000

0800321c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800324a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	031b      	lsls	r3, r3, #12
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a10      	ldr	r2, [pc, #64]	; (80032b8 <TIM_OC4_SetConfig+0x9c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d109      	bne.n	8003290 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	019b      	lsls	r3, r3, #6
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	621a      	str	r2, [r3, #32]
}
 80032aa:	bf00      	nop
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40010000 	.word	0x40010000

080032bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f023 0201 	bic.w	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f023 030a 	bic.w	r3, r3, #10
 80032f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	621a      	str	r2, [r3, #32]
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800331a:	b480      	push	{r7}
 800331c:	b087      	sub	sp, #28
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f023 0210 	bic.w	r2, r3, #16
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	031b      	lsls	r3, r3, #12
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003356:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	621a      	str	r2, [r3, #32]
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800337a:	b480      	push	{r7}
 800337c:	b085      	sub	sp, #20
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	f043 0307 	orr.w	r3, r3, #7
 800339c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	609a      	str	r2, [r3, #8]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	021a      	lsls	r2, r3, #8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	609a      	str	r2, [r3, #8]
}
 80033e4:	bf00      	nop
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	2201      	movs	r2, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	43db      	mvns	r3, r3
 8003412:	401a      	ands	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a1a      	ldr	r2, [r3, #32]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	431a      	orrs	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	621a      	str	r2, [r3, #32]
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003450:	2302      	movs	r3, #2
 8003452:	e050      	b.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1c      	ldr	r2, [pc, #112]	; (8003504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d018      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a0:	d013      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a18      	ldr	r2, [pc, #96]	; (8003508 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00e      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a16      	ldr	r2, [pc, #88]	; (800350c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d009      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a15      	ldr	r2, [pc, #84]	; (8003510 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d004      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a13      	ldr	r2, [pc, #76]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d10c      	bne.n	80034e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40010000 	.word	0x40010000
 8003508:	40000400 	.word	0x40000400
 800350c:	40000800 	.word	0x40000800
 8003510:	40000c00 	.word	0x40000c00
 8003514:	40014000 	.word	0x40014000

08003518 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003530:	2302      	movs	r3, #2
 8003532:	e03d      	b.n	80035b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e042      	b.n	8003654 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fe f80e 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	; 0x24
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fcdb 	bl	8003fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b20      	cmp	r3, #32
 8003674:	d112      	bne.n	800369c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_UART_Receive_IT+0x26>
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e00b      	b.n	800369e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	461a      	mov	r2, r3
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 faba 	bl	8003c0c <UART_Start_Receive_IT>
 8003698:	4603      	mov	r3, r0
 800369a:	e000      	b.n	800369e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800369c:	2302      	movs	r3, #2
  }
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b0ba      	sub	sp, #232	; 0xe8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10f      	bne.n	800370e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_UART_IRQHandler+0x66>
 80036fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fb99 	bl	8003e3e <UART_Receive_IT>
      return;
 800370c:	e25b      	b.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800370e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80de 	beq.w	80038d4 <HAL_UART_IRQHandler+0x22c>
 8003718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003728:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80d1 	beq.w	80038d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_UART_IRQHandler+0xae>
 800373e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <HAL_UART_IRQHandler+0xd2>
 8003762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f043 0202 	orr.w	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800377a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_UART_IRQHandler+0xf6>
 8003786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f043 0204 	orr.w	r2, r3, #4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d011      	beq.n	80037ce <HAL_UART_IRQHandler+0x126>
 80037aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d105      	bne.n	80037c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f043 0208 	orr.w	r2, r3, #8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 81f2 	beq.w	8003bbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_UART_IRQHandler+0x14e>
 80037e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fb24 	bl	8003e3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	2b40      	cmp	r3, #64	; 0x40
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d103      	bne.n	8003822 <HAL_UART_IRQHandler+0x17a>
 800381a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d04f      	beq.n	80038c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa2c 	bl	8003c80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d141      	bne.n	80038ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3314      	adds	r3, #20
 800383c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800384c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3314      	adds	r3, #20
 800385e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003862:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003866:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800386e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003872:	e841 2300 	strex	r3, r2, [r1]
 8003876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800387a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1d9      	bne.n	8003836 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d013      	beq.n	80038b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388e:	4a7e      	ldr	r2, [pc, #504]	; (8003a88 <HAL_UART_IRQHandler+0x3e0>)
 8003890:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe f9e3 	bl	8001c62 <HAL_DMA_Abort_IT>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038ac:	4610      	mov	r0, r2
 80038ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b0:	e00e      	b.n	80038d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f994 	bl	8003be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	e00a      	b.n	80038d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f990 	bl	8003be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e006      	b.n	80038d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f98c 	bl	8003be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80038ce:	e175      	b.n	8003bbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	bf00      	nop
    return;
 80038d2:	e173      	b.n	8003bbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	2b01      	cmp	r3, #1
 80038da:	f040 814f 	bne.w	8003b7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8148 	beq.w	8003b7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8141 	beq.w	8003b7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b40      	cmp	r3, #64	; 0x40
 800391c:	f040 80b6 	bne.w	8003a8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800392c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8145 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800393a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800393e:	429a      	cmp	r2, r3
 8003940:	f080 813e 	bcs.w	8003bc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800394a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003956:	f000 8088 	beq.w	8003a6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	330c      	adds	r3, #12
 8003960:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003970:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003978:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	330c      	adds	r3, #12
 8003982:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003986:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800398a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003992:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800399e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1d9      	bne.n	800395a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3314      	adds	r3, #20
 80039ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3314      	adds	r3, #20
 80039c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e1      	bne.n	80039a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3314      	adds	r3, #20
 80039e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3314      	adds	r3, #20
 8003a02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e3      	bne.n	80039e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a3a:	f023 0310 	bic.w	r3, r3, #16
 8003a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	330c      	adds	r3, #12
 8003a48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e3      	bne.n	8003a28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fe f88c 	bl	8001b82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	4619      	mov	r1, r3
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f8b7 	bl	8003bf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a86:	e09b      	b.n	8003bc0 <HAL_UART_IRQHandler+0x518>
 8003a88:	08003d47 	.word	0x08003d47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 808e 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 8089 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abc:	e853 3f00 	ldrex	r3, [r3]
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ad6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ad8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003adc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e3      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3314      	adds	r3, #20
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	623b      	str	r3, [r7, #32]
   return(result);
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3314      	adds	r3, #20
 8003b0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b0e:	633a      	str	r2, [r7, #48]	; 0x30
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e3      	bne.n	8003aea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0310 	bic.w	r3, r3, #16
 8003b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	330c      	adds	r3, #12
 8003b50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b54:	61fa      	str	r2, [r7, #28]
 8003b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	69b9      	ldr	r1, [r7, #24]
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	617b      	str	r3, [r7, #20]
   return(result);
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e3      	bne.n	8003b30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f83d 	bl	8003bf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b7a:	e023      	b.n	8003bc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <HAL_UART_IRQHandler+0x4f4>
 8003b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f8ea 	bl	8003d6e <UART_Transmit_IT>
    return;
 8003b9a:	e014      	b.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
 8003ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f92a 	bl	8003e0e <UART_EndTransmit_IT>
    return;
 8003bba:	e004      	b.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003bbc:	bf00      	nop
 8003bbe:	e002      	b.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bc0:	bf00      	nop
 8003bc2:	e000      	b.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bc4:	bf00      	nop
  }
}
 8003bc6:	37e8      	adds	r7, #232	; 0xe8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	4613      	mov	r3, r2
 8003c18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	88fa      	ldrh	r2, [r7, #6]
 8003c2a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2222      	movs	r2, #34	; 0x22
 8003c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695a      	ldr	r2, [r3, #20]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0220 	orr.w	r2, r2, #32
 8003c70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b095      	sub	sp, #84	; 0x54
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ca8:	643a      	str	r2, [r7, #64]	; 0x40
 8003caa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e5      	bne.n	8003c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3314      	adds	r3, #20
 8003cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d119      	bne.n	8003d2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f023 0310 	bic.w	r3, r3, #16
 8003d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d18:	61ba      	str	r2, [r7, #24]
 8003d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6979      	ldr	r1, [r7, #20]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	613b      	str	r3, [r7, #16]
   return(result);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d3a:	bf00      	nop
 8003d3c:	3754      	adds	r7, #84	; 0x54
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff ff3d 	bl	8003be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b21      	cmp	r3, #33	; 0x21
 8003d80:	d13e      	bne.n	8003e00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8a:	d114      	bne.n	8003db6 <UART_Transmit_IT+0x48>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d110      	bne.n	8003db6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	1c9a      	adds	r2, r3, #2
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	621a      	str	r2, [r3, #32]
 8003db4:	e008      	b.n	8003dc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	1c59      	adds	r1, r3, #1
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6211      	str	r1, [r2, #32]
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10f      	bne.n	8003dfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e000      	b.n	8003e02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e00:	2302      	movs	r3, #2
  }
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff fecc 	bl	8003bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b08c      	sub	sp, #48	; 0x30
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b22      	cmp	r3, #34	; 0x22
 8003e50:	f040 80ae 	bne.w	8003fb0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	d117      	bne.n	8003e8e <UART_Receive_IT+0x50>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d113      	bne.n	8003e8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	1c9a      	adds	r2, r3, #2
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e8c:	e026      	b.n	8003edc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea0:	d007      	beq.n	8003eb2 <UART_Receive_IT+0x74>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <UART_Receive_IT+0x82>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	e008      	b.n	8003ed2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d15d      	bne.n	8003fac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0220 	bic.w	r2, r2, #32
 8003efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d135      	bne.n	8003fa2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f023 0310 	bic.w	r3, r3, #16
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	330c      	adds	r3, #12
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5c:	623a      	str	r2, [r7, #32]
 8003f5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f60:	69f9      	ldr	r1, [r7, #28]
 8003f62:	6a3a      	ldr	r2, [r7, #32]
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e5      	bne.n	8003f3c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b10      	cmp	r3, #16
 8003f7c:	d10a      	bne.n	8003f94 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fe2a 	bl	8003bf4 <HAL_UARTEx_RxEventCallback>
 8003fa0:	e002      	b.n	8003fa8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd fbdc 	bl	8001760 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e002      	b.n	8003fb2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e000      	b.n	8003fb2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3730      	adds	r7, #48	; 0x30
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc0:	b0c0      	sub	sp, #256	; 0x100
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd8:	68d9      	ldr	r1, [r3, #12]
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	ea40 0301 	orr.w	r3, r0, r1
 8003fe4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004014:	f021 010c 	bic.w	r1, r1, #12
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004022:	430b      	orrs	r3, r1
 8004024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004036:	6999      	ldr	r1, [r3, #24]
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	ea40 0301 	orr.w	r3, r0, r1
 8004042:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b8f      	ldr	r3, [pc, #572]	; (8004288 <UART_SetConfig+0x2cc>)
 800404c:	429a      	cmp	r2, r3
 800404e:	d005      	beq.n	800405c <UART_SetConfig+0xa0>
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4b8d      	ldr	r3, [pc, #564]	; (800428c <UART_SetConfig+0x2d0>)
 8004058:	429a      	cmp	r2, r3
 800405a:	d104      	bne.n	8004066 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800405c:	f7fe fc20 	bl	80028a0 <HAL_RCC_GetPCLK2Freq>
 8004060:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004064:	e003      	b.n	800406e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004066:	f7fe fc07 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 800406a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004078:	f040 810c 	bne.w	8004294 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800407c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004080:	2200      	movs	r2, #0
 8004082:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004086:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800408a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800408e:	4622      	mov	r2, r4
 8004090:	462b      	mov	r3, r5
 8004092:	1891      	adds	r1, r2, r2
 8004094:	65b9      	str	r1, [r7, #88]	; 0x58
 8004096:	415b      	adcs	r3, r3
 8004098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800409a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800409e:	4621      	mov	r1, r4
 80040a0:	eb12 0801 	adds.w	r8, r2, r1
 80040a4:	4629      	mov	r1, r5
 80040a6:	eb43 0901 	adc.w	r9, r3, r1
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040be:	4690      	mov	r8, r2
 80040c0:	4699      	mov	r9, r3
 80040c2:	4623      	mov	r3, r4
 80040c4:	eb18 0303 	adds.w	r3, r8, r3
 80040c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040cc:	462b      	mov	r3, r5
 80040ce:	eb49 0303 	adc.w	r3, r9, r3
 80040d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040ea:	460b      	mov	r3, r1
 80040ec:	18db      	adds	r3, r3, r3
 80040ee:	653b      	str	r3, [r7, #80]	; 0x50
 80040f0:	4613      	mov	r3, r2
 80040f2:	eb42 0303 	adc.w	r3, r2, r3
 80040f6:	657b      	str	r3, [r7, #84]	; 0x54
 80040f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004100:	f7fc fce8 	bl	8000ad4 <__aeabi_uldivmod>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4b61      	ldr	r3, [pc, #388]	; (8004290 <UART_SetConfig+0x2d4>)
 800410a:	fba3 2302 	umull	r2, r3, r3, r2
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	011c      	lsls	r4, r3, #4
 8004112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004116:	2200      	movs	r2, #0
 8004118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800411c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004120:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004124:	4642      	mov	r2, r8
 8004126:	464b      	mov	r3, r9
 8004128:	1891      	adds	r1, r2, r2
 800412a:	64b9      	str	r1, [r7, #72]	; 0x48
 800412c:	415b      	adcs	r3, r3
 800412e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004130:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004134:	4641      	mov	r1, r8
 8004136:	eb12 0a01 	adds.w	sl, r2, r1
 800413a:	4649      	mov	r1, r9
 800413c:	eb43 0b01 	adc.w	fp, r3, r1
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800414c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004154:	4692      	mov	sl, r2
 8004156:	469b      	mov	fp, r3
 8004158:	4643      	mov	r3, r8
 800415a:	eb1a 0303 	adds.w	r3, sl, r3
 800415e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004162:	464b      	mov	r3, r9
 8004164:	eb4b 0303 	adc.w	r3, fp, r3
 8004168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004178:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800417c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004180:	460b      	mov	r3, r1
 8004182:	18db      	adds	r3, r3, r3
 8004184:	643b      	str	r3, [r7, #64]	; 0x40
 8004186:	4613      	mov	r3, r2
 8004188:	eb42 0303 	adc.w	r3, r2, r3
 800418c:	647b      	str	r3, [r7, #68]	; 0x44
 800418e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004192:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004196:	f7fc fc9d 	bl	8000ad4 <__aeabi_uldivmod>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4611      	mov	r1, r2
 80041a0:	4b3b      	ldr	r3, [pc, #236]	; (8004290 <UART_SetConfig+0x2d4>)
 80041a2:	fba3 2301 	umull	r2, r3, r3, r1
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2264      	movs	r2, #100	; 0x64
 80041aa:	fb02 f303 	mul.w	r3, r2, r3
 80041ae:	1acb      	subs	r3, r1, r3
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041b6:	4b36      	ldr	r3, [pc, #216]	; (8004290 <UART_SetConfig+0x2d4>)
 80041b8:	fba3 2302 	umull	r2, r3, r3, r2
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041c4:	441c      	add	r4, r3
 80041c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041d8:	4642      	mov	r2, r8
 80041da:	464b      	mov	r3, r9
 80041dc:	1891      	adds	r1, r2, r2
 80041de:	63b9      	str	r1, [r7, #56]	; 0x38
 80041e0:	415b      	adcs	r3, r3
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041e8:	4641      	mov	r1, r8
 80041ea:	1851      	adds	r1, r2, r1
 80041ec:	6339      	str	r1, [r7, #48]	; 0x30
 80041ee:	4649      	mov	r1, r9
 80041f0:	414b      	adcs	r3, r1
 80041f2:	637b      	str	r3, [r7, #52]	; 0x34
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004200:	4659      	mov	r1, fp
 8004202:	00cb      	lsls	r3, r1, #3
 8004204:	4651      	mov	r1, sl
 8004206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800420a:	4651      	mov	r1, sl
 800420c:	00ca      	lsls	r2, r1, #3
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	4603      	mov	r3, r0
 8004214:	4642      	mov	r2, r8
 8004216:	189b      	adds	r3, r3, r2
 8004218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800421c:	464b      	mov	r3, r9
 800421e:	460a      	mov	r2, r1
 8004220:	eb42 0303 	adc.w	r3, r2, r3
 8004224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004234:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004238:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800423c:	460b      	mov	r3, r1
 800423e:	18db      	adds	r3, r3, r3
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28
 8004242:	4613      	mov	r3, r2
 8004244:	eb42 0303 	adc.w	r3, r2, r3
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800424a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800424e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004252:	f7fc fc3f 	bl	8000ad4 <__aeabi_uldivmod>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <UART_SetConfig+0x2d4>)
 800425c:	fba3 1302 	umull	r1, r3, r3, r2
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	2164      	movs	r1, #100	; 0x64
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	3332      	adds	r3, #50	; 0x32
 800426e:	4a08      	ldr	r2, [pc, #32]	; (8004290 <UART_SetConfig+0x2d4>)
 8004270:	fba2 2303 	umull	r2, r3, r2, r3
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	f003 0207 	and.w	r2, r3, #7
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4422      	add	r2, r4
 8004282:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004284:	e106      	b.n	8004494 <UART_SetConfig+0x4d8>
 8004286:	bf00      	nop
 8004288:	40011000 	.word	0x40011000
 800428c:	40011400 	.word	0x40011400
 8004290:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004298:	2200      	movs	r2, #0
 800429a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800429e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042a6:	4642      	mov	r2, r8
 80042a8:	464b      	mov	r3, r9
 80042aa:	1891      	adds	r1, r2, r2
 80042ac:	6239      	str	r1, [r7, #32]
 80042ae:	415b      	adcs	r3, r3
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
 80042b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042b6:	4641      	mov	r1, r8
 80042b8:	1854      	adds	r4, r2, r1
 80042ba:	4649      	mov	r1, r9
 80042bc:	eb43 0501 	adc.w	r5, r3, r1
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	00eb      	lsls	r3, r5, #3
 80042ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ce:	00e2      	lsls	r2, r4, #3
 80042d0:	4614      	mov	r4, r2
 80042d2:	461d      	mov	r5, r3
 80042d4:	4643      	mov	r3, r8
 80042d6:	18e3      	adds	r3, r4, r3
 80042d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042dc:	464b      	mov	r3, r9
 80042de:	eb45 0303 	adc.w	r3, r5, r3
 80042e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004302:	4629      	mov	r1, r5
 8004304:	008b      	lsls	r3, r1, #2
 8004306:	4621      	mov	r1, r4
 8004308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800430c:	4621      	mov	r1, r4
 800430e:	008a      	lsls	r2, r1, #2
 8004310:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004314:	f7fc fbde 	bl	8000ad4 <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4b60      	ldr	r3, [pc, #384]	; (80044a0 <UART_SetConfig+0x4e4>)
 800431e:	fba3 2302 	umull	r2, r3, r3, r2
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	011c      	lsls	r4, r3, #4
 8004326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800432a:	2200      	movs	r2, #0
 800432c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004330:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004334:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004338:	4642      	mov	r2, r8
 800433a:	464b      	mov	r3, r9
 800433c:	1891      	adds	r1, r2, r2
 800433e:	61b9      	str	r1, [r7, #24]
 8004340:	415b      	adcs	r3, r3
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004348:	4641      	mov	r1, r8
 800434a:	1851      	adds	r1, r2, r1
 800434c:	6139      	str	r1, [r7, #16]
 800434e:	4649      	mov	r1, r9
 8004350:	414b      	adcs	r3, r1
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004360:	4659      	mov	r1, fp
 8004362:	00cb      	lsls	r3, r1, #3
 8004364:	4651      	mov	r1, sl
 8004366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800436a:	4651      	mov	r1, sl
 800436c:	00ca      	lsls	r2, r1, #3
 800436e:	4610      	mov	r0, r2
 8004370:	4619      	mov	r1, r3
 8004372:	4603      	mov	r3, r0
 8004374:	4642      	mov	r2, r8
 8004376:	189b      	adds	r3, r3, r2
 8004378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800437c:	464b      	mov	r3, r9
 800437e:	460a      	mov	r2, r1
 8004380:	eb42 0303 	adc.w	r3, r2, r3
 8004384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	67bb      	str	r3, [r7, #120]	; 0x78
 8004392:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043a0:	4649      	mov	r1, r9
 80043a2:	008b      	lsls	r3, r1, #2
 80043a4:	4641      	mov	r1, r8
 80043a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043aa:	4641      	mov	r1, r8
 80043ac:	008a      	lsls	r2, r1, #2
 80043ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043b2:	f7fc fb8f 	bl	8000ad4 <__aeabi_uldivmod>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	4b38      	ldr	r3, [pc, #224]	; (80044a0 <UART_SetConfig+0x4e4>)
 80043be:	fba3 2301 	umull	r2, r3, r3, r1
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2264      	movs	r2, #100	; 0x64
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	1acb      	subs	r3, r1, r3
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	3332      	adds	r3, #50	; 0x32
 80043d0:	4a33      	ldr	r2, [pc, #204]	; (80044a0 <UART_SetConfig+0x4e4>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043dc:	441c      	add	r4, r3
 80043de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043e2:	2200      	movs	r2, #0
 80043e4:	673b      	str	r3, [r7, #112]	; 0x70
 80043e6:	677a      	str	r2, [r7, #116]	; 0x74
 80043e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043ec:	4642      	mov	r2, r8
 80043ee:	464b      	mov	r3, r9
 80043f0:	1891      	adds	r1, r2, r2
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	415b      	adcs	r3, r3
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043fc:	4641      	mov	r1, r8
 80043fe:	1851      	adds	r1, r2, r1
 8004400:	6039      	str	r1, [r7, #0]
 8004402:	4649      	mov	r1, r9
 8004404:	414b      	adcs	r3, r1
 8004406:	607b      	str	r3, [r7, #4]
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004414:	4659      	mov	r1, fp
 8004416:	00cb      	lsls	r3, r1, #3
 8004418:	4651      	mov	r1, sl
 800441a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800441e:	4651      	mov	r1, sl
 8004420:	00ca      	lsls	r2, r1, #3
 8004422:	4610      	mov	r0, r2
 8004424:	4619      	mov	r1, r3
 8004426:	4603      	mov	r3, r0
 8004428:	4642      	mov	r2, r8
 800442a:	189b      	adds	r3, r3, r2
 800442c:	66bb      	str	r3, [r7, #104]	; 0x68
 800442e:	464b      	mov	r3, r9
 8004430:	460a      	mov	r2, r1
 8004432:	eb42 0303 	adc.w	r3, r2, r3
 8004436:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	663b      	str	r3, [r7, #96]	; 0x60
 8004442:	667a      	str	r2, [r7, #100]	; 0x64
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004450:	4649      	mov	r1, r9
 8004452:	008b      	lsls	r3, r1, #2
 8004454:	4641      	mov	r1, r8
 8004456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800445a:	4641      	mov	r1, r8
 800445c:	008a      	lsls	r2, r1, #2
 800445e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004462:	f7fc fb37 	bl	8000ad4 <__aeabi_uldivmod>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <UART_SetConfig+0x4e4>)
 800446c:	fba3 1302 	umull	r1, r3, r3, r2
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	2164      	movs	r1, #100	; 0x64
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	3332      	adds	r3, #50	; 0x32
 800447e:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <UART_SetConfig+0x4e4>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	f003 020f 	and.w	r2, r3, #15
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4422      	add	r2, r4
 8004492:	609a      	str	r2, [r3, #8]
}
 8004494:	bf00      	nop
 8004496:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800449a:	46bd      	mov	sp, r7
 800449c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a0:	51eb851f 	.word	0x51eb851f

080044a4 <memset>:
 80044a4:	4402      	add	r2, r0
 80044a6:	4603      	mov	r3, r0
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d100      	bne.n	80044ae <memset+0xa>
 80044ac:	4770      	bx	lr
 80044ae:	f803 1b01 	strb.w	r1, [r3], #1
 80044b2:	e7f9      	b.n	80044a8 <memset+0x4>

080044b4 <__libc_init_array>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	4d0d      	ldr	r5, [pc, #52]	; (80044ec <__libc_init_array+0x38>)
 80044b8:	4c0d      	ldr	r4, [pc, #52]	; (80044f0 <__libc_init_array+0x3c>)
 80044ba:	1b64      	subs	r4, r4, r5
 80044bc:	10a4      	asrs	r4, r4, #2
 80044be:	2600      	movs	r6, #0
 80044c0:	42a6      	cmp	r6, r4
 80044c2:	d109      	bne.n	80044d8 <__libc_init_array+0x24>
 80044c4:	4d0b      	ldr	r5, [pc, #44]	; (80044f4 <__libc_init_array+0x40>)
 80044c6:	4c0c      	ldr	r4, [pc, #48]	; (80044f8 <__libc_init_array+0x44>)
 80044c8:	f001 f85a 	bl	8005580 <_init>
 80044cc:	1b64      	subs	r4, r4, r5
 80044ce:	10a4      	asrs	r4, r4, #2
 80044d0:	2600      	movs	r6, #0
 80044d2:	42a6      	cmp	r6, r4
 80044d4:	d105      	bne.n	80044e2 <__libc_init_array+0x2e>
 80044d6:	bd70      	pop	{r4, r5, r6, pc}
 80044d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044dc:	4798      	blx	r3
 80044de:	3601      	adds	r6, #1
 80044e0:	e7ee      	b.n	80044c0 <__libc_init_array+0xc>
 80044e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e6:	4798      	blx	r3
 80044e8:	3601      	adds	r6, #1
 80044ea:	e7f2      	b.n	80044d2 <__libc_init_array+0x1e>
 80044ec:	08005790 	.word	0x08005790
 80044f0:	08005790 	.word	0x08005790
 80044f4:	08005790 	.word	0x08005790
 80044f8:	08005794 	.word	0x08005794
 80044fc:	00000000 	.word	0x00000000

08004500 <sin>:
 8004500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004502:	ec53 2b10 	vmov	r2, r3, d0
 8004506:	4828      	ldr	r0, [pc, #160]	; (80045a8 <sin+0xa8>)
 8004508:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800450c:	4281      	cmp	r1, r0
 800450e:	dc07      	bgt.n	8004520 <sin+0x20>
 8004510:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80045a0 <sin+0xa0>
 8004514:	2000      	movs	r0, #0
 8004516:	b005      	add	sp, #20
 8004518:	f85d eb04 	ldr.w	lr, [sp], #4
 800451c:	f000 b910 	b.w	8004740 <__kernel_sin>
 8004520:	4822      	ldr	r0, [pc, #136]	; (80045ac <sin+0xac>)
 8004522:	4281      	cmp	r1, r0
 8004524:	dd09      	ble.n	800453a <sin+0x3a>
 8004526:	ee10 0a10 	vmov	r0, s0
 800452a:	4619      	mov	r1, r3
 800452c:	f7fb fe58 	bl	80001e0 <__aeabi_dsub>
 8004530:	ec41 0b10 	vmov	d0, r0, r1
 8004534:	b005      	add	sp, #20
 8004536:	f85d fb04 	ldr.w	pc, [sp], #4
 800453a:	4668      	mov	r0, sp
 800453c:	f000 f9c0 	bl	80048c0 <__ieee754_rem_pio2>
 8004540:	f000 0003 	and.w	r0, r0, #3
 8004544:	2801      	cmp	r0, #1
 8004546:	d00c      	beq.n	8004562 <sin+0x62>
 8004548:	2802      	cmp	r0, #2
 800454a:	d011      	beq.n	8004570 <sin+0x70>
 800454c:	b9f0      	cbnz	r0, 800458c <sin+0x8c>
 800454e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004552:	ed9d 0b00 	vldr	d0, [sp]
 8004556:	2001      	movs	r0, #1
 8004558:	f000 f8f2 	bl	8004740 <__kernel_sin>
 800455c:	ec51 0b10 	vmov	r0, r1, d0
 8004560:	e7e6      	b.n	8004530 <sin+0x30>
 8004562:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004566:	ed9d 0b00 	vldr	d0, [sp]
 800456a:	f000 f821 	bl	80045b0 <__kernel_cos>
 800456e:	e7f5      	b.n	800455c <sin+0x5c>
 8004570:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004574:	ed9d 0b00 	vldr	d0, [sp]
 8004578:	2001      	movs	r0, #1
 800457a:	f000 f8e1 	bl	8004740 <__kernel_sin>
 800457e:	ec53 2b10 	vmov	r2, r3, d0
 8004582:	ee10 0a10 	vmov	r0, s0
 8004586:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800458a:	e7d1      	b.n	8004530 <sin+0x30>
 800458c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004590:	ed9d 0b00 	vldr	d0, [sp]
 8004594:	f000 f80c 	bl	80045b0 <__kernel_cos>
 8004598:	e7f1      	b.n	800457e <sin+0x7e>
 800459a:	bf00      	nop
 800459c:	f3af 8000 	nop.w
	...
 80045a8:	3fe921fb 	.word	0x3fe921fb
 80045ac:	7fefffff 	.word	0x7fefffff

080045b0 <__kernel_cos>:
 80045b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b4:	ec57 6b10 	vmov	r6, r7, d0
 80045b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80045bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80045c0:	ed8d 1b00 	vstr	d1, [sp]
 80045c4:	da07      	bge.n	80045d6 <__kernel_cos+0x26>
 80045c6:	ee10 0a10 	vmov	r0, s0
 80045ca:	4639      	mov	r1, r7
 80045cc:	f7fc fa5a 	bl	8000a84 <__aeabi_d2iz>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	f000 8088 	beq.w	80046e6 <__kernel_cos+0x136>
 80045d6:	4632      	mov	r2, r6
 80045d8:	463b      	mov	r3, r7
 80045da:	4630      	mov	r0, r6
 80045dc:	4639      	mov	r1, r7
 80045de:	f7fb ffb7 	bl	8000550 <__aeabi_dmul>
 80045e2:	4b51      	ldr	r3, [pc, #324]	; (8004728 <__kernel_cos+0x178>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	4604      	mov	r4, r0
 80045e8:	460d      	mov	r5, r1
 80045ea:	f7fb ffb1 	bl	8000550 <__aeabi_dmul>
 80045ee:	a340      	add	r3, pc, #256	; (adr r3, 80046f0 <__kernel_cos+0x140>)
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	4682      	mov	sl, r0
 80045f6:	468b      	mov	fp, r1
 80045f8:	4620      	mov	r0, r4
 80045fa:	4629      	mov	r1, r5
 80045fc:	f7fb ffa8 	bl	8000550 <__aeabi_dmul>
 8004600:	a33d      	add	r3, pc, #244	; (adr r3, 80046f8 <__kernel_cos+0x148>)
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	f7fb fded 	bl	80001e4 <__adddf3>
 800460a:	4622      	mov	r2, r4
 800460c:	462b      	mov	r3, r5
 800460e:	f7fb ff9f 	bl	8000550 <__aeabi_dmul>
 8004612:	a33b      	add	r3, pc, #236	; (adr r3, 8004700 <__kernel_cos+0x150>)
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	f7fb fde2 	bl	80001e0 <__aeabi_dsub>
 800461c:	4622      	mov	r2, r4
 800461e:	462b      	mov	r3, r5
 8004620:	f7fb ff96 	bl	8000550 <__aeabi_dmul>
 8004624:	a338      	add	r3, pc, #224	; (adr r3, 8004708 <__kernel_cos+0x158>)
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f7fb fddb 	bl	80001e4 <__adddf3>
 800462e:	4622      	mov	r2, r4
 8004630:	462b      	mov	r3, r5
 8004632:	f7fb ff8d 	bl	8000550 <__aeabi_dmul>
 8004636:	a336      	add	r3, pc, #216	; (adr r3, 8004710 <__kernel_cos+0x160>)
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f7fb fdd0 	bl	80001e0 <__aeabi_dsub>
 8004640:	4622      	mov	r2, r4
 8004642:	462b      	mov	r3, r5
 8004644:	f7fb ff84 	bl	8000550 <__aeabi_dmul>
 8004648:	a333      	add	r3, pc, #204	; (adr r3, 8004718 <__kernel_cos+0x168>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f7fb fdc9 	bl	80001e4 <__adddf3>
 8004652:	4622      	mov	r2, r4
 8004654:	462b      	mov	r3, r5
 8004656:	f7fb ff7b 	bl	8000550 <__aeabi_dmul>
 800465a:	4622      	mov	r2, r4
 800465c:	462b      	mov	r3, r5
 800465e:	f7fb ff77 	bl	8000550 <__aeabi_dmul>
 8004662:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004666:	4604      	mov	r4, r0
 8004668:	460d      	mov	r5, r1
 800466a:	4630      	mov	r0, r6
 800466c:	4639      	mov	r1, r7
 800466e:	f7fb ff6f 	bl	8000550 <__aeabi_dmul>
 8004672:	460b      	mov	r3, r1
 8004674:	4602      	mov	r2, r0
 8004676:	4629      	mov	r1, r5
 8004678:	4620      	mov	r0, r4
 800467a:	f7fb fdb1 	bl	80001e0 <__aeabi_dsub>
 800467e:	4b2b      	ldr	r3, [pc, #172]	; (800472c <__kernel_cos+0x17c>)
 8004680:	4598      	cmp	r8, r3
 8004682:	4606      	mov	r6, r0
 8004684:	460f      	mov	r7, r1
 8004686:	dc10      	bgt.n	80046aa <__kernel_cos+0xfa>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4650      	mov	r0, sl
 800468e:	4659      	mov	r1, fp
 8004690:	f7fb fda6 	bl	80001e0 <__aeabi_dsub>
 8004694:	460b      	mov	r3, r1
 8004696:	4926      	ldr	r1, [pc, #152]	; (8004730 <__kernel_cos+0x180>)
 8004698:	4602      	mov	r2, r0
 800469a:	2000      	movs	r0, #0
 800469c:	f7fb fda0 	bl	80001e0 <__aeabi_dsub>
 80046a0:	ec41 0b10 	vmov	d0, r0, r1
 80046a4:	b003      	add	sp, #12
 80046a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046aa:	4b22      	ldr	r3, [pc, #136]	; (8004734 <__kernel_cos+0x184>)
 80046ac:	4920      	ldr	r1, [pc, #128]	; (8004730 <__kernel_cos+0x180>)
 80046ae:	4598      	cmp	r8, r3
 80046b0:	bfcc      	ite	gt
 80046b2:	4d21      	ldrgt	r5, [pc, #132]	; (8004738 <__kernel_cos+0x188>)
 80046b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80046b8:	2400      	movs	r4, #0
 80046ba:	4622      	mov	r2, r4
 80046bc:	462b      	mov	r3, r5
 80046be:	2000      	movs	r0, #0
 80046c0:	f7fb fd8e 	bl	80001e0 <__aeabi_dsub>
 80046c4:	4622      	mov	r2, r4
 80046c6:	4680      	mov	r8, r0
 80046c8:	4689      	mov	r9, r1
 80046ca:	462b      	mov	r3, r5
 80046cc:	4650      	mov	r0, sl
 80046ce:	4659      	mov	r1, fp
 80046d0:	f7fb fd86 	bl	80001e0 <__aeabi_dsub>
 80046d4:	4632      	mov	r2, r6
 80046d6:	463b      	mov	r3, r7
 80046d8:	f7fb fd82 	bl	80001e0 <__aeabi_dsub>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4640      	mov	r0, r8
 80046e2:	4649      	mov	r1, r9
 80046e4:	e7da      	b.n	800469c <__kernel_cos+0xec>
 80046e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004720 <__kernel_cos+0x170>
 80046ea:	e7db      	b.n	80046a4 <__kernel_cos+0xf4>
 80046ec:	f3af 8000 	nop.w
 80046f0:	be8838d4 	.word	0xbe8838d4
 80046f4:	bda8fae9 	.word	0xbda8fae9
 80046f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80046fc:	3e21ee9e 	.word	0x3e21ee9e
 8004700:	809c52ad 	.word	0x809c52ad
 8004704:	3e927e4f 	.word	0x3e927e4f
 8004708:	19cb1590 	.word	0x19cb1590
 800470c:	3efa01a0 	.word	0x3efa01a0
 8004710:	16c15177 	.word	0x16c15177
 8004714:	3f56c16c 	.word	0x3f56c16c
 8004718:	5555554c 	.word	0x5555554c
 800471c:	3fa55555 	.word	0x3fa55555
 8004720:	00000000 	.word	0x00000000
 8004724:	3ff00000 	.word	0x3ff00000
 8004728:	3fe00000 	.word	0x3fe00000
 800472c:	3fd33332 	.word	0x3fd33332
 8004730:	3ff00000 	.word	0x3ff00000
 8004734:	3fe90000 	.word	0x3fe90000
 8004738:	3fd20000 	.word	0x3fd20000
 800473c:	00000000 	.word	0x00000000

08004740 <__kernel_sin>:
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	ed2d 8b04 	vpush	{d8-d9}
 8004748:	eeb0 8a41 	vmov.f32	s16, s2
 800474c:	eef0 8a61 	vmov.f32	s17, s3
 8004750:	ec55 4b10 	vmov	r4, r5, d0
 8004754:	b083      	sub	sp, #12
 8004756:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800475a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800475e:	9001      	str	r0, [sp, #4]
 8004760:	da06      	bge.n	8004770 <__kernel_sin+0x30>
 8004762:	ee10 0a10 	vmov	r0, s0
 8004766:	4629      	mov	r1, r5
 8004768:	f7fc f98c 	bl	8000a84 <__aeabi_d2iz>
 800476c:	2800      	cmp	r0, #0
 800476e:	d051      	beq.n	8004814 <__kernel_sin+0xd4>
 8004770:	4622      	mov	r2, r4
 8004772:	462b      	mov	r3, r5
 8004774:	4620      	mov	r0, r4
 8004776:	4629      	mov	r1, r5
 8004778:	f7fb feea 	bl	8000550 <__aeabi_dmul>
 800477c:	4682      	mov	sl, r0
 800477e:	468b      	mov	fp, r1
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4620      	mov	r0, r4
 8004786:	4629      	mov	r1, r5
 8004788:	f7fb fee2 	bl	8000550 <__aeabi_dmul>
 800478c:	a341      	add	r3, pc, #260	; (adr r3, 8004894 <__kernel_sin+0x154>)
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	4680      	mov	r8, r0
 8004794:	4689      	mov	r9, r1
 8004796:	4650      	mov	r0, sl
 8004798:	4659      	mov	r1, fp
 800479a:	f7fb fed9 	bl	8000550 <__aeabi_dmul>
 800479e:	a33f      	add	r3, pc, #252	; (adr r3, 800489c <__kernel_sin+0x15c>)
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	f7fb fd1c 	bl	80001e0 <__aeabi_dsub>
 80047a8:	4652      	mov	r2, sl
 80047aa:	465b      	mov	r3, fp
 80047ac:	f7fb fed0 	bl	8000550 <__aeabi_dmul>
 80047b0:	a33c      	add	r3, pc, #240	; (adr r3, 80048a4 <__kernel_sin+0x164>)
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f7fb fd15 	bl	80001e4 <__adddf3>
 80047ba:	4652      	mov	r2, sl
 80047bc:	465b      	mov	r3, fp
 80047be:	f7fb fec7 	bl	8000550 <__aeabi_dmul>
 80047c2:	a33a      	add	r3, pc, #232	; (adr r3, 80048ac <__kernel_sin+0x16c>)
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f7fb fd0a 	bl	80001e0 <__aeabi_dsub>
 80047cc:	4652      	mov	r2, sl
 80047ce:	465b      	mov	r3, fp
 80047d0:	f7fb febe 	bl	8000550 <__aeabi_dmul>
 80047d4:	a337      	add	r3, pc, #220	; (adr r3, 80048b4 <__kernel_sin+0x174>)
 80047d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047da:	f7fb fd03 	bl	80001e4 <__adddf3>
 80047de:	9b01      	ldr	r3, [sp, #4]
 80047e0:	4606      	mov	r6, r0
 80047e2:	460f      	mov	r7, r1
 80047e4:	b9eb      	cbnz	r3, 8004822 <__kernel_sin+0xe2>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4650      	mov	r0, sl
 80047ec:	4659      	mov	r1, fp
 80047ee:	f7fb feaf 	bl	8000550 <__aeabi_dmul>
 80047f2:	a325      	add	r3, pc, #148	; (adr r3, 8004888 <__kernel_sin+0x148>)
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	f7fb fcf2 	bl	80001e0 <__aeabi_dsub>
 80047fc:	4642      	mov	r2, r8
 80047fe:	464b      	mov	r3, r9
 8004800:	f7fb fea6 	bl	8000550 <__aeabi_dmul>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4620      	mov	r0, r4
 800480a:	4629      	mov	r1, r5
 800480c:	f7fb fcea 	bl	80001e4 <__adddf3>
 8004810:	4604      	mov	r4, r0
 8004812:	460d      	mov	r5, r1
 8004814:	ec45 4b10 	vmov	d0, r4, r5
 8004818:	b003      	add	sp, #12
 800481a:	ecbd 8b04 	vpop	{d8-d9}
 800481e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004822:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <__kernel_sin+0x150>)
 8004824:	ec51 0b18 	vmov	r0, r1, d8
 8004828:	2200      	movs	r2, #0
 800482a:	f7fb fe91 	bl	8000550 <__aeabi_dmul>
 800482e:	4632      	mov	r2, r6
 8004830:	ec41 0b19 	vmov	d9, r0, r1
 8004834:	463b      	mov	r3, r7
 8004836:	4640      	mov	r0, r8
 8004838:	4649      	mov	r1, r9
 800483a:	f7fb fe89 	bl	8000550 <__aeabi_dmul>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	ec51 0b19 	vmov	r0, r1, d9
 8004846:	f7fb fccb 	bl	80001e0 <__aeabi_dsub>
 800484a:	4652      	mov	r2, sl
 800484c:	465b      	mov	r3, fp
 800484e:	f7fb fe7f 	bl	8000550 <__aeabi_dmul>
 8004852:	ec53 2b18 	vmov	r2, r3, d8
 8004856:	f7fb fcc3 	bl	80001e0 <__aeabi_dsub>
 800485a:	a30b      	add	r3, pc, #44	; (adr r3, 8004888 <__kernel_sin+0x148>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	4606      	mov	r6, r0
 8004862:	460f      	mov	r7, r1
 8004864:	4640      	mov	r0, r8
 8004866:	4649      	mov	r1, r9
 8004868:	f7fb fe72 	bl	8000550 <__aeabi_dmul>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4630      	mov	r0, r6
 8004872:	4639      	mov	r1, r7
 8004874:	f7fb fcb6 	bl	80001e4 <__adddf3>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4620      	mov	r0, r4
 800487e:	4629      	mov	r1, r5
 8004880:	f7fb fcae 	bl	80001e0 <__aeabi_dsub>
 8004884:	e7c4      	b.n	8004810 <__kernel_sin+0xd0>
 8004886:	bf00      	nop
 8004888:	55555549 	.word	0x55555549
 800488c:	3fc55555 	.word	0x3fc55555
 8004890:	3fe00000 	.word	0x3fe00000
 8004894:	5acfd57c 	.word	0x5acfd57c
 8004898:	3de5d93a 	.word	0x3de5d93a
 800489c:	8a2b9ceb 	.word	0x8a2b9ceb
 80048a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80048a4:	57b1fe7d 	.word	0x57b1fe7d
 80048a8:	3ec71de3 	.word	0x3ec71de3
 80048ac:	19c161d5 	.word	0x19c161d5
 80048b0:	3f2a01a0 	.word	0x3f2a01a0
 80048b4:	1110f8a6 	.word	0x1110f8a6
 80048b8:	3f811111 	.word	0x3f811111
 80048bc:	00000000 	.word	0x00000000

080048c0 <__ieee754_rem_pio2>:
 80048c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c4:	ed2d 8b02 	vpush	{d8}
 80048c8:	ec55 4b10 	vmov	r4, r5, d0
 80048cc:	4bca      	ldr	r3, [pc, #808]	; (8004bf8 <__ieee754_rem_pio2+0x338>)
 80048ce:	b08b      	sub	sp, #44	; 0x2c
 80048d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80048d4:	4598      	cmp	r8, r3
 80048d6:	4682      	mov	sl, r0
 80048d8:	9502      	str	r5, [sp, #8]
 80048da:	dc08      	bgt.n	80048ee <__ieee754_rem_pio2+0x2e>
 80048dc:	2200      	movs	r2, #0
 80048de:	2300      	movs	r3, #0
 80048e0:	ed80 0b00 	vstr	d0, [r0]
 80048e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80048e8:	f04f 0b00 	mov.w	fp, #0
 80048ec:	e028      	b.n	8004940 <__ieee754_rem_pio2+0x80>
 80048ee:	4bc3      	ldr	r3, [pc, #780]	; (8004bfc <__ieee754_rem_pio2+0x33c>)
 80048f0:	4598      	cmp	r8, r3
 80048f2:	dc78      	bgt.n	80049e6 <__ieee754_rem_pio2+0x126>
 80048f4:	9b02      	ldr	r3, [sp, #8]
 80048f6:	4ec2      	ldr	r6, [pc, #776]	; (8004c00 <__ieee754_rem_pio2+0x340>)
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	ee10 0a10 	vmov	r0, s0
 80048fe:	a3b0      	add	r3, pc, #704	; (adr r3, 8004bc0 <__ieee754_rem_pio2+0x300>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	4629      	mov	r1, r5
 8004906:	dd39      	ble.n	800497c <__ieee754_rem_pio2+0xbc>
 8004908:	f7fb fc6a 	bl	80001e0 <__aeabi_dsub>
 800490c:	45b0      	cmp	r8, r6
 800490e:	4604      	mov	r4, r0
 8004910:	460d      	mov	r5, r1
 8004912:	d01b      	beq.n	800494c <__ieee754_rem_pio2+0x8c>
 8004914:	a3ac      	add	r3, pc, #688	; (adr r3, 8004bc8 <__ieee754_rem_pio2+0x308>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f7fb fc61 	bl	80001e0 <__aeabi_dsub>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	e9ca 2300 	strd	r2, r3, [sl]
 8004926:	4620      	mov	r0, r4
 8004928:	4629      	mov	r1, r5
 800492a:	f7fb fc59 	bl	80001e0 <__aeabi_dsub>
 800492e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004bc8 <__ieee754_rem_pio2+0x308>)
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f7fb fc54 	bl	80001e0 <__aeabi_dsub>
 8004938:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800493c:	f04f 0b01 	mov.w	fp, #1
 8004940:	4658      	mov	r0, fp
 8004942:	b00b      	add	sp, #44	; 0x2c
 8004944:	ecbd 8b02 	vpop	{d8}
 8004948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494c:	a3a0      	add	r3, pc, #640	; (adr r3, 8004bd0 <__ieee754_rem_pio2+0x310>)
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f7fb fc45 	bl	80001e0 <__aeabi_dsub>
 8004956:	a3a0      	add	r3, pc, #640	; (adr r3, 8004bd8 <__ieee754_rem_pio2+0x318>)
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	4604      	mov	r4, r0
 800495e:	460d      	mov	r5, r1
 8004960:	f7fb fc3e 	bl	80001e0 <__aeabi_dsub>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	e9ca 2300 	strd	r2, r3, [sl]
 800496c:	4620      	mov	r0, r4
 800496e:	4629      	mov	r1, r5
 8004970:	f7fb fc36 	bl	80001e0 <__aeabi_dsub>
 8004974:	a398      	add	r3, pc, #608	; (adr r3, 8004bd8 <__ieee754_rem_pio2+0x318>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	e7db      	b.n	8004934 <__ieee754_rem_pio2+0x74>
 800497c:	f7fb fc32 	bl	80001e4 <__adddf3>
 8004980:	45b0      	cmp	r8, r6
 8004982:	4604      	mov	r4, r0
 8004984:	460d      	mov	r5, r1
 8004986:	d016      	beq.n	80049b6 <__ieee754_rem_pio2+0xf6>
 8004988:	a38f      	add	r3, pc, #572	; (adr r3, 8004bc8 <__ieee754_rem_pio2+0x308>)
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	f7fb fc29 	bl	80001e4 <__adddf3>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	e9ca 2300 	strd	r2, r3, [sl]
 800499a:	4620      	mov	r0, r4
 800499c:	4629      	mov	r1, r5
 800499e:	f7fb fc1f 	bl	80001e0 <__aeabi_dsub>
 80049a2:	a389      	add	r3, pc, #548	; (adr r3, 8004bc8 <__ieee754_rem_pio2+0x308>)
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f7fb fc1c 	bl	80001e4 <__adddf3>
 80049ac:	f04f 3bff 	mov.w	fp, #4294967295
 80049b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80049b4:	e7c4      	b.n	8004940 <__ieee754_rem_pio2+0x80>
 80049b6:	a386      	add	r3, pc, #536	; (adr r3, 8004bd0 <__ieee754_rem_pio2+0x310>)
 80049b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049bc:	f7fb fc12 	bl	80001e4 <__adddf3>
 80049c0:	a385      	add	r3, pc, #532	; (adr r3, 8004bd8 <__ieee754_rem_pio2+0x318>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	4604      	mov	r4, r0
 80049c8:	460d      	mov	r5, r1
 80049ca:	f7fb fc0b 	bl	80001e4 <__adddf3>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	e9ca 2300 	strd	r2, r3, [sl]
 80049d6:	4620      	mov	r0, r4
 80049d8:	4629      	mov	r1, r5
 80049da:	f7fb fc01 	bl	80001e0 <__aeabi_dsub>
 80049de:	a37e      	add	r3, pc, #504	; (adr r3, 8004bd8 <__ieee754_rem_pio2+0x318>)
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	e7e0      	b.n	80049a8 <__ieee754_rem_pio2+0xe8>
 80049e6:	4b87      	ldr	r3, [pc, #540]	; (8004c04 <__ieee754_rem_pio2+0x344>)
 80049e8:	4598      	cmp	r8, r3
 80049ea:	f300 80d8 	bgt.w	8004b9e <__ieee754_rem_pio2+0x2de>
 80049ee:	f000 f96d 	bl	8004ccc <fabs>
 80049f2:	ec55 4b10 	vmov	r4, r5, d0
 80049f6:	ee10 0a10 	vmov	r0, s0
 80049fa:	a379      	add	r3, pc, #484	; (adr r3, 8004be0 <__ieee754_rem_pio2+0x320>)
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	4629      	mov	r1, r5
 8004a02:	f7fb fda5 	bl	8000550 <__aeabi_dmul>
 8004a06:	4b80      	ldr	r3, [pc, #512]	; (8004c08 <__ieee754_rem_pio2+0x348>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f7fb fbeb 	bl	80001e4 <__adddf3>
 8004a0e:	f7fc f839 	bl	8000a84 <__aeabi_d2iz>
 8004a12:	4683      	mov	fp, r0
 8004a14:	f7fb fd32 	bl	800047c <__aeabi_i2d>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	ec43 2b18 	vmov	d8, r2, r3
 8004a20:	a367      	add	r3, pc, #412	; (adr r3, 8004bc0 <__ieee754_rem_pio2+0x300>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f7fb fd93 	bl	8000550 <__aeabi_dmul>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4620      	mov	r0, r4
 8004a30:	4629      	mov	r1, r5
 8004a32:	f7fb fbd5 	bl	80001e0 <__aeabi_dsub>
 8004a36:	a364      	add	r3, pc, #400	; (adr r3, 8004bc8 <__ieee754_rem_pio2+0x308>)
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	4606      	mov	r6, r0
 8004a3e:	460f      	mov	r7, r1
 8004a40:	ec51 0b18 	vmov	r0, r1, d8
 8004a44:	f7fb fd84 	bl	8000550 <__aeabi_dmul>
 8004a48:	f1bb 0f1f 	cmp.w	fp, #31
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	460d      	mov	r5, r1
 8004a50:	dc0d      	bgt.n	8004a6e <__ieee754_rem_pio2+0x1ae>
 8004a52:	4b6e      	ldr	r3, [pc, #440]	; (8004c0c <__ieee754_rem_pio2+0x34c>)
 8004a54:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a5c:	4543      	cmp	r3, r8
 8004a5e:	d006      	beq.n	8004a6e <__ieee754_rem_pio2+0x1ae>
 8004a60:	4622      	mov	r2, r4
 8004a62:	462b      	mov	r3, r5
 8004a64:	4630      	mov	r0, r6
 8004a66:	4639      	mov	r1, r7
 8004a68:	f7fb fbba 	bl	80001e0 <__aeabi_dsub>
 8004a6c:	e00e      	b.n	8004a8c <__ieee754_rem_pio2+0x1cc>
 8004a6e:	462b      	mov	r3, r5
 8004a70:	4622      	mov	r2, r4
 8004a72:	4630      	mov	r0, r6
 8004a74:	4639      	mov	r1, r7
 8004a76:	f7fb fbb3 	bl	80001e0 <__aeabi_dsub>
 8004a7a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004a7e:	9303      	str	r3, [sp, #12]
 8004a80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a84:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	dc02      	bgt.n	8004a92 <__ieee754_rem_pio2+0x1d2>
 8004a8c:	e9ca 0100 	strd	r0, r1, [sl]
 8004a90:	e039      	b.n	8004b06 <__ieee754_rem_pio2+0x246>
 8004a92:	a34f      	add	r3, pc, #316	; (adr r3, 8004bd0 <__ieee754_rem_pio2+0x310>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	ec51 0b18 	vmov	r0, r1, d8
 8004a9c:	f7fb fd58 	bl	8000550 <__aeabi_dmul>
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	460d      	mov	r5, r1
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	4639      	mov	r1, r7
 8004aac:	f7fb fb98 	bl	80001e0 <__aeabi_dsub>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4680      	mov	r8, r0
 8004ab6:	4689      	mov	r9, r1
 8004ab8:	4630      	mov	r0, r6
 8004aba:	4639      	mov	r1, r7
 8004abc:	f7fb fb90 	bl	80001e0 <__aeabi_dsub>
 8004ac0:	4622      	mov	r2, r4
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	f7fb fb8c 	bl	80001e0 <__aeabi_dsub>
 8004ac8:	a343      	add	r3, pc, #268	; (adr r3, 8004bd8 <__ieee754_rem_pio2+0x318>)
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	4604      	mov	r4, r0
 8004ad0:	460d      	mov	r5, r1
 8004ad2:	ec51 0b18 	vmov	r0, r1, d8
 8004ad6:	f7fb fd3b 	bl	8000550 <__aeabi_dmul>
 8004ada:	4622      	mov	r2, r4
 8004adc:	462b      	mov	r3, r5
 8004ade:	f7fb fb7f 	bl	80001e0 <__aeabi_dsub>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	460d      	mov	r5, r1
 8004aea:	4640      	mov	r0, r8
 8004aec:	4649      	mov	r1, r9
 8004aee:	f7fb fb77 	bl	80001e0 <__aeabi_dsub>
 8004af2:	9a03      	ldr	r2, [sp, #12]
 8004af4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b31      	cmp	r3, #49	; 0x31
 8004afc:	dc24      	bgt.n	8004b48 <__ieee754_rem_pio2+0x288>
 8004afe:	e9ca 0100 	strd	r0, r1, [sl]
 8004b02:	4646      	mov	r6, r8
 8004b04:	464f      	mov	r7, r9
 8004b06:	e9da 8900 	ldrd	r8, r9, [sl]
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	4639      	mov	r1, r7
 8004b12:	f7fb fb65 	bl	80001e0 <__aeabi_dsub>
 8004b16:	462b      	mov	r3, r5
 8004b18:	4622      	mov	r2, r4
 8004b1a:	f7fb fb61 	bl	80001e0 <__aeabi_dsub>
 8004b1e:	9b02      	ldr	r3, [sp, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004b26:	f6bf af0b 	bge.w	8004940 <__ieee754_rem_pio2+0x80>
 8004b2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004b2e:	f8ca 3004 	str.w	r3, [sl, #4]
 8004b32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b36:	f8ca 8000 	str.w	r8, [sl]
 8004b3a:	f8ca 0008 	str.w	r0, [sl, #8]
 8004b3e:	f8ca 300c 	str.w	r3, [sl, #12]
 8004b42:	f1cb 0b00 	rsb	fp, fp, #0
 8004b46:	e6fb      	b.n	8004940 <__ieee754_rem_pio2+0x80>
 8004b48:	a327      	add	r3, pc, #156	; (adr r3, 8004be8 <__ieee754_rem_pio2+0x328>)
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	ec51 0b18 	vmov	r0, r1, d8
 8004b52:	f7fb fcfd 	bl	8000550 <__aeabi_dmul>
 8004b56:	4604      	mov	r4, r0
 8004b58:	460d      	mov	r5, r1
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4640      	mov	r0, r8
 8004b60:	4649      	mov	r1, r9
 8004b62:	f7fb fb3d 	bl	80001e0 <__aeabi_dsub>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	460f      	mov	r7, r1
 8004b6e:	4640      	mov	r0, r8
 8004b70:	4649      	mov	r1, r9
 8004b72:	f7fb fb35 	bl	80001e0 <__aeabi_dsub>
 8004b76:	4622      	mov	r2, r4
 8004b78:	462b      	mov	r3, r5
 8004b7a:	f7fb fb31 	bl	80001e0 <__aeabi_dsub>
 8004b7e:	a31c      	add	r3, pc, #112	; (adr r3, 8004bf0 <__ieee754_rem_pio2+0x330>)
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	4604      	mov	r4, r0
 8004b86:	460d      	mov	r5, r1
 8004b88:	ec51 0b18 	vmov	r0, r1, d8
 8004b8c:	f7fb fce0 	bl	8000550 <__aeabi_dmul>
 8004b90:	4622      	mov	r2, r4
 8004b92:	462b      	mov	r3, r5
 8004b94:	f7fb fb24 	bl	80001e0 <__aeabi_dsub>
 8004b98:	4604      	mov	r4, r0
 8004b9a:	460d      	mov	r5, r1
 8004b9c:	e760      	b.n	8004a60 <__ieee754_rem_pio2+0x1a0>
 8004b9e:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <__ieee754_rem_pio2+0x350>)
 8004ba0:	4598      	cmp	r8, r3
 8004ba2:	dd37      	ble.n	8004c14 <__ieee754_rem_pio2+0x354>
 8004ba4:	ee10 2a10 	vmov	r2, s0
 8004ba8:	462b      	mov	r3, r5
 8004baa:	4620      	mov	r0, r4
 8004bac:	4629      	mov	r1, r5
 8004bae:	f7fb fb17 	bl	80001e0 <__aeabi_dsub>
 8004bb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004bb6:	e9ca 0100 	strd	r0, r1, [sl]
 8004bba:	e695      	b.n	80048e8 <__ieee754_rem_pio2+0x28>
 8004bbc:	f3af 8000 	nop.w
 8004bc0:	54400000 	.word	0x54400000
 8004bc4:	3ff921fb 	.word	0x3ff921fb
 8004bc8:	1a626331 	.word	0x1a626331
 8004bcc:	3dd0b461 	.word	0x3dd0b461
 8004bd0:	1a600000 	.word	0x1a600000
 8004bd4:	3dd0b461 	.word	0x3dd0b461
 8004bd8:	2e037073 	.word	0x2e037073
 8004bdc:	3ba3198a 	.word	0x3ba3198a
 8004be0:	6dc9c883 	.word	0x6dc9c883
 8004be4:	3fe45f30 	.word	0x3fe45f30
 8004be8:	2e000000 	.word	0x2e000000
 8004bec:	3ba3198a 	.word	0x3ba3198a
 8004bf0:	252049c1 	.word	0x252049c1
 8004bf4:	397b839a 	.word	0x397b839a
 8004bf8:	3fe921fb 	.word	0x3fe921fb
 8004bfc:	4002d97b 	.word	0x4002d97b
 8004c00:	3ff921fb 	.word	0x3ff921fb
 8004c04:	413921fb 	.word	0x413921fb
 8004c08:	3fe00000 	.word	0x3fe00000
 8004c0c:	080055b0 	.word	0x080055b0
 8004c10:	7fefffff 	.word	0x7fefffff
 8004c14:	ea4f 5628 	mov.w	r6, r8, asr #20
 8004c18:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8004c1c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8004c20:	4620      	mov	r0, r4
 8004c22:	460d      	mov	r5, r1
 8004c24:	f7fb ff2e 	bl	8000a84 <__aeabi_d2iz>
 8004c28:	f7fb fc28 	bl	800047c <__aeabi_i2d>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4620      	mov	r0, r4
 8004c32:	4629      	mov	r1, r5
 8004c34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c38:	f7fb fad2 	bl	80001e0 <__aeabi_dsub>
 8004c3c:	4b21      	ldr	r3, [pc, #132]	; (8004cc4 <__ieee754_rem_pio2+0x404>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f7fb fc86 	bl	8000550 <__aeabi_dmul>
 8004c44:	460d      	mov	r5, r1
 8004c46:	4604      	mov	r4, r0
 8004c48:	f7fb ff1c 	bl	8000a84 <__aeabi_d2iz>
 8004c4c:	f7fb fc16 	bl	800047c <__aeabi_i2d>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4620      	mov	r0, r4
 8004c56:	4629      	mov	r1, r5
 8004c58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c5c:	f7fb fac0 	bl	80001e0 <__aeabi_dsub>
 8004c60:	4b18      	ldr	r3, [pc, #96]	; (8004cc4 <__ieee754_rem_pio2+0x404>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	f7fb fc74 	bl	8000550 <__aeabi_dmul>
 8004c68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004c6c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8004c70:	2703      	movs	r7, #3
 8004c72:	2400      	movs	r4, #0
 8004c74:	2500      	movs	r5, #0
 8004c76:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8004c7a:	4622      	mov	r2, r4
 8004c7c:	462b      	mov	r3, r5
 8004c7e:	46b9      	mov	r9, r7
 8004c80:	3f01      	subs	r7, #1
 8004c82:	f7fb fecd 	bl	8000a20 <__aeabi_dcmpeq>
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d1f5      	bne.n	8004c76 <__ieee754_rem_pio2+0x3b6>
 8004c8a:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <__ieee754_rem_pio2+0x408>)
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	2302      	movs	r3, #2
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	4632      	mov	r2, r6
 8004c94:	464b      	mov	r3, r9
 8004c96:	4651      	mov	r1, sl
 8004c98:	a804      	add	r0, sp, #16
 8004c9a:	f000 f821 	bl	8004ce0 <__kernel_rem_pio2>
 8004c9e:	9b02      	ldr	r3, [sp, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	4683      	mov	fp, r0
 8004ca4:	f6bf ae4c 	bge.w	8004940 <__ieee754_rem_pio2+0x80>
 8004ca8:	e9da 2100 	ldrd	r2, r1, [sl]
 8004cac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cb0:	e9ca 2300 	strd	r2, r3, [sl]
 8004cb4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004cb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cbc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004cc0:	e73f      	b.n	8004b42 <__ieee754_rem_pio2+0x282>
 8004cc2:	bf00      	nop
 8004cc4:	41700000 	.word	0x41700000
 8004cc8:	08005630 	.word	0x08005630

08004ccc <fabs>:
 8004ccc:	ec51 0b10 	vmov	r0, r1, d0
 8004cd0:	ee10 2a10 	vmov	r2, s0
 8004cd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004cd8:	ec43 2b10 	vmov	d0, r2, r3
 8004cdc:	4770      	bx	lr
	...

08004ce0 <__kernel_rem_pio2>:
 8004ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce4:	ed2d 8b02 	vpush	{d8}
 8004ce8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004cec:	f112 0f14 	cmn.w	r2, #20
 8004cf0:	9306      	str	r3, [sp, #24]
 8004cf2:	9104      	str	r1, [sp, #16]
 8004cf4:	4bc2      	ldr	r3, [pc, #776]	; (8005000 <__kernel_rem_pio2+0x320>)
 8004cf6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004cf8:	9009      	str	r0, [sp, #36]	; 0x24
 8004cfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	9b06      	ldr	r3, [sp, #24]
 8004d02:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d06:	bfa8      	it	ge
 8004d08:	1ed4      	subge	r4, r2, #3
 8004d0a:	9305      	str	r3, [sp, #20]
 8004d0c:	bfb2      	itee	lt
 8004d0e:	2400      	movlt	r4, #0
 8004d10:	2318      	movge	r3, #24
 8004d12:	fb94 f4f3 	sdivge	r4, r4, r3
 8004d16:	f06f 0317 	mvn.w	r3, #23
 8004d1a:	fb04 3303 	mla	r3, r4, r3, r3
 8004d1e:	eb03 0a02 	add.w	sl, r3, r2
 8004d22:	9b00      	ldr	r3, [sp, #0]
 8004d24:	9a05      	ldr	r2, [sp, #20]
 8004d26:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8004ff0 <__kernel_rem_pio2+0x310>
 8004d2a:	eb03 0802 	add.w	r8, r3, r2
 8004d2e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004d30:	1aa7      	subs	r7, r4, r2
 8004d32:	ae20      	add	r6, sp, #128	; 0x80
 8004d34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004d38:	2500      	movs	r5, #0
 8004d3a:	4545      	cmp	r5, r8
 8004d3c:	dd13      	ble.n	8004d66 <__kernel_rem_pio2+0x86>
 8004d3e:	9b06      	ldr	r3, [sp, #24]
 8004d40:	aa20      	add	r2, sp, #128	; 0x80
 8004d42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004d46:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004d4a:	f04f 0800 	mov.w	r8, #0
 8004d4e:	9b00      	ldr	r3, [sp, #0]
 8004d50:	4598      	cmp	r8, r3
 8004d52:	dc31      	bgt.n	8004db8 <__kernel_rem_pio2+0xd8>
 8004d54:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004ff0 <__kernel_rem_pio2+0x310>
 8004d58:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004d5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004d60:	462f      	mov	r7, r5
 8004d62:	2600      	movs	r6, #0
 8004d64:	e01b      	b.n	8004d9e <__kernel_rem_pio2+0xbe>
 8004d66:	42ef      	cmn	r7, r5
 8004d68:	d407      	bmi.n	8004d7a <__kernel_rem_pio2+0x9a>
 8004d6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004d6e:	f7fb fb85 	bl	800047c <__aeabi_i2d>
 8004d72:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004d76:	3501      	adds	r5, #1
 8004d78:	e7df      	b.n	8004d3a <__kernel_rem_pio2+0x5a>
 8004d7a:	ec51 0b18 	vmov	r0, r1, d8
 8004d7e:	e7f8      	b.n	8004d72 <__kernel_rem_pio2+0x92>
 8004d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d84:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004d88:	f7fb fbe2 	bl	8000550 <__aeabi_dmul>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d94:	f7fb fa26 	bl	80001e4 <__adddf3>
 8004d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d9c:	3601      	adds	r6, #1
 8004d9e:	9b05      	ldr	r3, [sp, #20]
 8004da0:	429e      	cmp	r6, r3
 8004da2:	f1a7 0708 	sub.w	r7, r7, #8
 8004da6:	ddeb      	ble.n	8004d80 <__kernel_rem_pio2+0xa0>
 8004da8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004dac:	f108 0801 	add.w	r8, r8, #1
 8004db0:	ecab 7b02 	vstmia	fp!, {d7}
 8004db4:	3508      	adds	r5, #8
 8004db6:	e7ca      	b.n	8004d4e <__kernel_rem_pio2+0x6e>
 8004db8:	9b00      	ldr	r3, [sp, #0]
 8004dba:	aa0c      	add	r2, sp, #48	; 0x30
 8004dbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004dc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dc2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004dc4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004dc8:	9c00      	ldr	r4, [sp, #0]
 8004dca:	930a      	str	r3, [sp, #40]	; 0x28
 8004dcc:	00e3      	lsls	r3, r4, #3
 8004dce:	9308      	str	r3, [sp, #32]
 8004dd0:	ab98      	add	r3, sp, #608	; 0x260
 8004dd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004dd6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004dda:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8004dde:	ab70      	add	r3, sp, #448	; 0x1c0
 8004de0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004de4:	46c3      	mov	fp, r8
 8004de6:	46a1      	mov	r9, r4
 8004de8:	f1b9 0f00 	cmp.w	r9, #0
 8004dec:	f1a5 0508 	sub.w	r5, r5, #8
 8004df0:	dc77      	bgt.n	8004ee2 <__kernel_rem_pio2+0x202>
 8004df2:	ec47 6b10 	vmov	d0, r6, r7
 8004df6:	4650      	mov	r0, sl
 8004df8:	f000 fac2 	bl	8005380 <scalbn>
 8004dfc:	ec57 6b10 	vmov	r6, r7, d0
 8004e00:	2200      	movs	r2, #0
 8004e02:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004e06:	ee10 0a10 	vmov	r0, s0
 8004e0a:	4639      	mov	r1, r7
 8004e0c:	f7fb fba0 	bl	8000550 <__aeabi_dmul>
 8004e10:	ec41 0b10 	vmov	d0, r0, r1
 8004e14:	f000 fb34 	bl	8005480 <floor>
 8004e18:	4b7a      	ldr	r3, [pc, #488]	; (8005004 <__kernel_rem_pio2+0x324>)
 8004e1a:	ec51 0b10 	vmov	r0, r1, d0
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f7fb fb96 	bl	8000550 <__aeabi_dmul>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4630      	mov	r0, r6
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	f7fb f9d8 	bl	80001e0 <__aeabi_dsub>
 8004e30:	460f      	mov	r7, r1
 8004e32:	4606      	mov	r6, r0
 8004e34:	f7fb fe26 	bl	8000a84 <__aeabi_d2iz>
 8004e38:	9002      	str	r0, [sp, #8]
 8004e3a:	f7fb fb1f 	bl	800047c <__aeabi_i2d>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4630      	mov	r0, r6
 8004e44:	4639      	mov	r1, r7
 8004e46:	f7fb f9cb 	bl	80001e0 <__aeabi_dsub>
 8004e4a:	f1ba 0f00 	cmp.w	sl, #0
 8004e4e:	4606      	mov	r6, r0
 8004e50:	460f      	mov	r7, r1
 8004e52:	dd6d      	ble.n	8004f30 <__kernel_rem_pio2+0x250>
 8004e54:	1e61      	subs	r1, r4, #1
 8004e56:	ab0c      	add	r3, sp, #48	; 0x30
 8004e58:	9d02      	ldr	r5, [sp, #8]
 8004e5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e5e:	f1ca 0018 	rsb	r0, sl, #24
 8004e62:	fa43 f200 	asr.w	r2, r3, r0
 8004e66:	4415      	add	r5, r2
 8004e68:	4082      	lsls	r2, r0
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	aa0c      	add	r2, sp, #48	; 0x30
 8004e6e:	9502      	str	r5, [sp, #8]
 8004e70:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004e74:	f1ca 0217 	rsb	r2, sl, #23
 8004e78:	fa43 fb02 	asr.w	fp, r3, r2
 8004e7c:	f1bb 0f00 	cmp.w	fp, #0
 8004e80:	dd65      	ble.n	8004f4e <__kernel_rem_pio2+0x26e>
 8004e82:	9b02      	ldr	r3, [sp, #8]
 8004e84:	2200      	movs	r2, #0
 8004e86:	3301      	adds	r3, #1
 8004e88:	9302      	str	r3, [sp, #8]
 8004e8a:	4615      	mov	r5, r2
 8004e8c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004e90:	4294      	cmp	r4, r2
 8004e92:	f300 809f 	bgt.w	8004fd4 <__kernel_rem_pio2+0x2f4>
 8004e96:	f1ba 0f00 	cmp.w	sl, #0
 8004e9a:	dd07      	ble.n	8004eac <__kernel_rem_pio2+0x1cc>
 8004e9c:	f1ba 0f01 	cmp.w	sl, #1
 8004ea0:	f000 80c1 	beq.w	8005026 <__kernel_rem_pio2+0x346>
 8004ea4:	f1ba 0f02 	cmp.w	sl, #2
 8004ea8:	f000 80c7 	beq.w	800503a <__kernel_rem_pio2+0x35a>
 8004eac:	f1bb 0f02 	cmp.w	fp, #2
 8004eb0:	d14d      	bne.n	8004f4e <__kernel_rem_pio2+0x26e>
 8004eb2:	4632      	mov	r2, r6
 8004eb4:	463b      	mov	r3, r7
 8004eb6:	4954      	ldr	r1, [pc, #336]	; (8005008 <__kernel_rem_pio2+0x328>)
 8004eb8:	2000      	movs	r0, #0
 8004eba:	f7fb f991 	bl	80001e0 <__aeabi_dsub>
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	460f      	mov	r7, r1
 8004ec2:	2d00      	cmp	r5, #0
 8004ec4:	d043      	beq.n	8004f4e <__kernel_rem_pio2+0x26e>
 8004ec6:	4650      	mov	r0, sl
 8004ec8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8004ff8 <__kernel_rem_pio2+0x318>
 8004ecc:	f000 fa58 	bl	8005380 <scalbn>
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	4639      	mov	r1, r7
 8004ed4:	ec53 2b10 	vmov	r2, r3, d0
 8004ed8:	f7fb f982 	bl	80001e0 <__aeabi_dsub>
 8004edc:	4606      	mov	r6, r0
 8004ede:	460f      	mov	r7, r1
 8004ee0:	e035      	b.n	8004f4e <__kernel_rem_pio2+0x26e>
 8004ee2:	4b4a      	ldr	r3, [pc, #296]	; (800500c <__kernel_rem_pio2+0x32c>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	4639      	mov	r1, r7
 8004eea:	f7fb fb31 	bl	8000550 <__aeabi_dmul>
 8004eee:	f7fb fdc9 	bl	8000a84 <__aeabi_d2iz>
 8004ef2:	f7fb fac3 	bl	800047c <__aeabi_i2d>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	ec43 2b18 	vmov	d8, r2, r3
 8004efe:	4b44      	ldr	r3, [pc, #272]	; (8005010 <__kernel_rem_pio2+0x330>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	f7fb fb25 	bl	8000550 <__aeabi_dmul>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	4639      	mov	r1, r7
 8004f0e:	f7fb f967 	bl	80001e0 <__aeabi_dsub>
 8004f12:	f7fb fdb7 	bl	8000a84 <__aeabi_d2iz>
 8004f16:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f1a:	f84b 0b04 	str.w	r0, [fp], #4
 8004f1e:	ec51 0b18 	vmov	r0, r1, d8
 8004f22:	f7fb f95f 	bl	80001e4 <__adddf3>
 8004f26:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	460f      	mov	r7, r1
 8004f2e:	e75b      	b.n	8004de8 <__kernel_rem_pio2+0x108>
 8004f30:	d106      	bne.n	8004f40 <__kernel_rem_pio2+0x260>
 8004f32:	1e63      	subs	r3, r4, #1
 8004f34:	aa0c      	add	r2, sp, #48	; 0x30
 8004f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8004f3e:	e79d      	b.n	8004e7c <__kernel_rem_pio2+0x19c>
 8004f40:	4b34      	ldr	r3, [pc, #208]	; (8005014 <__kernel_rem_pio2+0x334>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	f7fb fd8a 	bl	8000a5c <__aeabi_dcmpge>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d140      	bne.n	8004fce <__kernel_rem_pio2+0x2ee>
 8004f4c:	4683      	mov	fp, r0
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2300      	movs	r3, #0
 8004f52:	4630      	mov	r0, r6
 8004f54:	4639      	mov	r1, r7
 8004f56:	f7fb fd63 	bl	8000a20 <__aeabi_dcmpeq>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	f000 80c1 	beq.w	80050e2 <__kernel_rem_pio2+0x402>
 8004f60:	1e65      	subs	r5, r4, #1
 8004f62:	462b      	mov	r3, r5
 8004f64:	2200      	movs	r2, #0
 8004f66:	9900      	ldr	r1, [sp, #0]
 8004f68:	428b      	cmp	r3, r1
 8004f6a:	da6d      	bge.n	8005048 <__kernel_rem_pio2+0x368>
 8004f6c:	2a00      	cmp	r2, #0
 8004f6e:	f000 808a 	beq.w	8005086 <__kernel_rem_pio2+0x3a6>
 8004f72:	ab0c      	add	r3, sp, #48	; 0x30
 8004f74:	f1aa 0a18 	sub.w	sl, sl, #24
 8004f78:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80ae 	beq.w	80050de <__kernel_rem_pio2+0x3fe>
 8004f82:	4650      	mov	r0, sl
 8004f84:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004ff8 <__kernel_rem_pio2+0x318>
 8004f88:	f000 f9fa 	bl	8005380 <scalbn>
 8004f8c:	1c6b      	adds	r3, r5, #1
 8004f8e:	00da      	lsls	r2, r3, #3
 8004f90:	9205      	str	r2, [sp, #20]
 8004f92:	ec57 6b10 	vmov	r6, r7, d0
 8004f96:	aa70      	add	r2, sp, #448	; 0x1c0
 8004f98:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800500c <__kernel_rem_pio2+0x32c>
 8004f9c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8004fa0:	462c      	mov	r4, r5
 8004fa2:	f04f 0800 	mov.w	r8, #0
 8004fa6:	2c00      	cmp	r4, #0
 8004fa8:	f280 80d4 	bge.w	8005154 <__kernel_rem_pio2+0x474>
 8004fac:	462c      	mov	r4, r5
 8004fae:	2c00      	cmp	r4, #0
 8004fb0:	f2c0 8102 	blt.w	80051b8 <__kernel_rem_pio2+0x4d8>
 8004fb4:	4b18      	ldr	r3, [pc, #96]	; (8005018 <__kernel_rem_pio2+0x338>)
 8004fb6:	461e      	mov	r6, r3
 8004fb8:	ab70      	add	r3, sp, #448	; 0x1c0
 8004fba:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8004fbe:	1b2b      	subs	r3, r5, r4
 8004fc0:	f04f 0900 	mov.w	r9, #0
 8004fc4:	f04f 0a00 	mov.w	sl, #0
 8004fc8:	2700      	movs	r7, #0
 8004fca:	9306      	str	r3, [sp, #24]
 8004fcc:	e0e6      	b.n	800519c <__kernel_rem_pio2+0x4bc>
 8004fce:	f04f 0b02 	mov.w	fp, #2
 8004fd2:	e756      	b.n	8004e82 <__kernel_rem_pio2+0x1a2>
 8004fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fd8:	bb05      	cbnz	r5, 800501c <__kernel_rem_pio2+0x33c>
 8004fda:	b123      	cbz	r3, 8004fe6 <__kernel_rem_pio2+0x306>
 8004fdc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004fe0:	f8c8 3000 	str.w	r3, [r8]
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	3201      	adds	r2, #1
 8004fe8:	f108 0804 	add.w	r8, r8, #4
 8004fec:	461d      	mov	r5, r3
 8004fee:	e74f      	b.n	8004e90 <__kernel_rem_pio2+0x1b0>
	...
 8004ffc:	3ff00000 	.word	0x3ff00000
 8005000:	08005778 	.word	0x08005778
 8005004:	40200000 	.word	0x40200000
 8005008:	3ff00000 	.word	0x3ff00000
 800500c:	3e700000 	.word	0x3e700000
 8005010:	41700000 	.word	0x41700000
 8005014:	3fe00000 	.word	0x3fe00000
 8005018:	08005738 	.word	0x08005738
 800501c:	1acb      	subs	r3, r1, r3
 800501e:	f8c8 3000 	str.w	r3, [r8]
 8005022:	462b      	mov	r3, r5
 8005024:	e7df      	b.n	8004fe6 <__kernel_rem_pio2+0x306>
 8005026:	1e62      	subs	r2, r4, #1
 8005028:	ab0c      	add	r3, sp, #48	; 0x30
 800502a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800502e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005032:	a90c      	add	r1, sp, #48	; 0x30
 8005034:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005038:	e738      	b.n	8004eac <__kernel_rem_pio2+0x1cc>
 800503a:	1e62      	subs	r2, r4, #1
 800503c:	ab0c      	add	r3, sp, #48	; 0x30
 800503e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005042:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005046:	e7f4      	b.n	8005032 <__kernel_rem_pio2+0x352>
 8005048:	a90c      	add	r1, sp, #48	; 0x30
 800504a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800504e:	3b01      	subs	r3, #1
 8005050:	430a      	orrs	r2, r1
 8005052:	e788      	b.n	8004f66 <__kernel_rem_pio2+0x286>
 8005054:	3301      	adds	r3, #1
 8005056:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800505a:	2900      	cmp	r1, #0
 800505c:	d0fa      	beq.n	8005054 <__kernel_rem_pio2+0x374>
 800505e:	9a08      	ldr	r2, [sp, #32]
 8005060:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8005064:	446a      	add	r2, sp
 8005066:	3a98      	subs	r2, #152	; 0x98
 8005068:	9208      	str	r2, [sp, #32]
 800506a:	9a06      	ldr	r2, [sp, #24]
 800506c:	a920      	add	r1, sp, #128	; 0x80
 800506e:	18a2      	adds	r2, r4, r2
 8005070:	18e3      	adds	r3, r4, r3
 8005072:	f104 0801 	add.w	r8, r4, #1
 8005076:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800507a:	9302      	str	r3, [sp, #8]
 800507c:	9b02      	ldr	r3, [sp, #8]
 800507e:	4543      	cmp	r3, r8
 8005080:	da04      	bge.n	800508c <__kernel_rem_pio2+0x3ac>
 8005082:	461c      	mov	r4, r3
 8005084:	e6a2      	b.n	8004dcc <__kernel_rem_pio2+0xec>
 8005086:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005088:	2301      	movs	r3, #1
 800508a:	e7e4      	b.n	8005056 <__kernel_rem_pio2+0x376>
 800508c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800508e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005092:	f7fb f9f3 	bl	800047c <__aeabi_i2d>
 8005096:	e8e5 0102 	strd	r0, r1, [r5], #8
 800509a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509c:	46ab      	mov	fp, r5
 800509e:	461c      	mov	r4, r3
 80050a0:	f04f 0900 	mov.w	r9, #0
 80050a4:	2600      	movs	r6, #0
 80050a6:	2700      	movs	r7, #0
 80050a8:	9b05      	ldr	r3, [sp, #20]
 80050aa:	4599      	cmp	r9, r3
 80050ac:	dd06      	ble.n	80050bc <__kernel_rem_pio2+0x3dc>
 80050ae:	9b08      	ldr	r3, [sp, #32]
 80050b0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80050b4:	f108 0801 	add.w	r8, r8, #1
 80050b8:	9308      	str	r3, [sp, #32]
 80050ba:	e7df      	b.n	800507c <__kernel_rem_pio2+0x39c>
 80050bc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80050c0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80050c4:	f7fb fa44 	bl	8000550 <__aeabi_dmul>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4630      	mov	r0, r6
 80050ce:	4639      	mov	r1, r7
 80050d0:	f7fb f888 	bl	80001e4 <__adddf3>
 80050d4:	f109 0901 	add.w	r9, r9, #1
 80050d8:	4606      	mov	r6, r0
 80050da:	460f      	mov	r7, r1
 80050dc:	e7e4      	b.n	80050a8 <__kernel_rem_pio2+0x3c8>
 80050de:	3d01      	subs	r5, #1
 80050e0:	e747      	b.n	8004f72 <__kernel_rem_pio2+0x292>
 80050e2:	ec47 6b10 	vmov	d0, r6, r7
 80050e6:	f1ca 0000 	rsb	r0, sl, #0
 80050ea:	f000 f949 	bl	8005380 <scalbn>
 80050ee:	ec57 6b10 	vmov	r6, r7, d0
 80050f2:	4ba0      	ldr	r3, [pc, #640]	; (8005374 <__kernel_rem_pio2+0x694>)
 80050f4:	ee10 0a10 	vmov	r0, s0
 80050f8:	2200      	movs	r2, #0
 80050fa:	4639      	mov	r1, r7
 80050fc:	f7fb fcae 	bl	8000a5c <__aeabi_dcmpge>
 8005100:	b1f8      	cbz	r0, 8005142 <__kernel_rem_pio2+0x462>
 8005102:	4b9d      	ldr	r3, [pc, #628]	; (8005378 <__kernel_rem_pio2+0x698>)
 8005104:	2200      	movs	r2, #0
 8005106:	4630      	mov	r0, r6
 8005108:	4639      	mov	r1, r7
 800510a:	f7fb fa21 	bl	8000550 <__aeabi_dmul>
 800510e:	f7fb fcb9 	bl	8000a84 <__aeabi_d2iz>
 8005112:	4680      	mov	r8, r0
 8005114:	f7fb f9b2 	bl	800047c <__aeabi_i2d>
 8005118:	4b96      	ldr	r3, [pc, #600]	; (8005374 <__kernel_rem_pio2+0x694>)
 800511a:	2200      	movs	r2, #0
 800511c:	f7fb fa18 	bl	8000550 <__aeabi_dmul>
 8005120:	460b      	mov	r3, r1
 8005122:	4602      	mov	r2, r0
 8005124:	4639      	mov	r1, r7
 8005126:	4630      	mov	r0, r6
 8005128:	f7fb f85a 	bl	80001e0 <__aeabi_dsub>
 800512c:	f7fb fcaa 	bl	8000a84 <__aeabi_d2iz>
 8005130:	1c65      	adds	r5, r4, #1
 8005132:	ab0c      	add	r3, sp, #48	; 0x30
 8005134:	f10a 0a18 	add.w	sl, sl, #24
 8005138:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800513c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005140:	e71f      	b.n	8004f82 <__kernel_rem_pio2+0x2a2>
 8005142:	4630      	mov	r0, r6
 8005144:	4639      	mov	r1, r7
 8005146:	f7fb fc9d 	bl	8000a84 <__aeabi_d2iz>
 800514a:	ab0c      	add	r3, sp, #48	; 0x30
 800514c:	4625      	mov	r5, r4
 800514e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005152:	e716      	b.n	8004f82 <__kernel_rem_pio2+0x2a2>
 8005154:	ab0c      	add	r3, sp, #48	; 0x30
 8005156:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800515a:	f7fb f98f 	bl	800047c <__aeabi_i2d>
 800515e:	4632      	mov	r2, r6
 8005160:	463b      	mov	r3, r7
 8005162:	f7fb f9f5 	bl	8000550 <__aeabi_dmul>
 8005166:	4642      	mov	r2, r8
 8005168:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800516c:	464b      	mov	r3, r9
 800516e:	4630      	mov	r0, r6
 8005170:	4639      	mov	r1, r7
 8005172:	f7fb f9ed 	bl	8000550 <__aeabi_dmul>
 8005176:	3c01      	subs	r4, #1
 8005178:	4606      	mov	r6, r0
 800517a:	460f      	mov	r7, r1
 800517c:	e713      	b.n	8004fa6 <__kernel_rem_pio2+0x2c6>
 800517e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8005182:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8005186:	f7fb f9e3 	bl	8000550 <__aeabi_dmul>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4648      	mov	r0, r9
 8005190:	4651      	mov	r1, sl
 8005192:	f7fb f827 	bl	80001e4 <__adddf3>
 8005196:	3701      	adds	r7, #1
 8005198:	4681      	mov	r9, r0
 800519a:	468a      	mov	sl, r1
 800519c:	9b00      	ldr	r3, [sp, #0]
 800519e:	429f      	cmp	r7, r3
 80051a0:	dc02      	bgt.n	80051a8 <__kernel_rem_pio2+0x4c8>
 80051a2:	9b06      	ldr	r3, [sp, #24]
 80051a4:	429f      	cmp	r7, r3
 80051a6:	ddea      	ble.n	800517e <__kernel_rem_pio2+0x49e>
 80051a8:	9a06      	ldr	r2, [sp, #24]
 80051aa:	ab48      	add	r3, sp, #288	; 0x120
 80051ac:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80051b0:	e9c6 9a00 	strd	r9, sl, [r6]
 80051b4:	3c01      	subs	r4, #1
 80051b6:	e6fa      	b.n	8004fae <__kernel_rem_pio2+0x2ce>
 80051b8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	dc0b      	bgt.n	80051d6 <__kernel_rem_pio2+0x4f6>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	dc39      	bgt.n	8005236 <__kernel_rem_pio2+0x556>
 80051c2:	d05d      	beq.n	8005280 <__kernel_rem_pio2+0x5a0>
 80051c4:	9b02      	ldr	r3, [sp, #8]
 80051c6:	f003 0007 	and.w	r0, r3, #7
 80051ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80051ce:	ecbd 8b02 	vpop	{d8}
 80051d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d1f3      	bne.n	80051c4 <__kernel_rem_pio2+0x4e4>
 80051dc:	9b05      	ldr	r3, [sp, #20]
 80051de:	9500      	str	r5, [sp, #0]
 80051e0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80051e4:	eb0d 0403 	add.w	r4, sp, r3
 80051e8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80051ec:	46a2      	mov	sl, r4
 80051ee:	9b00      	ldr	r3, [sp, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f1aa 0a08 	sub.w	sl, sl, #8
 80051f6:	dc69      	bgt.n	80052cc <__kernel_rem_pio2+0x5ec>
 80051f8:	46aa      	mov	sl, r5
 80051fa:	f1ba 0f01 	cmp.w	sl, #1
 80051fe:	f1a4 0408 	sub.w	r4, r4, #8
 8005202:	f300 8083 	bgt.w	800530c <__kernel_rem_pio2+0x62c>
 8005206:	9c05      	ldr	r4, [sp, #20]
 8005208:	ab48      	add	r3, sp, #288	; 0x120
 800520a:	441c      	add	r4, r3
 800520c:	2000      	movs	r0, #0
 800520e:	2100      	movs	r1, #0
 8005210:	2d01      	cmp	r5, #1
 8005212:	f300 809a 	bgt.w	800534a <__kernel_rem_pio2+0x66a>
 8005216:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800521a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800521e:	f1bb 0f00 	cmp.w	fp, #0
 8005222:	f040 8098 	bne.w	8005356 <__kernel_rem_pio2+0x676>
 8005226:	9b04      	ldr	r3, [sp, #16]
 8005228:	e9c3 7800 	strd	r7, r8, [r3]
 800522c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005230:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005234:	e7c6      	b.n	80051c4 <__kernel_rem_pio2+0x4e4>
 8005236:	9e05      	ldr	r6, [sp, #20]
 8005238:	ab48      	add	r3, sp, #288	; 0x120
 800523a:	441e      	add	r6, r3
 800523c:	462c      	mov	r4, r5
 800523e:	2000      	movs	r0, #0
 8005240:	2100      	movs	r1, #0
 8005242:	2c00      	cmp	r4, #0
 8005244:	da33      	bge.n	80052ae <__kernel_rem_pio2+0x5ce>
 8005246:	f1bb 0f00 	cmp.w	fp, #0
 800524a:	d036      	beq.n	80052ba <__kernel_rem_pio2+0x5da>
 800524c:	4602      	mov	r2, r0
 800524e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005252:	9c04      	ldr	r4, [sp, #16]
 8005254:	e9c4 2300 	strd	r2, r3, [r4]
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005260:	f7fa ffbe 	bl	80001e0 <__aeabi_dsub>
 8005264:	ae4a      	add	r6, sp, #296	; 0x128
 8005266:	2401      	movs	r4, #1
 8005268:	42a5      	cmp	r5, r4
 800526a:	da29      	bge.n	80052c0 <__kernel_rem_pio2+0x5e0>
 800526c:	f1bb 0f00 	cmp.w	fp, #0
 8005270:	d002      	beq.n	8005278 <__kernel_rem_pio2+0x598>
 8005272:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005276:	4619      	mov	r1, r3
 8005278:	9b04      	ldr	r3, [sp, #16]
 800527a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800527e:	e7a1      	b.n	80051c4 <__kernel_rem_pio2+0x4e4>
 8005280:	9c05      	ldr	r4, [sp, #20]
 8005282:	ab48      	add	r3, sp, #288	; 0x120
 8005284:	441c      	add	r4, r3
 8005286:	2000      	movs	r0, #0
 8005288:	2100      	movs	r1, #0
 800528a:	2d00      	cmp	r5, #0
 800528c:	da09      	bge.n	80052a2 <__kernel_rem_pio2+0x5c2>
 800528e:	f1bb 0f00 	cmp.w	fp, #0
 8005292:	d002      	beq.n	800529a <__kernel_rem_pio2+0x5ba>
 8005294:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005298:	4619      	mov	r1, r3
 800529a:	9b04      	ldr	r3, [sp, #16]
 800529c:	e9c3 0100 	strd	r0, r1, [r3]
 80052a0:	e790      	b.n	80051c4 <__kernel_rem_pio2+0x4e4>
 80052a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80052a6:	f7fa ff9d 	bl	80001e4 <__adddf3>
 80052aa:	3d01      	subs	r5, #1
 80052ac:	e7ed      	b.n	800528a <__kernel_rem_pio2+0x5aa>
 80052ae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80052b2:	f7fa ff97 	bl	80001e4 <__adddf3>
 80052b6:	3c01      	subs	r4, #1
 80052b8:	e7c3      	b.n	8005242 <__kernel_rem_pio2+0x562>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	e7c8      	b.n	8005252 <__kernel_rem_pio2+0x572>
 80052c0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80052c4:	f7fa ff8e 	bl	80001e4 <__adddf3>
 80052c8:	3401      	adds	r4, #1
 80052ca:	e7cd      	b.n	8005268 <__kernel_rem_pio2+0x588>
 80052cc:	e9da 8900 	ldrd	r8, r9, [sl]
 80052d0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80052d4:	9b00      	ldr	r3, [sp, #0]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	4632      	mov	r2, r6
 80052dc:	463b      	mov	r3, r7
 80052de:	4640      	mov	r0, r8
 80052e0:	4649      	mov	r1, r9
 80052e2:	f7fa ff7f 	bl	80001e4 <__adddf3>
 80052e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4640      	mov	r0, r8
 80052f0:	4649      	mov	r1, r9
 80052f2:	f7fa ff75 	bl	80001e0 <__aeabi_dsub>
 80052f6:	4632      	mov	r2, r6
 80052f8:	463b      	mov	r3, r7
 80052fa:	f7fa ff73 	bl	80001e4 <__adddf3>
 80052fe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005302:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005306:	ed8a 7b00 	vstr	d7, [sl]
 800530a:	e770      	b.n	80051ee <__kernel_rem_pio2+0x50e>
 800530c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005310:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005314:	4640      	mov	r0, r8
 8005316:	4632      	mov	r2, r6
 8005318:	463b      	mov	r3, r7
 800531a:	4649      	mov	r1, r9
 800531c:	f7fa ff62 	bl	80001e4 <__adddf3>
 8005320:	e9cd 0100 	strd	r0, r1, [sp]
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4640      	mov	r0, r8
 800532a:	4649      	mov	r1, r9
 800532c:	f7fa ff58 	bl	80001e0 <__aeabi_dsub>
 8005330:	4632      	mov	r2, r6
 8005332:	463b      	mov	r3, r7
 8005334:	f7fa ff56 	bl	80001e4 <__adddf3>
 8005338:	ed9d 7b00 	vldr	d7, [sp]
 800533c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005340:	ed84 7b00 	vstr	d7, [r4]
 8005344:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005348:	e757      	b.n	80051fa <__kernel_rem_pio2+0x51a>
 800534a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800534e:	f7fa ff49 	bl	80001e4 <__adddf3>
 8005352:	3d01      	subs	r5, #1
 8005354:	e75c      	b.n	8005210 <__kernel_rem_pio2+0x530>
 8005356:	9b04      	ldr	r3, [sp, #16]
 8005358:	9a04      	ldr	r2, [sp, #16]
 800535a:	601f      	str	r7, [r3, #0]
 800535c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005360:	605c      	str	r4, [r3, #4]
 8005362:	609d      	str	r5, [r3, #8]
 8005364:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005368:	60d3      	str	r3, [r2, #12]
 800536a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800536e:	6110      	str	r0, [r2, #16]
 8005370:	6153      	str	r3, [r2, #20]
 8005372:	e727      	b.n	80051c4 <__kernel_rem_pio2+0x4e4>
 8005374:	41700000 	.word	0x41700000
 8005378:	3e700000 	.word	0x3e700000
 800537c:	00000000 	.word	0x00000000

08005380 <scalbn>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	ec55 4b10 	vmov	r4, r5, d0
 8005386:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800538a:	4606      	mov	r6, r0
 800538c:	462b      	mov	r3, r5
 800538e:	b999      	cbnz	r1, 80053b8 <scalbn+0x38>
 8005390:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005394:	4323      	orrs	r3, r4
 8005396:	d03f      	beq.n	8005418 <scalbn+0x98>
 8005398:	4b35      	ldr	r3, [pc, #212]	; (8005470 <scalbn+0xf0>)
 800539a:	4629      	mov	r1, r5
 800539c:	ee10 0a10 	vmov	r0, s0
 80053a0:	2200      	movs	r2, #0
 80053a2:	f7fb f8d5 	bl	8000550 <__aeabi_dmul>
 80053a6:	4b33      	ldr	r3, [pc, #204]	; (8005474 <scalbn+0xf4>)
 80053a8:	429e      	cmp	r6, r3
 80053aa:	4604      	mov	r4, r0
 80053ac:	460d      	mov	r5, r1
 80053ae:	da10      	bge.n	80053d2 <scalbn+0x52>
 80053b0:	a327      	add	r3, pc, #156	; (adr r3, 8005450 <scalbn+0xd0>)
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	e01f      	b.n	80053f8 <scalbn+0x78>
 80053b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80053bc:	4291      	cmp	r1, r2
 80053be:	d10c      	bne.n	80053da <scalbn+0x5a>
 80053c0:	ee10 2a10 	vmov	r2, s0
 80053c4:	4620      	mov	r0, r4
 80053c6:	4629      	mov	r1, r5
 80053c8:	f7fa ff0c 	bl	80001e4 <__adddf3>
 80053cc:	4604      	mov	r4, r0
 80053ce:	460d      	mov	r5, r1
 80053d0:	e022      	b.n	8005418 <scalbn+0x98>
 80053d2:	460b      	mov	r3, r1
 80053d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80053d8:	3936      	subs	r1, #54	; 0x36
 80053da:	f24c 3250 	movw	r2, #50000	; 0xc350
 80053de:	4296      	cmp	r6, r2
 80053e0:	dd0d      	ble.n	80053fe <scalbn+0x7e>
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	a11c      	add	r1, pc, #112	; (adr r1, 8005458 <scalbn+0xd8>)
 80053e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053ea:	da02      	bge.n	80053f2 <scalbn+0x72>
 80053ec:	a11c      	add	r1, pc, #112	; (adr r1, 8005460 <scalbn+0xe0>)
 80053ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053f2:	a319      	add	r3, pc, #100	; (adr r3, 8005458 <scalbn+0xd8>)
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f7fb f8aa 	bl	8000550 <__aeabi_dmul>
 80053fc:	e7e6      	b.n	80053cc <scalbn+0x4c>
 80053fe:	1872      	adds	r2, r6, r1
 8005400:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005404:	428a      	cmp	r2, r1
 8005406:	dcec      	bgt.n	80053e2 <scalbn+0x62>
 8005408:	2a00      	cmp	r2, #0
 800540a:	dd08      	ble.n	800541e <scalbn+0x9e>
 800540c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005410:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005414:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005418:	ec45 4b10 	vmov	d0, r4, r5
 800541c:	bd70      	pop	{r4, r5, r6, pc}
 800541e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005422:	da08      	bge.n	8005436 <scalbn+0xb6>
 8005424:	2d00      	cmp	r5, #0
 8005426:	a10a      	add	r1, pc, #40	; (adr r1, 8005450 <scalbn+0xd0>)
 8005428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800542c:	dac0      	bge.n	80053b0 <scalbn+0x30>
 800542e:	a10e      	add	r1, pc, #56	; (adr r1, 8005468 <scalbn+0xe8>)
 8005430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005434:	e7bc      	b.n	80053b0 <scalbn+0x30>
 8005436:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800543a:	3236      	adds	r2, #54	; 0x36
 800543c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005440:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005444:	4620      	mov	r0, r4
 8005446:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <scalbn+0xf8>)
 8005448:	2200      	movs	r2, #0
 800544a:	e7d5      	b.n	80053f8 <scalbn+0x78>
 800544c:	f3af 8000 	nop.w
 8005450:	c2f8f359 	.word	0xc2f8f359
 8005454:	01a56e1f 	.word	0x01a56e1f
 8005458:	8800759c 	.word	0x8800759c
 800545c:	7e37e43c 	.word	0x7e37e43c
 8005460:	8800759c 	.word	0x8800759c
 8005464:	fe37e43c 	.word	0xfe37e43c
 8005468:	c2f8f359 	.word	0xc2f8f359
 800546c:	81a56e1f 	.word	0x81a56e1f
 8005470:	43500000 	.word	0x43500000
 8005474:	ffff3cb0 	.word	0xffff3cb0
 8005478:	3c900000 	.word	0x3c900000
 800547c:	00000000 	.word	0x00000000

08005480 <floor>:
 8005480:	ec51 0b10 	vmov	r0, r1, d0
 8005484:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800548c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8005490:	2e13      	cmp	r6, #19
 8005492:	ee10 5a10 	vmov	r5, s0
 8005496:	ee10 8a10 	vmov	r8, s0
 800549a:	460c      	mov	r4, r1
 800549c:	dc31      	bgt.n	8005502 <floor+0x82>
 800549e:	2e00      	cmp	r6, #0
 80054a0:	da14      	bge.n	80054cc <floor+0x4c>
 80054a2:	a333      	add	r3, pc, #204	; (adr r3, 8005570 <floor+0xf0>)
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f7fa fe9c 	bl	80001e4 <__adddf3>
 80054ac:	2200      	movs	r2, #0
 80054ae:	2300      	movs	r3, #0
 80054b0:	f7fb fade 	bl	8000a70 <__aeabi_dcmpgt>
 80054b4:	b138      	cbz	r0, 80054c6 <floor+0x46>
 80054b6:	2c00      	cmp	r4, #0
 80054b8:	da53      	bge.n	8005562 <floor+0xe2>
 80054ba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80054be:	4325      	orrs	r5, r4
 80054c0:	d052      	beq.n	8005568 <floor+0xe8>
 80054c2:	4c2d      	ldr	r4, [pc, #180]	; (8005578 <floor+0xf8>)
 80054c4:	2500      	movs	r5, #0
 80054c6:	4621      	mov	r1, r4
 80054c8:	4628      	mov	r0, r5
 80054ca:	e024      	b.n	8005516 <floor+0x96>
 80054cc:	4f2b      	ldr	r7, [pc, #172]	; (800557c <floor+0xfc>)
 80054ce:	4137      	asrs	r7, r6
 80054d0:	ea01 0307 	and.w	r3, r1, r7
 80054d4:	4303      	orrs	r3, r0
 80054d6:	d01e      	beq.n	8005516 <floor+0x96>
 80054d8:	a325      	add	r3, pc, #148	; (adr r3, 8005570 <floor+0xf0>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	f7fa fe81 	bl	80001e4 <__adddf3>
 80054e2:	2200      	movs	r2, #0
 80054e4:	2300      	movs	r3, #0
 80054e6:	f7fb fac3 	bl	8000a70 <__aeabi_dcmpgt>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d0eb      	beq.n	80054c6 <floor+0x46>
 80054ee:	2c00      	cmp	r4, #0
 80054f0:	bfbe      	ittt	lt
 80054f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80054f6:	4133      	asrlt	r3, r6
 80054f8:	18e4      	addlt	r4, r4, r3
 80054fa:	ea24 0407 	bic.w	r4, r4, r7
 80054fe:	2500      	movs	r5, #0
 8005500:	e7e1      	b.n	80054c6 <floor+0x46>
 8005502:	2e33      	cmp	r6, #51	; 0x33
 8005504:	dd0b      	ble.n	800551e <floor+0x9e>
 8005506:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800550a:	d104      	bne.n	8005516 <floor+0x96>
 800550c:	ee10 2a10 	vmov	r2, s0
 8005510:	460b      	mov	r3, r1
 8005512:	f7fa fe67 	bl	80001e4 <__adddf3>
 8005516:	ec41 0b10 	vmov	d0, r0, r1
 800551a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800551e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8005522:	f04f 37ff 	mov.w	r7, #4294967295
 8005526:	40df      	lsrs	r7, r3
 8005528:	4238      	tst	r0, r7
 800552a:	d0f4      	beq.n	8005516 <floor+0x96>
 800552c:	a310      	add	r3, pc, #64	; (adr r3, 8005570 <floor+0xf0>)
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	f7fa fe57 	bl	80001e4 <__adddf3>
 8005536:	2200      	movs	r2, #0
 8005538:	2300      	movs	r3, #0
 800553a:	f7fb fa99 	bl	8000a70 <__aeabi_dcmpgt>
 800553e:	2800      	cmp	r0, #0
 8005540:	d0c1      	beq.n	80054c6 <floor+0x46>
 8005542:	2c00      	cmp	r4, #0
 8005544:	da0a      	bge.n	800555c <floor+0xdc>
 8005546:	2e14      	cmp	r6, #20
 8005548:	d101      	bne.n	800554e <floor+0xce>
 800554a:	3401      	adds	r4, #1
 800554c:	e006      	b.n	800555c <floor+0xdc>
 800554e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005552:	2301      	movs	r3, #1
 8005554:	40b3      	lsls	r3, r6
 8005556:	441d      	add	r5, r3
 8005558:	45a8      	cmp	r8, r5
 800555a:	d8f6      	bhi.n	800554a <floor+0xca>
 800555c:	ea25 0507 	bic.w	r5, r5, r7
 8005560:	e7b1      	b.n	80054c6 <floor+0x46>
 8005562:	2500      	movs	r5, #0
 8005564:	462c      	mov	r4, r5
 8005566:	e7ae      	b.n	80054c6 <floor+0x46>
 8005568:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800556c:	e7ab      	b.n	80054c6 <floor+0x46>
 800556e:	bf00      	nop
 8005570:	8800759c 	.word	0x8800759c
 8005574:	7e37e43c 	.word	0x7e37e43c
 8005578:	bff00000 	.word	0xbff00000
 800557c:	000fffff 	.word	0x000fffff

08005580 <_init>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	bf00      	nop
 8005584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005586:	bc08      	pop	{r3}
 8005588:	469e      	mov	lr, r3
 800558a:	4770      	bx	lr

0800558c <_fini>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr
