
clcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080060e0  080060e0  000160e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006180  08006180  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006180  08006180  00016180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006188  08006188  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  20000068  080061f8  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  080061f8  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d9b6  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022e3  00000000  00000000  0002da91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0002fd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097c  00000000  00000000  000309b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181c8  00000000  00000000  0003132c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff32  00000000  00000000  000494f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095e2d  00000000  00000000  00059426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bc8  00000000  00000000  000ef254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f2e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060c8 	.word	0x080060c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080060c8 	.word	0x080060c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <I2C_CLCD_Delay_us>:
#include "I2C_CLCD.h"

extern I2C_HandleTypeDef hi2c1; //extern : use to main.c

void I2C_CLCD_Delay_us(uint8_t us)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
   volatile uint8_t i;

   for(i = 0; i < 19*us/10; i++);
 8000586:	2300      	movs	r3, #0
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e004      	b.n	8000596 <I2C_CLCD_Delay_us+0x1a>
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	3301      	adds	r3, #1
 8000592:	b2db      	uxtb	r3, r3
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4619      	mov	r1, r3
 800059c:	79fa      	ldrb	r2, [r7, #7]
 800059e:	4613      	mov	r3, r2
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	4413      	add	r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	4413      	add	r3, r2
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <I2C_CLCD_Delay_us+0x4c>)
 80005aa:	fb82 0203 	smull	r0, r2, r2, r3
 80005ae:	1092      	asrs	r2, r2, #2
 80005b0:	17db      	asrs	r3, r3, #31
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	4299      	cmp	r1, r3
 80005b6:	dbe9      	blt.n	800058c <I2C_CLCD_Delay_us+0x10>
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	66666667 	.word	0x66666667

080005cc <I2C_CLCD_SendByte>:

void I2C_CLCD_SendByte(uint8_t RS_State, uint8_t Byte)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	4603      	mov	r3, r0
 80005d4:	460a      	mov	r2, r1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	4613      	mov	r3, r2
 80005da:	71bb      	strb	r3, [r7, #6]
   //data separation code
   uint8_t i;
   uint8_t buffer[4];

   //data up byte transmit
   for(i = 0; i < 2; i++)
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]
 80005e0:	e01c      	b.n	800061c <I2C_CLCD_SendByte+0x50>
   {
      buffer[i] = (Byte & 0xf0) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E) | (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 80005e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005e6:	f023 030f 	bic.w	r3, r3, #15
 80005ea:	b25b      	sxtb	r3, r3
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	b25b      	sxtb	r3, r3
 80005f2:	7bfa      	ldrb	r2, [r7, #15]
 80005f4:	2a00      	cmp	r2, #0
 80005f6:	d101      	bne.n	80005fc <I2C_CLCD_SendByte+0x30>
 80005f8:	2204      	movs	r2, #4
 80005fa:	e000      	b.n	80005fe <I2C_CLCD_SendByte+0x32>
 80005fc:	2200      	movs	r2, #0
 80005fe:	4313      	orrs	r3, r2
 8000600:	b25a      	sxtb	r2, r3
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	4313      	orrs	r3, r2
 8000608:	b25a      	sxtb	r2, r3
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	3310      	adds	r3, #16
 8000610:	443b      	add	r3, r7
 8000612:	f803 2c08 	strb.w	r2, [r3, #-8]
   for(i = 0; i < 2; i++)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	3301      	adds	r3, #1
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d9df      	bls.n	80005e2 <I2C_CLCD_SendByte+0x16>
   }
   //data down byte transmit
   for(i = 0; i < 2; i++)
 8000622:	2300      	movs	r3, #0
 8000624:	73fb      	strb	r3, [r7, #15]
 8000626:	e01b      	b.n	8000660 <I2C_CLCD_SendByte+0x94>
   {   //P4~P7, P3, P2(Enable signal --> transmit before 1, after 0, P1(R = busy check), P0
      buffer[i+2] = (Byte << 4) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E) | (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	011b      	lsls	r3, r3, #4
 800062c:	b25b      	sxtb	r3, r3
 800062e:	f043 0308 	orr.w	r3, r3, #8
 8000632:	b25b      	sxtb	r3, r3
 8000634:	7bfa      	ldrb	r2, [r7, #15]
 8000636:	2a00      	cmp	r2, #0
 8000638:	d101      	bne.n	800063e <I2C_CLCD_SendByte+0x72>
 800063a:	2204      	movs	r2, #4
 800063c:	e000      	b.n	8000640 <I2C_CLCD_SendByte+0x74>
 800063e:	2200      	movs	r2, #0
 8000640:	4313      	orrs	r3, r2
 8000642:	b25a      	sxtb	r2, r3
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	4313      	orrs	r3, r2
 800064a:	b25a      	sxtb	r2, r3
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	3302      	adds	r3, #2
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	3310      	adds	r3, #16
 8000654:	443b      	add	r3, r7
 8000656:	f803 2c08 	strb.w	r2, [r3, #-8]
   for(i = 0; i < 2; i++)
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	3301      	adds	r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d9e0      	bls.n	8000628 <I2C_CLCD_SendByte+0x5c>
   }
   //data I2C transmit
   HAL_I2C_Master_Transmit(&hi2c1, PCF8574_AD | WRITE, buffer, 4, 300);
 8000666:	f107 0208 	add.w	r2, r7, #8
 800066a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2304      	movs	r3, #4
 8000672:	214e      	movs	r1, #78	; 0x4e
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <I2C_CLCD_SendByte+0xbc>)
 8000676:	f002 fa87 	bl	8002b88 <HAL_I2C_Master_Transmit>

   I2C_CLCD_Delay_us(40);
 800067a:	2028      	movs	r0, #40	; 0x28
 800067c:	f7ff ff7e 	bl	800057c <I2C_CLCD_Delay_us>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200001b0 	.word	0x200001b0

0800068c <I2C_CLCD_init>:

void I2C_CLCD_init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
   uint8_t i;
   uint8_t CLCD_Init_CMD[4] = {0x28, 0x0c, 0x01, 0x06};
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <I2C_CLCD_init+0x58>)
 8000694:	603b      	str	r3, [r7, #0]

   HAL_Delay(100);
 8000696:	2064      	movs	r0, #100	; 0x64
 8000698:	f000 fe74 	bl	8001384 <HAL_Delay>

   I2C_CLCD_SendByte(0, 0x02);
 800069c:	2102      	movs	r1, #2
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ff94 	bl	80005cc <I2C_CLCD_SendByte>

   HAL_Delay(2);
 80006a4:	2002      	movs	r0, #2
 80006a6:	f000 fe6d 	bl	8001384 <HAL_Delay>

   for(i = 0; i < 4; i++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	e011      	b.n	80006d4 <I2C_CLCD_init+0x48>
   {
      I2C_CLCD_SendByte(0, CLCD_Init_CMD[i]);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	3308      	adds	r3, #8
 80006b4:	443b      	add	r3, r7
 80006b6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80006ba:	4619      	mov	r1, r3
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff ff85 	bl	80005cc <I2C_CLCD_SendByte>

      if(i == 2) HAL_Delay(2);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d102      	bne.n	80006ce <I2C_CLCD_init+0x42>
 80006c8:	2002      	movs	r0, #2
 80006ca:	f000 fe5b 	bl	8001384 <HAL_Delay>
   for(i = 0; i < 4; i++)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	3301      	adds	r3, #1
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d9ea      	bls.n	80006b0 <I2C_CLCD_init+0x24>
   }
}
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	06010c28 	.word	0x06010c28

080006e8 <I2C_CLCD_GotoXY>:

void I2C_CLCD_GotoXY(uint8_t X, uint8_t Y)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
   I2C_CLCD_SendByte(0, 0x80 | (0x40 * Y + X));
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	019b      	lsls	r3, r3, #6
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4413      	add	r3, r2
 8000702:	b2db      	uxtb	r3, r3
 8000704:	b25b      	sxtb	r3, r3
 8000706:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800070a:	b25b      	sxtb	r3, r3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4619      	mov	r1, r3
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff ff5b 	bl	80005cc <I2C_CLCD_SendByte>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <I2C_CLCD_PutC>:

void I2C_CLCD_PutC(uint8_t C)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]
   if(C == '\f')
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b0c      	cmp	r3, #12
 800072c:	d107      	bne.n	800073e <I2C_CLCD_PutC+0x20>
   {
      I2C_CLCD_SendByte(0, 0x01);
 800072e:	2101      	movs	r1, #1
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ff4b 	bl	80005cc <I2C_CLCD_SendByte>
      HAL_Delay(2);
 8000736:	2002      	movs	r0, #2
 8000738:	f000 fe24 	bl	8001384 <HAL_Delay>
   }
   else
   {
      I2C_CLCD_SendByte(1, C);
   }
}
 800073c:	e00c      	b.n	8000758 <I2C_CLCD_PutC+0x3a>
   else if(C == '\n')
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b0a      	cmp	r3, #10
 8000742:	d104      	bne.n	800074e <I2C_CLCD_PutC+0x30>
      I2C_CLCD_GotoXY(0, 1);
 8000744:	2101      	movs	r1, #1
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff ffce 	bl	80006e8 <I2C_CLCD_GotoXY>
}
 800074c:	e004      	b.n	8000758 <I2C_CLCD_PutC+0x3a>
      I2C_CLCD_SendByte(1, C);
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4619      	mov	r1, r3
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff ff3a 	bl	80005cc <I2C_CLCD_SendByte>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <I2C_CLCD_PutStr>:

void I2C_CLCD_PutStr(uint8_t *Str)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
   while(*Str) I2C_CLCD_PutC(*Str++);
 8000768:	e006      	b.n	8000778 <I2C_CLCD_PutStr+0x18>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ffd3 	bl	800071e <I2C_CLCD_PutC>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f4      	bne.n	800076a <I2C_CLCD_PutStr+0xa>
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <I2C_CLCD_CustomFont>:
void I2C_CLCD_ShiftStop(){
   I2C_CLCD_SendByte(0, 0b00010000);
}

// auto address --> if 1st address check
void I2C_CLCD_CustomFont(){
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
   I2C_CLCD_SendByte(0, 0x40);
 8000790:	2140      	movs	r1, #64	; 0x40
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff ff1a 	bl	80005cc <I2C_CLCD_SendByte>
   for(int i = 0 ; i < 8 ; i++)
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	e006      	b.n	80007ac <I2C_CLCD_CustomFont+0x22>
      I2C_CLCD_SendByte(1,0b00000); //I2C_CLCD_PutC(0)
 800079e:	2100      	movs	r1, #0
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff ff13 	bl	80005cc <I2C_CLCD_SendByte>
   for(int i = 0 ; i < 8 ; i++)
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	3301      	adds	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	2b07      	cmp	r3, #7
 80007b0:	ddf5      	ble.n	800079e <I2C_CLCD_CustomFont+0x14>
   for(int i = 0 ; i < 8 ; i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	e006      	b.n	80007c6 <I2C_CLCD_CustomFont+0x3c>
      I2C_CLCD_SendByte(1,0b10000); //I2C_CLCD_PutC(1)
 80007b8:	2110      	movs	r1, #16
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff ff06 	bl	80005cc <I2C_CLCD_SendByte>
   for(int i = 0 ; i < 8 ; i++)
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	3301      	adds	r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	2b07      	cmp	r3, #7
 80007ca:	ddf5      	ble.n	80007b8 <I2C_CLCD_CustomFont+0x2e>
   for(int i = 0 ; i < 8 ; i++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	e006      	b.n	80007e0 <I2C_CLCD_CustomFont+0x56>
      I2C_CLCD_SendByte(1,0b11000); //I2C_CLCD_PutC(2)
 80007d2:	2118      	movs	r1, #24
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff fef9 	bl	80005cc <I2C_CLCD_SendByte>
   for(int i = 0 ; i < 8 ; i++)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	3301      	adds	r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b07      	cmp	r3, #7
 80007e4:	ddf5      	ble.n	80007d2 <I2C_CLCD_CustomFont+0x48>
   for(int i = 0 ; i < 8 ; i++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	e006      	b.n	80007fa <I2C_CLCD_CustomFont+0x70>
      I2C_CLCD_SendByte(1,0b11100); //I2C_CLCD_PutC(3)
 80007ec:	211c      	movs	r1, #28
 80007ee:	2001      	movs	r0, #1
 80007f0:	f7ff feec 	bl	80005cc <I2C_CLCD_SendByte>
   for(int i = 0 ; i < 8 ; i++)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	2b07      	cmp	r3, #7
 80007fe:	ddf5      	ble.n	80007ec <I2C_CLCD_CustomFont+0x62>
   for(int i = 0 ; i < 8 ; i++)
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	e006      	b.n	8000814 <I2C_CLCD_CustomFont+0x8a>
      I2C_CLCD_SendByte(1,0b11110); //I2C_CLCD_PutC(4)
 8000806:	211e      	movs	r1, #30
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff fedf 	bl	80005cc <I2C_CLCD_SendByte>
   for(int i = 0 ; i < 8 ; i++)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3301      	adds	r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b07      	cmp	r3, #7
 8000818:	ddf5      	ble.n	8000806 <I2C_CLCD_CustomFont+0x7c>
   for(int i = 0 ; i < 8 ; i++)
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	e006      	b.n	800082e <I2C_CLCD_CustomFont+0xa4>
      I2C_CLCD_SendByte(1,0b11111); //I2C_CLCD_PutC(5)
 8000820:	211f      	movs	r1, #31
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff fed2 	bl	80005cc <I2C_CLCD_SendByte>
   for(int i = 0 ; i < 8 ; i++)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	2b07      	cmp	r3, #7
 8000832:	ddf5      	ble.n	8000820 <I2C_CLCD_CustomFont+0x96>
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <I2C_CLCD_CG_ScrollLeft2>:
void I2C_CLCD_CG_ScrollLeft(){
   for(int i = 0; i <16; i++)
      CGBuffer[i] = CGBuffer[i] << 1;
}

void I2C_CLCD_CG_ScrollLeft2(){
 8000840:	b4b0      	push	{r4, r5, r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
   for(int i = 0; i<8; i++)
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	e013      	b.n	8000874 <I2C_CLCD_CG_ScrollLeft2+0x34>
      CGBuffer2[i] = CGBuffer2[i] << 1;
 800084c:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <I2C_CLCD_CG_ScrollLeft2+0x48>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	4413      	add	r3, r2
 8000854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000858:	1890      	adds	r0, r2, r2
 800085a:	eb43 0103 	adc.w	r1, r3, r3
 800085e:	4602      	mov	r2, r0
 8000860:	460b      	mov	r3, r1
 8000862:	4d09      	ldr	r5, [pc, #36]	; (8000888 <I2C_CLCD_CG_ScrollLeft2+0x48>)
 8000864:	687c      	ldr	r4, [r7, #4]
 8000866:	00e4      	lsls	r4, r4, #3
 8000868:	442c      	add	r4, r5
 800086a:	e9c4 2300 	strd	r2, r3, [r4]
   for(int i = 0; i<8; i++)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3301      	adds	r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b07      	cmp	r3, #7
 8000878:	dde8      	ble.n	800084c <I2C_CLCD_CG_ScrollLeft2+0xc>
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bcb0      	pop	{r4, r5, r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000088 	.word	0x20000088

0800088c <I2C_CLCD_CG_DrawPixel2>:

void I2C_CLCD_CG_DrawPixel(uint8_t x, uint8_t y){
   CGBuffer[y] |= 1 << (19-x);
}

void I2C_CLCD_CG_DrawPixel2(uint8_t x, uint8_t y){
 800088c:	b4f0      	push	{r4, r5, r6, r7}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4606      	mov	r6, r0
 8000894:	4608      	mov	r0, r1
 8000896:	4631      	mov	r1, r6
 8000898:	71f9      	strb	r1, [r7, #7]
 800089a:	4601      	mov	r1, r0
 800089c:	71b9      	strb	r1, [r7, #6]
   CGBuffer2[y] |= 1 << (39-x);
 800089e:	79b9      	ldrb	r1, [r7, #6]
 80008a0:	480f      	ldr	r0, [pc, #60]	; (80008e0 <I2C_CLCD_CG_DrawPixel2+0x54>)
 80008a2:	00c9      	lsls	r1, r1, #3
 80008a4:	4401      	add	r1, r0
 80008a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80008aa:	79fe      	ldrb	r6, [r7, #7]
 80008ac:	f1c6 0627 	rsb	r6, r6, #39	; 0x27
 80008b0:	f04f 0c01 	mov.w	ip, #1
 80008b4:	fa0c f606 	lsl.w	r6, ip, r6
 80008b8:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 80008bc:	4632      	mov	r2, r6
 80008be:	4663      	mov	r3, ip
 80008c0:	79be      	ldrb	r6, [r7, #6]
 80008c2:	ea40 0402 	orr.w	r4, r0, r2
 80008c6:	ea41 0503 	orr.w	r5, r1, r3
 80008ca:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <I2C_CLCD_CG_DrawPixel2+0x54>)
 80008cc:	00f3      	lsls	r3, r6, #3
 80008ce:	4413      	add	r3, r2
 80008d0:	e9c3 4500 	strd	r4, r5, [r3]
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bcf0      	pop	{r4, r5, r6, r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000088 	.word	0x20000088

080008e4 <I2C_CLCD_CG_Update2>:
         I2C_CLCD_SendByte(1, CGBuffer[i+8]>>(15-j*5));
      }
   }
}

void I2C_CLCD_CG_Update2(){
 80008e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
   I2C_CLCD_SendByte(0, 0x40);
 80008ea:	2140      	movs	r1, #64	; 0x40
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff fe6d 	bl	80005cc <I2C_CLCD_SendByte>
   //CGRAM 0~3
   for(int j = 0; j < 8; j++){
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	e02b      	b.n	8000950 <I2C_CLCD_CG_Update2+0x6c>
      for(int i = 0; i < 8; i++){
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	e022      	b.n	8000944 <I2C_CLCD_CG_Update2+0x60>
         I2C_CLCD_SendByte(1, CGBuffer2[i]>>(35-j*5));
 80008fe:	4a18      	ldr	r2, [pc, #96]	; (8000960 <I2C_CLCD_CG_Update2+0x7c>)
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	4413      	add	r3, r2
 8000906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	4601      	mov	r1, r0
 800090e:	0789      	lsls	r1, r1, #30
 8000910:	1a09      	subs	r1, r1, r0
 8000912:	0089      	lsls	r1, r1, #2
 8000914:	1a09      	subs	r1, r1, r0
 8000916:	3123      	adds	r1, #35	; 0x23
 8000918:	f1c1 0620 	rsb	r6, r1, #32
 800091c:	f1a1 0020 	sub.w	r0, r1, #32
 8000920:	fa22 f401 	lsr.w	r4, r2, r1
 8000924:	fa03 f606 	lsl.w	r6, r3, r6
 8000928:	4334      	orrs	r4, r6
 800092a:	fa23 f000 	lsr.w	r0, r3, r0
 800092e:	4304      	orrs	r4, r0
 8000930:	fa23 f501 	lsr.w	r5, r3, r1
 8000934:	b2e3      	uxtb	r3, r4
 8000936:	4619      	mov	r1, r3
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fe47 	bl	80005cc <I2C_CLCD_SendByte>
      for(int i = 0; i < 8; i++){
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	2b07      	cmp	r3, #7
 8000948:	ddd9      	ble.n	80008fe <I2C_CLCD_CG_Update2+0x1a>
   for(int j = 0; j < 8; j++){
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3301      	adds	r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b07      	cmp	r3, #7
 8000954:	ddd0      	ble.n	80008f8 <I2C_CLCD_CG_Update2+0x14>
      }
   }
}
 8000956:	bf00      	nop
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000960:	20000088 	.word	0x20000088

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f000 fc99 	bl	80012a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 f89b 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000972:	f000 f9cf 	bl	8000d14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000976:	f000 f9ad 	bl	8000cd4 <MX_DMA_Init>
  MX_I2C1_Init();
 800097a:	f000 f953 	bl	8000c24 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800097e:	f000 f97f 	bl	8000c80 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000982:	f000 f8ef 	bl	8000b64 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  initUart(&huart2);
 8000986:	483f      	ldr	r0, [pc, #252]	; (8000a84 <main+0x120>)
 8000988:	f000 fc02 	bl	8001190 <initUart>
  I2C_CLCD_init();
 800098c:	f7ff fe7e 	bl	800068c <I2C_CLCD_init>
  I2C_CLCD_GotoXY(0, 0);
 8000990:	2100      	movs	r1, #0
 8000992:	2000      	movs	r0, #0
 8000994:	f7ff fea8 	bl	80006e8 <I2C_CLCD_GotoXY>
  I2C_CLCD_PutStr("                      ");
 8000998:	483b      	ldr	r0, [pc, #236]	; (8000a88 <main+0x124>)
 800099a:	f7ff fee1 	bl	8000760 <I2C_CLCD_PutStr>
  I2C_CLCD_GotoXY(0, 1);
 800099e:	2101      	movs	r1, #1
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff fea1 	bl	80006e8 <I2C_CLCD_GotoXY>
  I2C_CLCD_PutStr("                      ");
 80009a6:	4838      	ldr	r0, [pc, #224]	; (8000a88 <main+0x124>)
 80009a8:	f7ff feda 	bl	8000760 <I2C_CLCD_PutStr>
  I2C_CLCD_CustomFont(); //CustomFont Upload
 80009ac:	f7ff feed 	bl	800078a <I2C_CLCD_CustomFont>
//  I2C_CLCD_PutC(3);
//  I2C_CLCD_PutC(4);
//  I2C_CLCD_PutC(5);

  //0x00 ~ 0xff
  printf("i2c scan start\n");
 80009b0:	4836      	ldr	r0, [pc, #216]	; (8000a8c <main+0x128>)
 80009b2:	f004 fb47 	bl	8005044 <puts>
  for (int address = 0; address < 256; address++){
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
 80009ba:	e010      	b.n	80009de <main+0x7a>
     if(HAL_I2C_IsDeviceReady(&hi2c1, address, 0, 10) == HAL_OK){
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	b299      	uxth	r1, r3
 80009c0:	230a      	movs	r3, #10
 80009c2:	2200      	movs	r2, #0
 80009c4:	4832      	ldr	r0, [pc, #200]	; (8000a90 <main+0x12c>)
 80009c6:	f002 f9dd 	bl	8002d84 <HAL_I2C_IsDeviceReady>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d103      	bne.n	80009d8 <main+0x74>
        printf("%02x is ready\n", address);
 80009d0:	69f9      	ldr	r1, [r7, #28]
 80009d2:	4830      	ldr	r0, [pc, #192]	; (8000a94 <main+0x130>)
 80009d4:	f004 fad0 	bl	8004f78 <iprintf>
  for (int address = 0; address < 256; address++){
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	3301      	adds	r3, #1
 80009dc:	61fb      	str	r3, [r7, #28]
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	2bff      	cmp	r3, #255	; 0xff
 80009e2:	ddeb      	ble.n	80009bc <main+0x58>
     }
  }
  printf("i2c scan end\n");
 80009e4:	482c      	ldr	r0, [pc, #176]	; (8000a98 <main+0x134>)
 80009e6:	f004 fb2d 	bl	8005044 <puts>

   uint16_t adcValue[2];
   HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValue, 2); //larger than channel's memory --> Can Average Data --> GOOD!
 80009ea:	f107 0318 	add.w	r3, r7, #24
 80009ee:	2202      	movs	r2, #2
 80009f0:	4619      	mov	r1, r3
 80009f2:	482a      	ldr	r0, [pc, #168]	; (8000a9c <main+0x138>)
 80009f4:	f000 fd2e 	bl	8001454 <HAL_ADC_Start_DMA>
   I2C_CLCD_GotoXY(0,0);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff fe74 	bl	80006e8 <I2C_CLCD_GotoXY>
   I2C_CLCD_PutC(0);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fe8c 	bl	800071e <I2C_CLCD_PutC>
   I2C_CLCD_PutC(1);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff fe89 	bl	800071e <I2C_CLCD_PutC>
   I2C_CLCD_PutC(2);
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f7ff fe86 	bl	800071e <I2C_CLCD_PutC>
   I2C_CLCD_PutC(3);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f7ff fe83 	bl	800071e <I2C_CLCD_PutC>
//   I2C_CLCD_GotoXY(0,1);
   I2C_CLCD_PutC(4);
 8000a18:	2004      	movs	r0, #4
 8000a1a:	f7ff fe80 	bl	800071e <I2C_CLCD_PutC>
   I2C_CLCD_PutC(5);
 8000a1e:	2005      	movs	r0, #5
 8000a20:	f7ff fe7d 	bl	800071e <I2C_CLCD_PutC>
   I2C_CLCD_PutC(6);
 8000a24:	2006      	movs	r0, #6
 8000a26:	f7ff fe7a 	bl	800071e <I2C_CLCD_PutC>
   I2C_CLCD_PutC(7);
 8000a2a:	2007      	movs	r0, #7
 8000a2c:	f7ff fe77 	bl	800071e <I2C_CLCD_PutC>

   I2C_CLCD_CG_Update2();
 8000a30:	f7ff ff58 	bl	80008e4 <I2C_CLCD_CG_Update2>
//     I2C_CLCD_Progressbar(adcValue2/51, 1);


//     I2C_CLCD_Progressbar(adcValue[0]/51, 0); //0~4095 --> 0~80 mapping ch 0
//     I2C_CLCD_Progressbar(adcValue[1]/51, 1); //ch 1
     I2C_CLCD_CG_ScrollLeft2();
 8000a34:	f7ff ff04 	bl	8000840 <I2C_CLCD_CG_ScrollLeft2>
     I2C_CLCD_CG_DrawPixel2(39, 7-(adcValue[0]/585)); //273-->%15, 585 --> %7
 8000a38:	8b3a      	ldrh	r2, [r7, #24]
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <main+0x13c>)
 8000a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8000a40:	1ad2      	subs	r2, r2, r3
 8000a42:	0852      	lsrs	r2, r2, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	0a5b      	lsrs	r3, r3, #9
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f1c3 0307 	rsb	r3, r3, #7
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	4619      	mov	r1, r3
 8000a54:	2027      	movs	r0, #39	; 0x27
 8000a56:	f7ff ff19 	bl	800088c <I2C_CLCD_CG_DrawPixel2>
     I2C_CLCD_CG_Update2();
 8000a5a:	f7ff ff43 	bl	80008e4 <I2C_CLCD_CG_Update2>
     I2C_CLCD_GotoXY(9,1);
 8000a5e:	2101      	movs	r1, #1
 8000a60:	2009      	movs	r0, #9
 8000a62:	f7ff fe41 	bl	80006e8 <I2C_CLCD_GotoXY>

     char str[20];
     sprintf(str, "%5d",adcValue[0]); //1700 - 3200
 8000a66:	8b3b      	ldrh	r3, [r7, #24]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <main+0x140>)
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 faf0 	bl	8005054 <siprintf>
     I2C_CLCD_PutStr(str);
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fe72 	bl	8000760 <I2C_CLCD_PutStr>
     HAL_Delay(50);
 8000a7c:	2032      	movs	r0, #50	; 0x32
 8000a7e:	f000 fc81 	bl	8001384 <HAL_Delay>
  {
 8000a82:	e7d7      	b.n	8000a34 <main+0xd0>
 8000a84:	20000204 	.word	0x20000204
 8000a88:	080060e0 	.word	0x080060e0
 8000a8c:	080060f8 	.word	0x080060f8
 8000a90:	200001b0 	.word	0x200001b0
 8000a94:	08006108 	.word	0x08006108
 8000a98:	08006118 	.word	0x08006118
 8000a9c:	20000108 	.word	0x20000108
 8000aa0:	c01c01c1 	.word	0xc01c01c1
 8000aa4:	08006128 	.word	0x08006128

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b094      	sub	sp, #80	; 0x50
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0320 	add.w	r3, r7, #32
 8000ab2:	2230      	movs	r2, #48	; 0x30
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f004 fbc4 	bl	8005244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <SystemClock_Config+0xb4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <SystemClock_Config+0xb4>)
 8000ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <SystemClock_Config+0xb4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <SystemClock_Config+0xb8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <SystemClock_Config+0xb8>)
 8000af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <SystemClock_Config+0xb8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b04:	2302      	movs	r3, #2
 8000b06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b14:	f107 0320 	add.w	r3, r7, #32
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 fcbd 	bl	8003498 <HAL_RCC_OscConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b24:	f000 f91e 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b28:	230f      	movs	r3, #15
 8000b2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 ff20 	bl	8003988 <HAL_RCC_ClockConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b4e:	f000 f909 	bl	8000d64 <Error_Handler>
  }
}
 8000b52:	bf00      	nop
 8000b54:	3750      	adds	r7, #80	; 0x50
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40007000 	.word	0x40007000

08000b64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000b78:	4a28      	ldr	r2, [pc, #160]	; (8000c1c <MX_ADC1_Init+0xb8>)
 8000b7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000b7c:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b8a:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b90:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b96:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <MX_ADC1_Init+0xbc>)
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc4:	4814      	ldr	r0, [pc, #80]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000bc6:	f000 fc01 	bl	80013cc <HAL_ADC_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bd0:	f000 f8c8 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000be6:	f000 fd43 	bl	8001670 <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bf0:	f000 f8b8 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_ADC1_Init+0xb4>)
 8000c02:	f000 fd35 	bl	8001670 <HAL_ADC_ConfigChannel>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c0c:	f000 f8aa 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000108 	.word	0x20000108
 8000c1c:	40012000 	.word	0x40012000
 8000c20:	0f000001 	.word	0x0f000001

08000c24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <MX_I2C1_Init+0x54>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c30:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <MX_I2C1_Init+0x58>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c62:	f001 fe4d 	bl	8002900 <HAL_I2C_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c6c:	f000 f87a 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200001b0 	.word	0x200001b0
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	00061a80 	.word	0x00061a80

08000c80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_USART2_UART_Init+0x50>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cb8:	f003 f846 	bl	8003d48 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cc2:	f000 f84f 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000204 	.word	0x20000204
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_DMA_Init+0x3c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <MX_DMA_Init+0x3c>)
 8000ce4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_DMA_Init+0x3c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2038      	movs	r0, #56	; 0x38
 8000cfc:	f001 f843 	bl	8001d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d00:	2038      	movs	r0, #56	; 0x38
 8000d02:	f001 f85c 	bl	8001dbe <HAL_NVIC_EnableIRQ>

}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_GPIO_Init+0x4c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <MX_GPIO_Init+0x4c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <MX_GPIO_Init+0x4c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_GPIO_Init+0x4c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <MX_GPIO_Init+0x4c>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_GPIO_Init+0x4c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a2f      	ldr	r2, [pc, #188]	; (8000e9c <HAL_ADC_MspInit+0xdc>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d157      	bne.n	8000e92 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <HAL_ADC_MspInit+0xe0>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a2d      	ldr	r2, [pc, #180]	; (8000ea0 <HAL_ADC_MspInit+0xe0>)
 8000dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <HAL_ADC_MspInit+0xe0>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <HAL_ADC_MspInit+0xe0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a26      	ldr	r2, [pc, #152]	; (8000ea0 <HAL_ADC_MspInit+0xe0>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <HAL_ADC_MspInit+0xe0>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	481d      	ldr	r0, [pc, #116]	; (8000ea4 <HAL_ADC_MspInit+0xe4>)
 8000e2e:	f001 fbe3 	bl	80025f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_ADC_MspInit+0xe8>)
 8000e34:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <HAL_ADC_MspInit+0xec>)
 8000e36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <HAL_ADC_MspInit+0xe8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_ADC_MspInit+0xe8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_ADC_MspInit+0xe8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_ADC_MspInit+0xe8>)
 8000e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_ADC_MspInit+0xe8>)
 8000e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_ADC_MspInit+0xe8>)
 8000e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_ADC_MspInit+0xe8>)
 8000e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_ADC_MspInit+0xe8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_ADC_MspInit+0xe8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <HAL_ADC_MspInit+0xe8>)
 8000e78:	f000 ffbc 	bl	8001df4 <HAL_DMA_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e82:	f7ff ff6f 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_ADC_MspInit+0xe8>)
 8000e8a:	639a      	str	r2, [r3, #56]	; 0x38
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_ADC_MspInit+0xe8>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40012000 	.word	0x40012000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	20000150 	.word	0x20000150
 8000eac:	40026410 	.word	0x40026410

08000eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_I2C_MspInit+0x84>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12b      	bne.n	8000f2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eee:	23c0      	movs	r3, #192	; 0xc0
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef2:	2312      	movs	r3, #18
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000efe:	2304      	movs	r3, #4
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <HAL_I2C_MspInit+0x8c>)
 8000f0a:	f001 fb75 	bl	80025f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40005400 	.word	0x40005400
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020400 	.word	0x40020400

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1d      	ldr	r2, [pc, #116]	; (8000fd4 <HAL_UART_MspInit+0x94>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d133      	bne.n	8000fca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HAL_UART_MspInit+0x98>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <HAL_UART_MspInit+0x98>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	6413      	str	r3, [r2, #64]	; 0x40
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_UART_MspInit+0x98>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_UART_MspInit+0x98>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <HAL_UART_MspInit+0x98>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_UART_MspInit+0x98>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f9a:	230c      	movs	r3, #12
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000faa:	2307      	movs	r3, #7
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4809      	ldr	r0, [pc, #36]	; (8000fdc <HAL_UART_MspInit+0x9c>)
 8000fb6:	f001 fb1f 	bl	80025f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2026      	movs	r0, #38	; 0x26
 8000fc0:	f000 fee1 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fc4:	2026      	movs	r0, #38	; 0x26
 8000fc6:	f000 fefa 	bl	8001dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40004400 	.word	0x40004400
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler+0x4>

08000ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102c:	f000 f98a 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <USART2_IRQHandler+0x10>)
 800103a:	f002 ff85 	bl	8003f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000204 	.word	0x20000204

08001048 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <DMA2_Stream0_IRQHandler+0x10>)
 800104e:	f001 f869 	bl	8002124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000150 	.word	0x20000150

0800105c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	e00a      	b.n	8001084 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800106e:	f3af 8000 	nop.w
 8001072:	4601      	mov	r1, r0
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	60ba      	str	r2, [r7, #8]
 800107a:	b2ca      	uxtb	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbf0      	blt.n	800106e <_read+0x12>
  }

  return len;
 800108c:	687b      	ldr	r3, [r7, #4]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010be:	605a      	str	r2, [r3, #4]
  return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_isatty>:

int _isatty(int file)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001108:	4a14      	ldr	r2, [pc, #80]	; (800115c <_sbrk+0x5c>)
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <_sbrk+0x60>)
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d102      	bne.n	8001122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <_sbrk+0x64>)
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <_sbrk+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	429a      	cmp	r2, r3
 800112e:	d207      	bcs.n	8001140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001130:	f004 f8d6 	bl	80052e0 <__errno>
 8001134:	4603      	mov	r3, r0
 8001136:	220c      	movs	r2, #12
 8001138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	e009      	b.n	8001154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <_sbrk+0x64>)
 8001150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20020000 	.word	0x20020000
 8001160:	00000400 	.word	0x00000400
 8001164:	2000024c 	.word	0x2000024c
 8001168:	200004a8 	.word	0x200004a8

0800116c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <SystemInit+0x20>)
 8001172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <SystemInit+0x20>)
 8001178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800117c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <initUart>:
int rxBufferPp; // put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// init device
void initUart(UART_HandleTypeDef *inHuart){
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	myHuart = inHuart;
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <initUart+0x24>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <initUart+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4904      	ldr	r1, [pc, #16]	; (80011b8 <initUart+0x28>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fea9 	bl	8003efe <HAL_UART_Receive_IT>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000250 	.word	0x20000250
 80011b8:	20000357 	.word	0x20000357

080011bc <HAL_UART_RxCpltCallback>:

// process received charactor
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++]=rxChar;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_UART_RxCpltCallback+0x50>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	4910      	ldr	r1, [pc, #64]	; (800120c <HAL_UART_RxCpltCallback+0x50>)
 80011cc:	600a      	str	r2, [r1, #0]
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_UART_RxCpltCallback+0x54>)
 80011d0:	7811      	ldrb	r1, [r2, #0]
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_UART_RxCpltCallback+0x58>)
 80011d4:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_UART_RxCpltCallback+0x50>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_UART_RxCpltCallback+0x5c>)
 80011dc:	fb83 1302 	smull	r1, r3, r3, r2
 80011e0:	4413      	add	r3, r2
 80011e2:	11d9      	asrs	r1, r3, #7
 80011e4:	17d3      	asrs	r3, r2, #31
 80011e6:	1ac9      	subs	r1, r1, r3
 80011e8:	460b      	mov	r3, r1
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	1a5b      	subs	r3, r3, r1
 80011ee:	1ad1      	subs	r1, r2, r3
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_UART_RxCpltCallback+0x50>)
 80011f2:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_UART_RxCpltCallback+0x60>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2201      	movs	r2, #1
 80011fa:	4905      	ldr	r1, [pc, #20]	; (8001210 <HAL_UART_RxCpltCallback+0x54>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 fe7e 	bl	8003efe <HAL_UART_Receive_IT>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000254 	.word	0x20000254
 8001210:	20000357 	.word	0x20000357
 8001214:	20000258 	.word	0x20000258
 8001218:	80808081 	.word	0x80808081
 800121c:	20000250 	.word	0x20000250

08001220 <_write>:
	return result;
}



int _write(int file, char *p, int len) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, p, len, 10);
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <_write+0x28>)
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	b29a      	uxth	r2, r3
 8001234:	230a      	movs	r3, #10
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	f002 fdd6 	bl	8003de8 <HAL_UART_Transmit>
	return len;
 800123c:	687b      	ldr	r3, [r7, #4]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000250 	.word	0x20000250

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001284 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001250:	f7ff ff8c 	bl	800116c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	; (800128c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	; (8001298 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127a:	f004 f837 	bl	80052ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff fb71 	bl	8000964 <main>
  bx  lr    
 8001282:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001290:	08006190 	.word	0x08006190
  ldr r2, =_sbss
 8001294:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001298:	200004a8 	.word	0x200004a8

0800129c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC_IRQHandler>
	...

080012a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <HAL_Init+0x40>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <HAL_Init+0x40>)
 80012b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_Init+0x40>)
 80012c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 fd51 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	200f      	movs	r0, #15
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fd4c 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023c00 	.word	0x40023c00

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fd69 	bl	8001dda <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f000 fd31 	bl	8001d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000000 	.word	0x20000000
 800133c:	20000008 	.word	0x20000008
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000008 	.word	0x20000008
 8001368:	20000358 	.word	0x20000358

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000358 	.word	0x20000358

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008

080013cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e033      	b.n	800144a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fce8 	bl	8000dc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	d118      	bne.n	800143c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001412:	f023 0302 	bic.w	r3, r3, #2
 8001416:	f043 0202 	orr.w	r2, r3, #2
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fa58 	bl	80018d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f023 0303 	bic.w	r3, r3, #3
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	641a      	str	r2, [r3, #64]	; 0x40
 800143a:	e001      	b.n	8001440 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_ADC_Start_DMA+0x1e>
 800146e:	2302      	movs	r3, #2
 8001470:	e0ce      	b.n	8001610 <HAL_ADC_Start_DMA+0x1bc>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b01      	cmp	r3, #1
 8001486:	d018      	beq.n	80014ba <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001498:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <HAL_ADC_Start_DMA+0x1c4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a5f      	ldr	r2, [pc, #380]	; (800161c <HAL_ADC_Start_DMA+0x1c8>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9a      	lsrs	r2, r3, #18
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80014ac:	e002      	b.n	80014b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f9      	bne.n	80014ae <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c8:	d107      	bne.n	80014da <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014d8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	f040 8086 	bne.w	80015f6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001514:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001528:	d106      	bne.n	8001538 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f023 0206 	bic.w	r2, r3, #6
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
 8001536:	e002      	b.n	800153e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_ADC_Start_DMA+0x1cc>)
 8001548:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154e:	4a35      	ldr	r2, [pc, #212]	; (8001624 <HAL_ADC_Start_DMA+0x1d0>)
 8001550:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	4a34      	ldr	r2, [pc, #208]	; (8001628 <HAL_ADC_Start_DMA+0x1d4>)
 8001558:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155e:	4a33      	ldr	r2, [pc, #204]	; (800162c <HAL_ADC_Start_DMA+0x1d8>)
 8001560:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800156a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800157a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800158a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	334c      	adds	r3, #76	; 0x4c
 8001596:	4619      	mov	r1, r3
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f000 fcd8 	bl	8001f50 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10f      	bne.n	80015cc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d129      	bne.n	800160e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	e020      	b.n	800160e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_ADC_Start_DMA+0x1dc>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d11b      	bne.n	800160e <HAL_ADC_Start_DMA+0x1ba>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d114      	bne.n	800160e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	e00b      	b.n	800160e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f043 0210 	orr.w	r2, r3, #16
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000000 	.word	0x20000000
 800161c:	431bde83 	.word	0x431bde83
 8001620:	40012300 	.word	0x40012300
 8001624:	08001acd 	.word	0x08001acd
 8001628:	08001b87 	.word	0x08001b87
 800162c:	08001ba3 	.word	0x08001ba3
 8001630:	40012000 	.word	0x40012000

08001634 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_ADC_ConfigChannel+0x1c>
 8001688:	2302      	movs	r3, #2
 800168a:	e113      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x244>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b09      	cmp	r3, #9
 800169a:	d925      	bls.n	80016e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68d9      	ldr	r1, [r3, #12]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	3b1e      	subs	r3, #30
 80016b2:	2207      	movs	r2, #7
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43da      	mvns	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	400a      	ands	r2, r1
 80016c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68d9      	ldr	r1, [r3, #12]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	4603      	mov	r3, r0
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4403      	add	r3, r0
 80016da:	3b1e      	subs	r3, #30
 80016dc:	409a      	lsls	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	e022      	b.n	800172e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6919      	ldr	r1, [r3, #16]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	2207      	movs	r2, #7
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	400a      	ands	r2, r1
 800170a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6919      	ldr	r1, [r3, #16]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	4603      	mov	r3, r0
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4403      	add	r3, r0
 8001724:	409a      	lsls	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b06      	cmp	r3, #6
 8001734:	d824      	bhi.n	8001780 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	3b05      	subs	r3, #5
 8001748:	221f      	movs	r2, #31
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	400a      	ands	r2, r1
 8001756:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	b29b      	uxth	r3, r3
 8001764:	4618      	mov	r0, r3
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	3b05      	subs	r3, #5
 8001772:	fa00 f203 	lsl.w	r2, r0, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	635a      	str	r2, [r3, #52]	; 0x34
 800177e:	e04c      	b.n	800181a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d824      	bhi.n	80017d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3b23      	subs	r3, #35	; 0x23
 800179a:	221f      	movs	r2, #31
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43da      	mvns	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	400a      	ands	r2, r1
 80017a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	3b23      	subs	r3, #35	; 0x23
 80017c4:	fa00 f203 	lsl.w	r2, r0, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	631a      	str	r2, [r3, #48]	; 0x30
 80017d0:	e023      	b.n	800181a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	3b41      	subs	r3, #65	; 0x41
 80017e4:	221f      	movs	r2, #31
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	400a      	ands	r2, r1
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4618      	mov	r0, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	3b41      	subs	r3, #65	; 0x41
 800180e:	fa00 f203 	lsl.w	r2, r0, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800181a:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <HAL_ADC_ConfigChannel+0x250>)
 800181c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a28      	ldr	r2, [pc, #160]	; (80018c4 <HAL_ADC_ConfigChannel+0x254>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d10f      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1d8>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b12      	cmp	r3, #18
 800182e:	d10b      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <HAL_ADC_ConfigChannel+0x254>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12b      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x23a>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_ADC_ConfigChannel+0x258>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d003      	beq.n	8001864 <HAL_ADC_ConfigChannel+0x1f4>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b11      	cmp	r3, #17
 8001862:	d122      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <HAL_ADC_ConfigChannel+0x258>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d111      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_ADC_ConfigChannel+0x25c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_ADC_ConfigChannel+0x260>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	0c9a      	lsrs	r2, r3, #18
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800189c:	e002      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f9      	bne.n	800189e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40012300 	.word	0x40012300
 80018c4:	40012000 	.word	0x40012000
 80018c8:	10000012 	.word	0x10000012
 80018cc:	20000000 	.word	0x20000000
 80018d0:	431bde83 	.word	0x431bde83

080018d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018dc:	4b79      	ldr	r3, [pc, #484]	; (8001ac4 <ADC_Init+0x1f0>)
 80018de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	021a      	lsls	r2, r3, #8
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800192c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800194e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6899      	ldr	r1, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <ADC_Init+0x1f4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d022      	beq.n	80019b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800197a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6899      	ldr	r1, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800199c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6899      	ldr	r1, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	e00f      	b.n	80019d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0202 	bic.w	r2, r2, #2
 80019e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6899      	ldr	r1, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e1b      	ldrb	r3, [r3, #24]
 80019ec:	005a      	lsls	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d01b      	beq.n	8001a38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a0e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6859      	ldr	r1, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	035a      	lsls	r2, r3, #13
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	e007      	b.n	8001a48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a46:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	051a      	lsls	r2, r3, #20
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6899      	ldr	r1, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a8a:	025a      	lsls	r2, r3, #9
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6899      	ldr	r1, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	029a      	lsls	r2, r3, #10
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	609a      	str	r2, [r3, #8]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40012300 	.word	0x40012300
 8001ac8:	0f000001 	.word	0x0f000001

08001acc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d13c      	bne.n	8001b60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d12b      	bne.n	8001b58 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d127      	bne.n	8001b58 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d119      	bne.n	8001b58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0220 	bic.w	r2, r2, #32
 8001b32:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d105      	bne.n	8001b58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f043 0201 	orr.w	r2, r3, #1
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f7ff fd6b 	bl	8001634 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b5e:	e00e      	b.n	8001b7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff fd75 	bl	800165c <HAL_ADC_ErrorCallback>
}
 8001b72:	e004      	b.n	8001b7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	4798      	blx	r3
}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b92:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f7ff fd57 	bl	8001648 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bae:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2240      	movs	r2, #64	; 0x40
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f043 0204 	orr.w	r2, r3, #4
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7ff fd4a 	bl	800165c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4907      	ldr	r1, [pc, #28]	; (8001c6c <__NVIC_EnableIRQ+0x38>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	; (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f7ff ff8e 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff29 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d98:	f7ff ff3e 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff ff8e 	bl	8001cc4 <NVIC_EncodePriority>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff5d 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff31 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffa2 	bl	8001d2c <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff fab4 	bl	800136c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e099      	b.n	8001f44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e30:	e00f      	b.n	8001e52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e32:	f7ff fa9b 	bl	800136c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d908      	bls.n	8001e52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2220      	movs	r2, #32
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e078      	b.n	8001f44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e8      	bne.n	8001e32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <HAL_DMA_Init+0x158>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d107      	bne.n	8001ebc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f023 0307 	bic.w	r3, r3, #7
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d117      	bne.n	8001f16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00e      	beq.n	8001f16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fb01 	bl	8002500 <DMA_CheckFifoParam>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2240      	movs	r2, #64	; 0x40
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f12:	2301      	movs	r3, #1
 8001f14:	e016      	b.n	8001f44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fab8 	bl	8002494 <DMA_CalcBaseAndBitshift>
 8001f24:	4603      	mov	r3, r0
 8001f26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	223f      	movs	r2, #63	; 0x3f
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	f010803f 	.word	0xf010803f

08001f50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_DMA_Start_IT+0x26>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e040      	b.n	8001ff8 <HAL_DMA_Start_IT+0xa8>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d12f      	bne.n	8001fea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 fa4a 	bl	8002438 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	223f      	movs	r2, #63	; 0x3f
 8001faa:	409a      	lsls	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0216 	orr.w	r2, r2, #22
 8001fbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0208 	orr.w	r2, r2, #8
 8001fd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e005      	b.n	8001ff6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800200e:	f7ff f9ad 	bl	800136c <HAL_GetTick>
 8002012:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d008      	beq.n	8002032 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2280      	movs	r2, #128	; 0x80
 8002024:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e052      	b.n	80020d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0216 	bic.w	r2, r2, #22
 8002040:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002050:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <HAL_DMA_Abort+0x62>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0208 	bic.w	r2, r2, #8
 8002070:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002082:	e013      	b.n	80020ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002084:	f7ff f972 	bl	800136c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b05      	cmp	r3, #5
 8002090:	d90c      	bls.n	80020ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2203      	movs	r2, #3
 800209c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e015      	b.n	80020d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1e4      	bne.n	8002084 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	223f      	movs	r2, #63	; 0x3f
 80020c0:	409a      	lsls	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d004      	beq.n	80020fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00c      	b.n	8002118 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2205      	movs	r2, #5
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002130:	4b8e      	ldr	r3, [pc, #568]	; (800236c <HAL_DMA_IRQHandler+0x248>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a8e      	ldr	r2, [pc, #568]	; (8002370 <HAL_DMA_IRQHandler+0x24c>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0a9b      	lsrs	r3, r3, #10
 800213c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214e:	2208      	movs	r2, #8
 8002150:	409a      	lsls	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d01a      	beq.n	8002190 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0204 	bic.w	r2, r2, #4
 8002176:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	2208      	movs	r2, #8
 800217e:	409a      	lsls	r2, r3
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	2201      	movs	r2, #1
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d012      	beq.n	80021c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	2201      	movs	r2, #1
 80021b4:	409a      	lsls	r2, r3
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	f043 0202 	orr.w	r2, r3, #2
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	2204      	movs	r2, #4
 80021cc:	409a      	lsls	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d012      	beq.n	80021fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00b      	beq.n	80021fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	2204      	movs	r2, #4
 80021ea:	409a      	lsls	r2, r3
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f043 0204 	orr.w	r2, r3, #4
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	2210      	movs	r2, #16
 8002202:	409a      	lsls	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d043      	beq.n	8002294 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d03c      	beq.n	8002294 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	2210      	movs	r2, #16
 8002220:	409a      	lsls	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d018      	beq.n	8002266 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d108      	bne.n	8002254 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d024      	beq.n	8002294 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
 8002252:	e01f      	b.n	8002294 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01b      	beq.n	8002294 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
 8002264:	e016      	b.n	8002294 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0208 	bic.w	r2, r2, #8
 8002282:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002298:	2220      	movs	r2, #32
 800229a:	409a      	lsls	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 808f 	beq.w	80023c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8087 	beq.w	80023c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	2220      	movs	r2, #32
 80022bc:	409a      	lsls	r2, r3
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b05      	cmp	r3, #5
 80022cc:	d136      	bne.n	800233c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0216 	bic.w	r2, r2, #22
 80022dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d103      	bne.n	80022fe <HAL_DMA_IRQHandler+0x1da>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d007      	beq.n	800230e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0208 	bic.w	r2, r2, #8
 800230c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	223f      	movs	r2, #63	; 0x3f
 8002314:	409a      	lsls	r2, r3
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232e:	2b00      	cmp	r3, #0
 8002330:	d07e      	beq.n	8002430 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
        }
        return;
 800233a:	e079      	b.n	8002430 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d01d      	beq.n	8002386 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10d      	bne.n	8002374 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	2b00      	cmp	r3, #0
 800235e:	d031      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
 8002368:	e02c      	b.n	80023c4 <HAL_DMA_IRQHandler+0x2a0>
 800236a:	bf00      	nop
 800236c:	20000000 	.word	0x20000000
 8002370:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d023      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	4798      	blx	r3
 8002384:	e01e      	b.n	80023c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10f      	bne.n	80023b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0210 	bic.w	r2, r2, #16
 80023a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d032      	beq.n	8002432 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d022      	beq.n	800241e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2205      	movs	r2, #5
 80023dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3301      	adds	r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d307      	bcc.n	800240c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f2      	bne.n	80023f0 <HAL_DMA_IRQHandler+0x2cc>
 800240a:	e000      	b.n	800240e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800240c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
 800242e:	e000      	b.n	8002432 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002430:	bf00      	nop
    }
  }
}
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002454:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b40      	cmp	r3, #64	; 0x40
 8002464:	d108      	bne.n	8002478 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002476:	e007      	b.n	8002488 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	60da      	str	r2, [r3, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	3b10      	subs	r3, #16
 80024a4:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <DMA_CalcBaseAndBitshift+0x64>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ae:	4a13      	ldr	r2, [pc, #76]	; (80024fc <DMA_CalcBaseAndBitshift+0x68>)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4413      	add	r3, r2
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d909      	bls.n	80024d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	1d1a      	adds	r2, r3, #4
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	659a      	str	r2, [r3, #88]	; 0x58
 80024d4:	e007      	b.n	80024e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024de:	f023 0303 	bic.w	r3, r3, #3
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	aaaaaaab 	.word	0xaaaaaaab
 80024fc:	08006144 	.word	0x08006144

08002500 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d11f      	bne.n	800255a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d856      	bhi.n	80025ce <DMA_CheckFifoParam+0xce>
 8002520:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <DMA_CheckFifoParam+0x28>)
 8002522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002526:	bf00      	nop
 8002528:	08002539 	.word	0x08002539
 800252c:	0800254b 	.word	0x0800254b
 8002530:	08002539 	.word	0x08002539
 8002534:	080025cf 	.word	0x080025cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d046      	beq.n	80025d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002548:	e043      	b.n	80025d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002552:	d140      	bne.n	80025d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002558:	e03d      	b.n	80025d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002562:	d121      	bne.n	80025a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b03      	cmp	r3, #3
 8002568:	d837      	bhi.n	80025da <DMA_CheckFifoParam+0xda>
 800256a:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <DMA_CheckFifoParam+0x70>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	08002581 	.word	0x08002581
 8002574:	08002587 	.word	0x08002587
 8002578:	08002581 	.word	0x08002581
 800257c:	08002599 	.word	0x08002599
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
      break;
 8002584:	e030      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d025      	beq.n	80025de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002596:	e022      	b.n	80025de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025a0:	d11f      	bne.n	80025e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025a6:	e01c      	b.n	80025e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d903      	bls.n	80025b6 <DMA_CheckFifoParam+0xb6>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d003      	beq.n	80025bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025b4:	e018      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
      break;
 80025ba:	e015      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00e      	beq.n	80025e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      break;
 80025cc:	e00b      	b.n	80025e6 <DMA_CheckFifoParam+0xe6>
      break;
 80025ce:	bf00      	nop
 80025d0:	e00a      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      break;
 80025d2:	bf00      	nop
 80025d4:	e008      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      break;
 80025d6:	bf00      	nop
 80025d8:	e006      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      break;
 80025da:	bf00      	nop
 80025dc:	e004      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
 80025e0:	e002      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80025e2:	bf00      	nop
 80025e4:	e000      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
    }
  } 
  
  return status; 
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop

080025f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	e159      	b.n	80028c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	429a      	cmp	r2, r3
 800262e:	f040 8148 	bne.w	80028c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d005      	beq.n	800264a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002646:	2b02      	cmp	r3, #2
 8002648:	d130      	bne.n	80026ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	2203      	movs	r2, #3
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 0201 	and.w	r2, r3, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d017      	beq.n	80026e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d123      	bne.n	800273c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	08da      	lsrs	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3208      	adds	r2, #8
 80026fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	08da      	lsrs	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3208      	adds	r2, #8
 8002736:	69b9      	ldr	r1, [r7, #24]
 8002738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0203 	and.w	r2, r3, #3
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a2 	beq.w	80028c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <HAL_GPIO_Init+0x2e8>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a56      	ldr	r2, [pc, #344]	; (80028e0 <HAL_GPIO_Init+0x2e8>)
 8002788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b54      	ldr	r3, [pc, #336]	; (80028e0 <HAL_GPIO_Init+0x2e8>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800279a:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_GPIO_Init+0x2ec>)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	220f      	movs	r2, #15
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a49      	ldr	r2, [pc, #292]	; (80028e8 <HAL_GPIO_Init+0x2f0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d019      	beq.n	80027fa <HAL_GPIO_Init+0x202>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a48      	ldr	r2, [pc, #288]	; (80028ec <HAL_GPIO_Init+0x2f4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d013      	beq.n	80027f6 <HAL_GPIO_Init+0x1fe>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a47      	ldr	r2, [pc, #284]	; (80028f0 <HAL_GPIO_Init+0x2f8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00d      	beq.n	80027f2 <HAL_GPIO_Init+0x1fa>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a46      	ldr	r2, [pc, #280]	; (80028f4 <HAL_GPIO_Init+0x2fc>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d007      	beq.n	80027ee <HAL_GPIO_Init+0x1f6>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a45      	ldr	r2, [pc, #276]	; (80028f8 <HAL_GPIO_Init+0x300>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d101      	bne.n	80027ea <HAL_GPIO_Init+0x1f2>
 80027e6:	2304      	movs	r3, #4
 80027e8:	e008      	b.n	80027fc <HAL_GPIO_Init+0x204>
 80027ea:	2307      	movs	r3, #7
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x204>
 80027ee:	2303      	movs	r3, #3
 80027f0:	e004      	b.n	80027fc <HAL_GPIO_Init+0x204>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_Init+0x204>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_Init+0x204>
 80027fa:	2300      	movs	r3, #0
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	f002 0203 	and.w	r2, r2, #3
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	4093      	lsls	r3, r2
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800280c:	4935      	ldr	r1, [pc, #212]	; (80028e4 <HAL_GPIO_Init+0x2ec>)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281a:	4b38      	ldr	r3, [pc, #224]	; (80028fc <HAL_GPIO_Init+0x304>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283e:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <HAL_GPIO_Init+0x304>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002844:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <HAL_GPIO_Init+0x304>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002868:	4a24      	ldr	r2, [pc, #144]	; (80028fc <HAL_GPIO_Init+0x304>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286e:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_GPIO_Init+0x304>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002892:	4a1a      	ldr	r2, [pc, #104]	; (80028fc <HAL_GPIO_Init+0x304>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_GPIO_Init+0x304>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028bc:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <HAL_GPIO_Init+0x304>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	f67f aea2 	bls.w	8002614 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40013c00 	.word	0x40013c00

08002900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e12b      	b.n	8002b6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe fac2 	bl	8000eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	; 0x24
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002964:	f001 f9c8 	bl	8003cf8 <HAL_RCC_GetPCLK1Freq>
 8002968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a81      	ldr	r2, [pc, #516]	; (8002b74 <HAL_I2C_Init+0x274>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d807      	bhi.n	8002984 <HAL_I2C_Init+0x84>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a80      	ldr	r2, [pc, #512]	; (8002b78 <HAL_I2C_Init+0x278>)
 8002978:	4293      	cmp	r3, r2
 800297a:	bf94      	ite	ls
 800297c:	2301      	movls	r3, #1
 800297e:	2300      	movhi	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e006      	b.n	8002992 <HAL_I2C_Init+0x92>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a7d      	ldr	r2, [pc, #500]	; (8002b7c <HAL_I2C_Init+0x27c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	bf94      	ite	ls
 800298c:	2301      	movls	r3, #1
 800298e:	2300      	movhi	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0e7      	b.n	8002b6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a78      	ldr	r2, [pc, #480]	; (8002b80 <HAL_I2C_Init+0x280>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9b      	lsrs	r3, r3, #18
 80029a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a6a      	ldr	r2, [pc, #424]	; (8002b74 <HAL_I2C_Init+0x274>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d802      	bhi.n	80029d4 <HAL_I2C_Init+0xd4>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3301      	adds	r3, #1
 80029d2:	e009      	b.n	80029e8 <HAL_I2C_Init+0xe8>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	4a69      	ldr	r2, [pc, #420]	; (8002b84 <HAL_I2C_Init+0x284>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	3301      	adds	r3, #1
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	495c      	ldr	r1, [pc, #368]	; (8002b74 <HAL_I2C_Init+0x274>)
 8002a04:	428b      	cmp	r3, r1
 8002a06:	d819      	bhi.n	8002a3c <HAL_I2C_Init+0x13c>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e59      	subs	r1, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a16:	1c59      	adds	r1, r3, #1
 8002a18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a1c:	400b      	ands	r3, r1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_I2C_Init+0x138>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1e59      	subs	r1, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a36:	e051      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a38:	2304      	movs	r3, #4
 8002a3a:	e04f      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d111      	bne.n	8002a68 <HAL_I2C_Init+0x168>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e58      	subs	r0, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	440b      	add	r3, r1
 8002a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e012      	b.n	8002a8e <HAL_I2C_Init+0x18e>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e58      	subs	r0, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	0099      	lsls	r1, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Init+0x196>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e022      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10e      	bne.n	8002abc <HAL_I2C_Init+0x1bc>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e58      	subs	r0, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6859      	ldr	r1, [r3, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	440b      	add	r3, r1
 8002aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aba:	e00f      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1e58      	subs	r0, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	0099      	lsls	r1, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	6809      	ldr	r1, [r1, #0]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6911      	ldr	r1, [r2, #16]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68d2      	ldr	r2, [r2, #12]
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	000186a0 	.word	0x000186a0
 8002b78:	001e847f 	.word	0x001e847f
 8002b7c:	003d08ff 	.word	0x003d08ff
 8002b80:	431bde83 	.word	0x431bde83
 8002b84:	10624dd3 	.word	0x10624dd3

08002b88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	461a      	mov	r2, r3
 8002b94:	460b      	mov	r3, r1
 8002b96:	817b      	strh	r3, [r7, #10]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b9c:	f7fe fbe6 	bl	800136c <HAL_GetTick>
 8002ba0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	f040 80e0 	bne.w	8002d70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2319      	movs	r3, #25
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4970      	ldr	r1, [pc, #448]	; (8002d7c <HAL_I2C_Master_Transmit+0x1f4>)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fa92 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e0d3      	b.n	8002d72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_I2C_Master_Transmit+0x50>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e0cc      	b.n	8002d72 <HAL_I2C_Master_Transmit+0x1ea>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d007      	beq.n	8002bfe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2221      	movs	r2, #33	; 0x21
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2210      	movs	r2, #16
 8002c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	893a      	ldrh	r2, [r7, #8]
 8002c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4a50      	ldr	r2, [pc, #320]	; (8002d80 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c40:	8979      	ldrh	r1, [r7, #10]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	6a3a      	ldr	r2, [r7, #32]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f9ca 	bl	8002fe0 <I2C_MasterRequestWrite>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e08d      	b.n	8002d72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c6c:	e066      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	6a39      	ldr	r1, [r7, #32]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fb50 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d107      	bne.n	8002c96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06b      	b.n	8002d72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d11b      	bne.n	8002d10 <HAL_I2C_Master_Transmit+0x188>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d017      	beq.n	8002d10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	6a39      	ldr	r1, [r7, #32]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fb47 	bl	80033a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00d      	beq.n	8002d3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d107      	bne.n	8002d38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e01a      	b.n	8002d72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d194      	bne.n	8002c6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e000      	b.n	8002d72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d70:	2302      	movs	r3, #2
  }
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	00100002 	.word	0x00100002
 8002d80:	ffff0000 	.word	0xffff0000

08002d84 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	; 0x28
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	460b      	mov	r3, r1
 8002d92:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7fe faea 	bl	800136c <HAL_GetTick>
 8002d98:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	f040 8111 	bne.w	8002fce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2319      	movs	r3, #25
 8002db2:	2201      	movs	r2, #1
 8002db4:	4988      	ldr	r1, [pc, #544]	; (8002fd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f994 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e104      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_I2C_IsDeviceReady+0x50>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e0fd      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d007      	beq.n	8002dfa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2224      	movs	r2, #36	; 0x24
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a70      	ldr	r2, [pc, #448]	; (8002fdc <HAL_I2C_IsDeviceReady+0x258>)
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f952 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e54:	d103      	bne.n	8002e5e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e0b6      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e62:	897b      	ldrh	r3, [r7, #10]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e70:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e72:	f7fe fa7b 	bl	800136c <HAL_GetTick>
 8002e76:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ea6:	e025      	b.n	8002ef4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ea8:	f7fe fa60 	bl	800136c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d302      	bcc.n	8002ebe <HAL_I2C_IsDeviceReady+0x13a>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	22a0      	movs	r2, #160	; 0xa0
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2ba0      	cmp	r3, #160	; 0xa0
 8002efe:	d005      	beq.n	8002f0c <HAL_I2C_IsDeviceReady+0x188>
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_I2C_IsDeviceReady+0x188>
 8002f06:	7dbb      	ldrb	r3, [r7, #22]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0cd      	beq.n	8002ea8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d129      	bne.n	8002f76 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f30:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2319      	movs	r3, #25
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4921      	ldr	r1, [pc, #132]	; (8002fd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f8c6 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e036      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e02c      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f84:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f8e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	2319      	movs	r3, #25
 8002f96:	2201      	movs	r2, #1
 8002f98:	490f      	ldr	r1, [pc, #60]	; (8002fd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f8a2 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e012      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	3301      	adds	r3, #1
 8002fae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	f4ff af32 	bcc.w	8002e1e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
  }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	00100002 	.word	0x00100002
 8002fdc:	ffff0000 	.word	0xffff0000

08002fe0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	460b      	mov	r3, r1
 8002fee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d006      	beq.n	800300a <I2C_MasterRequestWrite+0x2a>
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d003      	beq.n	800300a <I2C_MasterRequestWrite+0x2a>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003008:	d108      	bne.n	800301c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	e00b      	b.n	8003034 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	2b12      	cmp	r3, #18
 8003022:	d107      	bne.n	8003034 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003032:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f84f 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00d      	beq.n	8003068 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800305a:	d103      	bne.n	8003064 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003062:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e035      	b.n	80030d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003070:	d108      	bne.n	8003084 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003072:	897b      	ldrh	r3, [r7, #10]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003080:	611a      	str	r2, [r3, #16]
 8003082:	e01b      	b.n	80030bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003084:	897b      	ldrh	r3, [r7, #10]
 8003086:	11db      	asrs	r3, r3, #7
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f003 0306 	and.w	r3, r3, #6
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f063 030f 	orn	r3, r3, #15
 8003094:	b2da      	uxtb	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	490e      	ldr	r1, [pc, #56]	; (80030dc <I2C_MasterRequestWrite+0xfc>)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f898 	bl	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e010      	b.n	80030d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030b2:	897b      	ldrh	r3, [r7, #10]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4907      	ldr	r1, [pc, #28]	; (80030e0 <I2C_MasterRequestWrite+0x100>)
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f888 	bl	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	00010008 	.word	0x00010008
 80030e0:	00010002 	.word	0x00010002

080030e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f4:	e048      	b.n	8003188 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d044      	beq.n	8003188 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fe:	f7fe f935 	bl	800136c <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <I2C_WaitOnFlagUntilTimeout+0x30>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d139      	bne.n	8003188 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	0c1b      	lsrs	r3, r3, #16
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d10d      	bne.n	800313a <I2C_WaitOnFlagUntilTimeout+0x56>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	43da      	mvns	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4013      	ands	r3, r2
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	e00c      	b.n	8003154 <I2C_WaitOnFlagUntilTimeout+0x70>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	43da      	mvns	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4013      	ands	r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	429a      	cmp	r2, r3
 8003158:	d116      	bne.n	8003188 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e023      	b.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d10d      	bne.n	80031ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	43da      	mvns	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4013      	ands	r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	e00c      	b.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	43da      	mvns	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4013      	ands	r3, r2
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d093      	beq.n	80030f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031e6:	e071      	b.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f6:	d123      	bne.n	8003240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003206:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003210:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f043 0204 	orr.w	r2, r3, #4
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e067      	b.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003246:	d041      	beq.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003248:	f7fe f890 	bl	800136c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	d302      	bcc.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d136      	bne.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d10c      	bne.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	43da      	mvns	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4013      	ands	r3, r2
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	e00b      	b.n	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	43da      	mvns	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4013      	ands	r3, r2
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e021      	b.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	0c1b      	lsrs	r3, r3, #16
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d10c      	bne.n	80032f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	43da      	mvns	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e00b      	b.n	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4013      	ands	r3, r2
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	bf14      	ite	ne
 8003302:	2301      	movne	r3, #1
 8003304:	2300      	moveq	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	f47f af6d 	bne.w	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003324:	e034      	b.n	8003390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f886 	bl	8003438 <I2C_IsAcknowledgeFailed>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e034      	b.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d028      	beq.n	8003390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fe f815 	bl	800136c <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d11d      	bne.n	8003390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335e:	2b80      	cmp	r3, #128	; 0x80
 8003360:	d016      	beq.n	8003390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e007      	b.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b80      	cmp	r3, #128	; 0x80
 800339c:	d1c3      	bne.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033b4:	e034      	b.n	8003420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f83e 	bl	8003438 <I2C_IsAcknowledgeFailed>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e034      	b.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d028      	beq.n	8003420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ce:	f7fd ffcd 	bl	800136c <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d11d      	bne.n	8003420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d016      	beq.n	8003420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f043 0220 	orr.w	r2, r3, #32
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e007      	b.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b04      	cmp	r3, #4
 800342c:	d1c3      	bne.n	80033b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344e:	d11b      	bne.n	8003488 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003458:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f043 0204 	orr.w	r2, r3, #4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e267      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d075      	beq.n	80035a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034b6:	4b88      	ldr	r3, [pc, #544]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d00c      	beq.n	80034dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c2:	4b85      	ldr	r3, [pc, #532]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d112      	bne.n	80034f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ce:	4b82      	ldr	r3, [pc, #520]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034da:	d10b      	bne.n	80034f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	4b7e      	ldr	r3, [pc, #504]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d05b      	beq.n	80035a0 <HAL_RCC_OscConfig+0x108>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d157      	bne.n	80035a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e242      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fc:	d106      	bne.n	800350c <HAL_RCC_OscConfig+0x74>
 80034fe:	4b76      	ldr	r3, [pc, #472]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a75      	ldr	r2, [pc, #468]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e01d      	b.n	8003548 <HAL_RCC_OscConfig+0xb0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0x98>
 8003516:	4b70      	ldr	r3, [pc, #448]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6f      	ldr	r2, [pc, #444]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800351c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4b6d      	ldr	r3, [pc, #436]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6c      	ldr	r2, [pc, #432]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e00b      	b.n	8003548 <HAL_RCC_OscConfig+0xb0>
 8003530:	4b69      	ldr	r3, [pc, #420]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a68      	ldr	r2, [pc, #416]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	4b66      	ldr	r3, [pc, #408]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a65      	ldr	r2, [pc, #404]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d013      	beq.n	8003578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fd ff0c 	bl	800136c <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003558:	f7fd ff08 	bl	800136c <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	; 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e207      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b5b      	ldr	r3, [pc, #364]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0xc0>
 8003576:	e014      	b.n	80035a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fd fef8 	bl	800136c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003580:	f7fd fef4 	bl	800136c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1f3      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	4b51      	ldr	r3, [pc, #324]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0xe8>
 800359e:	e000      	b.n	80035a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d063      	beq.n	8003676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ae:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ba:	4b47      	ldr	r3, [pc, #284]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d11c      	bne.n	8003600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c6:	4b44      	ldr	r3, [pc, #272]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d116      	bne.n	8003600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x152>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e1c7      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ea:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4937      	ldr	r1, [pc, #220]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	e03a      	b.n	8003676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003608:	4b34      	ldr	r3, [pc, #208]	; (80036dc <HAL_RCC_OscConfig+0x244>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7fd fead 	bl	800136c <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003616:	f7fd fea9 	bl	800136c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1a8      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003628:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4925      	ldr	r1, [pc, #148]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	e015      	b.n	8003676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_RCC_OscConfig+0x244>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fd fe8c 	bl	800136c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003658:	f7fd fe88 	bl	800136c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e187      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d036      	beq.n	80036f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d016      	beq.n	80036b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <HAL_RCC_OscConfig+0x248>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fd fe6c 	bl	800136c <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003698:	f7fd fe68 	bl	800136c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e167      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80036ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x200>
 80036b6:	e01b      	b.n	80036f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_OscConfig+0x248>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036be:	f7fd fe55 	bl	800136c <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c4:	e00e      	b.n	80036e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c6:	f7fd fe51 	bl	800136c <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d907      	bls.n	80036e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e150      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
 80036d8:	40023800 	.word	0x40023800
 80036dc:	42470000 	.word	0x42470000
 80036e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	4b88      	ldr	r3, [pc, #544]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80036e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1ea      	bne.n	80036c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8097 	beq.w	800382c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003702:	4b81      	ldr	r3, [pc, #516]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b7d      	ldr	r3, [pc, #500]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	4a7c      	ldr	r2, [pc, #496]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371c:	6413      	str	r3, [r2, #64]	; 0x40
 800371e:	4b7a      	ldr	r3, [pc, #488]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	4b77      	ldr	r3, [pc, #476]	; (800390c <HAL_RCC_OscConfig+0x474>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d118      	bne.n	800376c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373a:	4b74      	ldr	r3, [pc, #464]	; (800390c <HAL_RCC_OscConfig+0x474>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a73      	ldr	r2, [pc, #460]	; (800390c <HAL_RCC_OscConfig+0x474>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003746:	f7fd fe11 	bl	800136c <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374e:	f7fd fe0d 	bl	800136c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e10c      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003760:	4b6a      	ldr	r3, [pc, #424]	; (800390c <HAL_RCC_OscConfig+0x474>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d106      	bne.n	8003782 <HAL_RCC_OscConfig+0x2ea>
 8003774:	4b64      	ldr	r3, [pc, #400]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	4a63      	ldr	r2, [pc, #396]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6713      	str	r3, [r2, #112]	; 0x70
 8003780:	e01c      	b.n	80037bc <HAL_RCC_OscConfig+0x324>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b05      	cmp	r3, #5
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x30c>
 800378a:	4b5f      	ldr	r3, [pc, #380]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4a5e      	ldr	r2, [pc, #376]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003790:	f043 0304 	orr.w	r3, r3, #4
 8003794:	6713      	str	r3, [r2, #112]	; 0x70
 8003796:	4b5c      	ldr	r3, [pc, #368]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	4a5b      	ldr	r2, [pc, #364]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6713      	str	r3, [r2, #112]	; 0x70
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0x324>
 80037a4:	4b58      	ldr	r3, [pc, #352]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	4a57      	ldr	r2, [pc, #348]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	; 0x70
 80037b0:	4b55      	ldr	r3, [pc, #340]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4a54      	ldr	r2, [pc, #336]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037b6:	f023 0304 	bic.w	r3, r3, #4
 80037ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fd fdd2 	bl	800136c <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7fd fdce 	bl	800136c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0cb      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e2:	4b49      	ldr	r3, [pc, #292]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0ee      	beq.n	80037cc <HAL_RCC_OscConfig+0x334>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f0:	f7fd fdbc 	bl	800136c <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f6:	e00a      	b.n	800380e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7fd fdb8 	bl	800136c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	; 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e0b5      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380e:	4b3e      	ldr	r3, [pc, #248]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1ee      	bne.n	80037f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003820:	4b39      	ldr	r3, [pc, #228]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a38      	ldr	r2, [pc, #224]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80a1 	beq.w	8003978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003836:	4b34      	ldr	r3, [pc, #208]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b08      	cmp	r3, #8
 8003840:	d05c      	beq.n	80038fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d141      	bne.n	80038ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384a:	4b31      	ldr	r3, [pc, #196]	; (8003910 <HAL_RCC_OscConfig+0x478>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003850:	f7fd fd8c 	bl	800136c <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003858:	f7fd fd88 	bl	800136c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e087      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	4b27      	ldr	r3, [pc, #156]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	019b      	lsls	r3, r3, #6
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	3b01      	subs	r3, #1
 8003890:	041b      	lsls	r3, r3, #16
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	491b      	ldr	r1, [pc, #108]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <HAL_RCC_OscConfig+0x478>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fd fd61 	bl	800136c <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fd fd5d 	bl	800136c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e05c      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x416>
 80038cc:	e054      	b.n	8003978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <HAL_RCC_OscConfig+0x478>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fd fd4a 	bl	800136c <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fd fd46 	bl	800136c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e045      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x444>
 80038fa:	e03d      	b.n	8003978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e038      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
 8003908:	40023800 	.word	0x40023800
 800390c:	40007000 	.word	0x40007000
 8003910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003914:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_RCC_OscConfig+0x4ec>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d028      	beq.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d121      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d11a      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003944:	4013      	ands	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800394a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800394c:	4293      	cmp	r3, r2
 800394e:	d111      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	085b      	lsrs	r3, r3, #1
 800395c:	3b01      	subs	r3, #1
 800395e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800

08003988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0cc      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800399c:	4b68      	ldr	r3, [pc, #416]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d90c      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b65      	ldr	r3, [pc, #404]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b63      	ldr	r3, [pc, #396]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0b8      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d020      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a58      	ldr	r2, [pc, #352]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f4:	4b53      	ldr	r3, [pc, #332]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a52      	ldr	r2, [pc, #328]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a00:	4b50      	ldr	r3, [pc, #320]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	494d      	ldr	r1, [pc, #308]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d044      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d119      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e07f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a46:	4b3f      	ldr	r3, [pc, #252]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e06f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a56:	4b3b      	ldr	r3, [pc, #236]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e067      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a66:	4b37      	ldr	r3, [pc, #220]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4934      	ldr	r1, [pc, #208]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a78:	f7fd fc78 	bl	800136c <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fd fc74 	bl	800136c <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e04f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 020c 	and.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1eb      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d20c      	bcs.n	8003ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e032      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4916      	ldr	r1, [pc, #88]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	490e      	ldr	r1, [pc, #56]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b0e:	f000 f821 	bl	8003b54 <HAL_RCC_GetSysClockFreq>
 8003b12:	4602      	mov	r2, r0
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	490a      	ldr	r1, [pc, #40]	; (8003b48 <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	5ccb      	ldrb	r3, [r1, r3]
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fbd8 	bl	80012e4 <HAL_InitTick>

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023c00 	.word	0x40023c00
 8003b44:	40023800 	.word	0x40023800
 8003b48:	0800612c 	.word	0x0800612c
 8003b4c:	20000000 	.word	0x20000000
 8003b50:	20000004 	.word	0x20000004

08003b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b58:	b090      	sub	sp, #64	; 0x40
 8003b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b60:	2300      	movs	r3, #0
 8003b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b64:	2300      	movs	r3, #0
 8003b66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b6c:	4b59      	ldr	r3, [pc, #356]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d00d      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x40>
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	f200 80a1 	bhi.w	8003cc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x34>
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b86:	e09b      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b53      	ldr	r3, [pc, #332]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b8a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b8c:	e09b      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b8e:	4b53      	ldr	r3, [pc, #332]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003b90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b92:	e098      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b94:	4b4f      	ldr	r3, [pc, #316]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b9e:	4b4d      	ldr	r3, [pc, #308]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d028      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003baa:	4b4a      	ldr	r3, [pc, #296]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	623b      	str	r3, [r7, #32]
 8003bb4:	627a      	str	r2, [r7, #36]	; 0x24
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4b47      	ldr	r3, [pc, #284]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003bc0:	fb03 f201 	mul.w	r2, r3, r1
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	fb00 f303 	mul.w	r3, r0, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	4a43      	ldr	r2, [pc, #268]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003bce:	fba0 1202 	umull	r1, r2, r0, r2
 8003bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bd4:	460a      	mov	r2, r1
 8003bd6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bda:	4413      	add	r3, r2
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be0:	2200      	movs	r2, #0
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	61fa      	str	r2, [r7, #28]
 8003be6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bee:	f7fc fb47 	bl	8000280 <__aeabi_uldivmod>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bfa:	e053      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfc:	4b35      	ldr	r3, [pc, #212]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	099b      	lsrs	r3, r3, #6
 8003c02:	2200      	movs	r2, #0
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	617a      	str	r2, [r7, #20]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c0e:	f04f 0b00 	mov.w	fp, #0
 8003c12:	4652      	mov	r2, sl
 8003c14:	465b      	mov	r3, fp
 8003c16:	f04f 0000 	mov.w	r0, #0
 8003c1a:	f04f 0100 	mov.w	r1, #0
 8003c1e:	0159      	lsls	r1, r3, #5
 8003c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c24:	0150      	lsls	r0, r2, #5
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	ebb2 080a 	subs.w	r8, r2, sl
 8003c2e:	eb63 090b 	sbc.w	r9, r3, fp
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c46:	ebb2 0408 	subs.w	r4, r2, r8
 8003c4a:	eb63 0509 	sbc.w	r5, r3, r9
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	00eb      	lsls	r3, r5, #3
 8003c58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c5c:	00e2      	lsls	r2, r4, #3
 8003c5e:	4614      	mov	r4, r2
 8003c60:	461d      	mov	r5, r3
 8003c62:	eb14 030a 	adds.w	r3, r4, sl
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	eb45 030b 	adc.w	r3, r5, fp
 8003c6c:	607b      	str	r3, [r7, #4]
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	028b      	lsls	r3, r1, #10
 8003c7e:	4621      	mov	r1, r4
 8003c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c84:	4621      	mov	r1, r4
 8003c86:	028a      	lsls	r2, r1, #10
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	2200      	movs	r2, #0
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	60fa      	str	r2, [r7, #12]
 8003c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c98:	f7fc faf2 	bl	8000280 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cbe:	e002      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3740      	adds	r7, #64	; 0x40
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	00f42400 	.word	0x00f42400
 8003cdc:	017d7840 	.word	0x017d7840

08003ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce4:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000000 	.word	0x20000000

08003cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cfc:	f7ff fff0 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	0a9b      	lsrs	r3, r3, #10
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	4903      	ldr	r1, [pc, #12]	; (8003d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	0800613c 	.word	0x0800613c

08003d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d24:	f7ff ffdc 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	0b5b      	lsrs	r3, r3, #13
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	4903      	ldr	r1, [pc, #12]	; (8003d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40023800 	.word	0x40023800
 8003d44:	0800613c 	.word	0x0800613c

08003d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e042      	b.n	8003de0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd f8e6 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fdbd 	bl	800490c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d175      	bne.n	8003ef4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_UART_Transmit+0x2c>
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e06e      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2221      	movs	r2, #33	; 0x21
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e26:	f7fd faa1 	bl	800136c <HAL_GetTick>
 8003e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e40:	d108      	bne.n	8003e54 <HAL_UART_Transmit+0x6c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d104      	bne.n	8003e54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	e003      	b.n	8003e5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e5c:	e02e      	b.n	8003ebc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2180      	movs	r1, #128	; 0x80
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fb1f 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e03a      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	3302      	adds	r3, #2
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	e007      	b.n	8003eae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1cb      	bne.n	8003e5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2140      	movs	r1, #64	; 0x40
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 faeb 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e006      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3720      	adds	r7, #32
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d112      	bne.n	8003f3e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_UART_Receive_IT+0x26>
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e00b      	b.n	8003f40 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	461a      	mov	r2, r3
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fb12 	bl	800455e <UART_Start_Receive_IT>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	e000      	b.n	8003f40 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
  }
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b0ba      	sub	sp, #232	; 0xe8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_UART_IRQHandler+0x66>
 8003f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fbf2 	bl	8004790 <UART_Receive_IT>
      return;
 8003fac:	e25b      	b.n	8004466 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 80de 	beq.w	8004174 <HAL_UART_IRQHandler+0x22c>
 8003fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d106      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80d1 	beq.w	8004174 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_UART_IRQHandler+0xae>
 8003fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f043 0201 	orr.w	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_UART_IRQHandler+0xd2>
 8004002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	f043 0202 	orr.w	r2, r3, #2
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <HAL_UART_IRQHandler+0xf6>
 8004026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	f043 0204 	orr.w	r2, r3, #4
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d011      	beq.n	800406e <HAL_UART_IRQHandler+0x126>
 800404a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d105      	bne.n	8004062 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d005      	beq.n	800406e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	f043 0208 	orr.w	r2, r3, #8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 81f2 	beq.w	800445c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_UART_IRQHandler+0x14e>
 8004084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fb7d 	bl	8004790 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <HAL_UART_IRQHandler+0x17a>
 80040ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d04f      	beq.n	8004162 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fa85 	bl	80045d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d141      	bne.n	800415a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3314      	adds	r3, #20
 80040dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3314      	adds	r3, #20
 80040fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004102:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800410e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800411a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1d9      	bne.n	80040d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d013      	beq.n	8004152 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	4a7e      	ldr	r2, [pc, #504]	; (8004328 <HAL_UART_IRQHandler+0x3e0>)
 8004130:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	4618      	mov	r0, r3
 8004138:	f7fd ffd2 	bl	80020e0 <HAL_DMA_Abort_IT>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800414c:	4610      	mov	r0, r2
 800414e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004150:	e00e      	b.n	8004170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f994 	bl	8004480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	e00a      	b.n	8004170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f990 	bl	8004480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	e006      	b.n	8004170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f98c 	bl	8004480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800416e:	e175      	b.n	800445c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004170:	bf00      	nop
    return;
 8004172:	e173      	b.n	800445c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	2b01      	cmp	r3, #1
 800417a:	f040 814f 	bne.w	800441c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8148 	beq.w	800441c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800418c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8141 	beq.w	800441c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800419a:	2300      	movs	r3, #0
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b40      	cmp	r3, #64	; 0x40
 80041bc:	f040 80b6 	bne.w	800432c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8145 	beq.w	8004460 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041de:	429a      	cmp	r2, r3
 80041e0:	f080 813e 	bcs.w	8004460 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f6:	f000 8088 	beq.w	800430a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	330c      	adds	r3, #12
 8004200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004226:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800422a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004232:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800423e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1d9      	bne.n	80041fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3314      	adds	r3, #20
 800424c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3314      	adds	r3, #20
 8004266:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800426a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800426e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004272:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800427c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e1      	bne.n	8004246 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3314      	adds	r3, #20
 8004288:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3314      	adds	r3, #20
 80042a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e3      	bne.n	8004282 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042da:	f023 0310 	bic.w	r3, r3, #16
 80042de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80042ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e3      	bne.n	80042c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004304:	4618      	mov	r0, r3
 8004306:	f7fd fe7b 	bl	8002000 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2202      	movs	r2, #2
 800430e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004318:	b29b      	uxth	r3, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	b29b      	uxth	r3, r3
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f8b7 	bl	8004494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004326:	e09b      	b.n	8004460 <HAL_UART_IRQHandler+0x518>
 8004328:	08004699 	.word	0x08004699
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004334:	b29b      	uxth	r3, r3
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 808e 	beq.w	8004464 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004348:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8089 	beq.w	8004464 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004364:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004368:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004376:	647a      	str	r2, [r7, #68]	; 0x44
 8004378:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800437c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e3      	bne.n	8004352 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3314      	adds	r3, #20
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	623b      	str	r3, [r7, #32]
   return(result);
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3314      	adds	r3, #20
 80043aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043ae:	633a      	str	r2, [r7, #48]	; 0x30
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e3      	bne.n	800438a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	330c      	adds	r3, #12
 80043d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	60fb      	str	r3, [r7, #12]
   return(result);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0310 	bic.w	r3, r3, #16
 80043e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	330c      	adds	r3, #12
 80043f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043f4:	61fa      	str	r2, [r7, #28]
 80043f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	69b9      	ldr	r1, [r7, #24]
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	617b      	str	r3, [r7, #20]
   return(result);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e3      	bne.n	80043d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800440e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004412:	4619      	mov	r1, r3
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f83d 	bl	8004494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800441a:	e023      	b.n	8004464 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800441c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004424:	2b00      	cmp	r3, #0
 8004426:	d009      	beq.n	800443c <HAL_UART_IRQHandler+0x4f4>
 8004428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800442c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f943 	bl	80046c0 <UART_Transmit_IT>
    return;
 800443a:	e014      	b.n	8004466 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800443c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00e      	beq.n	8004466 <HAL_UART_IRQHandler+0x51e>
 8004448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800444c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f983 	bl	8004760 <UART_EndTransmit_IT>
    return;
 800445a:	e004      	b.n	8004466 <HAL_UART_IRQHandler+0x51e>
    return;
 800445c:	bf00      	nop
 800445e:	e002      	b.n	8004466 <HAL_UART_IRQHandler+0x51e>
      return;
 8004460:	bf00      	nop
 8004462:	e000      	b.n	8004466 <HAL_UART_IRQHandler+0x51e>
      return;
 8004464:	bf00      	nop
  }
}
 8004466:	37e8      	adds	r7, #232	; 0xe8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044bc:	e03b      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d037      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c6:	f7fc ff51 	bl	800136c <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	6a3a      	ldr	r2, [r7, #32]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d302      	bcc.n	80044dc <UART_WaitOnFlagUntilTimeout+0x30>
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e03a      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d023      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b80      	cmp	r3, #128	; 0x80
 80044f2:	d020      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d01d      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b08      	cmp	r3, #8
 8004506:	d116      	bne.n	8004536 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f857 	bl	80045d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2208      	movs	r2, #8
 8004528:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e00f      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4013      	ands	r3, r2
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	429a      	cmp	r2, r3
 8004544:	bf0c      	ite	eq
 8004546:	2301      	moveq	r3, #1
 8004548:	2300      	movne	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	429a      	cmp	r2, r3
 8004552:	d0b4      	beq.n	80044be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	4613      	mov	r3, r2
 800456a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	88fa      	ldrh	r2, [r7, #6]
 8004576:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2222      	movs	r2, #34	; 0x22
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0220 	orr.w	r2, r2, #32
 80045c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b095      	sub	sp, #84	; 0x54
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045fa:	643a      	str	r2, [r7, #64]	; 0x40
 80045fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e5      	bne.n	80045da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	61fb      	str	r3, [r7, #28]
   return(result);
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	64bb      	str	r3, [r7, #72]	; 0x48
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3314      	adds	r3, #20
 800462c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800462e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e5      	bne.n	800460e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	2b01      	cmp	r3, #1
 8004648:	d119      	bne.n	800467e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	60bb      	str	r3, [r7, #8]
   return(result);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f023 0310 	bic.w	r3, r3, #16
 8004660:	647b      	str	r3, [r7, #68]	; 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	330c      	adds	r3, #12
 8004668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800466a:	61ba      	str	r2, [r7, #24]
 800466c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6979      	ldr	r1, [r7, #20]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	613b      	str	r3, [r7, #16]
   return(result);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e5      	bne.n	800464a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800468c:	bf00      	nop
 800468e:	3754      	adds	r7, #84	; 0x54
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff fee4 	bl	8004480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b21      	cmp	r3, #33	; 0x21
 80046d2:	d13e      	bne.n	8004752 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d114      	bne.n	8004708 <UART_Transmit_IT+0x48>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d110      	bne.n	8004708 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	1c9a      	adds	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	621a      	str	r2, [r3, #32]
 8004706:	e008      	b.n	800471a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	1c59      	adds	r1, r3, #1
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6211      	str	r1, [r2, #32]
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29b      	uxth	r3, r3
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4619      	mov	r1, r3
 8004728:	84d1      	strh	r1, [r2, #38]	; 0x26
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800473c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800474c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e000      	b.n	8004754 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004752:	2302      	movs	r3, #2
  }
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004776:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff fe73 	bl	800446c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	; 0x30
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b22      	cmp	r3, #34	; 0x22
 80047a2:	f040 80ae 	bne.w	8004902 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ae:	d117      	bne.n	80047e0 <UART_Receive_IT+0x50>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d113      	bne.n	80047e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	1c9a      	adds	r2, r3, #2
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	629a      	str	r2, [r3, #40]	; 0x28
 80047de:	e026      	b.n	800482e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f2:	d007      	beq.n	8004804 <UART_Receive_IT+0x74>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <UART_Receive_IT+0x82>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	b2da      	uxtb	r2, r3
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e008      	b.n	8004824 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481e:	b2da      	uxtb	r2, r3
 8004820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004822:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	4619      	mov	r1, r3
 800483c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800483e:	2b00      	cmp	r3, #0
 8004840:	d15d      	bne.n	80048fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0220 	bic.w	r2, r2, #32
 8004850:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004860:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	2b01      	cmp	r3, #1
 8004886:	d135      	bne.n	80048f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	613b      	str	r3, [r7, #16]
   return(result);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f023 0310 	bic.w	r3, r3, #16
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ae:	623a      	str	r2, [r7, #32]
 80048b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	69f9      	ldr	r1, [r7, #28]
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e5      	bne.n	800488e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d10a      	bne.n	80048e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff fdd1 	bl	8004494 <HAL_UARTEx_RxEventCallback>
 80048f2:	e002      	b.n	80048fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fc fc61 	bl	80011bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e002      	b.n	8004904 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e000      	b.n	8004904 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004902:	2302      	movs	r3, #2
  }
}
 8004904:	4618      	mov	r0, r3
 8004906:	3730      	adds	r7, #48	; 0x30
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800490c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004910:	b0c0      	sub	sp, #256	; 0x100
 8004912:	af00      	add	r7, sp, #0
 8004914:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004928:	68d9      	ldr	r1, [r3, #12]
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	ea40 0301 	orr.w	r3, r0, r1
 8004934:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	431a      	orrs	r2, r3
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	431a      	orrs	r2, r3
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004964:	f021 010c 	bic.w	r1, r1, #12
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004972:	430b      	orrs	r3, r1
 8004974:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004986:	6999      	ldr	r1, [r3, #24]
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	ea40 0301 	orr.w	r3, r0, r1
 8004992:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b8f      	ldr	r3, [pc, #572]	; (8004bd8 <UART_SetConfig+0x2cc>)
 800499c:	429a      	cmp	r2, r3
 800499e:	d005      	beq.n	80049ac <UART_SetConfig+0xa0>
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4b8d      	ldr	r3, [pc, #564]	; (8004bdc <UART_SetConfig+0x2d0>)
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d104      	bne.n	80049b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049ac:	f7ff f9b8 	bl	8003d20 <HAL_RCC_GetPCLK2Freq>
 80049b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049b4:	e003      	b.n	80049be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049b6:	f7ff f99f 	bl	8003cf8 <HAL_RCC_GetPCLK1Freq>
 80049ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c8:	f040 810c 	bne.w	8004be4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049de:	4622      	mov	r2, r4
 80049e0:	462b      	mov	r3, r5
 80049e2:	1891      	adds	r1, r2, r2
 80049e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80049e6:	415b      	adcs	r3, r3
 80049e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049ee:	4621      	mov	r1, r4
 80049f0:	eb12 0801 	adds.w	r8, r2, r1
 80049f4:	4629      	mov	r1, r5
 80049f6:	eb43 0901 	adc.w	r9, r3, r1
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a0e:	4690      	mov	r8, r2
 8004a10:	4699      	mov	r9, r3
 8004a12:	4623      	mov	r3, r4
 8004a14:	eb18 0303 	adds.w	r3, r8, r3
 8004a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a1c:	462b      	mov	r3, r5
 8004a1e:	eb49 0303 	adc.w	r3, r9, r3
 8004a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	18db      	adds	r3, r3, r3
 8004a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a40:	4613      	mov	r3, r2
 8004a42:	eb42 0303 	adc.w	r3, r2, r3
 8004a46:	657b      	str	r3, [r7, #84]	; 0x54
 8004a48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a50:	f7fb fc16 	bl	8000280 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4b61      	ldr	r3, [pc, #388]	; (8004be0 <UART_SetConfig+0x2d4>)
 8004a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	011c      	lsls	r4, r3, #4
 8004a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	1891      	adds	r1, r2, r2
 8004a7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a7c:	415b      	adcs	r3, r3
 8004a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a84:	4641      	mov	r1, r8
 8004a86:	eb12 0a01 	adds.w	sl, r2, r1
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aa4:	4692      	mov	sl, r2
 8004aa6:	469b      	mov	fp, r3
 8004aa8:	4643      	mov	r3, r8
 8004aaa:	eb1a 0303 	adds.w	r3, sl, r3
 8004aae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ac8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004acc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	18db      	adds	r3, r3, r3
 8004ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	eb42 0303 	adc.w	r3, r2, r3
 8004adc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ade:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ae2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ae6:	f7fb fbcb 	bl	8000280 <__aeabi_uldivmod>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	4b3b      	ldr	r3, [pc, #236]	; (8004be0 <UART_SetConfig+0x2d4>)
 8004af2:	fba3 2301 	umull	r2, r3, r3, r1
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	2264      	movs	r2, #100	; 0x64
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	1acb      	subs	r3, r1, r3
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b06:	4b36      	ldr	r3, [pc, #216]	; (8004be0 <UART_SetConfig+0x2d4>)
 8004b08:	fba3 2302 	umull	r2, r3, r3, r2
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b14:	441c      	add	r4, r3
 8004b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b28:	4642      	mov	r2, r8
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	1891      	adds	r1, r2, r2
 8004b2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b30:	415b      	adcs	r3, r3
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b38:	4641      	mov	r1, r8
 8004b3a:	1851      	adds	r1, r2, r1
 8004b3c:	6339      	str	r1, [r7, #48]	; 0x30
 8004b3e:	4649      	mov	r1, r9
 8004b40:	414b      	adcs	r3, r1
 8004b42:	637b      	str	r3, [r7, #52]	; 0x34
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b50:	4659      	mov	r1, fp
 8004b52:	00cb      	lsls	r3, r1, #3
 8004b54:	4651      	mov	r1, sl
 8004b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5a:	4651      	mov	r1, sl
 8004b5c:	00ca      	lsls	r2, r1, #3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	4642      	mov	r2, r8
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b6c:	464b      	mov	r3, r9
 8004b6e:	460a      	mov	r2, r1
 8004b70:	eb42 0303 	adc.w	r3, r2, r3
 8004b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	18db      	adds	r3, r3, r3
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b92:	4613      	mov	r3, r2
 8004b94:	eb42 0303 	adc.w	r3, r2, r3
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ba2:	f7fb fb6d 	bl	8000280 <__aeabi_uldivmod>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <UART_SetConfig+0x2d4>)
 8004bac:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	2164      	movs	r1, #100	; 0x64
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	3332      	adds	r3, #50	; 0x32
 8004bbe:	4a08      	ldr	r2, [pc, #32]	; (8004be0 <UART_SetConfig+0x2d4>)
 8004bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	f003 0207 	and.w	r2, r3, #7
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4422      	add	r2, r4
 8004bd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bd4:	e106      	b.n	8004de4 <UART_SetConfig+0x4d8>
 8004bd6:	bf00      	nop
 8004bd8:	40011000 	.word	0x40011000
 8004bdc:	40011400 	.word	0x40011400
 8004be0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bf6:	4642      	mov	r2, r8
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	1891      	adds	r1, r2, r2
 8004bfc:	6239      	str	r1, [r7, #32]
 8004bfe:	415b      	adcs	r3, r3
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
 8004c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c06:	4641      	mov	r1, r8
 8004c08:	1854      	adds	r4, r2, r1
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	eb43 0501 	adc.w	r5, r3, r1
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	00eb      	lsls	r3, r5, #3
 8004c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c1e:	00e2      	lsls	r2, r4, #3
 8004c20:	4614      	mov	r4, r2
 8004c22:	461d      	mov	r5, r3
 8004c24:	4643      	mov	r3, r8
 8004c26:	18e3      	adds	r3, r4, r3
 8004c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	eb45 0303 	adc.w	r3, r5, r3
 8004c32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c52:	4629      	mov	r1, r5
 8004c54:	008b      	lsls	r3, r1, #2
 8004c56:	4621      	mov	r1, r4
 8004c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	008a      	lsls	r2, r1, #2
 8004c60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c64:	f7fb fb0c 	bl	8000280 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4b60      	ldr	r3, [pc, #384]	; (8004df0 <UART_SetConfig+0x4e4>)
 8004c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	011c      	lsls	r4, r3, #4
 8004c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c88:	4642      	mov	r2, r8
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	1891      	adds	r1, r2, r2
 8004c8e:	61b9      	str	r1, [r7, #24]
 8004c90:	415b      	adcs	r3, r3
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c98:	4641      	mov	r1, r8
 8004c9a:	1851      	adds	r1, r2, r1
 8004c9c:	6139      	str	r1, [r7, #16]
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	414b      	adcs	r3, r1
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb0:	4659      	mov	r1, fp
 8004cb2:	00cb      	lsls	r3, r1, #3
 8004cb4:	4651      	mov	r1, sl
 8004cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cba:	4651      	mov	r1, sl
 8004cbc:	00ca      	lsls	r2, r1, #3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	189b      	adds	r3, r3, r2
 8004cc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ccc:	464b      	mov	r3, r9
 8004cce:	460a      	mov	r2, r1
 8004cd0:	eb42 0303 	adc.w	r3, r2, r3
 8004cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ce2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	008b      	lsls	r3, r1, #2
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cfa:	4641      	mov	r1, r8
 8004cfc:	008a      	lsls	r2, r1, #2
 8004cfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d02:	f7fb fabd 	bl	8000280 <__aeabi_uldivmod>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	4b38      	ldr	r3, [pc, #224]	; (8004df0 <UART_SetConfig+0x4e4>)
 8004d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	2264      	movs	r2, #100	; 0x64
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	1acb      	subs	r3, r1, r3
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	3332      	adds	r3, #50	; 0x32
 8004d20:	4a33      	ldr	r2, [pc, #204]	; (8004df0 <UART_SetConfig+0x4e4>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2c:	441c      	add	r4, r3
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	673b      	str	r3, [r7, #112]	; 0x70
 8004d36:	677a      	str	r2, [r7, #116]	; 0x74
 8004d38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	1891      	adds	r1, r2, r2
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	415b      	adcs	r3, r3
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	1851      	adds	r1, r2, r1
 8004d50:	6039      	str	r1, [r7, #0]
 8004d52:	4649      	mov	r1, r9
 8004d54:	414b      	adcs	r3, r1
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d64:	4659      	mov	r1, fp
 8004d66:	00cb      	lsls	r3, r1, #3
 8004d68:	4651      	mov	r1, sl
 8004d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6e:	4651      	mov	r1, sl
 8004d70:	00ca      	lsls	r2, r1, #3
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	4642      	mov	r2, r8
 8004d7a:	189b      	adds	r3, r3, r2
 8004d7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d7e:	464b      	mov	r3, r9
 8004d80:	460a      	mov	r2, r1
 8004d82:	eb42 0303 	adc.w	r3, r2, r3
 8004d86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	663b      	str	r3, [r7, #96]	; 0x60
 8004d92:	667a      	str	r2, [r7, #100]	; 0x64
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004da0:	4649      	mov	r1, r9
 8004da2:	008b      	lsls	r3, r1, #2
 8004da4:	4641      	mov	r1, r8
 8004da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004daa:	4641      	mov	r1, r8
 8004dac:	008a      	lsls	r2, r1, #2
 8004dae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004db2:	f7fb fa65 	bl	8000280 <__aeabi_uldivmod>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <UART_SetConfig+0x4e4>)
 8004dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	2164      	movs	r1, #100	; 0x64
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	3332      	adds	r3, #50	; 0x32
 8004dce:	4a08      	ldr	r2, [pc, #32]	; (8004df0 <UART_SetConfig+0x4e4>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	f003 020f 	and.w	r2, r3, #15
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4422      	add	r2, r4
 8004de2:	609a      	str	r2, [r3, #8]
}
 8004de4:	bf00      	nop
 8004de6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dea:	46bd      	mov	sp, r7
 8004dec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df0:	51eb851f 	.word	0x51eb851f

08004df4 <std>:
 8004df4:	2300      	movs	r3, #0
 8004df6:	b510      	push	{r4, lr}
 8004df8:	4604      	mov	r4, r0
 8004dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8004dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e02:	6083      	str	r3, [r0, #8]
 8004e04:	8181      	strh	r1, [r0, #12]
 8004e06:	6643      	str	r3, [r0, #100]	; 0x64
 8004e08:	81c2      	strh	r2, [r0, #14]
 8004e0a:	6183      	str	r3, [r0, #24]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	2208      	movs	r2, #8
 8004e10:	305c      	adds	r0, #92	; 0x5c
 8004e12:	f000 fa17 	bl	8005244 <memset>
 8004e16:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <std+0x58>)
 8004e18:	6263      	str	r3, [r4, #36]	; 0x24
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <std+0x5c>)
 8004e1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <std+0x60>)
 8004e20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e22:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <std+0x64>)
 8004e24:	6323      	str	r3, [r4, #48]	; 0x30
 8004e26:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <std+0x68>)
 8004e28:	6224      	str	r4, [r4, #32]
 8004e2a:	429c      	cmp	r4, r3
 8004e2c:	d006      	beq.n	8004e3c <std+0x48>
 8004e2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004e32:	4294      	cmp	r4, r2
 8004e34:	d002      	beq.n	8004e3c <std+0x48>
 8004e36:	33d0      	adds	r3, #208	; 0xd0
 8004e38:	429c      	cmp	r4, r3
 8004e3a:	d105      	bne.n	8004e48 <std+0x54>
 8004e3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e44:	f000 ba76 	b.w	8005334 <__retarget_lock_init_recursive>
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	bf00      	nop
 8004e4c:	08005095 	.word	0x08005095
 8004e50:	080050b7 	.word	0x080050b7
 8004e54:	080050ef 	.word	0x080050ef
 8004e58:	08005113 	.word	0x08005113
 8004e5c:	2000035c 	.word	0x2000035c

08004e60 <stdio_exit_handler>:
 8004e60:	4a02      	ldr	r2, [pc, #8]	; (8004e6c <stdio_exit_handler+0xc>)
 8004e62:	4903      	ldr	r1, [pc, #12]	; (8004e70 <stdio_exit_handler+0x10>)
 8004e64:	4803      	ldr	r0, [pc, #12]	; (8004e74 <stdio_exit_handler+0x14>)
 8004e66:	f000 b869 	b.w	8004f3c <_fwalk_sglue>
 8004e6a:	bf00      	nop
 8004e6c:	2000000c 	.word	0x2000000c
 8004e70:	08005e91 	.word	0x08005e91
 8004e74:	20000018 	.word	0x20000018

08004e78 <cleanup_stdio>:
 8004e78:	6841      	ldr	r1, [r0, #4]
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <cleanup_stdio+0x34>)
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	4604      	mov	r4, r0
 8004e82:	d001      	beq.n	8004e88 <cleanup_stdio+0x10>
 8004e84:	f001 f804 	bl	8005e90 <_fflush_r>
 8004e88:	68a1      	ldr	r1, [r4, #8]
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <cleanup_stdio+0x38>)
 8004e8c:	4299      	cmp	r1, r3
 8004e8e:	d002      	beq.n	8004e96 <cleanup_stdio+0x1e>
 8004e90:	4620      	mov	r0, r4
 8004e92:	f000 fffd 	bl	8005e90 <_fflush_r>
 8004e96:	68e1      	ldr	r1, [r4, #12]
 8004e98:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <cleanup_stdio+0x3c>)
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	d004      	beq.n	8004ea8 <cleanup_stdio+0x30>
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea4:	f000 bff4 	b.w	8005e90 <_fflush_r>
 8004ea8:	bd10      	pop	{r4, pc}
 8004eaa:	bf00      	nop
 8004eac:	2000035c 	.word	0x2000035c
 8004eb0:	200003c4 	.word	0x200003c4
 8004eb4:	2000042c 	.word	0x2000042c

08004eb8 <global_stdio_init.part.0>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <global_stdio_init.part.0+0x30>)
 8004ebc:	4c0b      	ldr	r4, [pc, #44]	; (8004eec <global_stdio_init.part.0+0x34>)
 8004ebe:	4a0c      	ldr	r2, [pc, #48]	; (8004ef0 <global_stdio_init.part.0+0x38>)
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	f7ff ff94 	bl	8004df4 <std>
 8004ecc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	2109      	movs	r1, #9
 8004ed4:	f7ff ff8e 	bl	8004df4 <std>
 8004ed8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004edc:	2202      	movs	r2, #2
 8004ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee2:	2112      	movs	r1, #18
 8004ee4:	f7ff bf86 	b.w	8004df4 <std>
 8004ee8:	20000494 	.word	0x20000494
 8004eec:	2000035c 	.word	0x2000035c
 8004ef0:	08004e61 	.word	0x08004e61

08004ef4 <__sfp_lock_acquire>:
 8004ef4:	4801      	ldr	r0, [pc, #4]	; (8004efc <__sfp_lock_acquire+0x8>)
 8004ef6:	f000 ba1e 	b.w	8005336 <__retarget_lock_acquire_recursive>
 8004efa:	bf00      	nop
 8004efc:	2000049d 	.word	0x2000049d

08004f00 <__sfp_lock_release>:
 8004f00:	4801      	ldr	r0, [pc, #4]	; (8004f08 <__sfp_lock_release+0x8>)
 8004f02:	f000 ba19 	b.w	8005338 <__retarget_lock_release_recursive>
 8004f06:	bf00      	nop
 8004f08:	2000049d 	.word	0x2000049d

08004f0c <__sinit>:
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	4604      	mov	r4, r0
 8004f10:	f7ff fff0 	bl	8004ef4 <__sfp_lock_acquire>
 8004f14:	6a23      	ldr	r3, [r4, #32]
 8004f16:	b11b      	cbz	r3, 8004f20 <__sinit+0x14>
 8004f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1c:	f7ff bff0 	b.w	8004f00 <__sfp_lock_release>
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <__sinit+0x28>)
 8004f22:	6223      	str	r3, [r4, #32]
 8004f24:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <__sinit+0x2c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f5      	bne.n	8004f18 <__sinit+0xc>
 8004f2c:	f7ff ffc4 	bl	8004eb8 <global_stdio_init.part.0>
 8004f30:	e7f2      	b.n	8004f18 <__sinit+0xc>
 8004f32:	bf00      	nop
 8004f34:	08004e79 	.word	0x08004e79
 8004f38:	20000494 	.word	0x20000494

08004f3c <_fwalk_sglue>:
 8004f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f40:	4607      	mov	r7, r0
 8004f42:	4688      	mov	r8, r1
 8004f44:	4614      	mov	r4, r2
 8004f46:	2600      	movs	r6, #0
 8004f48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f4c:	f1b9 0901 	subs.w	r9, r9, #1
 8004f50:	d505      	bpl.n	8004f5e <_fwalk_sglue+0x22>
 8004f52:	6824      	ldr	r4, [r4, #0]
 8004f54:	2c00      	cmp	r4, #0
 8004f56:	d1f7      	bne.n	8004f48 <_fwalk_sglue+0xc>
 8004f58:	4630      	mov	r0, r6
 8004f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d907      	bls.n	8004f74 <_fwalk_sglue+0x38>
 8004f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	d003      	beq.n	8004f74 <_fwalk_sglue+0x38>
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	4638      	mov	r0, r7
 8004f70:	47c0      	blx	r8
 8004f72:	4306      	orrs	r6, r0
 8004f74:	3568      	adds	r5, #104	; 0x68
 8004f76:	e7e9      	b.n	8004f4c <_fwalk_sglue+0x10>

08004f78 <iprintf>:
 8004f78:	b40f      	push	{r0, r1, r2, r3}
 8004f7a:	b507      	push	{r0, r1, r2, lr}
 8004f7c:	4906      	ldr	r1, [pc, #24]	; (8004f98 <iprintf+0x20>)
 8004f7e:	ab04      	add	r3, sp, #16
 8004f80:	6808      	ldr	r0, [r1, #0]
 8004f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f86:	6881      	ldr	r1, [r0, #8]
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	f000 fc51 	bl	8005830 <_vfiprintf_r>
 8004f8e:	b003      	add	sp, #12
 8004f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f94:	b004      	add	sp, #16
 8004f96:	4770      	bx	lr
 8004f98:	20000064 	.word	0x20000064

08004f9c <_puts_r>:
 8004f9c:	6a03      	ldr	r3, [r0, #32]
 8004f9e:	b570      	push	{r4, r5, r6, lr}
 8004fa0:	6884      	ldr	r4, [r0, #8]
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	460e      	mov	r6, r1
 8004fa6:	b90b      	cbnz	r3, 8004fac <_puts_r+0x10>
 8004fa8:	f7ff ffb0 	bl	8004f0c <__sinit>
 8004fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fae:	07db      	lsls	r3, r3, #31
 8004fb0:	d405      	bmi.n	8004fbe <_puts_r+0x22>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	0598      	lsls	r0, r3, #22
 8004fb6:	d402      	bmi.n	8004fbe <_puts_r+0x22>
 8004fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fba:	f000 f9bc 	bl	8005336 <__retarget_lock_acquire_recursive>
 8004fbe:	89a3      	ldrh	r3, [r4, #12]
 8004fc0:	0719      	lsls	r1, r3, #28
 8004fc2:	d513      	bpl.n	8004fec <_puts_r+0x50>
 8004fc4:	6923      	ldr	r3, [r4, #16]
 8004fc6:	b18b      	cbz	r3, 8004fec <_puts_r+0x50>
 8004fc8:	3e01      	subs	r6, #1
 8004fca:	68a3      	ldr	r3, [r4, #8]
 8004fcc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	60a3      	str	r3, [r4, #8]
 8004fd4:	b9e9      	cbnz	r1, 8005012 <_puts_r+0x76>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	da2e      	bge.n	8005038 <_puts_r+0x9c>
 8004fda:	4622      	mov	r2, r4
 8004fdc:	210a      	movs	r1, #10
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 f89b 	bl	800511a <__swbuf_r>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d007      	beq.n	8004ff8 <_puts_r+0x5c>
 8004fe8:	250a      	movs	r5, #10
 8004fea:	e007      	b.n	8004ffc <_puts_r+0x60>
 8004fec:	4621      	mov	r1, r4
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f000 f8d0 	bl	8005194 <__swsetup_r>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d0e7      	beq.n	8004fc8 <_puts_r+0x2c>
 8004ff8:	f04f 35ff 	mov.w	r5, #4294967295
 8004ffc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ffe:	07da      	lsls	r2, r3, #31
 8005000:	d405      	bmi.n	800500e <_puts_r+0x72>
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	059b      	lsls	r3, r3, #22
 8005006:	d402      	bmi.n	800500e <_puts_r+0x72>
 8005008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800500a:	f000 f995 	bl	8005338 <__retarget_lock_release_recursive>
 800500e:	4628      	mov	r0, r5
 8005010:	bd70      	pop	{r4, r5, r6, pc}
 8005012:	2b00      	cmp	r3, #0
 8005014:	da04      	bge.n	8005020 <_puts_r+0x84>
 8005016:	69a2      	ldr	r2, [r4, #24]
 8005018:	429a      	cmp	r2, r3
 800501a:	dc06      	bgt.n	800502a <_puts_r+0x8e>
 800501c:	290a      	cmp	r1, #10
 800501e:	d004      	beq.n	800502a <_puts_r+0x8e>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	6022      	str	r2, [r4, #0]
 8005026:	7019      	strb	r1, [r3, #0]
 8005028:	e7cf      	b.n	8004fca <_puts_r+0x2e>
 800502a:	4622      	mov	r2, r4
 800502c:	4628      	mov	r0, r5
 800502e:	f000 f874 	bl	800511a <__swbuf_r>
 8005032:	3001      	adds	r0, #1
 8005034:	d1c9      	bne.n	8004fca <_puts_r+0x2e>
 8005036:	e7df      	b.n	8004ff8 <_puts_r+0x5c>
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	250a      	movs	r5, #10
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	6022      	str	r2, [r4, #0]
 8005040:	701d      	strb	r5, [r3, #0]
 8005042:	e7db      	b.n	8004ffc <_puts_r+0x60>

08005044 <puts>:
 8005044:	4b02      	ldr	r3, [pc, #8]	; (8005050 <puts+0xc>)
 8005046:	4601      	mov	r1, r0
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	f7ff bfa7 	b.w	8004f9c <_puts_r>
 800504e:	bf00      	nop
 8005050:	20000064 	.word	0x20000064

08005054 <siprintf>:
 8005054:	b40e      	push	{r1, r2, r3}
 8005056:	b500      	push	{lr}
 8005058:	b09c      	sub	sp, #112	; 0x70
 800505a:	ab1d      	add	r3, sp, #116	; 0x74
 800505c:	9002      	str	r0, [sp, #8]
 800505e:	9006      	str	r0, [sp, #24]
 8005060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005064:	4809      	ldr	r0, [pc, #36]	; (800508c <siprintf+0x38>)
 8005066:	9107      	str	r1, [sp, #28]
 8005068:	9104      	str	r1, [sp, #16]
 800506a:	4909      	ldr	r1, [pc, #36]	; (8005090 <siprintf+0x3c>)
 800506c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005070:	9105      	str	r1, [sp, #20]
 8005072:	6800      	ldr	r0, [r0, #0]
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	a902      	add	r1, sp, #8
 8005078:	f000 fab2 	bl	80055e0 <_svfiprintf_r>
 800507c:	9b02      	ldr	r3, [sp, #8]
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	b01c      	add	sp, #112	; 0x70
 8005084:	f85d eb04 	ldr.w	lr, [sp], #4
 8005088:	b003      	add	sp, #12
 800508a:	4770      	bx	lr
 800508c:	20000064 	.word	0x20000064
 8005090:	ffff0208 	.word	0xffff0208

08005094 <__sread>:
 8005094:	b510      	push	{r4, lr}
 8005096:	460c      	mov	r4, r1
 8005098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509c:	f000 f8fc 	bl	8005298 <_read_r>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	bfab      	itete	ge
 80050a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050a6:	89a3      	ldrhlt	r3, [r4, #12]
 80050a8:	181b      	addge	r3, r3, r0
 80050aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050ae:	bfac      	ite	ge
 80050b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80050b2:	81a3      	strhlt	r3, [r4, #12]
 80050b4:	bd10      	pop	{r4, pc}

080050b6 <__swrite>:
 80050b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ba:	461f      	mov	r7, r3
 80050bc:	898b      	ldrh	r3, [r1, #12]
 80050be:	05db      	lsls	r3, r3, #23
 80050c0:	4605      	mov	r5, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	4616      	mov	r6, r2
 80050c6:	d505      	bpl.n	80050d4 <__swrite+0x1e>
 80050c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050cc:	2302      	movs	r3, #2
 80050ce:	2200      	movs	r2, #0
 80050d0:	f000 f8d0 	bl	8005274 <_lseek_r>
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050de:	81a3      	strh	r3, [r4, #12]
 80050e0:	4632      	mov	r2, r6
 80050e2:	463b      	mov	r3, r7
 80050e4:	4628      	mov	r0, r5
 80050e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ea:	f000 b8e7 	b.w	80052bc <_write_r>

080050ee <__sseek>:
 80050ee:	b510      	push	{r4, lr}
 80050f0:	460c      	mov	r4, r1
 80050f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f6:	f000 f8bd 	bl	8005274 <_lseek_r>
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	bf15      	itete	ne
 8005100:	6560      	strne	r0, [r4, #84]	; 0x54
 8005102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800510a:	81a3      	strheq	r3, [r4, #12]
 800510c:	bf18      	it	ne
 800510e:	81a3      	strhne	r3, [r4, #12]
 8005110:	bd10      	pop	{r4, pc}

08005112 <__sclose>:
 8005112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005116:	f000 b89d 	b.w	8005254 <_close_r>

0800511a <__swbuf_r>:
 800511a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511c:	460e      	mov	r6, r1
 800511e:	4614      	mov	r4, r2
 8005120:	4605      	mov	r5, r0
 8005122:	b118      	cbz	r0, 800512c <__swbuf_r+0x12>
 8005124:	6a03      	ldr	r3, [r0, #32]
 8005126:	b90b      	cbnz	r3, 800512c <__swbuf_r+0x12>
 8005128:	f7ff fef0 	bl	8004f0c <__sinit>
 800512c:	69a3      	ldr	r3, [r4, #24]
 800512e:	60a3      	str	r3, [r4, #8]
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	071a      	lsls	r2, r3, #28
 8005134:	d525      	bpl.n	8005182 <__swbuf_r+0x68>
 8005136:	6923      	ldr	r3, [r4, #16]
 8005138:	b31b      	cbz	r3, 8005182 <__swbuf_r+0x68>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	6922      	ldr	r2, [r4, #16]
 800513e:	1a98      	subs	r0, r3, r2
 8005140:	6963      	ldr	r3, [r4, #20]
 8005142:	b2f6      	uxtb	r6, r6
 8005144:	4283      	cmp	r3, r0
 8005146:	4637      	mov	r7, r6
 8005148:	dc04      	bgt.n	8005154 <__swbuf_r+0x3a>
 800514a:	4621      	mov	r1, r4
 800514c:	4628      	mov	r0, r5
 800514e:	f000 fe9f 	bl	8005e90 <_fflush_r>
 8005152:	b9e0      	cbnz	r0, 800518e <__swbuf_r+0x74>
 8005154:	68a3      	ldr	r3, [r4, #8]
 8005156:	3b01      	subs	r3, #1
 8005158:	60a3      	str	r3, [r4, #8]
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	6022      	str	r2, [r4, #0]
 8005160:	701e      	strb	r6, [r3, #0]
 8005162:	6962      	ldr	r2, [r4, #20]
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	429a      	cmp	r2, r3
 8005168:	d004      	beq.n	8005174 <__swbuf_r+0x5a>
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	07db      	lsls	r3, r3, #31
 800516e:	d506      	bpl.n	800517e <__swbuf_r+0x64>
 8005170:	2e0a      	cmp	r6, #10
 8005172:	d104      	bne.n	800517e <__swbuf_r+0x64>
 8005174:	4621      	mov	r1, r4
 8005176:	4628      	mov	r0, r5
 8005178:	f000 fe8a 	bl	8005e90 <_fflush_r>
 800517c:	b938      	cbnz	r0, 800518e <__swbuf_r+0x74>
 800517e:	4638      	mov	r0, r7
 8005180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005182:	4621      	mov	r1, r4
 8005184:	4628      	mov	r0, r5
 8005186:	f000 f805 	bl	8005194 <__swsetup_r>
 800518a:	2800      	cmp	r0, #0
 800518c:	d0d5      	beq.n	800513a <__swbuf_r+0x20>
 800518e:	f04f 37ff 	mov.w	r7, #4294967295
 8005192:	e7f4      	b.n	800517e <__swbuf_r+0x64>

08005194 <__swsetup_r>:
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <__swsetup_r+0xac>)
 8005198:	4605      	mov	r5, r0
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	460c      	mov	r4, r1
 800519e:	b118      	cbz	r0, 80051a8 <__swsetup_r+0x14>
 80051a0:	6a03      	ldr	r3, [r0, #32]
 80051a2:	b90b      	cbnz	r3, 80051a8 <__swsetup_r+0x14>
 80051a4:	f7ff feb2 	bl	8004f0c <__sinit>
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051ae:	0718      	lsls	r0, r3, #28
 80051b0:	d422      	bmi.n	80051f8 <__swsetup_r+0x64>
 80051b2:	06d9      	lsls	r1, r3, #27
 80051b4:	d407      	bmi.n	80051c6 <__swsetup_r+0x32>
 80051b6:	2309      	movs	r3, #9
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	e034      	b.n	8005230 <__swsetup_r+0x9c>
 80051c6:	0758      	lsls	r0, r3, #29
 80051c8:	d512      	bpl.n	80051f0 <__swsetup_r+0x5c>
 80051ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051cc:	b141      	cbz	r1, 80051e0 <__swsetup_r+0x4c>
 80051ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051d2:	4299      	cmp	r1, r3
 80051d4:	d002      	beq.n	80051dc <__swsetup_r+0x48>
 80051d6:	4628      	mov	r0, r5
 80051d8:	f000 f8b0 	bl	800533c <_free_r>
 80051dc:	2300      	movs	r3, #0
 80051de:	6363      	str	r3, [r4, #52]	; 0x34
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051e6:	81a3      	strh	r3, [r4, #12]
 80051e8:	2300      	movs	r3, #0
 80051ea:	6063      	str	r3, [r4, #4]
 80051ec:	6923      	ldr	r3, [r4, #16]
 80051ee:	6023      	str	r3, [r4, #0]
 80051f0:	89a3      	ldrh	r3, [r4, #12]
 80051f2:	f043 0308 	orr.w	r3, r3, #8
 80051f6:	81a3      	strh	r3, [r4, #12]
 80051f8:	6923      	ldr	r3, [r4, #16]
 80051fa:	b94b      	cbnz	r3, 8005210 <__swsetup_r+0x7c>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005206:	d003      	beq.n	8005210 <__swsetup_r+0x7c>
 8005208:	4621      	mov	r1, r4
 800520a:	4628      	mov	r0, r5
 800520c:	f000 fe8e 	bl	8005f2c <__smakebuf_r>
 8005210:	89a0      	ldrh	r0, [r4, #12]
 8005212:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005216:	f010 0301 	ands.w	r3, r0, #1
 800521a:	d00a      	beq.n	8005232 <__swsetup_r+0x9e>
 800521c:	2300      	movs	r3, #0
 800521e:	60a3      	str	r3, [r4, #8]
 8005220:	6963      	ldr	r3, [r4, #20]
 8005222:	425b      	negs	r3, r3
 8005224:	61a3      	str	r3, [r4, #24]
 8005226:	6923      	ldr	r3, [r4, #16]
 8005228:	b943      	cbnz	r3, 800523c <__swsetup_r+0xa8>
 800522a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800522e:	d1c4      	bne.n	80051ba <__swsetup_r+0x26>
 8005230:	bd38      	pop	{r3, r4, r5, pc}
 8005232:	0781      	lsls	r1, r0, #30
 8005234:	bf58      	it	pl
 8005236:	6963      	ldrpl	r3, [r4, #20]
 8005238:	60a3      	str	r3, [r4, #8]
 800523a:	e7f4      	b.n	8005226 <__swsetup_r+0x92>
 800523c:	2000      	movs	r0, #0
 800523e:	e7f7      	b.n	8005230 <__swsetup_r+0x9c>
 8005240:	20000064 	.word	0x20000064

08005244 <memset>:
 8005244:	4402      	add	r2, r0
 8005246:	4603      	mov	r3, r0
 8005248:	4293      	cmp	r3, r2
 800524a:	d100      	bne.n	800524e <memset+0xa>
 800524c:	4770      	bx	lr
 800524e:	f803 1b01 	strb.w	r1, [r3], #1
 8005252:	e7f9      	b.n	8005248 <memset+0x4>

08005254 <_close_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d06      	ldr	r5, [pc, #24]	; (8005270 <_close_r+0x1c>)
 8005258:	2300      	movs	r3, #0
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fb ff19 	bl	8001096 <_close>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_close_r+0x1a>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_close_r+0x1a>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	20000498 	.word	0x20000498

08005274 <_lseek_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4d07      	ldr	r5, [pc, #28]	; (8005294 <_lseek_r+0x20>)
 8005278:	4604      	mov	r4, r0
 800527a:	4608      	mov	r0, r1
 800527c:	4611      	mov	r1, r2
 800527e:	2200      	movs	r2, #0
 8005280:	602a      	str	r2, [r5, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	f7fb ff2e 	bl	80010e4 <_lseek>
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	d102      	bne.n	8005292 <_lseek_r+0x1e>
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	b103      	cbz	r3, 8005292 <_lseek_r+0x1e>
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	20000498 	.word	0x20000498

08005298 <_read_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	4d07      	ldr	r5, [pc, #28]	; (80052b8 <_read_r+0x20>)
 800529c:	4604      	mov	r4, r0
 800529e:	4608      	mov	r0, r1
 80052a0:	4611      	mov	r1, r2
 80052a2:	2200      	movs	r2, #0
 80052a4:	602a      	str	r2, [r5, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f7fb fed8 	bl	800105c <_read>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	d102      	bne.n	80052b6 <_read_r+0x1e>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	b103      	cbz	r3, 80052b6 <_read_r+0x1e>
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	20000498 	.word	0x20000498

080052bc <_write_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4d07      	ldr	r5, [pc, #28]	; (80052dc <_write_r+0x20>)
 80052c0:	4604      	mov	r4, r0
 80052c2:	4608      	mov	r0, r1
 80052c4:	4611      	mov	r1, r2
 80052c6:	2200      	movs	r2, #0
 80052c8:	602a      	str	r2, [r5, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f7fb ffa8 	bl	8001220 <_write>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d102      	bne.n	80052da <_write_r+0x1e>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	b103      	cbz	r3, 80052da <_write_r+0x1e>
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	bd38      	pop	{r3, r4, r5, pc}
 80052dc:	20000498 	.word	0x20000498

080052e0 <__errno>:
 80052e0:	4b01      	ldr	r3, [pc, #4]	; (80052e8 <__errno+0x8>)
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20000064 	.word	0x20000064

080052ec <__libc_init_array>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	4d0d      	ldr	r5, [pc, #52]	; (8005324 <__libc_init_array+0x38>)
 80052f0:	4c0d      	ldr	r4, [pc, #52]	; (8005328 <__libc_init_array+0x3c>)
 80052f2:	1b64      	subs	r4, r4, r5
 80052f4:	10a4      	asrs	r4, r4, #2
 80052f6:	2600      	movs	r6, #0
 80052f8:	42a6      	cmp	r6, r4
 80052fa:	d109      	bne.n	8005310 <__libc_init_array+0x24>
 80052fc:	4d0b      	ldr	r5, [pc, #44]	; (800532c <__libc_init_array+0x40>)
 80052fe:	4c0c      	ldr	r4, [pc, #48]	; (8005330 <__libc_init_array+0x44>)
 8005300:	f000 fee2 	bl	80060c8 <_init>
 8005304:	1b64      	subs	r4, r4, r5
 8005306:	10a4      	asrs	r4, r4, #2
 8005308:	2600      	movs	r6, #0
 800530a:	42a6      	cmp	r6, r4
 800530c:	d105      	bne.n	800531a <__libc_init_array+0x2e>
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	f855 3b04 	ldr.w	r3, [r5], #4
 8005314:	4798      	blx	r3
 8005316:	3601      	adds	r6, #1
 8005318:	e7ee      	b.n	80052f8 <__libc_init_array+0xc>
 800531a:	f855 3b04 	ldr.w	r3, [r5], #4
 800531e:	4798      	blx	r3
 8005320:	3601      	adds	r6, #1
 8005322:	e7f2      	b.n	800530a <__libc_init_array+0x1e>
 8005324:	08006188 	.word	0x08006188
 8005328:	08006188 	.word	0x08006188
 800532c:	08006188 	.word	0x08006188
 8005330:	0800618c 	.word	0x0800618c

08005334 <__retarget_lock_init_recursive>:
 8005334:	4770      	bx	lr

08005336 <__retarget_lock_acquire_recursive>:
 8005336:	4770      	bx	lr

08005338 <__retarget_lock_release_recursive>:
 8005338:	4770      	bx	lr
	...

0800533c <_free_r>:
 800533c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800533e:	2900      	cmp	r1, #0
 8005340:	d044      	beq.n	80053cc <_free_r+0x90>
 8005342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005346:	9001      	str	r0, [sp, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f1a1 0404 	sub.w	r4, r1, #4
 800534e:	bfb8      	it	lt
 8005350:	18e4      	addlt	r4, r4, r3
 8005352:	f000 f8df 	bl	8005514 <__malloc_lock>
 8005356:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <_free_r+0x94>)
 8005358:	9801      	ldr	r0, [sp, #4]
 800535a:	6813      	ldr	r3, [r2, #0]
 800535c:	b933      	cbnz	r3, 800536c <_free_r+0x30>
 800535e:	6063      	str	r3, [r4, #4]
 8005360:	6014      	str	r4, [r2, #0]
 8005362:	b003      	add	sp, #12
 8005364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005368:	f000 b8da 	b.w	8005520 <__malloc_unlock>
 800536c:	42a3      	cmp	r3, r4
 800536e:	d908      	bls.n	8005382 <_free_r+0x46>
 8005370:	6825      	ldr	r5, [r4, #0]
 8005372:	1961      	adds	r1, r4, r5
 8005374:	428b      	cmp	r3, r1
 8005376:	bf01      	itttt	eq
 8005378:	6819      	ldreq	r1, [r3, #0]
 800537a:	685b      	ldreq	r3, [r3, #4]
 800537c:	1949      	addeq	r1, r1, r5
 800537e:	6021      	streq	r1, [r4, #0]
 8005380:	e7ed      	b.n	800535e <_free_r+0x22>
 8005382:	461a      	mov	r2, r3
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	b10b      	cbz	r3, 800538c <_free_r+0x50>
 8005388:	42a3      	cmp	r3, r4
 800538a:	d9fa      	bls.n	8005382 <_free_r+0x46>
 800538c:	6811      	ldr	r1, [r2, #0]
 800538e:	1855      	adds	r5, r2, r1
 8005390:	42a5      	cmp	r5, r4
 8005392:	d10b      	bne.n	80053ac <_free_r+0x70>
 8005394:	6824      	ldr	r4, [r4, #0]
 8005396:	4421      	add	r1, r4
 8005398:	1854      	adds	r4, r2, r1
 800539a:	42a3      	cmp	r3, r4
 800539c:	6011      	str	r1, [r2, #0]
 800539e:	d1e0      	bne.n	8005362 <_free_r+0x26>
 80053a0:	681c      	ldr	r4, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	6053      	str	r3, [r2, #4]
 80053a6:	440c      	add	r4, r1
 80053a8:	6014      	str	r4, [r2, #0]
 80053aa:	e7da      	b.n	8005362 <_free_r+0x26>
 80053ac:	d902      	bls.n	80053b4 <_free_r+0x78>
 80053ae:	230c      	movs	r3, #12
 80053b0:	6003      	str	r3, [r0, #0]
 80053b2:	e7d6      	b.n	8005362 <_free_r+0x26>
 80053b4:	6825      	ldr	r5, [r4, #0]
 80053b6:	1961      	adds	r1, r4, r5
 80053b8:	428b      	cmp	r3, r1
 80053ba:	bf04      	itt	eq
 80053bc:	6819      	ldreq	r1, [r3, #0]
 80053be:	685b      	ldreq	r3, [r3, #4]
 80053c0:	6063      	str	r3, [r4, #4]
 80053c2:	bf04      	itt	eq
 80053c4:	1949      	addeq	r1, r1, r5
 80053c6:	6021      	streq	r1, [r4, #0]
 80053c8:	6054      	str	r4, [r2, #4]
 80053ca:	e7ca      	b.n	8005362 <_free_r+0x26>
 80053cc:	b003      	add	sp, #12
 80053ce:	bd30      	pop	{r4, r5, pc}
 80053d0:	200004a0 	.word	0x200004a0

080053d4 <sbrk_aligned>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4e0e      	ldr	r6, [pc, #56]	; (8005410 <sbrk_aligned+0x3c>)
 80053d8:	460c      	mov	r4, r1
 80053da:	6831      	ldr	r1, [r6, #0]
 80053dc:	4605      	mov	r5, r0
 80053de:	b911      	cbnz	r1, 80053e6 <sbrk_aligned+0x12>
 80053e0:	f000 fe1c 	bl	800601c <_sbrk_r>
 80053e4:	6030      	str	r0, [r6, #0]
 80053e6:	4621      	mov	r1, r4
 80053e8:	4628      	mov	r0, r5
 80053ea:	f000 fe17 	bl	800601c <_sbrk_r>
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	d00a      	beq.n	8005408 <sbrk_aligned+0x34>
 80053f2:	1cc4      	adds	r4, r0, #3
 80053f4:	f024 0403 	bic.w	r4, r4, #3
 80053f8:	42a0      	cmp	r0, r4
 80053fa:	d007      	beq.n	800540c <sbrk_aligned+0x38>
 80053fc:	1a21      	subs	r1, r4, r0
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 fe0c 	bl	800601c <_sbrk_r>
 8005404:	3001      	adds	r0, #1
 8005406:	d101      	bne.n	800540c <sbrk_aligned+0x38>
 8005408:	f04f 34ff 	mov.w	r4, #4294967295
 800540c:	4620      	mov	r0, r4
 800540e:	bd70      	pop	{r4, r5, r6, pc}
 8005410:	200004a4 	.word	0x200004a4

08005414 <_malloc_r>:
 8005414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005418:	1ccd      	adds	r5, r1, #3
 800541a:	f025 0503 	bic.w	r5, r5, #3
 800541e:	3508      	adds	r5, #8
 8005420:	2d0c      	cmp	r5, #12
 8005422:	bf38      	it	cc
 8005424:	250c      	movcc	r5, #12
 8005426:	2d00      	cmp	r5, #0
 8005428:	4607      	mov	r7, r0
 800542a:	db01      	blt.n	8005430 <_malloc_r+0x1c>
 800542c:	42a9      	cmp	r1, r5
 800542e:	d905      	bls.n	800543c <_malloc_r+0x28>
 8005430:	230c      	movs	r3, #12
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	2600      	movs	r6, #0
 8005436:	4630      	mov	r0, r6
 8005438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800543c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005510 <_malloc_r+0xfc>
 8005440:	f000 f868 	bl	8005514 <__malloc_lock>
 8005444:	f8d8 3000 	ldr.w	r3, [r8]
 8005448:	461c      	mov	r4, r3
 800544a:	bb5c      	cbnz	r4, 80054a4 <_malloc_r+0x90>
 800544c:	4629      	mov	r1, r5
 800544e:	4638      	mov	r0, r7
 8005450:	f7ff ffc0 	bl	80053d4 <sbrk_aligned>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	4604      	mov	r4, r0
 8005458:	d155      	bne.n	8005506 <_malloc_r+0xf2>
 800545a:	f8d8 4000 	ldr.w	r4, [r8]
 800545e:	4626      	mov	r6, r4
 8005460:	2e00      	cmp	r6, #0
 8005462:	d145      	bne.n	80054f0 <_malloc_r+0xdc>
 8005464:	2c00      	cmp	r4, #0
 8005466:	d048      	beq.n	80054fa <_malloc_r+0xe6>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	4631      	mov	r1, r6
 800546c:	4638      	mov	r0, r7
 800546e:	eb04 0903 	add.w	r9, r4, r3
 8005472:	f000 fdd3 	bl	800601c <_sbrk_r>
 8005476:	4581      	cmp	r9, r0
 8005478:	d13f      	bne.n	80054fa <_malloc_r+0xe6>
 800547a:	6821      	ldr	r1, [r4, #0]
 800547c:	1a6d      	subs	r5, r5, r1
 800547e:	4629      	mov	r1, r5
 8005480:	4638      	mov	r0, r7
 8005482:	f7ff ffa7 	bl	80053d4 <sbrk_aligned>
 8005486:	3001      	adds	r0, #1
 8005488:	d037      	beq.n	80054fa <_malloc_r+0xe6>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	442b      	add	r3, r5
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	f8d8 3000 	ldr.w	r3, [r8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d038      	beq.n	800550a <_malloc_r+0xf6>
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	42a2      	cmp	r2, r4
 800549c:	d12b      	bne.n	80054f6 <_malloc_r+0xe2>
 800549e:	2200      	movs	r2, #0
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	e00f      	b.n	80054c4 <_malloc_r+0xb0>
 80054a4:	6822      	ldr	r2, [r4, #0]
 80054a6:	1b52      	subs	r2, r2, r5
 80054a8:	d41f      	bmi.n	80054ea <_malloc_r+0xd6>
 80054aa:	2a0b      	cmp	r2, #11
 80054ac:	d917      	bls.n	80054de <_malloc_r+0xca>
 80054ae:	1961      	adds	r1, r4, r5
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	6025      	str	r5, [r4, #0]
 80054b4:	bf18      	it	ne
 80054b6:	6059      	strne	r1, [r3, #4]
 80054b8:	6863      	ldr	r3, [r4, #4]
 80054ba:	bf08      	it	eq
 80054bc:	f8c8 1000 	streq.w	r1, [r8]
 80054c0:	5162      	str	r2, [r4, r5]
 80054c2:	604b      	str	r3, [r1, #4]
 80054c4:	4638      	mov	r0, r7
 80054c6:	f104 060b 	add.w	r6, r4, #11
 80054ca:	f000 f829 	bl	8005520 <__malloc_unlock>
 80054ce:	f026 0607 	bic.w	r6, r6, #7
 80054d2:	1d23      	adds	r3, r4, #4
 80054d4:	1af2      	subs	r2, r6, r3
 80054d6:	d0ae      	beq.n	8005436 <_malloc_r+0x22>
 80054d8:	1b9b      	subs	r3, r3, r6
 80054da:	50a3      	str	r3, [r4, r2]
 80054dc:	e7ab      	b.n	8005436 <_malloc_r+0x22>
 80054de:	42a3      	cmp	r3, r4
 80054e0:	6862      	ldr	r2, [r4, #4]
 80054e2:	d1dd      	bne.n	80054a0 <_malloc_r+0x8c>
 80054e4:	f8c8 2000 	str.w	r2, [r8]
 80054e8:	e7ec      	b.n	80054c4 <_malloc_r+0xb0>
 80054ea:	4623      	mov	r3, r4
 80054ec:	6864      	ldr	r4, [r4, #4]
 80054ee:	e7ac      	b.n	800544a <_malloc_r+0x36>
 80054f0:	4634      	mov	r4, r6
 80054f2:	6876      	ldr	r6, [r6, #4]
 80054f4:	e7b4      	b.n	8005460 <_malloc_r+0x4c>
 80054f6:	4613      	mov	r3, r2
 80054f8:	e7cc      	b.n	8005494 <_malloc_r+0x80>
 80054fa:	230c      	movs	r3, #12
 80054fc:	603b      	str	r3, [r7, #0]
 80054fe:	4638      	mov	r0, r7
 8005500:	f000 f80e 	bl	8005520 <__malloc_unlock>
 8005504:	e797      	b.n	8005436 <_malloc_r+0x22>
 8005506:	6025      	str	r5, [r4, #0]
 8005508:	e7dc      	b.n	80054c4 <_malloc_r+0xb0>
 800550a:	605b      	str	r3, [r3, #4]
 800550c:	deff      	udf	#255	; 0xff
 800550e:	bf00      	nop
 8005510:	200004a0 	.word	0x200004a0

08005514 <__malloc_lock>:
 8005514:	4801      	ldr	r0, [pc, #4]	; (800551c <__malloc_lock+0x8>)
 8005516:	f7ff bf0e 	b.w	8005336 <__retarget_lock_acquire_recursive>
 800551a:	bf00      	nop
 800551c:	2000049c 	.word	0x2000049c

08005520 <__malloc_unlock>:
 8005520:	4801      	ldr	r0, [pc, #4]	; (8005528 <__malloc_unlock+0x8>)
 8005522:	f7ff bf09 	b.w	8005338 <__retarget_lock_release_recursive>
 8005526:	bf00      	nop
 8005528:	2000049c 	.word	0x2000049c

0800552c <__ssputs_r>:
 800552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	688e      	ldr	r6, [r1, #8]
 8005532:	461f      	mov	r7, r3
 8005534:	42be      	cmp	r6, r7
 8005536:	680b      	ldr	r3, [r1, #0]
 8005538:	4682      	mov	sl, r0
 800553a:	460c      	mov	r4, r1
 800553c:	4690      	mov	r8, r2
 800553e:	d82c      	bhi.n	800559a <__ssputs_r+0x6e>
 8005540:	898a      	ldrh	r2, [r1, #12]
 8005542:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005546:	d026      	beq.n	8005596 <__ssputs_r+0x6a>
 8005548:	6965      	ldr	r5, [r4, #20]
 800554a:	6909      	ldr	r1, [r1, #16]
 800554c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005550:	eba3 0901 	sub.w	r9, r3, r1
 8005554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005558:	1c7b      	adds	r3, r7, #1
 800555a:	444b      	add	r3, r9
 800555c:	106d      	asrs	r5, r5, #1
 800555e:	429d      	cmp	r5, r3
 8005560:	bf38      	it	cc
 8005562:	461d      	movcc	r5, r3
 8005564:	0553      	lsls	r3, r2, #21
 8005566:	d527      	bpl.n	80055b8 <__ssputs_r+0x8c>
 8005568:	4629      	mov	r1, r5
 800556a:	f7ff ff53 	bl	8005414 <_malloc_r>
 800556e:	4606      	mov	r6, r0
 8005570:	b360      	cbz	r0, 80055cc <__ssputs_r+0xa0>
 8005572:	6921      	ldr	r1, [r4, #16]
 8005574:	464a      	mov	r2, r9
 8005576:	f000 fd61 	bl	800603c <memcpy>
 800557a:	89a3      	ldrh	r3, [r4, #12]
 800557c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005584:	81a3      	strh	r3, [r4, #12]
 8005586:	6126      	str	r6, [r4, #16]
 8005588:	6165      	str	r5, [r4, #20]
 800558a:	444e      	add	r6, r9
 800558c:	eba5 0509 	sub.w	r5, r5, r9
 8005590:	6026      	str	r6, [r4, #0]
 8005592:	60a5      	str	r5, [r4, #8]
 8005594:	463e      	mov	r6, r7
 8005596:	42be      	cmp	r6, r7
 8005598:	d900      	bls.n	800559c <__ssputs_r+0x70>
 800559a:	463e      	mov	r6, r7
 800559c:	6820      	ldr	r0, [r4, #0]
 800559e:	4632      	mov	r2, r6
 80055a0:	4641      	mov	r1, r8
 80055a2:	f000 fcff 	bl	8005fa4 <memmove>
 80055a6:	68a3      	ldr	r3, [r4, #8]
 80055a8:	1b9b      	subs	r3, r3, r6
 80055aa:	60a3      	str	r3, [r4, #8]
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	4433      	add	r3, r6
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	2000      	movs	r0, #0
 80055b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b8:	462a      	mov	r2, r5
 80055ba:	f000 fd4d 	bl	8006058 <_realloc_r>
 80055be:	4606      	mov	r6, r0
 80055c0:	2800      	cmp	r0, #0
 80055c2:	d1e0      	bne.n	8005586 <__ssputs_r+0x5a>
 80055c4:	6921      	ldr	r1, [r4, #16]
 80055c6:	4650      	mov	r0, sl
 80055c8:	f7ff feb8 	bl	800533c <_free_r>
 80055cc:	230c      	movs	r3, #12
 80055ce:	f8ca 3000 	str.w	r3, [sl]
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d8:	81a3      	strh	r3, [r4, #12]
 80055da:	f04f 30ff 	mov.w	r0, #4294967295
 80055de:	e7e9      	b.n	80055b4 <__ssputs_r+0x88>

080055e0 <_svfiprintf_r>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	4698      	mov	r8, r3
 80055e6:	898b      	ldrh	r3, [r1, #12]
 80055e8:	061b      	lsls	r3, r3, #24
 80055ea:	b09d      	sub	sp, #116	; 0x74
 80055ec:	4607      	mov	r7, r0
 80055ee:	460d      	mov	r5, r1
 80055f0:	4614      	mov	r4, r2
 80055f2:	d50e      	bpl.n	8005612 <_svfiprintf_r+0x32>
 80055f4:	690b      	ldr	r3, [r1, #16]
 80055f6:	b963      	cbnz	r3, 8005612 <_svfiprintf_r+0x32>
 80055f8:	2140      	movs	r1, #64	; 0x40
 80055fa:	f7ff ff0b 	bl	8005414 <_malloc_r>
 80055fe:	6028      	str	r0, [r5, #0]
 8005600:	6128      	str	r0, [r5, #16]
 8005602:	b920      	cbnz	r0, 800560e <_svfiprintf_r+0x2e>
 8005604:	230c      	movs	r3, #12
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	e0d0      	b.n	80057b0 <_svfiprintf_r+0x1d0>
 800560e:	2340      	movs	r3, #64	; 0x40
 8005610:	616b      	str	r3, [r5, #20]
 8005612:	2300      	movs	r3, #0
 8005614:	9309      	str	r3, [sp, #36]	; 0x24
 8005616:	2320      	movs	r3, #32
 8005618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800561c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005620:	2330      	movs	r3, #48	; 0x30
 8005622:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80057c8 <_svfiprintf_r+0x1e8>
 8005626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800562a:	f04f 0901 	mov.w	r9, #1
 800562e:	4623      	mov	r3, r4
 8005630:	469a      	mov	sl, r3
 8005632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005636:	b10a      	cbz	r2, 800563c <_svfiprintf_r+0x5c>
 8005638:	2a25      	cmp	r2, #37	; 0x25
 800563a:	d1f9      	bne.n	8005630 <_svfiprintf_r+0x50>
 800563c:	ebba 0b04 	subs.w	fp, sl, r4
 8005640:	d00b      	beq.n	800565a <_svfiprintf_r+0x7a>
 8005642:	465b      	mov	r3, fp
 8005644:	4622      	mov	r2, r4
 8005646:	4629      	mov	r1, r5
 8005648:	4638      	mov	r0, r7
 800564a:	f7ff ff6f 	bl	800552c <__ssputs_r>
 800564e:	3001      	adds	r0, #1
 8005650:	f000 80a9 	beq.w	80057a6 <_svfiprintf_r+0x1c6>
 8005654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005656:	445a      	add	r2, fp
 8005658:	9209      	str	r2, [sp, #36]	; 0x24
 800565a:	f89a 3000 	ldrb.w	r3, [sl]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 80a1 	beq.w	80057a6 <_svfiprintf_r+0x1c6>
 8005664:	2300      	movs	r3, #0
 8005666:	f04f 32ff 	mov.w	r2, #4294967295
 800566a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800566e:	f10a 0a01 	add.w	sl, sl, #1
 8005672:	9304      	str	r3, [sp, #16]
 8005674:	9307      	str	r3, [sp, #28]
 8005676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800567a:	931a      	str	r3, [sp, #104]	; 0x68
 800567c:	4654      	mov	r4, sl
 800567e:	2205      	movs	r2, #5
 8005680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005684:	4850      	ldr	r0, [pc, #320]	; (80057c8 <_svfiprintf_r+0x1e8>)
 8005686:	f7fa fdab 	bl	80001e0 <memchr>
 800568a:	9a04      	ldr	r2, [sp, #16]
 800568c:	b9d8      	cbnz	r0, 80056c6 <_svfiprintf_r+0xe6>
 800568e:	06d0      	lsls	r0, r2, #27
 8005690:	bf44      	itt	mi
 8005692:	2320      	movmi	r3, #32
 8005694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005698:	0711      	lsls	r1, r2, #28
 800569a:	bf44      	itt	mi
 800569c:	232b      	movmi	r3, #43	; 0x2b
 800569e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056a2:	f89a 3000 	ldrb.w	r3, [sl]
 80056a6:	2b2a      	cmp	r3, #42	; 0x2a
 80056a8:	d015      	beq.n	80056d6 <_svfiprintf_r+0xf6>
 80056aa:	9a07      	ldr	r2, [sp, #28]
 80056ac:	4654      	mov	r4, sl
 80056ae:	2000      	movs	r0, #0
 80056b0:	f04f 0c0a 	mov.w	ip, #10
 80056b4:	4621      	mov	r1, r4
 80056b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ba:	3b30      	subs	r3, #48	; 0x30
 80056bc:	2b09      	cmp	r3, #9
 80056be:	d94d      	bls.n	800575c <_svfiprintf_r+0x17c>
 80056c0:	b1b0      	cbz	r0, 80056f0 <_svfiprintf_r+0x110>
 80056c2:	9207      	str	r2, [sp, #28]
 80056c4:	e014      	b.n	80056f0 <_svfiprintf_r+0x110>
 80056c6:	eba0 0308 	sub.w	r3, r0, r8
 80056ca:	fa09 f303 	lsl.w	r3, r9, r3
 80056ce:	4313      	orrs	r3, r2
 80056d0:	9304      	str	r3, [sp, #16]
 80056d2:	46a2      	mov	sl, r4
 80056d4:	e7d2      	b.n	800567c <_svfiprintf_r+0x9c>
 80056d6:	9b03      	ldr	r3, [sp, #12]
 80056d8:	1d19      	adds	r1, r3, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	9103      	str	r1, [sp, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	bfbb      	ittet	lt
 80056e2:	425b      	neglt	r3, r3
 80056e4:	f042 0202 	orrlt.w	r2, r2, #2
 80056e8:	9307      	strge	r3, [sp, #28]
 80056ea:	9307      	strlt	r3, [sp, #28]
 80056ec:	bfb8      	it	lt
 80056ee:	9204      	strlt	r2, [sp, #16]
 80056f0:	7823      	ldrb	r3, [r4, #0]
 80056f2:	2b2e      	cmp	r3, #46	; 0x2e
 80056f4:	d10c      	bne.n	8005710 <_svfiprintf_r+0x130>
 80056f6:	7863      	ldrb	r3, [r4, #1]
 80056f8:	2b2a      	cmp	r3, #42	; 0x2a
 80056fa:	d134      	bne.n	8005766 <_svfiprintf_r+0x186>
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	1d1a      	adds	r2, r3, #4
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	9203      	str	r2, [sp, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	bfb8      	it	lt
 8005708:	f04f 33ff 	movlt.w	r3, #4294967295
 800570c:	3402      	adds	r4, #2
 800570e:	9305      	str	r3, [sp, #20]
 8005710:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80057d8 <_svfiprintf_r+0x1f8>
 8005714:	7821      	ldrb	r1, [r4, #0]
 8005716:	2203      	movs	r2, #3
 8005718:	4650      	mov	r0, sl
 800571a:	f7fa fd61 	bl	80001e0 <memchr>
 800571e:	b138      	cbz	r0, 8005730 <_svfiprintf_r+0x150>
 8005720:	9b04      	ldr	r3, [sp, #16]
 8005722:	eba0 000a 	sub.w	r0, r0, sl
 8005726:	2240      	movs	r2, #64	; 0x40
 8005728:	4082      	lsls	r2, r0
 800572a:	4313      	orrs	r3, r2
 800572c:	3401      	adds	r4, #1
 800572e:	9304      	str	r3, [sp, #16]
 8005730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005734:	4825      	ldr	r0, [pc, #148]	; (80057cc <_svfiprintf_r+0x1ec>)
 8005736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800573a:	2206      	movs	r2, #6
 800573c:	f7fa fd50 	bl	80001e0 <memchr>
 8005740:	2800      	cmp	r0, #0
 8005742:	d038      	beq.n	80057b6 <_svfiprintf_r+0x1d6>
 8005744:	4b22      	ldr	r3, [pc, #136]	; (80057d0 <_svfiprintf_r+0x1f0>)
 8005746:	bb1b      	cbnz	r3, 8005790 <_svfiprintf_r+0x1b0>
 8005748:	9b03      	ldr	r3, [sp, #12]
 800574a:	3307      	adds	r3, #7
 800574c:	f023 0307 	bic.w	r3, r3, #7
 8005750:	3308      	adds	r3, #8
 8005752:	9303      	str	r3, [sp, #12]
 8005754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005756:	4433      	add	r3, r6
 8005758:	9309      	str	r3, [sp, #36]	; 0x24
 800575a:	e768      	b.n	800562e <_svfiprintf_r+0x4e>
 800575c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005760:	460c      	mov	r4, r1
 8005762:	2001      	movs	r0, #1
 8005764:	e7a6      	b.n	80056b4 <_svfiprintf_r+0xd4>
 8005766:	2300      	movs	r3, #0
 8005768:	3401      	adds	r4, #1
 800576a:	9305      	str	r3, [sp, #20]
 800576c:	4619      	mov	r1, r3
 800576e:	f04f 0c0a 	mov.w	ip, #10
 8005772:	4620      	mov	r0, r4
 8005774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005778:	3a30      	subs	r2, #48	; 0x30
 800577a:	2a09      	cmp	r2, #9
 800577c:	d903      	bls.n	8005786 <_svfiprintf_r+0x1a6>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0c6      	beq.n	8005710 <_svfiprintf_r+0x130>
 8005782:	9105      	str	r1, [sp, #20]
 8005784:	e7c4      	b.n	8005710 <_svfiprintf_r+0x130>
 8005786:	fb0c 2101 	mla	r1, ip, r1, r2
 800578a:	4604      	mov	r4, r0
 800578c:	2301      	movs	r3, #1
 800578e:	e7f0      	b.n	8005772 <_svfiprintf_r+0x192>
 8005790:	ab03      	add	r3, sp, #12
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	462a      	mov	r2, r5
 8005796:	4b0f      	ldr	r3, [pc, #60]	; (80057d4 <_svfiprintf_r+0x1f4>)
 8005798:	a904      	add	r1, sp, #16
 800579a:	4638      	mov	r0, r7
 800579c:	f3af 8000 	nop.w
 80057a0:	1c42      	adds	r2, r0, #1
 80057a2:	4606      	mov	r6, r0
 80057a4:	d1d6      	bne.n	8005754 <_svfiprintf_r+0x174>
 80057a6:	89ab      	ldrh	r3, [r5, #12]
 80057a8:	065b      	lsls	r3, r3, #25
 80057aa:	f53f af2d 	bmi.w	8005608 <_svfiprintf_r+0x28>
 80057ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057b0:	b01d      	add	sp, #116	; 0x74
 80057b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b6:	ab03      	add	r3, sp, #12
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	462a      	mov	r2, r5
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <_svfiprintf_r+0x1f4>)
 80057be:	a904      	add	r1, sp, #16
 80057c0:	4638      	mov	r0, r7
 80057c2:	f000 f9bd 	bl	8005b40 <_printf_i>
 80057c6:	e7eb      	b.n	80057a0 <_svfiprintf_r+0x1c0>
 80057c8:	0800614c 	.word	0x0800614c
 80057cc:	08006156 	.word	0x08006156
 80057d0:	00000000 	.word	0x00000000
 80057d4:	0800552d 	.word	0x0800552d
 80057d8:	08006152 	.word	0x08006152

080057dc <__sfputc_r>:
 80057dc:	6893      	ldr	r3, [r2, #8]
 80057de:	3b01      	subs	r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	b410      	push	{r4}
 80057e4:	6093      	str	r3, [r2, #8]
 80057e6:	da08      	bge.n	80057fa <__sfputc_r+0x1e>
 80057e8:	6994      	ldr	r4, [r2, #24]
 80057ea:	42a3      	cmp	r3, r4
 80057ec:	db01      	blt.n	80057f2 <__sfputc_r+0x16>
 80057ee:	290a      	cmp	r1, #10
 80057f0:	d103      	bne.n	80057fa <__sfputc_r+0x1e>
 80057f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057f6:	f7ff bc90 	b.w	800511a <__swbuf_r>
 80057fa:	6813      	ldr	r3, [r2, #0]
 80057fc:	1c58      	adds	r0, r3, #1
 80057fe:	6010      	str	r0, [r2, #0]
 8005800:	7019      	strb	r1, [r3, #0]
 8005802:	4608      	mov	r0, r1
 8005804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005808:	4770      	bx	lr

0800580a <__sfputs_r>:
 800580a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580c:	4606      	mov	r6, r0
 800580e:	460f      	mov	r7, r1
 8005810:	4614      	mov	r4, r2
 8005812:	18d5      	adds	r5, r2, r3
 8005814:	42ac      	cmp	r4, r5
 8005816:	d101      	bne.n	800581c <__sfputs_r+0x12>
 8005818:	2000      	movs	r0, #0
 800581a:	e007      	b.n	800582c <__sfputs_r+0x22>
 800581c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005820:	463a      	mov	r2, r7
 8005822:	4630      	mov	r0, r6
 8005824:	f7ff ffda 	bl	80057dc <__sfputc_r>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d1f3      	bne.n	8005814 <__sfputs_r+0xa>
 800582c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005830 <_vfiprintf_r>:
 8005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	460d      	mov	r5, r1
 8005836:	b09d      	sub	sp, #116	; 0x74
 8005838:	4614      	mov	r4, r2
 800583a:	4698      	mov	r8, r3
 800583c:	4606      	mov	r6, r0
 800583e:	b118      	cbz	r0, 8005848 <_vfiprintf_r+0x18>
 8005840:	6a03      	ldr	r3, [r0, #32]
 8005842:	b90b      	cbnz	r3, 8005848 <_vfiprintf_r+0x18>
 8005844:	f7ff fb62 	bl	8004f0c <__sinit>
 8005848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800584a:	07d9      	lsls	r1, r3, #31
 800584c:	d405      	bmi.n	800585a <_vfiprintf_r+0x2a>
 800584e:	89ab      	ldrh	r3, [r5, #12]
 8005850:	059a      	lsls	r2, r3, #22
 8005852:	d402      	bmi.n	800585a <_vfiprintf_r+0x2a>
 8005854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005856:	f7ff fd6e 	bl	8005336 <__retarget_lock_acquire_recursive>
 800585a:	89ab      	ldrh	r3, [r5, #12]
 800585c:	071b      	lsls	r3, r3, #28
 800585e:	d501      	bpl.n	8005864 <_vfiprintf_r+0x34>
 8005860:	692b      	ldr	r3, [r5, #16]
 8005862:	b99b      	cbnz	r3, 800588c <_vfiprintf_r+0x5c>
 8005864:	4629      	mov	r1, r5
 8005866:	4630      	mov	r0, r6
 8005868:	f7ff fc94 	bl	8005194 <__swsetup_r>
 800586c:	b170      	cbz	r0, 800588c <_vfiprintf_r+0x5c>
 800586e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005870:	07dc      	lsls	r4, r3, #31
 8005872:	d504      	bpl.n	800587e <_vfiprintf_r+0x4e>
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	b01d      	add	sp, #116	; 0x74
 800587a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587e:	89ab      	ldrh	r3, [r5, #12]
 8005880:	0598      	lsls	r0, r3, #22
 8005882:	d4f7      	bmi.n	8005874 <_vfiprintf_r+0x44>
 8005884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005886:	f7ff fd57 	bl	8005338 <__retarget_lock_release_recursive>
 800588a:	e7f3      	b.n	8005874 <_vfiprintf_r+0x44>
 800588c:	2300      	movs	r3, #0
 800588e:	9309      	str	r3, [sp, #36]	; 0x24
 8005890:	2320      	movs	r3, #32
 8005892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005896:	f8cd 800c 	str.w	r8, [sp, #12]
 800589a:	2330      	movs	r3, #48	; 0x30
 800589c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005a50 <_vfiprintf_r+0x220>
 80058a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058a4:	f04f 0901 	mov.w	r9, #1
 80058a8:	4623      	mov	r3, r4
 80058aa:	469a      	mov	sl, r3
 80058ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058b0:	b10a      	cbz	r2, 80058b6 <_vfiprintf_r+0x86>
 80058b2:	2a25      	cmp	r2, #37	; 0x25
 80058b4:	d1f9      	bne.n	80058aa <_vfiprintf_r+0x7a>
 80058b6:	ebba 0b04 	subs.w	fp, sl, r4
 80058ba:	d00b      	beq.n	80058d4 <_vfiprintf_r+0xa4>
 80058bc:	465b      	mov	r3, fp
 80058be:	4622      	mov	r2, r4
 80058c0:	4629      	mov	r1, r5
 80058c2:	4630      	mov	r0, r6
 80058c4:	f7ff ffa1 	bl	800580a <__sfputs_r>
 80058c8:	3001      	adds	r0, #1
 80058ca:	f000 80a9 	beq.w	8005a20 <_vfiprintf_r+0x1f0>
 80058ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058d0:	445a      	add	r2, fp
 80058d2:	9209      	str	r2, [sp, #36]	; 0x24
 80058d4:	f89a 3000 	ldrb.w	r3, [sl]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80a1 	beq.w	8005a20 <_vfiprintf_r+0x1f0>
 80058de:	2300      	movs	r3, #0
 80058e0:	f04f 32ff 	mov.w	r2, #4294967295
 80058e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058e8:	f10a 0a01 	add.w	sl, sl, #1
 80058ec:	9304      	str	r3, [sp, #16]
 80058ee:	9307      	str	r3, [sp, #28]
 80058f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058f4:	931a      	str	r3, [sp, #104]	; 0x68
 80058f6:	4654      	mov	r4, sl
 80058f8:	2205      	movs	r2, #5
 80058fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058fe:	4854      	ldr	r0, [pc, #336]	; (8005a50 <_vfiprintf_r+0x220>)
 8005900:	f7fa fc6e 	bl	80001e0 <memchr>
 8005904:	9a04      	ldr	r2, [sp, #16]
 8005906:	b9d8      	cbnz	r0, 8005940 <_vfiprintf_r+0x110>
 8005908:	06d1      	lsls	r1, r2, #27
 800590a:	bf44      	itt	mi
 800590c:	2320      	movmi	r3, #32
 800590e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005912:	0713      	lsls	r3, r2, #28
 8005914:	bf44      	itt	mi
 8005916:	232b      	movmi	r3, #43	; 0x2b
 8005918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800591c:	f89a 3000 	ldrb.w	r3, [sl]
 8005920:	2b2a      	cmp	r3, #42	; 0x2a
 8005922:	d015      	beq.n	8005950 <_vfiprintf_r+0x120>
 8005924:	9a07      	ldr	r2, [sp, #28]
 8005926:	4654      	mov	r4, sl
 8005928:	2000      	movs	r0, #0
 800592a:	f04f 0c0a 	mov.w	ip, #10
 800592e:	4621      	mov	r1, r4
 8005930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005934:	3b30      	subs	r3, #48	; 0x30
 8005936:	2b09      	cmp	r3, #9
 8005938:	d94d      	bls.n	80059d6 <_vfiprintf_r+0x1a6>
 800593a:	b1b0      	cbz	r0, 800596a <_vfiprintf_r+0x13a>
 800593c:	9207      	str	r2, [sp, #28]
 800593e:	e014      	b.n	800596a <_vfiprintf_r+0x13a>
 8005940:	eba0 0308 	sub.w	r3, r0, r8
 8005944:	fa09 f303 	lsl.w	r3, r9, r3
 8005948:	4313      	orrs	r3, r2
 800594a:	9304      	str	r3, [sp, #16]
 800594c:	46a2      	mov	sl, r4
 800594e:	e7d2      	b.n	80058f6 <_vfiprintf_r+0xc6>
 8005950:	9b03      	ldr	r3, [sp, #12]
 8005952:	1d19      	adds	r1, r3, #4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	9103      	str	r1, [sp, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	bfbb      	ittet	lt
 800595c:	425b      	neglt	r3, r3
 800595e:	f042 0202 	orrlt.w	r2, r2, #2
 8005962:	9307      	strge	r3, [sp, #28]
 8005964:	9307      	strlt	r3, [sp, #28]
 8005966:	bfb8      	it	lt
 8005968:	9204      	strlt	r2, [sp, #16]
 800596a:	7823      	ldrb	r3, [r4, #0]
 800596c:	2b2e      	cmp	r3, #46	; 0x2e
 800596e:	d10c      	bne.n	800598a <_vfiprintf_r+0x15a>
 8005970:	7863      	ldrb	r3, [r4, #1]
 8005972:	2b2a      	cmp	r3, #42	; 0x2a
 8005974:	d134      	bne.n	80059e0 <_vfiprintf_r+0x1b0>
 8005976:	9b03      	ldr	r3, [sp, #12]
 8005978:	1d1a      	adds	r2, r3, #4
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	9203      	str	r2, [sp, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	bfb8      	it	lt
 8005982:	f04f 33ff 	movlt.w	r3, #4294967295
 8005986:	3402      	adds	r4, #2
 8005988:	9305      	str	r3, [sp, #20]
 800598a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005a60 <_vfiprintf_r+0x230>
 800598e:	7821      	ldrb	r1, [r4, #0]
 8005990:	2203      	movs	r2, #3
 8005992:	4650      	mov	r0, sl
 8005994:	f7fa fc24 	bl	80001e0 <memchr>
 8005998:	b138      	cbz	r0, 80059aa <_vfiprintf_r+0x17a>
 800599a:	9b04      	ldr	r3, [sp, #16]
 800599c:	eba0 000a 	sub.w	r0, r0, sl
 80059a0:	2240      	movs	r2, #64	; 0x40
 80059a2:	4082      	lsls	r2, r0
 80059a4:	4313      	orrs	r3, r2
 80059a6:	3401      	adds	r4, #1
 80059a8:	9304      	str	r3, [sp, #16]
 80059aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ae:	4829      	ldr	r0, [pc, #164]	; (8005a54 <_vfiprintf_r+0x224>)
 80059b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059b4:	2206      	movs	r2, #6
 80059b6:	f7fa fc13 	bl	80001e0 <memchr>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d03f      	beq.n	8005a3e <_vfiprintf_r+0x20e>
 80059be:	4b26      	ldr	r3, [pc, #152]	; (8005a58 <_vfiprintf_r+0x228>)
 80059c0:	bb1b      	cbnz	r3, 8005a0a <_vfiprintf_r+0x1da>
 80059c2:	9b03      	ldr	r3, [sp, #12]
 80059c4:	3307      	adds	r3, #7
 80059c6:	f023 0307 	bic.w	r3, r3, #7
 80059ca:	3308      	adds	r3, #8
 80059cc:	9303      	str	r3, [sp, #12]
 80059ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d0:	443b      	add	r3, r7
 80059d2:	9309      	str	r3, [sp, #36]	; 0x24
 80059d4:	e768      	b.n	80058a8 <_vfiprintf_r+0x78>
 80059d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80059da:	460c      	mov	r4, r1
 80059dc:	2001      	movs	r0, #1
 80059de:	e7a6      	b.n	800592e <_vfiprintf_r+0xfe>
 80059e0:	2300      	movs	r3, #0
 80059e2:	3401      	adds	r4, #1
 80059e4:	9305      	str	r3, [sp, #20]
 80059e6:	4619      	mov	r1, r3
 80059e8:	f04f 0c0a 	mov.w	ip, #10
 80059ec:	4620      	mov	r0, r4
 80059ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059f2:	3a30      	subs	r2, #48	; 0x30
 80059f4:	2a09      	cmp	r2, #9
 80059f6:	d903      	bls.n	8005a00 <_vfiprintf_r+0x1d0>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0c6      	beq.n	800598a <_vfiprintf_r+0x15a>
 80059fc:	9105      	str	r1, [sp, #20]
 80059fe:	e7c4      	b.n	800598a <_vfiprintf_r+0x15a>
 8005a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a04:	4604      	mov	r4, r0
 8005a06:	2301      	movs	r3, #1
 8005a08:	e7f0      	b.n	80059ec <_vfiprintf_r+0x1bc>
 8005a0a:	ab03      	add	r3, sp, #12
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	462a      	mov	r2, r5
 8005a10:	4b12      	ldr	r3, [pc, #72]	; (8005a5c <_vfiprintf_r+0x22c>)
 8005a12:	a904      	add	r1, sp, #16
 8005a14:	4630      	mov	r0, r6
 8005a16:	f3af 8000 	nop.w
 8005a1a:	4607      	mov	r7, r0
 8005a1c:	1c78      	adds	r0, r7, #1
 8005a1e:	d1d6      	bne.n	80059ce <_vfiprintf_r+0x19e>
 8005a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a22:	07d9      	lsls	r1, r3, #31
 8005a24:	d405      	bmi.n	8005a32 <_vfiprintf_r+0x202>
 8005a26:	89ab      	ldrh	r3, [r5, #12]
 8005a28:	059a      	lsls	r2, r3, #22
 8005a2a:	d402      	bmi.n	8005a32 <_vfiprintf_r+0x202>
 8005a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a2e:	f7ff fc83 	bl	8005338 <__retarget_lock_release_recursive>
 8005a32:	89ab      	ldrh	r3, [r5, #12]
 8005a34:	065b      	lsls	r3, r3, #25
 8005a36:	f53f af1d 	bmi.w	8005874 <_vfiprintf_r+0x44>
 8005a3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a3c:	e71c      	b.n	8005878 <_vfiprintf_r+0x48>
 8005a3e:	ab03      	add	r3, sp, #12
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	462a      	mov	r2, r5
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <_vfiprintf_r+0x22c>)
 8005a46:	a904      	add	r1, sp, #16
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f000 f879 	bl	8005b40 <_printf_i>
 8005a4e:	e7e4      	b.n	8005a1a <_vfiprintf_r+0x1ea>
 8005a50:	0800614c 	.word	0x0800614c
 8005a54:	08006156 	.word	0x08006156
 8005a58:	00000000 	.word	0x00000000
 8005a5c:	0800580b 	.word	0x0800580b
 8005a60:	08006152 	.word	0x08006152

08005a64 <_printf_common>:
 8005a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	4616      	mov	r6, r2
 8005a6a:	4699      	mov	r9, r3
 8005a6c:	688a      	ldr	r2, [r1, #8]
 8005a6e:	690b      	ldr	r3, [r1, #16]
 8005a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a74:	4293      	cmp	r3, r2
 8005a76:	bfb8      	it	lt
 8005a78:	4613      	movlt	r3, r2
 8005a7a:	6033      	str	r3, [r6, #0]
 8005a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a80:	4607      	mov	r7, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	b10a      	cbz	r2, 8005a8a <_printf_common+0x26>
 8005a86:	3301      	adds	r3, #1
 8005a88:	6033      	str	r3, [r6, #0]
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	0699      	lsls	r1, r3, #26
 8005a8e:	bf42      	ittt	mi
 8005a90:	6833      	ldrmi	r3, [r6, #0]
 8005a92:	3302      	addmi	r3, #2
 8005a94:	6033      	strmi	r3, [r6, #0]
 8005a96:	6825      	ldr	r5, [r4, #0]
 8005a98:	f015 0506 	ands.w	r5, r5, #6
 8005a9c:	d106      	bne.n	8005aac <_printf_common+0x48>
 8005a9e:	f104 0a19 	add.w	sl, r4, #25
 8005aa2:	68e3      	ldr	r3, [r4, #12]
 8005aa4:	6832      	ldr	r2, [r6, #0]
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	42ab      	cmp	r3, r5
 8005aaa:	dc26      	bgt.n	8005afa <_printf_common+0x96>
 8005aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ab0:	1e13      	subs	r3, r2, #0
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	bf18      	it	ne
 8005ab6:	2301      	movne	r3, #1
 8005ab8:	0692      	lsls	r2, r2, #26
 8005aba:	d42b      	bmi.n	8005b14 <_printf_common+0xb0>
 8005abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	47c0      	blx	r8
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d01e      	beq.n	8005b08 <_printf_common+0xa4>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	6922      	ldr	r2, [r4, #16]
 8005ace:	f003 0306 	and.w	r3, r3, #6
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	bf02      	ittt	eq
 8005ad6:	68e5      	ldreq	r5, [r4, #12]
 8005ad8:	6833      	ldreq	r3, [r6, #0]
 8005ada:	1aed      	subeq	r5, r5, r3
 8005adc:	68a3      	ldr	r3, [r4, #8]
 8005ade:	bf0c      	ite	eq
 8005ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ae4:	2500      	movne	r5, #0
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	bfc4      	itt	gt
 8005aea:	1a9b      	subgt	r3, r3, r2
 8005aec:	18ed      	addgt	r5, r5, r3
 8005aee:	2600      	movs	r6, #0
 8005af0:	341a      	adds	r4, #26
 8005af2:	42b5      	cmp	r5, r6
 8005af4:	d11a      	bne.n	8005b2c <_printf_common+0xc8>
 8005af6:	2000      	movs	r0, #0
 8005af8:	e008      	b.n	8005b0c <_printf_common+0xa8>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4652      	mov	r2, sl
 8005afe:	4649      	mov	r1, r9
 8005b00:	4638      	mov	r0, r7
 8005b02:	47c0      	blx	r8
 8005b04:	3001      	adds	r0, #1
 8005b06:	d103      	bne.n	8005b10 <_printf_common+0xac>
 8005b08:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b10:	3501      	adds	r5, #1
 8005b12:	e7c6      	b.n	8005aa2 <_printf_common+0x3e>
 8005b14:	18e1      	adds	r1, r4, r3
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	2030      	movs	r0, #48	; 0x30
 8005b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b1e:	4422      	add	r2, r4
 8005b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b28:	3302      	adds	r3, #2
 8005b2a:	e7c7      	b.n	8005abc <_printf_common+0x58>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4622      	mov	r2, r4
 8005b30:	4649      	mov	r1, r9
 8005b32:	4638      	mov	r0, r7
 8005b34:	47c0      	blx	r8
 8005b36:	3001      	adds	r0, #1
 8005b38:	d0e6      	beq.n	8005b08 <_printf_common+0xa4>
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	e7d9      	b.n	8005af2 <_printf_common+0x8e>
	...

08005b40 <_printf_i>:
 8005b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b44:	7e0f      	ldrb	r7, [r1, #24]
 8005b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b48:	2f78      	cmp	r7, #120	; 0x78
 8005b4a:	4691      	mov	r9, r2
 8005b4c:	4680      	mov	r8, r0
 8005b4e:	460c      	mov	r4, r1
 8005b50:	469a      	mov	sl, r3
 8005b52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b56:	d807      	bhi.n	8005b68 <_printf_i+0x28>
 8005b58:	2f62      	cmp	r7, #98	; 0x62
 8005b5a:	d80a      	bhi.n	8005b72 <_printf_i+0x32>
 8005b5c:	2f00      	cmp	r7, #0
 8005b5e:	f000 80d4 	beq.w	8005d0a <_printf_i+0x1ca>
 8005b62:	2f58      	cmp	r7, #88	; 0x58
 8005b64:	f000 80c0 	beq.w	8005ce8 <_printf_i+0x1a8>
 8005b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b70:	e03a      	b.n	8005be8 <_printf_i+0xa8>
 8005b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b76:	2b15      	cmp	r3, #21
 8005b78:	d8f6      	bhi.n	8005b68 <_printf_i+0x28>
 8005b7a:	a101      	add	r1, pc, #4	; (adr r1, 8005b80 <_printf_i+0x40>)
 8005b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b80:	08005bd9 	.word	0x08005bd9
 8005b84:	08005bed 	.word	0x08005bed
 8005b88:	08005b69 	.word	0x08005b69
 8005b8c:	08005b69 	.word	0x08005b69
 8005b90:	08005b69 	.word	0x08005b69
 8005b94:	08005b69 	.word	0x08005b69
 8005b98:	08005bed 	.word	0x08005bed
 8005b9c:	08005b69 	.word	0x08005b69
 8005ba0:	08005b69 	.word	0x08005b69
 8005ba4:	08005b69 	.word	0x08005b69
 8005ba8:	08005b69 	.word	0x08005b69
 8005bac:	08005cf1 	.word	0x08005cf1
 8005bb0:	08005c19 	.word	0x08005c19
 8005bb4:	08005cab 	.word	0x08005cab
 8005bb8:	08005b69 	.word	0x08005b69
 8005bbc:	08005b69 	.word	0x08005b69
 8005bc0:	08005d13 	.word	0x08005d13
 8005bc4:	08005b69 	.word	0x08005b69
 8005bc8:	08005c19 	.word	0x08005c19
 8005bcc:	08005b69 	.word	0x08005b69
 8005bd0:	08005b69 	.word	0x08005b69
 8005bd4:	08005cb3 	.word	0x08005cb3
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	1d1a      	adds	r2, r3, #4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	602a      	str	r2, [r5, #0]
 8005be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005be8:	2301      	movs	r3, #1
 8005bea:	e09f      	b.n	8005d2c <_printf_i+0x1ec>
 8005bec:	6820      	ldr	r0, [r4, #0]
 8005bee:	682b      	ldr	r3, [r5, #0]
 8005bf0:	0607      	lsls	r7, r0, #24
 8005bf2:	f103 0104 	add.w	r1, r3, #4
 8005bf6:	6029      	str	r1, [r5, #0]
 8005bf8:	d501      	bpl.n	8005bfe <_printf_i+0xbe>
 8005bfa:	681e      	ldr	r6, [r3, #0]
 8005bfc:	e003      	b.n	8005c06 <_printf_i+0xc6>
 8005bfe:	0646      	lsls	r6, r0, #25
 8005c00:	d5fb      	bpl.n	8005bfa <_printf_i+0xba>
 8005c02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c06:	2e00      	cmp	r6, #0
 8005c08:	da03      	bge.n	8005c12 <_printf_i+0xd2>
 8005c0a:	232d      	movs	r3, #45	; 0x2d
 8005c0c:	4276      	negs	r6, r6
 8005c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c12:	485a      	ldr	r0, [pc, #360]	; (8005d7c <_printf_i+0x23c>)
 8005c14:	230a      	movs	r3, #10
 8005c16:	e012      	b.n	8005c3e <_printf_i+0xfe>
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	6820      	ldr	r0, [r4, #0]
 8005c1c:	1d19      	adds	r1, r3, #4
 8005c1e:	6029      	str	r1, [r5, #0]
 8005c20:	0605      	lsls	r5, r0, #24
 8005c22:	d501      	bpl.n	8005c28 <_printf_i+0xe8>
 8005c24:	681e      	ldr	r6, [r3, #0]
 8005c26:	e002      	b.n	8005c2e <_printf_i+0xee>
 8005c28:	0641      	lsls	r1, r0, #25
 8005c2a:	d5fb      	bpl.n	8005c24 <_printf_i+0xe4>
 8005c2c:	881e      	ldrh	r6, [r3, #0]
 8005c2e:	4853      	ldr	r0, [pc, #332]	; (8005d7c <_printf_i+0x23c>)
 8005c30:	2f6f      	cmp	r7, #111	; 0x6f
 8005c32:	bf0c      	ite	eq
 8005c34:	2308      	moveq	r3, #8
 8005c36:	230a      	movne	r3, #10
 8005c38:	2100      	movs	r1, #0
 8005c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c3e:	6865      	ldr	r5, [r4, #4]
 8005c40:	60a5      	str	r5, [r4, #8]
 8005c42:	2d00      	cmp	r5, #0
 8005c44:	bfa2      	ittt	ge
 8005c46:	6821      	ldrge	r1, [r4, #0]
 8005c48:	f021 0104 	bicge.w	r1, r1, #4
 8005c4c:	6021      	strge	r1, [r4, #0]
 8005c4e:	b90e      	cbnz	r6, 8005c54 <_printf_i+0x114>
 8005c50:	2d00      	cmp	r5, #0
 8005c52:	d04b      	beq.n	8005cec <_printf_i+0x1ac>
 8005c54:	4615      	mov	r5, r2
 8005c56:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c5a:	fb03 6711 	mls	r7, r3, r1, r6
 8005c5e:	5dc7      	ldrb	r7, [r0, r7]
 8005c60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c64:	4637      	mov	r7, r6
 8005c66:	42bb      	cmp	r3, r7
 8005c68:	460e      	mov	r6, r1
 8005c6a:	d9f4      	bls.n	8005c56 <_printf_i+0x116>
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d10b      	bne.n	8005c88 <_printf_i+0x148>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	07de      	lsls	r6, r3, #31
 8005c74:	d508      	bpl.n	8005c88 <_printf_i+0x148>
 8005c76:	6923      	ldr	r3, [r4, #16]
 8005c78:	6861      	ldr	r1, [r4, #4]
 8005c7a:	4299      	cmp	r1, r3
 8005c7c:	bfde      	ittt	le
 8005c7e:	2330      	movle	r3, #48	; 0x30
 8005c80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c88:	1b52      	subs	r2, r2, r5
 8005c8a:	6122      	str	r2, [r4, #16]
 8005c8c:	f8cd a000 	str.w	sl, [sp]
 8005c90:	464b      	mov	r3, r9
 8005c92:	aa03      	add	r2, sp, #12
 8005c94:	4621      	mov	r1, r4
 8005c96:	4640      	mov	r0, r8
 8005c98:	f7ff fee4 	bl	8005a64 <_printf_common>
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d14a      	bne.n	8005d36 <_printf_i+0x1f6>
 8005ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca4:	b004      	add	sp, #16
 8005ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	f043 0320 	orr.w	r3, r3, #32
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	4833      	ldr	r0, [pc, #204]	; (8005d80 <_printf_i+0x240>)
 8005cb4:	2778      	movs	r7, #120	; 0x78
 8005cb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	6829      	ldr	r1, [r5, #0]
 8005cbe:	061f      	lsls	r7, r3, #24
 8005cc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cc4:	d402      	bmi.n	8005ccc <_printf_i+0x18c>
 8005cc6:	065f      	lsls	r7, r3, #25
 8005cc8:	bf48      	it	mi
 8005cca:	b2b6      	uxthmi	r6, r6
 8005ccc:	07df      	lsls	r7, r3, #31
 8005cce:	bf48      	it	mi
 8005cd0:	f043 0320 	orrmi.w	r3, r3, #32
 8005cd4:	6029      	str	r1, [r5, #0]
 8005cd6:	bf48      	it	mi
 8005cd8:	6023      	strmi	r3, [r4, #0]
 8005cda:	b91e      	cbnz	r6, 8005ce4 <_printf_i+0x1a4>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	f023 0320 	bic.w	r3, r3, #32
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	e7a7      	b.n	8005c38 <_printf_i+0xf8>
 8005ce8:	4824      	ldr	r0, [pc, #144]	; (8005d7c <_printf_i+0x23c>)
 8005cea:	e7e4      	b.n	8005cb6 <_printf_i+0x176>
 8005cec:	4615      	mov	r5, r2
 8005cee:	e7bd      	b.n	8005c6c <_printf_i+0x12c>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	6826      	ldr	r6, [r4, #0]
 8005cf4:	6961      	ldr	r1, [r4, #20]
 8005cf6:	1d18      	adds	r0, r3, #4
 8005cf8:	6028      	str	r0, [r5, #0]
 8005cfa:	0635      	lsls	r5, r6, #24
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	d501      	bpl.n	8005d04 <_printf_i+0x1c4>
 8005d00:	6019      	str	r1, [r3, #0]
 8005d02:	e002      	b.n	8005d0a <_printf_i+0x1ca>
 8005d04:	0670      	lsls	r0, r6, #25
 8005d06:	d5fb      	bpl.n	8005d00 <_printf_i+0x1c0>
 8005d08:	8019      	strh	r1, [r3, #0]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	6123      	str	r3, [r4, #16]
 8005d0e:	4615      	mov	r5, r2
 8005d10:	e7bc      	b.n	8005c8c <_printf_i+0x14c>
 8005d12:	682b      	ldr	r3, [r5, #0]
 8005d14:	1d1a      	adds	r2, r3, #4
 8005d16:	602a      	str	r2, [r5, #0]
 8005d18:	681d      	ldr	r5, [r3, #0]
 8005d1a:	6862      	ldr	r2, [r4, #4]
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f7fa fa5e 	bl	80001e0 <memchr>
 8005d24:	b108      	cbz	r0, 8005d2a <_printf_i+0x1ea>
 8005d26:	1b40      	subs	r0, r0, r5
 8005d28:	6060      	str	r0, [r4, #4]
 8005d2a:	6863      	ldr	r3, [r4, #4]
 8005d2c:	6123      	str	r3, [r4, #16]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d34:	e7aa      	b.n	8005c8c <_printf_i+0x14c>
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	462a      	mov	r2, r5
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	47d0      	blx	sl
 8005d40:	3001      	adds	r0, #1
 8005d42:	d0ad      	beq.n	8005ca0 <_printf_i+0x160>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	079b      	lsls	r3, r3, #30
 8005d48:	d413      	bmi.n	8005d72 <_printf_i+0x232>
 8005d4a:	68e0      	ldr	r0, [r4, #12]
 8005d4c:	9b03      	ldr	r3, [sp, #12]
 8005d4e:	4298      	cmp	r0, r3
 8005d50:	bfb8      	it	lt
 8005d52:	4618      	movlt	r0, r3
 8005d54:	e7a6      	b.n	8005ca4 <_printf_i+0x164>
 8005d56:	2301      	movs	r3, #1
 8005d58:	4632      	mov	r2, r6
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	47d0      	blx	sl
 8005d60:	3001      	adds	r0, #1
 8005d62:	d09d      	beq.n	8005ca0 <_printf_i+0x160>
 8005d64:	3501      	adds	r5, #1
 8005d66:	68e3      	ldr	r3, [r4, #12]
 8005d68:	9903      	ldr	r1, [sp, #12]
 8005d6a:	1a5b      	subs	r3, r3, r1
 8005d6c:	42ab      	cmp	r3, r5
 8005d6e:	dcf2      	bgt.n	8005d56 <_printf_i+0x216>
 8005d70:	e7eb      	b.n	8005d4a <_printf_i+0x20a>
 8005d72:	2500      	movs	r5, #0
 8005d74:	f104 0619 	add.w	r6, r4, #25
 8005d78:	e7f5      	b.n	8005d66 <_printf_i+0x226>
 8005d7a:	bf00      	nop
 8005d7c:	0800615d 	.word	0x0800615d
 8005d80:	0800616e 	.word	0x0800616e

08005d84 <__sflush_r>:
 8005d84:	898a      	ldrh	r2, [r1, #12]
 8005d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	0710      	lsls	r0, r2, #28
 8005d8e:	460c      	mov	r4, r1
 8005d90:	d458      	bmi.n	8005e44 <__sflush_r+0xc0>
 8005d92:	684b      	ldr	r3, [r1, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	dc05      	bgt.n	8005da4 <__sflush_r+0x20>
 8005d98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	dc02      	bgt.n	8005da4 <__sflush_r+0x20>
 8005d9e:	2000      	movs	r0, #0
 8005da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005da6:	2e00      	cmp	r6, #0
 8005da8:	d0f9      	beq.n	8005d9e <__sflush_r+0x1a>
 8005daa:	2300      	movs	r3, #0
 8005dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005db0:	682f      	ldr	r7, [r5, #0]
 8005db2:	6a21      	ldr	r1, [r4, #32]
 8005db4:	602b      	str	r3, [r5, #0]
 8005db6:	d032      	beq.n	8005e1e <__sflush_r+0x9a>
 8005db8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	075a      	lsls	r2, r3, #29
 8005dbe:	d505      	bpl.n	8005dcc <__sflush_r+0x48>
 8005dc0:	6863      	ldr	r3, [r4, #4]
 8005dc2:	1ac0      	subs	r0, r0, r3
 8005dc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dc6:	b10b      	cbz	r3, 8005dcc <__sflush_r+0x48>
 8005dc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dca:	1ac0      	subs	r0, r0, r3
 8005dcc:	2300      	movs	r3, #0
 8005dce:	4602      	mov	r2, r0
 8005dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dd2:	6a21      	ldr	r1, [r4, #32]
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	47b0      	blx	r6
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	d106      	bne.n	8005dec <__sflush_r+0x68>
 8005dde:	6829      	ldr	r1, [r5, #0]
 8005de0:	291d      	cmp	r1, #29
 8005de2:	d82b      	bhi.n	8005e3c <__sflush_r+0xb8>
 8005de4:	4a29      	ldr	r2, [pc, #164]	; (8005e8c <__sflush_r+0x108>)
 8005de6:	410a      	asrs	r2, r1
 8005de8:	07d6      	lsls	r6, r2, #31
 8005dea:	d427      	bmi.n	8005e3c <__sflush_r+0xb8>
 8005dec:	2200      	movs	r2, #0
 8005dee:	6062      	str	r2, [r4, #4]
 8005df0:	04d9      	lsls	r1, r3, #19
 8005df2:	6922      	ldr	r2, [r4, #16]
 8005df4:	6022      	str	r2, [r4, #0]
 8005df6:	d504      	bpl.n	8005e02 <__sflush_r+0x7e>
 8005df8:	1c42      	adds	r2, r0, #1
 8005dfa:	d101      	bne.n	8005e00 <__sflush_r+0x7c>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	b903      	cbnz	r3, 8005e02 <__sflush_r+0x7e>
 8005e00:	6560      	str	r0, [r4, #84]	; 0x54
 8005e02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e04:	602f      	str	r7, [r5, #0]
 8005e06:	2900      	cmp	r1, #0
 8005e08:	d0c9      	beq.n	8005d9e <__sflush_r+0x1a>
 8005e0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e0e:	4299      	cmp	r1, r3
 8005e10:	d002      	beq.n	8005e18 <__sflush_r+0x94>
 8005e12:	4628      	mov	r0, r5
 8005e14:	f7ff fa92 	bl	800533c <_free_r>
 8005e18:	2000      	movs	r0, #0
 8005e1a:	6360      	str	r0, [r4, #52]	; 0x34
 8005e1c:	e7c0      	b.n	8005da0 <__sflush_r+0x1c>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b0      	blx	r6
 8005e24:	1c41      	adds	r1, r0, #1
 8005e26:	d1c8      	bne.n	8005dba <__sflush_r+0x36>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0c5      	beq.n	8005dba <__sflush_r+0x36>
 8005e2e:	2b1d      	cmp	r3, #29
 8005e30:	d001      	beq.n	8005e36 <__sflush_r+0xb2>
 8005e32:	2b16      	cmp	r3, #22
 8005e34:	d101      	bne.n	8005e3a <__sflush_r+0xb6>
 8005e36:	602f      	str	r7, [r5, #0]
 8005e38:	e7b1      	b.n	8005d9e <__sflush_r+0x1a>
 8005e3a:	89a3      	ldrh	r3, [r4, #12]
 8005e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e40:	81a3      	strh	r3, [r4, #12]
 8005e42:	e7ad      	b.n	8005da0 <__sflush_r+0x1c>
 8005e44:	690f      	ldr	r7, [r1, #16]
 8005e46:	2f00      	cmp	r7, #0
 8005e48:	d0a9      	beq.n	8005d9e <__sflush_r+0x1a>
 8005e4a:	0793      	lsls	r3, r2, #30
 8005e4c:	680e      	ldr	r6, [r1, #0]
 8005e4e:	bf08      	it	eq
 8005e50:	694b      	ldreq	r3, [r1, #20]
 8005e52:	600f      	str	r7, [r1, #0]
 8005e54:	bf18      	it	ne
 8005e56:	2300      	movne	r3, #0
 8005e58:	eba6 0807 	sub.w	r8, r6, r7
 8005e5c:	608b      	str	r3, [r1, #8]
 8005e5e:	f1b8 0f00 	cmp.w	r8, #0
 8005e62:	dd9c      	ble.n	8005d9e <__sflush_r+0x1a>
 8005e64:	6a21      	ldr	r1, [r4, #32]
 8005e66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e68:	4643      	mov	r3, r8
 8005e6a:	463a      	mov	r2, r7
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b0      	blx	r6
 8005e70:	2800      	cmp	r0, #0
 8005e72:	dc06      	bgt.n	8005e82 <__sflush_r+0xfe>
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e7a:	81a3      	strh	r3, [r4, #12]
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e80:	e78e      	b.n	8005da0 <__sflush_r+0x1c>
 8005e82:	4407      	add	r7, r0
 8005e84:	eba8 0800 	sub.w	r8, r8, r0
 8005e88:	e7e9      	b.n	8005e5e <__sflush_r+0xda>
 8005e8a:	bf00      	nop
 8005e8c:	dfbffffe 	.word	0xdfbffffe

08005e90 <_fflush_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	690b      	ldr	r3, [r1, #16]
 8005e94:	4605      	mov	r5, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	b913      	cbnz	r3, 8005ea0 <_fflush_r+0x10>
 8005e9a:	2500      	movs	r5, #0
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	b118      	cbz	r0, 8005eaa <_fflush_r+0x1a>
 8005ea2:	6a03      	ldr	r3, [r0, #32]
 8005ea4:	b90b      	cbnz	r3, 8005eaa <_fflush_r+0x1a>
 8005ea6:	f7ff f831 	bl	8004f0c <__sinit>
 8005eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0f3      	beq.n	8005e9a <_fflush_r+0xa>
 8005eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005eb4:	07d0      	lsls	r0, r2, #31
 8005eb6:	d404      	bmi.n	8005ec2 <_fflush_r+0x32>
 8005eb8:	0599      	lsls	r1, r3, #22
 8005eba:	d402      	bmi.n	8005ec2 <_fflush_r+0x32>
 8005ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ebe:	f7ff fa3a 	bl	8005336 <__retarget_lock_acquire_recursive>
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	f7ff ff5d 	bl	8005d84 <__sflush_r>
 8005eca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ecc:	07da      	lsls	r2, r3, #31
 8005ece:	4605      	mov	r5, r0
 8005ed0:	d4e4      	bmi.n	8005e9c <_fflush_r+0xc>
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	059b      	lsls	r3, r3, #22
 8005ed6:	d4e1      	bmi.n	8005e9c <_fflush_r+0xc>
 8005ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eda:	f7ff fa2d 	bl	8005338 <__retarget_lock_release_recursive>
 8005ede:	e7dd      	b.n	8005e9c <_fflush_r+0xc>

08005ee0 <__swhatbuf_r>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee8:	2900      	cmp	r1, #0
 8005eea:	b096      	sub	sp, #88	; 0x58
 8005eec:	4615      	mov	r5, r2
 8005eee:	461e      	mov	r6, r3
 8005ef0:	da0d      	bge.n	8005f0e <__swhatbuf_r+0x2e>
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ef8:	f04f 0100 	mov.w	r1, #0
 8005efc:	bf0c      	ite	eq
 8005efe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005f02:	2340      	movne	r3, #64	; 0x40
 8005f04:	2000      	movs	r0, #0
 8005f06:	6031      	str	r1, [r6, #0]
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	b016      	add	sp, #88	; 0x58
 8005f0c:	bd70      	pop	{r4, r5, r6, pc}
 8005f0e:	466a      	mov	r2, sp
 8005f10:	f000 f862 	bl	8005fd8 <_fstat_r>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	dbec      	blt.n	8005ef2 <__swhatbuf_r+0x12>
 8005f18:	9901      	ldr	r1, [sp, #4]
 8005f1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005f1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005f22:	4259      	negs	r1, r3
 8005f24:	4159      	adcs	r1, r3
 8005f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f2a:	e7eb      	b.n	8005f04 <__swhatbuf_r+0x24>

08005f2c <__smakebuf_r>:
 8005f2c:	898b      	ldrh	r3, [r1, #12]
 8005f2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f30:	079d      	lsls	r5, r3, #30
 8005f32:	4606      	mov	r6, r0
 8005f34:	460c      	mov	r4, r1
 8005f36:	d507      	bpl.n	8005f48 <__smakebuf_r+0x1c>
 8005f38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	6123      	str	r3, [r4, #16]
 8005f40:	2301      	movs	r3, #1
 8005f42:	6163      	str	r3, [r4, #20]
 8005f44:	b002      	add	sp, #8
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	ab01      	add	r3, sp, #4
 8005f4a:	466a      	mov	r2, sp
 8005f4c:	f7ff ffc8 	bl	8005ee0 <__swhatbuf_r>
 8005f50:	9900      	ldr	r1, [sp, #0]
 8005f52:	4605      	mov	r5, r0
 8005f54:	4630      	mov	r0, r6
 8005f56:	f7ff fa5d 	bl	8005414 <_malloc_r>
 8005f5a:	b948      	cbnz	r0, 8005f70 <__smakebuf_r+0x44>
 8005f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f60:	059a      	lsls	r2, r3, #22
 8005f62:	d4ef      	bmi.n	8005f44 <__smakebuf_r+0x18>
 8005f64:	f023 0303 	bic.w	r3, r3, #3
 8005f68:	f043 0302 	orr.w	r3, r3, #2
 8005f6c:	81a3      	strh	r3, [r4, #12]
 8005f6e:	e7e3      	b.n	8005f38 <__smakebuf_r+0xc>
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	6020      	str	r0, [r4, #0]
 8005f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f78:	81a3      	strh	r3, [r4, #12]
 8005f7a:	9b00      	ldr	r3, [sp, #0]
 8005f7c:	6163      	str	r3, [r4, #20]
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	6120      	str	r0, [r4, #16]
 8005f82:	b15b      	cbz	r3, 8005f9c <__smakebuf_r+0x70>
 8005f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f000 f837 	bl	8005ffc <_isatty_r>
 8005f8e:	b128      	cbz	r0, 8005f9c <__smakebuf_r+0x70>
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	f043 0301 	orr.w	r3, r3, #1
 8005f9a:	81a3      	strh	r3, [r4, #12]
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	431d      	orrs	r5, r3
 8005fa0:	81a5      	strh	r5, [r4, #12]
 8005fa2:	e7cf      	b.n	8005f44 <__smakebuf_r+0x18>

08005fa4 <memmove>:
 8005fa4:	4288      	cmp	r0, r1
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	eb01 0402 	add.w	r4, r1, r2
 8005fac:	d902      	bls.n	8005fb4 <memmove+0x10>
 8005fae:	4284      	cmp	r4, r0
 8005fb0:	4623      	mov	r3, r4
 8005fb2:	d807      	bhi.n	8005fc4 <memmove+0x20>
 8005fb4:	1e43      	subs	r3, r0, #1
 8005fb6:	42a1      	cmp	r1, r4
 8005fb8:	d008      	beq.n	8005fcc <memmove+0x28>
 8005fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fc2:	e7f8      	b.n	8005fb6 <memmove+0x12>
 8005fc4:	4402      	add	r2, r0
 8005fc6:	4601      	mov	r1, r0
 8005fc8:	428a      	cmp	r2, r1
 8005fca:	d100      	bne.n	8005fce <memmove+0x2a>
 8005fcc:	bd10      	pop	{r4, pc}
 8005fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fd6:	e7f7      	b.n	8005fc8 <memmove+0x24>

08005fd8 <_fstat_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4d07      	ldr	r5, [pc, #28]	; (8005ff8 <_fstat_r+0x20>)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	4604      	mov	r4, r0
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	602b      	str	r3, [r5, #0]
 8005fe6:	f7fb f862 	bl	80010ae <_fstat>
 8005fea:	1c43      	adds	r3, r0, #1
 8005fec:	d102      	bne.n	8005ff4 <_fstat_r+0x1c>
 8005fee:	682b      	ldr	r3, [r5, #0]
 8005ff0:	b103      	cbz	r3, 8005ff4 <_fstat_r+0x1c>
 8005ff2:	6023      	str	r3, [r4, #0]
 8005ff4:	bd38      	pop	{r3, r4, r5, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000498 	.word	0x20000498

08005ffc <_isatty_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4d06      	ldr	r5, [pc, #24]	; (8006018 <_isatty_r+0x1c>)
 8006000:	2300      	movs	r3, #0
 8006002:	4604      	mov	r4, r0
 8006004:	4608      	mov	r0, r1
 8006006:	602b      	str	r3, [r5, #0]
 8006008:	f7fb f861 	bl	80010ce <_isatty>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_isatty_r+0x1a>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_isatty_r+0x1a>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	20000498 	.word	0x20000498

0800601c <_sbrk_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4d06      	ldr	r5, [pc, #24]	; (8006038 <_sbrk_r+0x1c>)
 8006020:	2300      	movs	r3, #0
 8006022:	4604      	mov	r4, r0
 8006024:	4608      	mov	r0, r1
 8006026:	602b      	str	r3, [r5, #0]
 8006028:	f7fb f86a 	bl	8001100 <_sbrk>
 800602c:	1c43      	adds	r3, r0, #1
 800602e:	d102      	bne.n	8006036 <_sbrk_r+0x1a>
 8006030:	682b      	ldr	r3, [r5, #0]
 8006032:	b103      	cbz	r3, 8006036 <_sbrk_r+0x1a>
 8006034:	6023      	str	r3, [r4, #0]
 8006036:	bd38      	pop	{r3, r4, r5, pc}
 8006038:	20000498 	.word	0x20000498

0800603c <memcpy>:
 800603c:	440a      	add	r2, r1
 800603e:	4291      	cmp	r1, r2
 8006040:	f100 33ff 	add.w	r3, r0, #4294967295
 8006044:	d100      	bne.n	8006048 <memcpy+0xc>
 8006046:	4770      	bx	lr
 8006048:	b510      	push	{r4, lr}
 800604a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800604e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006052:	4291      	cmp	r1, r2
 8006054:	d1f9      	bne.n	800604a <memcpy+0xe>
 8006056:	bd10      	pop	{r4, pc}

08006058 <_realloc_r>:
 8006058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800605c:	4680      	mov	r8, r0
 800605e:	4614      	mov	r4, r2
 8006060:	460e      	mov	r6, r1
 8006062:	b921      	cbnz	r1, 800606e <_realloc_r+0x16>
 8006064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006068:	4611      	mov	r1, r2
 800606a:	f7ff b9d3 	b.w	8005414 <_malloc_r>
 800606e:	b92a      	cbnz	r2, 800607c <_realloc_r+0x24>
 8006070:	f7ff f964 	bl	800533c <_free_r>
 8006074:	4625      	mov	r5, r4
 8006076:	4628      	mov	r0, r5
 8006078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800607c:	f000 f81b 	bl	80060b6 <_malloc_usable_size_r>
 8006080:	4284      	cmp	r4, r0
 8006082:	4607      	mov	r7, r0
 8006084:	d802      	bhi.n	800608c <_realloc_r+0x34>
 8006086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800608a:	d812      	bhi.n	80060b2 <_realloc_r+0x5a>
 800608c:	4621      	mov	r1, r4
 800608e:	4640      	mov	r0, r8
 8006090:	f7ff f9c0 	bl	8005414 <_malloc_r>
 8006094:	4605      	mov	r5, r0
 8006096:	2800      	cmp	r0, #0
 8006098:	d0ed      	beq.n	8006076 <_realloc_r+0x1e>
 800609a:	42bc      	cmp	r4, r7
 800609c:	4622      	mov	r2, r4
 800609e:	4631      	mov	r1, r6
 80060a0:	bf28      	it	cs
 80060a2:	463a      	movcs	r2, r7
 80060a4:	f7ff ffca 	bl	800603c <memcpy>
 80060a8:	4631      	mov	r1, r6
 80060aa:	4640      	mov	r0, r8
 80060ac:	f7ff f946 	bl	800533c <_free_r>
 80060b0:	e7e1      	b.n	8006076 <_realloc_r+0x1e>
 80060b2:	4635      	mov	r5, r6
 80060b4:	e7df      	b.n	8006076 <_realloc_r+0x1e>

080060b6 <_malloc_usable_size_r>:
 80060b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ba:	1f18      	subs	r0, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	bfbc      	itt	lt
 80060c0:	580b      	ldrlt	r3, [r1, r0]
 80060c2:	18c0      	addlt	r0, r0, r3
 80060c4:	4770      	bx	lr
	...

080060c8 <_init>:
 80060c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ca:	bf00      	nop
 80060cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ce:	bc08      	pop	{r3}
 80060d0:	469e      	mov	lr, r3
 80060d2:	4770      	bx	lr

080060d4 <_fini>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	bf00      	nop
 80060d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060da:	bc08      	pop	{r3}
 80060dc:	469e      	mov	lr, r3
 80060de:	4770      	bx	lr
