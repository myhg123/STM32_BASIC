
Controller_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f90  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f0  08006128  08006128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007318  08007318  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007318  08007318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007320  08007320  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007320  08007320  00017320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007324  08007324  00017324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007328  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000070  08007398  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08007398  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee49  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a92  00000000  00000000  0002ef2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  000319c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092a  00000000  00000000  000325e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018068  00000000  00000000  00032f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ab4  00000000  00000000  0004af72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093a4b  00000000  00000000  0005ba26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033a8  00000000  00000000  000ef474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f281c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006110 	.word	0x08006110

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08006110 	.word	0x08006110

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b970 	b.w	8000df8 <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	460d      	mov	r5, r1
 8000b38:	4604      	mov	r4, r0
 8000b3a:	460f      	mov	r7, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d14a      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b40:	428a      	cmp	r2, r1
 8000b42:	4694      	mov	ip, r2
 8000b44:	d965      	bls.n	8000c12 <__udivmoddi4+0xe2>
 8000b46:	fab2 f382 	clz	r3, r2
 8000b4a:	b143      	cbz	r3, 8000b5e <__udivmoddi4+0x2e>
 8000b4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b50:	f1c3 0220 	rsb	r2, r3, #32
 8000b54:	409f      	lsls	r7, r3
 8000b56:	fa20 f202 	lsr.w	r2, r0, r2
 8000b5a:	4317      	orrs	r7, r2
 8000b5c:	409c      	lsls	r4, r3
 8000b5e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b62:	fa1f f58c 	uxth.w	r5, ip
 8000b66:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b6a:	0c22      	lsrs	r2, r4, #16
 8000b6c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b70:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b74:	fb01 f005 	mul.w	r0, r1, r5
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	d90a      	bls.n	8000b92 <__udivmoddi4+0x62>
 8000b7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b84:	f080 811c 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000b88:	4290      	cmp	r0, r2
 8000b8a:	f240 8119 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000b8e:	3902      	subs	r1, #2
 8000b90:	4462      	add	r2, ip
 8000b92:	1a12      	subs	r2, r2, r0
 8000b94:	b2a4      	uxth	r4, r4
 8000b96:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b9a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ba2:	fb00 f505 	mul.w	r5, r0, r5
 8000ba6:	42a5      	cmp	r5, r4
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x90>
 8000baa:	eb1c 0404 	adds.w	r4, ip, r4
 8000bae:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb2:	f080 8107 	bcs.w	8000dc4 <__udivmoddi4+0x294>
 8000bb6:	42a5      	cmp	r5, r4
 8000bb8:	f240 8104 	bls.w	8000dc4 <__udivmoddi4+0x294>
 8000bbc:	4464      	add	r4, ip
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc4:	1b64      	subs	r4, r4, r5
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	b11e      	cbz	r6, 8000bd2 <__udivmoddi4+0xa2>
 8000bca:	40dc      	lsrs	r4, r3
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d908      	bls.n	8000bec <__udivmoddi4+0xbc>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80ed 	beq.w	8000dba <__udivmoddi4+0x28a>
 8000be0:	2100      	movs	r1, #0
 8000be2:	e9c6 0500 	strd	r0, r5, [r6]
 8000be6:	4608      	mov	r0, r1
 8000be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bec:	fab3 f183 	clz	r1, r3
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	d149      	bne.n	8000c88 <__udivmoddi4+0x158>
 8000bf4:	42ab      	cmp	r3, r5
 8000bf6:	d302      	bcc.n	8000bfe <__udivmoddi4+0xce>
 8000bf8:	4282      	cmp	r2, r0
 8000bfa:	f200 80f8 	bhi.w	8000dee <__udivmoddi4+0x2be>
 8000bfe:	1a84      	subs	r4, r0, r2
 8000c00:	eb65 0203 	sbc.w	r2, r5, r3
 8000c04:	2001      	movs	r0, #1
 8000c06:	4617      	mov	r7, r2
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d0e2      	beq.n	8000bd2 <__udivmoddi4+0xa2>
 8000c0c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c10:	e7df      	b.n	8000bd2 <__udivmoddi4+0xa2>
 8000c12:	b902      	cbnz	r2, 8000c16 <__udivmoddi4+0xe6>
 8000c14:	deff      	udf	#255	; 0xff
 8000c16:	fab2 f382 	clz	r3, r2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f040 8090 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c20:	1a8a      	subs	r2, r1, r2
 8000c22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c30:	fb07 2015 	mls	r0, r7, r5, r2
 8000c34:	0c22      	lsrs	r2, r4, #16
 8000c36:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c3a:	fb0e f005 	mul.w	r0, lr, r5
 8000c3e:	4290      	cmp	r0, r2
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c42:	eb1c 0202 	adds.w	r2, ip, r2
 8000c46:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4290      	cmp	r0, r2
 8000c4e:	f200 80cb 	bhi.w	8000de8 <__udivmoddi4+0x2b8>
 8000c52:	4645      	mov	r5, r8
 8000c54:	1a12      	subs	r2, r2, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c64:	fb0e fe00 	mul.w	lr, lr, r0
 8000c68:	45a6      	cmp	lr, r4
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x14e>
 8000c6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c74:	d202      	bcs.n	8000c7c <__udivmoddi4+0x14c>
 8000c76:	45a6      	cmp	lr, r4
 8000c78:	f200 80bb 	bhi.w	8000df2 <__udivmoddi4+0x2c2>
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c86:	e79f      	b.n	8000bc8 <__udivmoddi4+0x98>
 8000c88:	f1c1 0720 	rsb	r7, r1, #32
 8000c8c:	408b      	lsls	r3, r1
 8000c8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c96:	fa05 f401 	lsl.w	r4, r5, r1
 8000c9a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9e:	40fd      	lsrs	r5, r7
 8000ca0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca4:	4323      	orrs	r3, r4
 8000ca6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	fb09 5518 	mls	r5, r9, r8, r5
 8000cb2:	0c1c      	lsrs	r4, r3, #16
 8000cb4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cbc:	42a5      	cmp	r5, r4
 8000cbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc2:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd0:	f080 8088 	bcs.w	8000de4 <__udivmoddi4+0x2b4>
 8000cd4:	42a5      	cmp	r5, r4
 8000cd6:	f240 8085 	bls.w	8000de4 <__udivmoddi4+0x2b4>
 8000cda:	f1a8 0802 	sub.w	r8, r8, #2
 8000cde:	4464      	add	r4, ip
 8000ce0:	1b64      	subs	r4, r4, r5
 8000ce2:	b29d      	uxth	r5, r3
 8000ce4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cf0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d00:	d26c      	bcs.n	8000ddc <__udivmoddi4+0x2ac>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	d96a      	bls.n	8000ddc <__udivmoddi4+0x2ac>
 8000d06:	3b02      	subs	r3, #2
 8000d08:	4464      	add	r4, ip
 8000d0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d12:	eba4 040e 	sub.w	r4, r4, lr
 8000d16:	42ac      	cmp	r4, r5
 8000d18:	46c8      	mov	r8, r9
 8000d1a:	46ae      	mov	lr, r5
 8000d1c:	d356      	bcc.n	8000dcc <__udivmoddi4+0x29c>
 8000d1e:	d053      	beq.n	8000dc8 <__udivmoddi4+0x298>
 8000d20:	b156      	cbz	r6, 8000d38 <__udivmoddi4+0x208>
 8000d22:	ebb0 0208 	subs.w	r2, r0, r8
 8000d26:	eb64 040e 	sbc.w	r4, r4, lr
 8000d2a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2e:	40ca      	lsrs	r2, r1
 8000d30:	40cc      	lsrs	r4, r1
 8000d32:	4317      	orrs	r7, r2
 8000d34:	e9c6 7400 	strd	r7, r4, [r6]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d40:	f1c3 0120 	rsb	r1, r3, #32
 8000d44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d48:	fa20 f201 	lsr.w	r2, r0, r1
 8000d4c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d50:	409d      	lsls	r5, r3
 8000d52:	432a      	orrs	r2, r5
 8000d54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d60:	fb07 1510 	mls	r5, r7, r0, r1
 8000d64:	0c11      	lsrs	r1, r2, #16
 8000d66:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d6a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6e:	428d      	cmp	r5, r1
 8000d70:	fa04 f403 	lsl.w	r4, r4, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x258>
 8000d76:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d7e:	d22f      	bcs.n	8000de0 <__udivmoddi4+0x2b0>
 8000d80:	428d      	cmp	r5, r1
 8000d82:	d92d      	bls.n	8000de0 <__udivmoddi4+0x2b0>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1b49      	subs	r1, r1, r5
 8000d8a:	b292      	uxth	r2, r2
 8000d8c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d90:	fb07 1115 	mls	r1, r7, r5, r1
 8000d94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d98:	fb05 f10e 	mul.w	r1, r5, lr
 8000d9c:	4291      	cmp	r1, r2
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x282>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da8:	d216      	bcs.n	8000dd8 <__udivmoddi4+0x2a8>
 8000daa:	4291      	cmp	r1, r2
 8000dac:	d914      	bls.n	8000dd8 <__udivmoddi4+0x2a8>
 8000dae:	3d02      	subs	r5, #2
 8000db0:	4462      	add	r2, ip
 8000db2:	1a52      	subs	r2, r2, r1
 8000db4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db8:	e738      	b.n	8000c2c <__udivmoddi4+0xfc>
 8000dba:	4631      	mov	r1, r6
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	e708      	b.n	8000bd2 <__udivmoddi4+0xa2>
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e6e6      	b.n	8000b92 <__udivmoddi4+0x62>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	e6fb      	b.n	8000bc0 <__udivmoddi4+0x90>
 8000dc8:	4548      	cmp	r0, r9
 8000dca:	d2a9      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	e7a3      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd8:	4645      	mov	r5, r8
 8000dda:	e7ea      	b.n	8000db2 <__udivmoddi4+0x282>
 8000ddc:	462b      	mov	r3, r5
 8000dde:	e794      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000de0:	4640      	mov	r0, r8
 8000de2:	e7d1      	b.n	8000d88 <__udivmoddi4+0x258>
 8000de4:	46d0      	mov	r8, sl
 8000de6:	e77b      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de8:	3d02      	subs	r5, #2
 8000dea:	4462      	add	r2, ip
 8000dec:	e732      	b.n	8000c54 <__udivmoddi4+0x124>
 8000dee:	4608      	mov	r0, r1
 8000df0:	e70a      	b.n	8000c08 <__udivmoddi4+0xd8>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	e742      	b.n	8000c7e <__udivmoddi4+0x14e>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <CLCD_INIT>:
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
	ILI9341_FillScreen(WHITE);  // fill screen WhitE
	ILI9341_DrawHollowCircle(160, 240, 100, BLACK);

}
void CLCD_INIT() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	ILI9341_Init();
 8000e00:	f000 faa0 	bl	8001344 <ILI9341_Init>
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 fba7 	bl	8001558 <ILI9341_SetRotation>
	ILI9341_FillScreen(WHITE);  // fill screen WhitE
 8000e0a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e0e:	f000 fc8d 	bl	800172c <ILI9341_FillScreen>

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <LCD_controller>:
void LCD_controller(int16_t xAxis, int16_t yAxis, uint8_t state) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b090      	sub	sp, #64	; 0x40
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	460b      	mov	r3, r1
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	70fb      	strb	r3, [r7, #3]
	int32_t tAxis = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
	char tAxisStr[40];
	if (abs(xAxis) > 2040)
 8000e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bfb8      	it	lt
 8000e36:	425b      	neglt	r3, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8000e3e:	d902      	bls.n	8000e46 <LCD_controller+0x2e>
		xAxis = 2040;
 8000e40:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000e44:	80fb      	strh	r3, [r7, #6]
	if (abs(yAxis) > 2040)
 8000e46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	bfb8      	it	lt
 8000e4e:	425b      	neglt	r3, r3
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8000e56:	d902      	bls.n	8000e5e <LCD_controller+0x46>
		yAxis = 2040;
 8000e58:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000e5c:	80bb      	strh	r3, [r7, #4]
	tAxis = sqrt((xAxis * xAxis) + (yAxis * yAxis));
 8000e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e66:	fb03 f202 	mul.w	r2, r3, r2
 8000e6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e6e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e72:	fb01 f303 	mul.w	r3, r1, r3
 8000e76:	4413      	add	r3, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff faff 	bl	800047c <__aeabi_i2d>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	ec43 2b10 	vmov	d0, r2, r3
 8000e86:	f005 f83d 	bl	8005f04 <sqrt>
 8000e8a:	ec53 2b10 	vmov	r2, r3, d0
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	f7ff fe0d 	bl	8000ab0 <__aeabi_d2iz>
 8000e96:	4603      	mov	r3, r0
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34

	itoa(tAxis, tAxisStr, 10);
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	220a      	movs	r2, #10
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ea4:	f004 ffb8 	bl	8005e18 <itoa>
	ILI9341_DrawText("Motorcar controller", FONT4, 0, 0, BLUE, WHITE);
 8000ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	231f      	movs	r3, #31
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	4934      	ldr	r1, [pc, #208]	; (8000f88 <LCD_controller+0x170>)
 8000eb8:	4834      	ldr	r0, [pc, #208]	; (8000f8c <LCD_controller+0x174>)
 8000eba:	f000 f8eb 	bl	8001094 <ILI9341_DrawText>
	ILI9341_DrawText("PWMVALUE:", FONT4, 0, 40, BLUE, WHITE);
 8000ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	231f      	movs	r3, #31
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2328      	movs	r3, #40	; 0x28
 8000eca:	2200      	movs	r2, #0
 8000ecc:	492e      	ldr	r1, [pc, #184]	; (8000f88 <LCD_controller+0x170>)
 8000ece:	4830      	ldr	r0, [pc, #192]	; (8000f90 <LCD_controller+0x178>)
 8000ed0:	f000 f8e0 	bl	8001094 <ILI9341_DrawText>

	ILI9341_DrawText(tAxisStr, FONT4, 110, 40, BLUE, WHITE);
 8000ed4:	f107 000c 	add.w	r0, r7, #12
 8000ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000edc:	9301      	str	r3, [sp, #4]
 8000ede:	231f      	movs	r3, #31
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2328      	movs	r3, #40	; 0x28
 8000ee4:	226e      	movs	r2, #110	; 0x6e
 8000ee6:	4928      	ldr	r1, [pc, #160]	; (8000f88 <LCD_controller+0x170>)
 8000ee8:	f000 f8d4 	bl	8001094 <ILI9341_DrawText>
	HAL_Delay(1);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f001 fb79 	bl	80025e4 <HAL_Delay>

	switch (state) {
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d843      	bhi.n	8000f80 <LCD_controller+0x168>
 8000ef8:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <LCD_controller+0xe8>)
 8000efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efe:	bf00      	nop
 8000f00:	08000f11 	.word	0x08000f11
 8000f04:	08000f39 	.word	0x08000f39
 8000f08:	08000f51 	.word	0x08000f51
 8000f0c:	08000f69 	.word	0x08000f69
	case STOP:
		ILI9341_DrawText("Mode : Warning", FONT4, 0, 20, BLUE, WHITE);
 8000f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	231f      	movs	r3, #31
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2314      	movs	r3, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	491a      	ldr	r1, [pc, #104]	; (8000f88 <LCD_controller+0x170>)
 8000f20:	481c      	ldr	r0, [pc, #112]	; (8000f94 <LCD_controller+0x17c>)
 8000f22:	f000 f8b7 	bl	8001094 <ILI9341_DrawText>
		ILI9341_FillScreen(RED);
 8000f26:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000f2a:	f000 fbff 	bl	800172c <ILI9341_FillScreen>
		ILI9341_FillScreen(WHITE);
 8000f2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f32:	f000 fbfb 	bl	800172c <ILI9341_FillScreen>
		break;
 8000f36:	e023      	b.n	8000f80 <LCD_controller+0x168>
	case MANUAL:
		ILI9341_DrawText("Mode : Manual", FONT4, 0, 20, BLUE, WHITE);
 8000f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	231f      	movs	r3, #31
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2314      	movs	r3, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	4910      	ldr	r1, [pc, #64]	; (8000f88 <LCD_controller+0x170>)
 8000f48:	4813      	ldr	r0, [pc, #76]	; (8000f98 <LCD_controller+0x180>)
 8000f4a:	f000 f8a3 	bl	8001094 <ILI9341_DrawText>
		break;
 8000f4e:	e017      	b.n	8000f80 <LCD_controller+0x168>
	case AUTO:
		ILI9341_DrawText("Mode : AutoMove", FONT4, 0, 20, BLUE, WHITE);
 8000f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	231f      	movs	r3, #31
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2314      	movs	r3, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	490a      	ldr	r1, [pc, #40]	; (8000f88 <LCD_controller+0x170>)
 8000f60:	480e      	ldr	r0, [pc, #56]	; (8000f9c <LCD_controller+0x184>)
 8000f62:	f000 f897 	bl	8001094 <ILI9341_DrawText>
		break;
 8000f66:	e00b      	b.n	8000f80 <LCD_controller+0x168>
	case SAFEDRIVE:
		ILI9341_DrawText("Mode : SafeDrive", FONT4, 0, 20, BLUE, WHITE);
 8000f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	231f      	movs	r3, #31
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2314      	movs	r3, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	4904      	ldr	r1, [pc, #16]	; (8000f88 <LCD_controller+0x170>)
 8000f78:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <LCD_controller+0x188>)
 8000f7a:	f000 f88b 	bl	8001094 <ILI9341_DrawText>
		break;
 8000f7e:	bf00      	nop
//		ILI9341_FillScreen(RED);
//		ILI9341_FillScreen(WHITE);
//	} else if (state == SAFEDRIVE) {
//		ILI9341_DrawText("Mode : SafeDrive", FONT4, 0, 20, BLUE, WHITE);
//	}
}
 8000f80:	bf00      	nop
 8000f82:	3738      	adds	r7, #56	; 0x38
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	0800618c 	.word	0x0800618c
 8000f8c:	08006128 	.word	0x08006128
 8000f90:	0800613c 	.word	0x0800613c
 8000f94:	08006148 	.word	0x08006148
 8000f98:	08006158 	.word	0x08006158
 8000f9c:	08006168 	.word	0x08006168
 8000fa0:	08006178 	.word	0x08006178

08000fa4 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y,
		uint16_t color, uint16_t bgcolor) {
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b08d      	sub	sp, #52	; 0x34
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	4611      	mov	r1, r2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	81bb      	strh	r3, [r7, #12]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127))
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	2b1e      	cmp	r3, #30
 8000fc0:	d964      	bls.n	800108c <ILI9341_DrawChar+0xe8>
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db60      	blt.n	800108c <ILI9341_DrawChar+0xe8>
		return;

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3302      	adds	r3, #2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3303      	adds	r3, #3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*) &font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	3b20      	subs	r3, #32
 8000fec:	7ffa      	ldrb	r2, [r7, #31]
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000ffa:	7fbb      	ldrb	r3, [r7, #30]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	7f7b      	ldrb	r3, [r7, #29]
 8001000:	b29c      	uxth	r4, r3
 8001002:	88f9      	ldrh	r1, [r7, #6]
 8001004:	89b8      	ldrh	r0, [r7, #12]
 8001006:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	4623      	mov	r3, r4
 800100c:	f000 fc1a 	bl	8001844 <ILI9341_DrawRectangle>

	for (int j = 0; j < fHeight; j++) {
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
 8001014:	e035      	b.n	8001082 <ILI9341_DrawChar+0xde>
		for (int i = 0; i < fWidth; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
 800101a:	e02b      	b.n	8001074 <ILI9341_DrawChar+0xd0>
			uint8_t z = tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 800101c:	7f3b      	ldrb	r3, [r7, #28]
 800101e:	6a3a      	ldr	r2, [r7, #32]
 8001020:	fb03 f202 	mul.w	r2, r3, r2
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	10db      	asrs	r3, r3, #3
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	4413      	add	r3, r2
 800102e:	3301      	adds	r3, #1
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	2201      	movs	r2, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	75bb      	strb	r3, [r7, #22]
			if ((z & b) != 0x00) {
 8001046:	7dfa      	ldrb	r2, [r7, #23]
 8001048:	7dbb      	ldrb	r3, [r7, #22]
 800104a:	4013      	ands	r3, r2
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00d      	beq.n	800106e <ILI9341_DrawChar+0xca>
				ILI9341_DrawPixel(X + i, Y + j, color);
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	b29a      	uxth	r2, r3
 8001056:	89bb      	ldrh	r3, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	b298      	uxth	r0, r3
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	b29a      	uxth	r2, r3
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	4413      	add	r3, r2
 8001064:	b29b      	uxth	r3, r3
 8001066:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001068:	4619      	mov	r1, r3
 800106a:	f000 fb85 	bl	8001778 <ILI9341_DrawPixel>
		for (int i = 0; i < fWidth; i++) {
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	3301      	adds	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	7fbb      	ldrb	r3, [r7, #30]
 8001076:	6a3a      	ldr	r2, [r7, #32]
 8001078:	429a      	cmp	r2, r3
 800107a:	dbcf      	blt.n	800101c <ILI9341_DrawChar+0x78>
	for (int j = 0; j < fHeight; j++) {
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	3301      	adds	r3, #1
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
 8001082:	7f7b      	ldrb	r3, [r7, #29]
 8001084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001086:	429a      	cmp	r2, r3
 8001088:	dbc5      	blt.n	8001016 <ILI9341_DrawChar+0x72>
 800108a:	e000      	b.n	800108e <ILI9341_DrawChar+0xea>
		return;
 800108c:	bf00      	nop
			}
		}
	}
}
 800108e:	372c      	adds	r7, #44	; 0x2c
 8001090:	46bd      	mov	sp, r7
 8001092:	bd90      	pop	{r4, r7, pc}

08001094 <ILI9341_DrawText>:
	}

}

void ILI9341_DrawText(const char *str, const uint8_t font[], uint16_t X,
		uint16_t Y, uint16_t color, uint16_t bgcolor) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af02      	add	r7, sp, #8
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	4611      	mov	r1, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	460b      	mov	r3, r1
 80010a4:	80fb      	strh	r3, [r7, #6]
 80010a6:	4613      	mov	r3, r2
 80010a8:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth; /* Width of character */
	uint8_t fOffset = font[0]; /* Offset of character */
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1]; /* Width of font */
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	3301      	adds	r3, #1
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	77bb      	strb	r3, [r7, #30]

	while (*str) {
 80010b8:	e02d      	b.n	8001116 <ILI9341_DrawText+0x82>
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	7818      	ldrb	r0, [r3, #0]
 80010be:	88b9      	ldrh	r1, [r7, #4]
 80010c0:	88fa      	ldrh	r2, [r7, #6]
 80010c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	460b      	mov	r3, r1
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	f7ff ff69 	bl	8000fa4 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*) &font[((*str - 0x20) * fOffset) + 4];
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	3b20      	subs	r3, #32
 80010d8:	7ffa      	ldrb	r2, [r7, #31]
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	3304      	adds	r3, #4
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	4413      	add	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	75fb      	strb	r3, [r7, #23]

		if (charWidth + 2 < fWidth) {
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	1c9a      	adds	r2, r3, #2
 80010f0:	7fbb      	ldrb	r3, [r7, #30]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	da07      	bge.n	8001106 <ILI9341_DrawText+0x72>
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	4413      	add	r3, r2
 80010fe:	b29b      	uxth	r3, r3
 8001100:	3302      	adds	r3, #2
 8001102:	80fb      	strh	r3, [r7, #6]
 8001104:	e004      	b.n	8001110 <ILI9341_DrawText+0x7c>
		} else {
			X += fWidth;
 8001106:	7fbb      	ldrb	r3, [r7, #30]
 8001108:	b29a      	uxth	r2, r3
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	4413      	add	r3, r2
 800110e:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3301      	adds	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1cd      	bne.n	80010ba <ILI9341_DrawText+0x26>
	}
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_SPI_TxCpltCallback+0x24>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d104      	bne.n	8001142 <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2102      	movs	r1, #2
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <HAL_SPI_TxCpltCallback+0x28>)
 800113e:	f002 fd27 	bl	8003b90 <HAL_GPIO_WritePin>
  }
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000148 	.word	0x20000148
 8001150:	40020800 	.word	0x40020800

08001154 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800115e:	bf00      	nop
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <ILI9341_SPI_Tx+0x30>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b02      	cmp	r3, #2
 800116c:	d1f8      	bne.n	8001160 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	2201      	movs	r2, #1
 8001172:	4619      	mov	r1, r3
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <ILI9341_SPI_Tx+0x30>)
 8001176:	f003 fb61 	bl	800483c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000148 	.word	0x20000148

08001188 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001194:	bf00      	nop
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <ILI9341_SPI_TxBuffer+0x30>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d1f8      	bne.n	8001196 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80011a4:	887b      	ldrh	r3, [r7, #2]
 80011a6:	461a      	mov	r2, r3
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <ILI9341_SPI_TxBuffer+0x30>)
 80011ac:	f003 fb46 	bl	800483c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000148 	.word	0x20000148

080011bc <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80011c6:	2200      	movs	r2, #0
 80011c8:	2104      	movs	r1, #4
 80011ca:	4808      	ldr	r0, [pc, #32]	; (80011ec <ILI9341_WriteCommand+0x30>)
 80011cc:	f002 fce0 	bl	8003b90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80011d0:	2200      	movs	r2, #0
 80011d2:	2102      	movs	r1, #2
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <ILI9341_WriteCommand+0x30>)
 80011d6:	f002 fcdb 	bl	8003b90 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ffb9 	bl	8001154 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020800 	.word	0x40020800

080011f0 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80011fa:	2201      	movs	r2, #1
 80011fc:	2104      	movs	r1, #4
 80011fe:	4808      	ldr	r0, [pc, #32]	; (8001220 <ILI9341_WriteData+0x30>)
 8001200:	f002 fcc6 	bl	8003b90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001204:	2200      	movs	r2, #0
 8001206:	2102      	movs	r1, #2
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <ILI9341_WriteData+0x30>)
 800120a:	f002 fcc1 	bl	8003b90 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff9f 	bl	8001154 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40020800 	.word	0x40020800

08001224 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001230:	2201      	movs	r2, #1
 8001232:	2104      	movs	r1, #4
 8001234:	4808      	ldr	r0, [pc, #32]	; (8001258 <ILI9341_WriteBuffer+0x34>)
 8001236:	f002 fcab 	bl	8003b90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800123a:	2200      	movs	r2, #0
 800123c:	2102      	movs	r1, #2
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <ILI9341_WriteBuffer+0x34>)
 8001240:	f002 fca6 	bl	8003b90 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	4619      	mov	r1, r3
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff9d 	bl	8001188 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40020800 	.word	0x40020800

0800125c <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	4611      	mov	r1, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4623      	mov	r3, r4
 800126c:	80fb      	strh	r3, [r7, #6]
 800126e:	4603      	mov	r3, r0
 8001270:	80bb      	strh	r3, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	807b      	strh	r3, [r7, #2]
 8001276:	4613      	mov	r3, r2
 8001278:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	b29b      	uxth	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	b29b      	uxth	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 800129a:	202a      	movs	r0, #42	; 0x2a
 800129c:	f7ff ff8e 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2104      	movs	r1, #4
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ffbc 	bl	8001224 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80012bc:	883b      	ldrh	r3, [r7, #0]
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80012c6:	883b      	ldrh	r3, [r7, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80012cc:	202b      	movs	r0, #43	; 0x2b
 80012ce:	f7ff ff75 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	2104      	movs	r1, #4
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ffa3 	bl	8001224 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80012de:	202c      	movs	r0, #44	; 0x2c
 80012e0:	f7ff ff6c 	bl	80011bc <ILI9341_WriteCommand>
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}

080012ec <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 80012f0:	2200      	movs	r2, #0
 80012f2:	2108      	movs	r1, #8
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <ILI9341_Reset+0x3c>)
 80012f6:	f002 fc4b 	bl	8003b90 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012fa:	200a      	movs	r0, #10
 80012fc:	f001 f972 	bl	80025e4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001300:	2200      	movs	r2, #0
 8001302:	2102      	movs	r1, #2
 8001304:	4808      	ldr	r0, [pc, #32]	; (8001328 <ILI9341_Reset+0x3c>)
 8001306:	f002 fc43 	bl	8003b90 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800130a:	200a      	movs	r0, #10
 800130c:	f001 f96a 	bl	80025e4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001310:	2201      	movs	r2, #1
 8001312:	2108      	movs	r1, #8
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <ILI9341_Reset+0x3c>)
 8001316:	f002 fc3b 	bl	8003b90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 800131a:	2201      	movs	r2, #1
 800131c:	2102      	movs	r1, #2
 800131e:	4802      	ldr	r0, [pc, #8]	; (8001328 <ILI9341_Reset+0x3c>)
 8001320:	f002 fc36 	bl	8003b90 <HAL_GPIO_WritePin>
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40020800 	.word	0x40020800

0800132c <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001330:	2201      	movs	r2, #1
 8001332:	2108      	movs	r1, #8
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <ILI9341_Enable+0x14>)
 8001336:	f002 fc2b 	bl	8003b90 <HAL_GPIO_WritePin>
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40020800 	.word	0x40020800

08001344 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001348:	f7ff fff0 	bl	800132c <ILI9341_Enable>
	ILI9341_Reset();
 800134c:	f7ff ffce 	bl	80012ec <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff ff33 	bl	80011bc <ILI9341_WriteCommand>
	HAL_Delay(10);
 8001356:	200a      	movs	r0, #10
 8001358:	f001 f944 	bl	80025e4 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 800135c:	20cb      	movs	r0, #203	; 0xcb
 800135e:	f7ff ff2d 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8001362:	2039      	movs	r0, #57	; 0x39
 8001364:	f7ff ff44 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8001368:	202c      	movs	r0, #44	; 0x2c
 800136a:	f7ff ff41 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff ff3e 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8001374:	2034      	movs	r0, #52	; 0x34
 8001376:	f7ff ff3b 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 800137a:	2002      	movs	r0, #2
 800137c:	f7ff ff38 	bl	80011f0 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8001380:	20cf      	movs	r0, #207	; 0xcf
 8001382:	f7ff ff1b 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff ff32 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 800138c:	20c1      	movs	r0, #193	; 0xc1
 800138e:	f7ff ff2f 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8001392:	2030      	movs	r0, #48	; 0x30
 8001394:	f7ff ff2c 	bl	80011f0 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8001398:	20e8      	movs	r0, #232	; 0xe8
 800139a:	f7ff ff0f 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 800139e:	2085      	movs	r0, #133	; 0x85
 80013a0:	f7ff ff26 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff ff23 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80013aa:	2078      	movs	r0, #120	; 0x78
 80013ac:	f7ff ff20 	bl	80011f0 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80013b0:	20ea      	movs	r0, #234	; 0xea
 80013b2:	f7ff ff03 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ff1a 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff ff17 	bl	80011f0 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80013c2:	20ed      	movs	r0, #237	; 0xed
 80013c4:	f7ff fefa 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80013c8:	2064      	movs	r0, #100	; 0x64
 80013ca:	f7ff ff11 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80013ce:	2003      	movs	r0, #3
 80013d0:	f7ff ff0e 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80013d4:	2012      	movs	r0, #18
 80013d6:	f7ff ff0b 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 80013da:	2081      	movs	r0, #129	; 0x81
 80013dc:	f7ff ff08 	bl	80011f0 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 80013e0:	20f7      	movs	r0, #247	; 0xf7
 80013e2:	f7ff feeb 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 80013e6:	2020      	movs	r0, #32
 80013e8:	f7ff ff02 	bl	80011f0 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 80013ec:	20c0      	movs	r0, #192	; 0xc0
 80013ee:	f7ff fee5 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 80013f2:	2023      	movs	r0, #35	; 0x23
 80013f4:	f7ff fefc 	bl	80011f0 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80013f8:	20c1      	movs	r0, #193	; 0xc1
 80013fa:	f7ff fedf 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80013fe:	2010      	movs	r0, #16
 8001400:	f7ff fef6 	bl	80011f0 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001404:	20c5      	movs	r0, #197	; 0xc5
 8001406:	f7ff fed9 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 800140a:	203e      	movs	r0, #62	; 0x3e
 800140c:	f7ff fef0 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001410:	2028      	movs	r0, #40	; 0x28
 8001412:	f7ff feed 	bl	80011f0 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8001416:	20c7      	movs	r0, #199	; 0xc7
 8001418:	f7ff fed0 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 800141c:	2086      	movs	r0, #134	; 0x86
 800141e:	f7ff fee7 	bl	80011f0 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8001422:	2036      	movs	r0, #54	; 0x36
 8001424:	f7ff feca 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001428:	2048      	movs	r0, #72	; 0x48
 800142a:	f7ff fee1 	bl	80011f0 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 800142e:	203a      	movs	r0, #58	; 0x3a
 8001430:	f7ff fec4 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001434:	2055      	movs	r0, #85	; 0x55
 8001436:	f7ff fedb 	bl	80011f0 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 800143a:	20b1      	movs	r0, #177	; 0xb1
 800143c:	f7ff febe 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff fed5 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8001446:	2018      	movs	r0, #24
 8001448:	f7ff fed2 	bl	80011f0 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 800144c:	20b6      	movs	r0, #182	; 0xb6
 800144e:	f7ff feb5 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8001452:	2008      	movs	r0, #8
 8001454:	f7ff fecc 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8001458:	2082      	movs	r0, #130	; 0x82
 800145a:	f7ff fec9 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 800145e:	2027      	movs	r0, #39	; 0x27
 8001460:	f7ff fec6 	bl	80011f0 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8001464:	20f2      	movs	r0, #242	; 0xf2
 8001466:	f7ff fea9 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fec0 	bl	80011f0 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001470:	2026      	movs	r0, #38	; 0x26
 8001472:	f7ff fea3 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff feba 	bl	80011f0 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 800147c:	20e0      	movs	r0, #224	; 0xe0
 800147e:	f7ff fe9d 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8001482:	200f      	movs	r0, #15
 8001484:	f7ff feb4 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001488:	2031      	movs	r0, #49	; 0x31
 800148a:	f7ff feb1 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 800148e:	202b      	movs	r0, #43	; 0x2b
 8001490:	f7ff feae 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001494:	200c      	movs	r0, #12
 8001496:	f7ff feab 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800149a:	200e      	movs	r0, #14
 800149c:	f7ff fea8 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80014a0:	2008      	movs	r0, #8
 80014a2:	f7ff fea5 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80014a6:	204e      	movs	r0, #78	; 0x4e
 80014a8:	f7ff fea2 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80014ac:	20f1      	movs	r0, #241	; 0xf1
 80014ae:	f7ff fe9f 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80014b2:	2037      	movs	r0, #55	; 0x37
 80014b4:	f7ff fe9c 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80014b8:	2007      	movs	r0, #7
 80014ba:	f7ff fe99 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80014be:	2010      	movs	r0, #16
 80014c0:	f7ff fe96 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f7ff fe93 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80014ca:	200e      	movs	r0, #14
 80014cc:	f7ff fe90 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80014d0:	2009      	movs	r0, #9
 80014d2:	f7ff fe8d 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fe8a 	bl	80011f0 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 80014dc:	20e1      	movs	r0, #225	; 0xe1
 80014de:	f7ff fe6d 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fe84 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80014e8:	200e      	movs	r0, #14
 80014ea:	f7ff fe81 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 80014ee:	2014      	movs	r0, #20
 80014f0:	f7ff fe7e 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80014f4:	2003      	movs	r0, #3
 80014f6:	f7ff fe7b 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 80014fa:	2011      	movs	r0, #17
 80014fc:	f7ff fe78 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001500:	2007      	movs	r0, #7
 8001502:	f7ff fe75 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001506:	2031      	movs	r0, #49	; 0x31
 8001508:	f7ff fe72 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 800150c:	20c1      	movs	r0, #193	; 0xc1
 800150e:	f7ff fe6f 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8001512:	2048      	movs	r0, #72	; 0x48
 8001514:	f7ff fe6c 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001518:	2008      	movs	r0, #8
 800151a:	f7ff fe69 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800151e:	200f      	movs	r0, #15
 8001520:	f7ff fe66 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001524:	200c      	movs	r0, #12
 8001526:	f7ff fe63 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800152a:	2031      	movs	r0, #49	; 0x31
 800152c:	f7ff fe60 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001530:	2036      	movs	r0, #54	; 0x36
 8001532:	f7ff fe5d 	bl	80011f0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001536:	200f      	movs	r0, #15
 8001538:	f7ff fe5a 	bl	80011f0 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 800153c:	2011      	movs	r0, #17
 800153e:	f7ff fe3d 	bl	80011bc <ILI9341_WriteCommand>
	HAL_Delay(100);
 8001542:	2064      	movs	r0, #100	; 0x64
 8001544:	f001 f84e 	bl	80025e4 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001548:	2029      	movs	r0, #41	; 0x29
 800154a:	f7ff fe37 	bl	80011bc <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800154e:	2000      	movs	r0, #0
 8001550:	f000 f802 	bl	8001558 <ILI9341_SetRotation>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8001562:	2036      	movs	r0, #54	; 0x36
 8001564:	f7ff fe2a 	bl	80011bc <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001568:	2001      	movs	r0, #1
 800156a:	f001 f83b 	bl	80025e4 <HAL_Delay>

	switch(rotation)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b03      	cmp	r3, #3
 8001572:	d837      	bhi.n	80015e4 <ILI9341_SetRotation+0x8c>
 8001574:	a201      	add	r2, pc, #4	; (adr r2, 800157c <ILI9341_SetRotation+0x24>)
 8001576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157a:	bf00      	nop
 800157c:	0800158d 	.word	0x0800158d
 8001580:	080015a3 	.word	0x080015a3
 8001584:	080015b9 	.word	0x080015b9
 8001588:	080015cf 	.word	0x080015cf
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 800158c:	2048      	movs	r0, #72	; 0x48
 800158e:	f7ff fe2f 	bl	80011f0 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <ILI9341_SetRotation+0x98>)
 8001594:	22f0      	movs	r2, #240	; 0xf0
 8001596:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <ILI9341_SetRotation+0x9c>)
 800159a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800159e:	801a      	strh	r2, [r3, #0]
		break;
 80015a0:	e021      	b.n	80015e6 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80015a2:	2028      	movs	r0, #40	; 0x28
 80015a4:	f7ff fe24 	bl	80011f0 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <ILI9341_SetRotation+0x98>)
 80015aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015ae:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <ILI9341_SetRotation+0x9c>)
 80015b2:	22f0      	movs	r2, #240	; 0xf0
 80015b4:	801a      	strh	r2, [r3, #0]
		break;
 80015b6:	e016      	b.n	80015e6 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80015b8:	2088      	movs	r0, #136	; 0x88
 80015ba:	f7ff fe19 	bl	80011f0 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <ILI9341_SetRotation+0x98>)
 80015c0:	22f0      	movs	r2, #240	; 0xf0
 80015c2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <ILI9341_SetRotation+0x9c>)
 80015c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015ca:	801a      	strh	r2, [r3, #0]
		break;
 80015cc:	e00b      	b.n	80015e6 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80015ce:	20e8      	movs	r0, #232	; 0xe8
 80015d0:	f7ff fe0e 	bl	80011f0 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <ILI9341_SetRotation+0x98>)
 80015d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015da:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <ILI9341_SetRotation+0x9c>)
 80015de:	22f0      	movs	r2, #240	; 0xf0
 80015e0:	801a      	strh	r2, [r3, #0]
		break;
 80015e2:	e000      	b.n	80015e6 <ILI9341_SetRotation+0x8e>
	default:
		break;
 80015e4:	bf00      	nop
	}
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000002 	.word	0x20000002
 80015f4:	20000000 	.word	0x20000000

080015f8 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 80015f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015fc:	b08d      	sub	sp, #52	; 0x34
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	6039      	str	r1, [r7, #0]
 8001604:	80fb      	strh	r3, [r7, #6]
 8001606:	466b      	mov	r3, sp
 8001608:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c

	if((size*2) < BURST_MAX_SIZE)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001616:	d202      	bcs.n	800161e <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800161c:	e002      	b.n	8001624 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 800161e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	2104      	movs	r1, #4
 8001628:	483e      	ldr	r0, [pc, #248]	; (8001724 <ILI9341_DrawColorBurst+0x12c>)
 800162a:	f002 fab1 	bl	8003b90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	2102      	movs	r1, #2
 8001632:	483c      	ldr	r0, [pc, #240]	; (8001724 <ILI9341_DrawColorBurst+0x12c>)
 8001634:	f002 faac 	bl	8003b90 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	b29b      	uxth	r3, r3
 800163e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8001642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001644:	460b      	mov	r3, r1
 8001646:	3b01      	subs	r3, #1
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	2300      	movs	r3, #0
 800164c:	4688      	mov	r8, r1
 800164e:	4699      	mov	r9, r3
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800165c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001660:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001664:	2300      	movs	r3, #0
 8001666:	460c      	mov	r4, r1
 8001668:	461d      	mov	r5, r3
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	00eb      	lsls	r3, r5, #3
 8001674:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001678:	00e2      	lsls	r2, r4, #3
 800167a:	1dcb      	adds	r3, r1, #7
 800167c:	08db      	lsrs	r3, r3, #3
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	ebad 0d03 	sub.w	sp, sp, r3
 8001684:	466b      	mov	r3, sp
 8001686:	3300      	adds	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 800168a:	2300      	movs	r3, #0
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
 800168e:	e00e      	b.n	80016ae <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001694:	4413      	add	r3, r2
 8001696:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800169a:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 800169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169e:	3301      	adds	r3, #1
 80016a0:	88fa      	ldrh	r2, [r7, #6]
 80016a2:	b2d1      	uxtb	r1, r2
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80016a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016aa:	3302      	adds	r3, #2
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d3ec      	bcc.n	8001690 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c4:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80016ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016d0:	fb01 f202 	mul.w	r2, r1, r2
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d010      	beq.n	8001700 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
 80016e2:	e009      	b.n	80016f8 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 80016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	230a      	movs	r3, #10
 80016ea:	69b9      	ldr	r1, [r7, #24]
 80016ec:	480e      	ldr	r0, [pc, #56]	; (8001728 <ILI9341_DrawColorBurst+0x130>)
 80016ee:	f002 ff62 	bl	80045b6 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	3301      	adds	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
 80016f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d3f1      	bcc.n	80016e4 <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	b29a      	uxth	r2, r3
 8001704:	230a      	movs	r3, #10
 8001706:	69b9      	ldr	r1, [r7, #24]
 8001708:	4807      	ldr	r0, [pc, #28]	; (8001728 <ILI9341_DrawColorBurst+0x130>)
 800170a:	f002 ff54 	bl	80045b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800170e:	2201      	movs	r2, #1
 8001710:	2102      	movs	r1, #2
 8001712:	4804      	ldr	r0, [pc, #16]	; (8001724 <ILI9341_DrawColorBurst+0x12c>)
 8001714:	f002 fa3c 	bl	8003b90 <HAL_GPIO_WritePin>
 8001718:	46b5      	mov	sp, r6
}
 800171a:	bf00      	nop
 800171c:	3734      	adds	r7, #52	; 0x34
 800171e:	46bd      	mov	sp, r7
 8001720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001724:	40020800 	.word	0x40020800
 8001728:	20000148 	.word	0x20000148

0800172c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <ILI9341_FillScreen+0x44>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	b29a      	uxth	r2, r3
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <ILI9341_FillScreen+0x48>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	b29b      	uxth	r3, r3
 8001742:	2100      	movs	r1, #0
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff fd89 	bl	800125c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <ILI9341_FillScreen+0x44>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <ILI9341_FillScreen+0x48>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	fb02 f303 	mul.w	r3, r2, r3
 800175c:	461a      	mov	r2, r3
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff48 	bl	80015f8 <ILI9341_DrawColorBurst>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000002 	.word	0x20000002
 8001774:	20000000 	.word	0x20000000

08001778 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	460b      	mov	r3, r1
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800178a:	4b2c      	ldr	r3, [pc, #176]	; (800183c <ILI9341_DrawPixel+0xc4>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b29b      	uxth	r3, r3
 8001790:	88fa      	ldrh	r2, [r7, #6]
 8001792:	429a      	cmp	r2, r3
 8001794:	d24d      	bcs.n	8001832 <ILI9341_DrawPixel+0xba>
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <ILI9341_DrawPixel+0xc8>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	b29b      	uxth	r3, r3
 800179c:	88ba      	ldrh	r2, [r7, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d247      	bcs.n	8001832 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	753b      	strb	r3, [r7, #20]
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	757b      	strb	r3, [r7, #21]
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	3301      	adds	r3, #1
 80017b6:	121b      	asrs	r3, r3, #8
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	75bb      	strb	r3, [r7, #22]
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	743b      	strb	r3, [r7, #16]
 80017d0:	88bb      	ldrh	r3, [r7, #4]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	747b      	strb	r3, [r7, #17]
 80017d6:	88bb      	ldrh	r3, [r7, #4]
 80017d8:	3301      	adds	r3, #1
 80017da:	121b      	asrs	r3, r3, #8
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	74bb      	strb	r3, [r7, #18]
 80017e0:	88bb      	ldrh	r3, [r7, #4]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	733b      	strb	r3, [r7, #12]
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 80017fa:	202a      	movs	r0, #42	; 0x2a
 80017fc:	f7ff fcde 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2104      	movs	r1, #4
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fd0c 	bl	8001224 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 800180c:	202b      	movs	r0, #43	; 0x2b
 800180e:	f7ff fcd5 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8001812:	f107 0310 	add.w	r3, r7, #16
 8001816:	2104      	movs	r1, #4
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fd03 	bl	8001224 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 800181e:	202c      	movs	r0, #44	; 0x2c
 8001820:	f7ff fccc 	bl	80011bc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2102      	movs	r1, #2
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fcfa 	bl	8001224 <ILI9341_WriteBuffer>
 8001830:	e000      	b.n	8001834 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001832:	bf00      	nop
}
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000002 	.word	0x20000002
 8001840:	20000000 	.word	0x20000000

08001844 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4604      	mov	r4, r0
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4623      	mov	r3, r4
 8001854:	80fb      	strh	r3, [r7, #6]
 8001856:	4603      	mov	r3, r0
 8001858:	80bb      	strh	r3, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	807b      	strh	r3, [r7, #2]
 800185e:	4613      	mov	r3, r2
 8001860:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <ILI9341_DrawRectangle+0xb0>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	b29b      	uxth	r3, r3
 8001868:	88fa      	ldrh	r2, [r7, #6]
 800186a:	429a      	cmp	r2, r3
 800186c:	d23d      	bcs.n	80018ea <ILI9341_DrawRectangle+0xa6>
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <ILI9341_DrawRectangle+0xb4>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	88ba      	ldrh	r2, [r7, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	d237      	bcs.n	80018ea <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 800187a:	88fa      	ldrh	r2, [r7, #6]
 800187c:	887b      	ldrh	r3, [r7, #2]
 800187e:	4413      	add	r3, r2
 8001880:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <ILI9341_DrawRectangle+0xb0>)
 8001882:	8812      	ldrh	r2, [r2, #0]
 8001884:	b292      	uxth	r2, r2
 8001886:	4293      	cmp	r3, r2
 8001888:	dd05      	ble.n	8001896 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <ILI9341_DrawRectangle+0xb0>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	b29a      	uxth	r2, r3
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001896:	88ba      	ldrh	r2, [r7, #4]
 8001898:	883b      	ldrh	r3, [r7, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <ILI9341_DrawRectangle+0xb4>)
 800189e:	8812      	ldrh	r2, [r2, #0]
 80018a0:	b292      	uxth	r2, r2
 80018a2:	4293      	cmp	r3, r2
 80018a4:	dd05      	ble.n	80018b2 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <ILI9341_DrawRectangle+0xb4>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80018b2:	88fa      	ldrh	r2, [r7, #6]
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	4413      	add	r3, r2
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29c      	uxth	r4, r3
 80018be:	88ba      	ldrh	r2, [r7, #4]
 80018c0:	883b      	ldrh	r3, [r7, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	88b9      	ldrh	r1, [r7, #4]
 80018cc:	88f8      	ldrh	r0, [r7, #6]
 80018ce:	4622      	mov	r2, r4
 80018d0:	f7ff fcc4 	bl	800125c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 80018d4:	883b      	ldrh	r3, [r7, #0]
 80018d6:	887a      	ldrh	r2, [r7, #2]
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	8b3b      	ldrh	r3, [r7, #24]
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fe88 	bl	80015f8 <ILI9341_DrawColorBurst>
 80018e8:	e000      	b.n	80018ec <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80018ea:	bf00      	nop
}
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd90      	pop	{r4, r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000002 	.word	0x20000002
 80018f8:	20000000 	.word	0x20000000

080018fc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001902:	463b      	mov	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800190e:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <MX_ADC1_Init+0xb4>)
 8001910:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <MX_ADC1_Init+0xb8>)
 8001912:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <MX_ADC1_Init+0xb4>)
 8001916:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800191a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <MX_ADC1_Init+0xb4>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001922:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <MX_ADC1_Init+0xb4>)
 8001924:	2201      	movs	r2, #1
 8001926:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <MX_ADC1_Init+0xb4>)
 800192a:	2201      	movs	r2, #1
 800192c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <MX_ADC1_Init+0xb4>)
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <MX_ADC1_Init+0xb4>)
 8001938:	2200      	movs	r2, #0
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_ADC1_Init+0xb4>)
 800193e:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <MX_ADC1_Init+0xbc>)
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_ADC1_Init+0xb4>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_ADC1_Init+0xb4>)
 800194a:	2202      	movs	r2, #2
 800194c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_ADC1_Init+0xb4>)
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_ADC1_Init+0xb4>)
 8001958:	2201      	movs	r2, #1
 800195a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800195c:	4814      	ldr	r0, [pc, #80]	; (80019b0 <MX_ADC1_Init+0xb4>)
 800195e:	f000 fe65 	bl	800262c <HAL_ADC_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001968:	f000 fb64 	bl	8002034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800196c:	2300      	movs	r3, #0
 800196e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001970:	2301      	movs	r3, #1
 8001972:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001974:	2307      	movs	r3, #7
 8001976:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <MX_ADC1_Init+0xb4>)
 800197e:	f000 ffa7 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001988:	f000 fb54 	bl	8002034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800198c:	2301      	movs	r3, #1
 800198e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001990:	2302      	movs	r3, #2
 8001992:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_ADC1_Init+0xb4>)
 800199a:	f000 ff99 	bl	80028d0 <HAL_ADC_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80019a4:	f000 fb46 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2000008c 	.word	0x2000008c
 80019b4:	40012000 	.word	0x40012000
 80019b8:	0f000001 	.word	0x0f000001

080019bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2f      	ldr	r2, [pc, #188]	; (8001a98 <HAL_ADC_MspInit+0xdc>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d157      	bne.n	8001a8e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <HAL_ADC_MspInit+0xe0>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a2d      	ldr	r2, [pc, #180]	; (8001a9c <HAL_ADC_MspInit+0xe0>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_ADC_MspInit+0xe0>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_ADC_MspInit+0xe0>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_ADC_MspInit+0xe0>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_ADC_MspInit+0xe0>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a16:	2303      	movs	r3, #3
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	481d      	ldr	r0, [pc, #116]	; (8001aa0 <HAL_ADC_MspInit+0xe4>)
 8001a2a:	f001 ff15 	bl	8003858 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <HAL_ADC_MspInit+0xe8>)
 8001a30:	4a1d      	ldr	r2, [pc, #116]	; (8001aa8 <HAL_ADC_MspInit+0xec>)
 8001a32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_ADC_MspInit+0xe8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_ADC_MspInit+0xe8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_ADC_MspInit+0xe8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_ADC_MspInit+0xe8>)
 8001a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_ADC_MspInit+0xe8>)
 8001a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_ADC_MspInit+0xe8>)
 8001a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_ADC_MspInit+0xe8>)
 8001a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_ADC_MspInit+0xe8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_ADC_MspInit+0xe8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a72:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <HAL_ADC_MspInit+0xe8>)
 8001a74:	f001 faee 	bl	8003054 <HAL_DMA_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001a7e:	f000 fad9 	bl	8002034 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_ADC_MspInit+0xe8>)
 8001a86:	639a      	str	r2, [r3, #56]	; 0x38
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_ADC_MspInit+0xe8>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40012000 	.word	0x40012000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	200000d4 	.word	0x200000d4
 8001aa8:	40026410 	.word	0x40026410

08001aac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <MX_DMA_Init+0x4c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <MX_DMA_Init+0x4c>)
 8001abc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <MX_DMA_Init+0x4c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2038      	movs	r0, #56	; 0x38
 8001ad4:	f001 fa87 	bl	8002fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ad8:	2038      	movs	r0, #56	; 0x38
 8001ada:	f001 faa0 	bl	800301e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	203a      	movs	r0, #58	; 0x3a
 8001ae4:	f001 fa7f 	bl	8002fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ae8:	203a      	movs	r0, #58	; 0x3a
 8001aea:	f001 fa98 	bl	800301e <HAL_NVIC_EnableIRQ>

}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800

08001afc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <MX_GPIO_Init+0xe0>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a30      	ldr	r2, [pc, #192]	; (8001bdc <MX_GPIO_Init+0xe0>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <MX_GPIO_Init+0xe0>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <MX_GPIO_Init+0xe0>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a29      	ldr	r2, [pc, #164]	; (8001bdc <MX_GPIO_Init+0xe0>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <MX_GPIO_Init+0xe0>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <MX_GPIO_Init+0xe0>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a22      	ldr	r2, [pc, #136]	; (8001bdc <MX_GPIO_Init+0xe0>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <MX_GPIO_Init+0xe0>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	210e      	movs	r1, #14
 8001b6a:	481d      	ldr	r0, [pc, #116]	; (8001be0 <MX_GPIO_Init+0xe4>)
 8001b6c:	f002 f810 	bl	8003b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8001b70:	230e      	movs	r3, #14
 8001b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	4619      	mov	r1, r3
 8001b86:	4816      	ldr	r0, [pc, #88]	; (8001be0 <MX_GPIO_Init+0xe4>)
 8001b88:	f001 fe66 	bl	8003858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button1_Pin;
 8001b8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button1_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4810      	ldr	r0, [pc, #64]	; (8001be4 <MX_GPIO_Init+0xe8>)
 8001ba4:	f001 fe58 	bl	8003858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button2_Pin;
 8001ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button2_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4809      	ldr	r0, [pc, #36]	; (8001be4 <MX_GPIO_Init+0xe8>)
 8001bbe:	f001 fe4b 	bl	8003858 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2028      	movs	r0, #40	; 0x28
 8001bc8:	f001 fa0d 	bl	8002fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bcc:	2028      	movs	r0, #40	; 0x28
 8001bce:	f001 fa26 	bl	800301e <HAL_NVIC_EnableIRQ>

}
 8001bd2:	bf00      	nop
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020400 	.word	0x40020400

08001be8 <dataToBlue>:
 *
 *  Created on: Apr 12, 2024
 *      Author: myhg1
 */
#include "joystick.h"
void dataToBlue(uint8_t data){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit_IT(&huart1, &data, 1);
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <dataToBlue+0x24>)
 8001bfa:	f003 f99b 	bl	8004f34 <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 8001bfe:	200a      	movs	r0, #10
 8001c00:	f000 fcf0 	bl	80025e4 <HAL_Delay>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000200 	.word	0x20000200

08001c10 <adcData_Filt>:

void adcData_Filt(uint16_t* buf, uint16_t* Xfilt, uint16_t* Yfilt){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]

	#define X 0.60f

	*Xfilt = *Xfilt * X + buf[0] * (1.0f - X);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c28:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001cac <adcData_Filt+0x9c>
 8001c2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001cb0 <adcData_Filt+0xa0>
 8001c40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4e:	ee17 2a90 	vmov	r2, s15
 8001c52:	b292      	uxth	r2, r2
 8001c54:	801a      	strh	r2, [r3, #0]
	*Yfilt = *Yfilt * X + buf[1] * (1.0f - X);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c62:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001cac <adcData_Filt+0x9c>
 8001c66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	ee07 3a90 	vmov	s15, r3
 8001c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c78:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001cb0 <adcData_Filt+0xa0>
 8001c7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c8a:	ee17 2a90 	vmov	r2, s15
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	801a      	strh	r2, [r3, #0]

//	printf("%d,%d,%d,%d\n",buf[0],buf[1],*Xfilt,*Yfilt);

	adcDataMaxMin(&Xfilt);
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f87c 	bl	8001d94 <adcDataMaxMin>
	adcDataMaxMin(&Yfilt);
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f878 	bl	8001d94 <adcDataMaxMin>
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	3f19999a 	.word	0x3f19999a
 8001cb0:	3ecccccc 	.word	0x3ecccccc

08001cb4 <dataTransmit>:
void dataTransmit(uint16_t Xdata, uint16_t Ydata, uint8_t mode, uint8_t horn){
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	80fb      	strh	r3, [r7, #6]
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80bb      	strh	r3, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70fb      	strb	r3, [r7, #3]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	70bb      	strb	r3, [r7, #2]

		uint8_t tx_data1,tx_data2,tx_data3,tx_data4;
		tx_data1= Xdata>>8;
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	73fb      	strb	r3, [r7, #15]
		tx_data2= Xdata;
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	737b      	strb	r3, [r7, #13]
		tx_data3= Ydata>>8;
 8001cde:	88bb      	ldrh	r3, [r7, #4]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	73bb      	strb	r3, [r7, #14]
		tx_data4= Ydata;
 8001ce6:	88bb      	ldrh	r3, [r7, #4]
 8001ce8:	733b      	strb	r3, [r7, #12]
		switch (mode) {
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d81a      	bhi.n	8001d26 <dataTransmit+0x72>
 8001cf0:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <dataTransmit+0x44>)
 8001cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf6:	bf00      	nop
 8001cf8:	08001d27 	.word	0x08001d27
 8001cfc:	08001d09 	.word	0x08001d09
 8001d00:	08001d13 	.word	0x08001d13
 8001d04:	08001d1d 	.word	0x08001d1d
			case STOP:
				tx_data1 |= 0x00;
				break;
			case MANUAL:
				tx_data1 |= 0x10;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	f043 0310 	orr.w	r3, r3, #16
 8001d0e:	73fb      	strb	r3, [r7, #15]
				break;
 8001d10:	e009      	b.n	8001d26 <dataTransmit+0x72>
			case AUTO:
				tx_data1 |= 0x20;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	f043 0320 	orr.w	r3, r3, #32
 8001d18:	73fb      	strb	r3, [r7, #15]
				break;
 8001d1a:	e004      	b.n	8001d26 <dataTransmit+0x72>
			case SAFEDRIVE:
				tx_data1 |= 0x30;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001d22:	73fb      	strb	r3, [r7, #15]
				break;
 8001d24:	bf00      	nop
		}
		switch (horn){
 8001d26:	78bb      	ldrb	r3, [r7, #2]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <dataTransmit+0x86>
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d105      	bne.n	8001d3c <dataTransmit+0x88>
		case HORN_OFF:
			tx_data3 |= 0x00;
			break;
		case HORN_ON:
			tx_data3 |= 0x10;
 8001d30:	7bbb      	ldrb	r3, [r7, #14]
 8001d32:	f043 0310 	orr.w	r3, r3, #16
 8001d36:	73bb      	strb	r3, [r7, #14]
			break;
 8001d38:	e000      	b.n	8001d3c <dataTransmit+0x88>
			break;
 8001d3a:	bf00      	nop
		}

		uint8_t chksum=0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	72fb      	strb	r3, [r7, #11]
		chksum = STX + ETX + tx_data1 + tx_data2 + tx_data3 + tx_data4;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	7b7b      	ldrb	r3, [r7, #13]
 8001d44:	4413      	add	r3, r2
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	7bbb      	ldrb	r3, [r7, #14]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	7b3b      	ldrb	r3, [r7, #12]
 8001d50:	4413      	add	r3, r2
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	3b5f      	subs	r3, #95	; 0x5f
 8001d56:	72fb      	strb	r3, [r7, #11]

		dataToBlue(STX);
 8001d58:	2048      	movs	r0, #72	; 0x48
 8001d5a:	f7ff ff45 	bl	8001be8 <dataToBlue>
		dataToBlue(ETX);
 8001d5e:	2059      	movs	r0, #89	; 0x59
 8001d60:	f7ff ff42 	bl	8001be8 <dataToBlue>
		dataToBlue(tx_data1);
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff3e 	bl	8001be8 <dataToBlue>
		dataToBlue(tx_data2);
 8001d6c:	7b7b      	ldrb	r3, [r7, #13]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff3a 	bl	8001be8 <dataToBlue>
		dataToBlue(tx_data3);
 8001d74:	7bbb      	ldrb	r3, [r7, #14]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff36 	bl	8001be8 <dataToBlue>
		dataToBlue(tx_data4);
 8001d7c:	7b3b      	ldrb	r3, [r7, #12]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff32 	bl	8001be8 <dataToBlue>
		dataToBlue(chksum);
 8001d84:	7afb      	ldrb	r3, [r7, #11]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff2e 	bl	8001be8 <dataToBlue>

//  	printf("%c,%c,%d,%d,%d,%d,%d\n",STX,ETX,tx_data1,tx_data2,tx_data3,tx_data4,chksum);

}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}

08001d94 <adcDataMaxMin>:

void adcDataMaxMin(uint16_t *data) {
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	if (*data > 4096) {
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da4:	d903      	bls.n	8001dae <adcDataMaxMin+0x1a>
		*data = 4096;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dac:	801a      	strh	r2, [r3, #0]
	}
	if (*data < 15) {
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	2b0e      	cmp	r3, #14
 8001db4:	d802      	bhi.n	8001dbc <adcDataMaxMin+0x28>
		*data = 0;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	801a      	strh	r2, [r3, #0]
	}
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001dcc:	f000 fb98 	bl	8002500 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001dd0:	f000 f850 	bl	8001e74 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001dd4:	f7ff fe92 	bl	8001afc <MX_GPIO_Init>
	MX_DMA_Init();
 8001dd8:	f7ff fe68 	bl	8001aac <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001ddc:	f000 fab0 	bl	8002340 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001de0:	f7ff fd8c 	bl	80018fc <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8001de4:	f000 fa82 	bl	80022ec <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8001de8:	f000 f92a 	bl	8002040 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart1, &uart1_buf, 1);
 8001dec:	2201      	movs	r2, #1
 8001dee:	4917      	ldr	r1, [pc, #92]	; (8001e4c <main+0x84>)
 8001df0:	4817      	ldr	r0, [pc, #92]	; (8001e50 <main+0x88>)
 8001df2:	f003 f8d5 	bl	8004fa0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &uart2_buf, 1);
 8001df6:	2201      	movs	r2, #1
 8001df8:	4916      	ldr	r1, [pc, #88]	; (8001e54 <main+0x8c>)
 8001dfa:	4817      	ldr	r0, [pc, #92]	; (8001e58 <main+0x90>)
 8001dfc:	f003 f8d0 	bl	8004fa0 <HAL_UART_Receive_IT>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcVal_buf, 2);
 8001e00:	2202      	movs	r2, #2
 8001e02:	4916      	ldr	r1, [pc, #88]	; (8001e5c <main+0x94>)
 8001e04:	4816      	ldr	r0, [pc, #88]	; (8001e60 <main+0x98>)
 8001e06:	f000 fc55 	bl	80026b4 <HAL_ADC_Start_DMA>

	CLCD_INIT();
 8001e0a:	f7fe fff7 	bl	8000dfc <CLCD_INIT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		adcData_Filt(&adcVal_buf, &adcValfiltX, &adcValfiltY);
 8001e0e:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <main+0x9c>)
 8001e10:	4915      	ldr	r1, [pc, #84]	; (8001e68 <main+0xa0>)
 8001e12:	4812      	ldr	r0, [pc, #72]	; (8001e5c <main+0x94>)
 8001e14:	f7ff fefc 	bl	8001c10 <adcData_Filt>
		Button2_check();
 8001e18:	f000 f8f4 	bl	8002004 <Button2_check>
		dataTransmit(adcValfiltX, adcValfiltY, modeState, button2);
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <main+0xa0>)
 8001e1e:	8818      	ldrh	r0, [r3, #0]
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <main+0x9c>)
 8001e22:	8819      	ldrh	r1, [r3, #0]
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <main+0xa4>)
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <main+0xa8>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	f7ff ff42 	bl	8001cb4 <dataTransmit>
		LCD_controller((int) adcValfiltX - 2040, (int) adcValfiltY - 2040,modeState);
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <main+0xa0>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8001e38:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <main+0x9c>)
 8001e3a:	8812      	ldrh	r2, [r2, #0]
 8001e3c:	f5a2 61ff 	sub.w	r1, r2, #2040	; 0x7f8
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <main+0xa4>)
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe ffe7 	bl	8000e18 <LCD_controller>
	while (1) {
 8001e4a:	e7e0      	b.n	8001e0e <main+0x46>
 8001e4c:	20000136 	.word	0x20000136
 8001e50:	20000200 	.word	0x20000200
 8001e54:	20000137 	.word	0x20000137
 8001e58:	20000248 	.word	0x20000248
 8001e5c:	20000138 	.word	0x20000138
 8001e60:	2000008c 	.word	0x2000008c
 8001e64:	20000140 	.word	0x20000140
 8001e68:	2000013e 	.word	0x2000013e
 8001e6c:	20000134 	.word	0x20000134
 8001e70:	20000135 	.word	0x20000135

08001e74 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b094      	sub	sp, #80	; 0x50
 8001e78:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e7a:	f107 0320 	add.w	r3, r7, #32
 8001e7e:	2230      	movs	r2, #48	; 0x30
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 f80c 	bl	8005ea0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <SystemClock_Config+0xc8>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <SystemClock_Config+0xc8>)
 8001ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <SystemClock_Config+0xc8>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <SystemClock_Config+0xcc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <SystemClock_Config+0xcc>)
 8001ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <SystemClock_Config+0xcc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed8:	2310      	movs	r3, #16
 8001eda:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001edc:	2302      	movs	r3, #2
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001ee8:	2364      	movs	r3, #100	; 0x64
 8001eea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eec:	2302      	movs	r3, #2
 8001eee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ef4:	f107 0320 	add.w	r3, r7, #32
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f001 fe7b 	bl	8003bf4 <HAL_RCC_OscConfig>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <SystemClock_Config+0x94>
		Error_Handler();
 8001f04:	f000 f896 	bl	8002034 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f08:	230f      	movs	r3, #15
 8001f0a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f18:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	2103      	movs	r1, #3
 8001f24:	4618      	mov	r0, r3
 8001f26:	f002 f8dd 	bl	80040e4 <HAL_RCC_ClockConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <SystemClock_Config+0xc0>
		Error_Handler();
 8001f30:	f000 f880 	bl	8002034 <Error_Handler>
	}
}
 8001f34:	bf00      	nop
 8001f36:	3750      	adds	r7, #80	; 0x50
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40007000 	.word	0x40007000

08001f44 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <HAL_UART_RxCpltCallback+0x4c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d109      	bne.n	8001f6a <HAL_UART_RxCpltCallback+0x26>
		HAL_UART_Receive_IT(&huart1, &uart1_buf, 1);
 8001f56:	2201      	movs	r2, #1
 8001f58:	490e      	ldr	r1, [pc, #56]	; (8001f94 <HAL_UART_RxCpltCallback+0x50>)
 8001f5a:	480f      	ldr	r0, [pc, #60]	; (8001f98 <HAL_UART_RxCpltCallback+0x54>)
 8001f5c:	f003 f820 	bl	8004fa0 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart2, &uart1_buf, 1);
 8001f60:	2201      	movs	r2, #1
 8001f62:	490c      	ldr	r1, [pc, #48]	; (8001f94 <HAL_UART_RxCpltCallback+0x50>)
 8001f64:	480d      	ldr	r0, [pc, #52]	; (8001f9c <HAL_UART_RxCpltCallback+0x58>)
 8001f66:	f002 ffe5 	bl	8004f34 <HAL_UART_Transmit_IT>
	}
	if (huart->Instance == USART2) {
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a0c      	ldr	r2, [pc, #48]	; (8001fa0 <HAL_UART_RxCpltCallback+0x5c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d109      	bne.n	8001f88 <HAL_UART_RxCpltCallback+0x44>
		HAL_UART_Receive_IT(&huart2, &uart2_buf, 1);
 8001f74:	2201      	movs	r2, #1
 8001f76:	490b      	ldr	r1, [pc, #44]	; (8001fa4 <HAL_UART_RxCpltCallback+0x60>)
 8001f78:	4808      	ldr	r0, [pc, #32]	; (8001f9c <HAL_UART_RxCpltCallback+0x58>)
 8001f7a:	f003 f811 	bl	8004fa0 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart1, &uart2_buf, 1);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4908      	ldr	r1, [pc, #32]	; (8001fa4 <HAL_UART_RxCpltCallback+0x60>)
 8001f82:	4805      	ldr	r0, [pc, #20]	; (8001f98 <HAL_UART_RxCpltCallback+0x54>)
 8001f84:	f002 ffd6 	bl	8004f34 <HAL_UART_Transmit_IT>
	}
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40011000 	.word	0x40011000
 8001f94:	20000136 	.word	0x20000136
 8001f98:	20000200 	.word	0x20000200
 8001f9c:	20000248 	.word	0x20000248
 8001fa0:	40004400 	.word	0x40004400
 8001fa4:	20000137 	.word	0x20000137

08001fa8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80fb      	strh	r3, [r7, #6]
	static uint32_t before_tick1 = 0;

	if (GPIO_Pin == button1_Pin) {
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fb8:	d11b      	bne.n	8001ff2 <HAL_GPIO_EXTI_Callback+0x4a>
		if (HAL_GetTick() - before_tick1 >= 300) {
 8001fba:	f000 fb07 	bl	80025cc <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_GPIO_EXTI_Callback+0x54>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001fca:	d312      	bcc.n	8001ff2 <HAL_GPIO_EXTI_Callback+0x4a>
			before_tick1 = HAL_GetTick();
 8001fcc:	f000 fafe 	bl	80025cc <HAL_GetTick>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_GPIO_EXTI_Callback+0x54>)
 8001fd4:	6013      	str	r3, [r2, #0]
			if (modeState < 3)
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_GPIO_EXTI_Callback+0x58>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d806      	bhi.n	8001fec <HAL_GPIO_EXTI_Callback+0x44>
				modeState++;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_GPIO_EXTI_Callback+0x58>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_GPIO_EXTI_Callback+0x58>)
 8001fe8:	701a      	strb	r2, [r3, #0]
			else
				modeState = STOP;
		}
	}
}
 8001fea:	e002      	b.n	8001ff2 <HAL_GPIO_EXTI_Callback+0x4a>
				modeState = STOP;
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <HAL_GPIO_EXTI_Callback+0x58>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000144 	.word	0x20000144
 8002000:	20000134 	.word	0x20000134

08002004 <Button2_check>:
void Button2_check() {
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin))
 8002008:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800200c:	4807      	ldr	r0, [pc, #28]	; (800202c <Button2_check+0x28>)
 800200e:	f001 fda7 	bl	8003b60 <HAL_GPIO_ReadPin>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <Button2_check+0x1c>
		button2 = HORN_OFF;
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <Button2_check+0x2c>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
	else
		button2 = HORN_ON;
}
 800201e:	e002      	b.n	8002026 <Button2_check+0x22>
		button2 = HORN_ON;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <Button2_check+0x2c>)
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40020400 	.word	0x40020400
 8002030:	20000135 	.word	0x20000135

08002034 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002038:	b672      	cpsid	i
}
 800203a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800203c:	e7fe      	b.n	800203c <Error_Handler+0x8>
	...

08002040 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <MX_SPI1_Init+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <MX_SPI1_Init+0x64>)
 800204c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002050:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <MX_SPI1_Init+0x64>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_SPI1_Init+0x64>)
 800206c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002070:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002074:	2200      	movs	r2, #0
 8002076:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <MX_SPI1_Init+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_SPI1_Init+0x64>)
 800208c:	220a      	movs	r2, #10
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002092:	f002 fa07 	bl	80044a4 <HAL_SPI_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800209c:	f7ff ffca 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000148 	.word	0x20000148
 80020a8:	40013000 	.word	0x40013000

080020ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a34      	ldr	r2, [pc, #208]	; (800219c <HAL_SPI_MspInit+0xf0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d161      	bne.n	8002192 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <HAL_SPI_MspInit+0xf4>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a32      	ldr	r2, [pc, #200]	; (80021a0 <HAL_SPI_MspInit+0xf4>)
 80020d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <HAL_SPI_MspInit+0xf4>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <HAL_SPI_MspInit+0xf4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a2b      	ldr	r2, [pc, #172]	; (80021a0 <HAL_SPI_MspInit+0xf4>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_SPI_MspInit+0xf4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002106:	23e0      	movs	r3, #224	; 0xe0
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002116:	2305      	movs	r3, #5
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4820      	ldr	r0, [pc, #128]	; (80021a4 <HAL_SPI_MspInit+0xf8>)
 8002122:	f001 fb99 	bl	8003858 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_SPI_MspInit+0xfc>)
 8002128:	4a20      	ldr	r2, [pc, #128]	; (80021ac <HAL_SPI_MspInit+0x100>)
 800212a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800212c:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <HAL_SPI_MspInit+0xfc>)
 800212e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002132:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_SPI_MspInit+0xfc>)
 8002136:	2240      	movs	r2, #64	; 0x40
 8002138:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_SPI_MspInit+0xfc>)
 800213c:	2200      	movs	r2, #0
 800213e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_SPI_MspInit+0xfc>)
 8002142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002146:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <HAL_SPI_MspInit+0xfc>)
 800214a:	2200      	movs	r2, #0
 800214c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_SPI_MspInit+0xfc>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <HAL_SPI_MspInit+0xfc>)
 8002156:	2200      	movs	r2, #0
 8002158:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_SPI_MspInit+0xfc>)
 800215c:	2200      	movs	r2, #0
 800215e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_SPI_MspInit+0xfc>)
 8002162:	2200      	movs	r2, #0
 8002164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002166:	4810      	ldr	r0, [pc, #64]	; (80021a8 <HAL_SPI_MspInit+0xfc>)
 8002168:	f000 ff74 	bl	8003054 <HAL_DMA_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8002172:	f7ff ff5f 	bl	8002034 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <HAL_SPI_MspInit+0xfc>)
 800217a:	649a      	str	r2, [r3, #72]	; 0x48
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <HAL_SPI_MspInit+0xfc>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	2023      	movs	r0, #35	; 0x23
 8002188:	f000 ff2d 	bl	8002fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800218c:	2023      	movs	r0, #35	; 0x23
 800218e:	f000 ff46 	bl	800301e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002192:	bf00      	nop
 8002194:	3728      	adds	r7, #40	; 0x28
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40013000 	.word	0x40013000
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40020000 	.word	0x40020000
 80021a8:	200001a0 	.word	0x200001a0
 80021ac:	40026440 	.word	0x40026440

080021b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <HAL_MspInit+0x4c>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	4a0f      	ldr	r2, [pc, #60]	; (80021fc <HAL_MspInit+0x4c>)
 80021c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c4:	6453      	str	r3, [r2, #68]	; 0x44
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_MspInit+0x4c>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_MspInit+0x4c>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a08      	ldr	r2, [pc, #32]	; (80021fc <HAL_MspInit+0x4c>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_MspInit+0x4c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800

08002200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002204:	e7fe      	b.n	8002204 <NMI_Handler+0x4>

08002206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <MemManage_Handler+0x4>

08002212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <BusFault_Handler+0x4>

08002218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <UsageFault_Handler+0x4>

0800221e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224c:	f000 f9aa 	bl	80025a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}

08002254 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <SPI1_IRQHandler+0x10>)
 800225a:	f002 fba1 	bl	80049a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000148 	.word	0x20000148

08002268 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <USART1_IRQHandler+0x10>)
 800226e:	f002 febd 	bl	8004fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000200 	.word	0x20000200

0800227c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <USART2_IRQHandler+0x10>)
 8002282:	f002 feb3 	bl	8004fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000248 	.word	0x20000248

08002290 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1_Pin);
 8002294:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002298:	f001 fc94 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}

080022a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <DMA2_Stream0_IRQHandler+0x10>)
 80022a6:	f001 f86d 	bl	8003384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200000d4 	.word	0x200000d4

080022b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <DMA2_Stream2_IRQHandler+0x10>)
 80022ba:	f001 f863 	bl	8003384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200001a0 	.word	0x200001a0

080022c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <SystemInit+0x20>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <SystemInit+0x20>)
 80022d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_USART1_UART_Init+0x4c>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <MX_USART1_UART_Init+0x50>)
 80022f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <MX_USART1_UART_Init+0x4c>)
 80022f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <MX_USART1_UART_Init+0x4c>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <MX_USART1_UART_Init+0x4c>)
 8002306:	2200      	movs	r2, #0
 8002308:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <MX_USART1_UART_Init+0x4c>)
 800230c:	2200      	movs	r2, #0
 800230e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <MX_USART1_UART_Init+0x4c>)
 8002312:	220c      	movs	r2, #12
 8002314:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <MX_USART1_UART_Init+0x4c>)
 8002318:	2200      	movs	r2, #0
 800231a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <MX_USART1_UART_Init+0x4c>)
 800231e:	2200      	movs	r2, #0
 8002320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <MX_USART1_UART_Init+0x4c>)
 8002324:	f002 fdb6 	bl	8004e94 <HAL_UART_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800232e:	f7ff fe81 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000200 	.word	0x20000200
 800233c:	40011000 	.word	0x40011000

08002340 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <MX_USART2_UART_Init+0x4c>)
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <MX_USART2_UART_Init+0x50>)
 8002348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <MX_USART2_UART_Init+0x4c>)
 800234c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <MX_USART2_UART_Init+0x4c>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <MX_USART2_UART_Init+0x4c>)
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <MX_USART2_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <MX_USART2_UART_Init+0x4c>)
 8002366:	220c      	movs	r2, #12
 8002368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <MX_USART2_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <MX_USART2_UART_Init+0x4c>)
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002376:	4805      	ldr	r0, [pc, #20]	; (800238c <MX_USART2_UART_Init+0x4c>)
 8002378:	f002 fd8c 	bl	8004e94 <HAL_UART_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002382:	f7ff fe57 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000248 	.word	0x20000248
 8002390:	40004400 	.word	0x40004400

08002394 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08c      	sub	sp, #48	; 0x30
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a3a      	ldr	r2, [pc, #232]	; (800249c <HAL_UART_MspInit+0x108>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d135      	bne.n	8002422 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <HAL_UART_MspInit+0x10c>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	4a38      	ldr	r2, [pc, #224]	; (80024a0 <HAL_UART_MspInit+0x10c>)
 80023c0:	f043 0310 	orr.w	r3, r3, #16
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <HAL_UART_MspInit+0x10c>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <HAL_UART_MspInit+0x10c>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a31      	ldr	r2, [pc, #196]	; (80024a0 <HAL_UART_MspInit+0x10c>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <HAL_UART_MspInit+0x10c>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002400:	2307      	movs	r3, #7
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	4826      	ldr	r0, [pc, #152]	; (80024a4 <HAL_UART_MspInit+0x110>)
 800240c:	f001 fa24 	bl	8003858 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	2100      	movs	r1, #0
 8002414:	2025      	movs	r0, #37	; 0x25
 8002416:	f000 fde6 	bl	8002fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800241a:	2025      	movs	r0, #37	; 0x25
 800241c:	f000 fdff 	bl	800301e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002420:	e038      	b.n	8002494 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a20      	ldr	r2, [pc, #128]	; (80024a8 <HAL_UART_MspInit+0x114>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d133      	bne.n	8002494 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_UART_MspInit+0x10c>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	4a1a      	ldr	r2, [pc, #104]	; (80024a0 <HAL_UART_MspInit+0x10c>)
 8002436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243a:	6413      	str	r3, [r2, #64]	; 0x40
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <HAL_UART_MspInit+0x10c>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_UART_MspInit+0x10c>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <HAL_UART_MspInit+0x10c>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6313      	str	r3, [r2, #48]	; 0x30
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_UART_MspInit+0x10c>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002464:	230c      	movs	r3, #12
 8002466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002474:	2307      	movs	r3, #7
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002478:	f107 031c 	add.w	r3, r7, #28
 800247c:	4619      	mov	r1, r3
 800247e:	4809      	ldr	r0, [pc, #36]	; (80024a4 <HAL_UART_MspInit+0x110>)
 8002480:	f001 f9ea 	bl	8003858 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	2100      	movs	r1, #0
 8002488:	2026      	movs	r0, #38	; 0x26
 800248a:	f000 fdac 	bl	8002fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800248e:	2026      	movs	r0, #38	; 0x26
 8002490:	f000 fdc5 	bl	800301e <HAL_NVIC_EnableIRQ>
}
 8002494:	bf00      	nop
 8002496:	3730      	adds	r7, #48	; 0x30
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40011000 	.word	0x40011000
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40004400 	.word	0x40004400

080024ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024b0:	f7ff ff0a 	bl	80022c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024b4:	480c      	ldr	r0, [pc, #48]	; (80024e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024b6:	490d      	ldr	r1, [pc, #52]	; (80024ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024b8:	4a0d      	ldr	r2, [pc, #52]	; (80024f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024cc:	4c0a      	ldr	r4, [pc, #40]	; (80024f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024da:	f003 fcef 	bl	8005ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024de:	f7ff fc73 	bl	8001dc8 <main>
  bx  lr    
 80024e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80024f0:	08007328 	.word	0x08007328
  ldr r2, =_sbss
 80024f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80024f8:	200003cc 	.word	0x200003cc

080024fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024fc:	e7fe      	b.n	80024fc <ADC_IRQHandler>
	...

08002500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002504:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <HAL_Init+0x40>)
 800250a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800250e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_Init+0x40>)
 8002516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a07      	ldr	r2, [pc, #28]	; (8002540 <HAL_Init+0x40>)
 8002522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002528:	2003      	movs	r0, #3
 800252a:	f000 fd51 	bl	8002fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800252e:	200f      	movs	r0, #15
 8002530:	f000 f808 	bl	8002544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002534:	f7ff fe3c 	bl	80021b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00

08002544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_InitTick+0x54>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_InitTick+0x58>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800255a:	fbb3 f3f1 	udiv	r3, r3, r1
 800255e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fd69 	bl	800303a <HAL_SYSTICK_Config>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e00e      	b.n	8002590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d80a      	bhi.n	800258e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002578:	2200      	movs	r2, #0
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	f000 fd31 	bl	8002fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <HAL_InitTick+0x5c>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000004 	.word	0x20000004
 800259c:	2000000c 	.word	0x2000000c
 80025a0:	20000008 	.word	0x20000008

080025a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_IncTick+0x20>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_IncTick+0x24>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_IncTick+0x24>)
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	2000000c 	.word	0x2000000c
 80025c8:	20000290 	.word	0x20000290

080025cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return uwTick;
 80025d0:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <HAL_GetTick+0x14>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000290 	.word	0x20000290

080025e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7ff ffee 	bl	80025cc <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d005      	beq.n	800260a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_Delay+0x44>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800260a:	bf00      	nop
 800260c:	f7ff ffde 	bl	80025cc <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	429a      	cmp	r2, r3
 800261a:	d8f7      	bhi.n	800260c <HAL_Delay+0x28>
  {
  }
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2000000c 	.word	0x2000000c

0800262c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e033      	b.n	80026aa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff f9b6 	bl	80019bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	d118      	bne.n	800269c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002672:	f023 0302 	bic.w	r3, r3, #2
 8002676:	f043 0202 	orr.w	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fa58 	bl	8002b34 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
 800269a:	e001      	b.n	80026a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_ADC_Start_DMA+0x1e>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e0ce      	b.n	8002870 <HAL_ADC_Start_DMA+0x1bc>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d018      	beq.n	800271a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026f8:	4b5f      	ldr	r3, [pc, #380]	; (8002878 <HAL_ADC_Start_DMA+0x1c4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a5f      	ldr	r2, [pc, #380]	; (800287c <HAL_ADC_Start_DMA+0x1c8>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0c9a      	lsrs	r2, r3, #18
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800270c:	e002      	b.n	8002714 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	3b01      	subs	r3, #1
 8002712:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f9      	bne.n	800270e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002728:	d107      	bne.n	800273a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002738:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b01      	cmp	r3, #1
 8002746:	f040 8086 	bne.w	8002856 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002774:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002788:	d106      	bne.n	8002798 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f023 0206 	bic.w	r2, r3, #6
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
 8002796:	e002      	b.n	800279e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027a6:	4b36      	ldr	r3, [pc, #216]	; (8002880 <HAL_ADC_Start_DMA+0x1cc>)
 80027a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	4a35      	ldr	r2, [pc, #212]	; (8002884 <HAL_ADC_Start_DMA+0x1d0>)
 80027b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	4a34      	ldr	r2, [pc, #208]	; (8002888 <HAL_ADC_Start_DMA+0x1d4>)
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	4a33      	ldr	r2, [pc, #204]	; (800288c <HAL_ADC_Start_DMA+0x1d8>)
 80027c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80027da:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ea:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	334c      	adds	r3, #76	; 0x4c
 80027f6:	4619      	mov	r1, r3
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f000 fcd8 	bl	80031b0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10f      	bne.n	800282c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d129      	bne.n	800286e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e020      	b.n	800286e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a17      	ldr	r2, [pc, #92]	; (8002890 <HAL_ADC_Start_DMA+0x1dc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d11b      	bne.n	800286e <HAL_ADC_Start_DMA+0x1ba>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d114      	bne.n	800286e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	e00b      	b.n	800286e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f043 0210 	orr.w	r2, r3, #16
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000004 	.word	0x20000004
 800287c:	431bde83 	.word	0x431bde83
 8002880:	40012300 	.word	0x40012300
 8002884:	08002d2d 	.word	0x08002d2d
 8002888:	08002de7 	.word	0x08002de7
 800288c:	08002e03 	.word	0x08002e03
 8002890:	40012000 	.word	0x40012000

08002894 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x1c>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e113      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x244>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b09      	cmp	r3, #9
 80028fa:	d925      	bls.n	8002948 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68d9      	ldr	r1, [r3, #12]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	3b1e      	subs	r3, #30
 8002912:	2207      	movs	r2, #7
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43da      	mvns	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	400a      	ands	r2, r1
 8002920:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68d9      	ldr	r1, [r3, #12]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	4618      	mov	r0, r3
 8002934:	4603      	mov	r3, r0
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4403      	add	r3, r0
 800293a:	3b1e      	subs	r3, #30
 800293c:	409a      	lsls	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	e022      	b.n	800298e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6919      	ldr	r1, [r3, #16]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	2207      	movs	r2, #7
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43da      	mvns	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	400a      	ands	r2, r1
 800296a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6919      	ldr	r1, [r3, #16]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	b29b      	uxth	r3, r3
 800297c:	4618      	mov	r0, r3
 800297e:	4603      	mov	r3, r0
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4403      	add	r3, r0
 8002984:	409a      	lsls	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b06      	cmp	r3, #6
 8002994:	d824      	bhi.n	80029e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	3b05      	subs	r3, #5
 80029a8:	221f      	movs	r2, #31
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	400a      	ands	r2, r1
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4618      	mov	r0, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	3b05      	subs	r3, #5
 80029d2:	fa00 f203 	lsl.w	r2, r0, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34
 80029de:	e04c      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b0c      	cmp	r3, #12
 80029e6:	d824      	bhi.n	8002a32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	3b23      	subs	r3, #35	; 0x23
 80029fa:	221f      	movs	r2, #31
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43da      	mvns	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	400a      	ands	r2, r1
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	3b23      	subs	r3, #35	; 0x23
 8002a24:	fa00 f203 	lsl.w	r2, r0, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a30:	e023      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	3b41      	subs	r3, #65	; 0x41
 8002a44:	221f      	movs	r2, #31
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	400a      	ands	r2, r1
 8002a52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	4618      	mov	r0, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b41      	subs	r3, #65	; 0x41
 8002a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a7a:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <HAL_ADC_ConfigChannel+0x250>)
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <HAL_ADC_ConfigChannel+0x254>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d10f      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x1d8>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b12      	cmp	r3, #18
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <HAL_ADC_ConfigChannel+0x254>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d12b      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x23a>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_ADC_ConfigChannel+0x258>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d003      	beq.n	8002ac4 <HAL_ADC_ConfigChannel+0x1f4>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b11      	cmp	r3, #17
 8002ac2:	d122      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <HAL_ADC_ConfigChannel+0x258>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d111      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_ADC_ConfigChannel+0x25c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a11      	ldr	r2, [pc, #68]	; (8002b30 <HAL_ADC_ConfigChannel+0x260>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	0c9a      	lsrs	r2, r3, #18
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002afc:	e002      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f9      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40012300 	.word	0x40012300
 8002b24:	40012000 	.word	0x40012000
 8002b28:	10000012 	.word	0x10000012
 8002b2c:	20000004 	.word	0x20000004
 8002b30:	431bde83 	.word	0x431bde83

08002b34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b3c:	4b79      	ldr	r3, [pc, #484]	; (8002d24 <ADC_Init+0x1f0>)
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	021a      	lsls	r2, r3, #8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6899      	ldr	r1, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	4a58      	ldr	r2, [pc, #352]	; (8002d28 <ADC_Init+0x1f4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d022      	beq.n	8002c12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6899      	ldr	r1, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6899      	ldr	r1, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	e00f      	b.n	8002c32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c30:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0202 	bic.w	r2, r2, #2
 8002c40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6899      	ldr	r1, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7e1b      	ldrb	r3, [r3, #24]
 8002c4c:	005a      	lsls	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c6e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	035a      	lsls	r2, r3, #13
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	e007      	b.n	8002ca8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	051a      	lsls	r2, r3, #20
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6899      	ldr	r1, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cea:	025a      	lsls	r2, r3, #9
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	029a      	lsls	r2, r3, #10
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	40012300 	.word	0x40012300
 8002d28:	0f000001 	.word	0x0f000001

08002d2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d13c      	bne.n	8002dc0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d12b      	bne.n	8002db8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d127      	bne.n	8002db8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d119      	bne.n	8002db8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0220 	bic.w	r2, r2, #32
 8002d92:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f043 0201 	orr.w	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7ff fd6b 	bl	8002894 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dbe:	e00e      	b.n	8002dde <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff fd75 	bl	80028bc <HAL_ADC_ErrorCallback>
}
 8002dd2:	e004      	b.n	8002dde <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff fd57 	bl	80028a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2240      	movs	r2, #64	; 0x40
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	f043 0204 	orr.w	r2, r3, #4
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff fd4a 	bl	80028bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <__NVIC_GetPriorityGrouping+0x18>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 0307 	and.w	r3, r3, #7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db0b      	blt.n	8002ebe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4907      	ldr	r1, [pc, #28]	; (8002ecc <__NVIC_EnableIRQ+0x38>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000e100 	.word	0xe000e100

08002ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	db0a      	blt.n	8002efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	490c      	ldr	r1, [pc, #48]	; (8002f1c <__NVIC_SetPriority+0x4c>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	0112      	lsls	r2, r2, #4
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef8:	e00a      	b.n	8002f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4908      	ldr	r1, [pc, #32]	; (8002f20 <__NVIC_SetPriority+0x50>)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	3b04      	subs	r3, #4
 8002f08:	0112      	lsls	r2, r2, #4
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	761a      	strb	r2, [r3, #24]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000e100 	.word	0xe000e100
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	; 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f1c3 0307 	rsb	r3, r3, #7
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	bf28      	it	cs
 8002f42:	2304      	movcs	r3, #4
 8002f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d902      	bls.n	8002f54 <NVIC_EncodePriority+0x30>
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3b03      	subs	r3, #3
 8002f52:	e000      	b.n	8002f56 <NVIC_EncodePriority+0x32>
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	401a      	ands	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	43d9      	mvns	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	4313      	orrs	r3, r2
         );
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	; 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f9c:	d301      	bcc.n	8002fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00f      	b.n	8002fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <SysTick_Config+0x40>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002faa:	210f      	movs	r1, #15
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb0:	f7ff ff8e 	bl	8002ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <SysTick_Config+0x40>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fba:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <SysTick_Config+0x40>)
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	e000e010 	.word	0xe000e010

08002fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ff29 	bl	8002e30 <__NVIC_SetPriorityGrouping>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	4603      	mov	r3, r0
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff8:	f7ff ff3e 	bl	8002e78 <__NVIC_GetPriorityGrouping>
 8002ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	6978      	ldr	r0, [r7, #20]
 8003004:	f7ff ff8e 	bl	8002f24 <NVIC_EncodePriority>
 8003008:	4602      	mov	r2, r0
 800300a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff5d 	bl	8002ed0 <__NVIC_SetPriority>
}
 8003016:	bf00      	nop
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff31 	bl	8002e94 <__NVIC_EnableIRQ>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ffa2 	bl	8002f8c <SysTick_Config>
 8003048:	4603      	mov	r3, r0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7ff fab4 	bl	80025cc <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e099      	b.n	80031a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003090:	e00f      	b.n	80030b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003092:	f7ff fa9b 	bl	80025cc <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b05      	cmp	r3, #5
 800309e:	d908      	bls.n	80030b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2203      	movs	r2, #3
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e078      	b.n	80031a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e8      	bne.n	8003092 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4b38      	ldr	r3, [pc, #224]	; (80031ac <HAL_DMA_Init+0x158>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	2b04      	cmp	r3, #4
 800310a:	d107      	bne.n	800311c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	4313      	orrs	r3, r2
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 0307 	bic.w	r3, r3, #7
 8003132:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	2b04      	cmp	r3, #4
 8003144:	d117      	bne.n	8003176 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00e      	beq.n	8003176 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fb01 	bl	8003760 <DMA_CheckFifoParam>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2240      	movs	r2, #64	; 0x40
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003172:	2301      	movs	r3, #1
 8003174:	e016      	b.n	80031a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fab8 	bl	80036f4 <DMA_CalcBaseAndBitshift>
 8003184:	4603      	mov	r3, r0
 8003186:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318c:	223f      	movs	r2, #63	; 0x3f
 800318e:	409a      	lsls	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	f010803f 	.word	0xf010803f

080031b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_DMA_Start_IT+0x26>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e040      	b.n	8003258 <HAL_DMA_Start_IT+0xa8>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d12f      	bne.n	800324a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2202      	movs	r2, #2
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fa4a 	bl	8003698 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003208:	223f      	movs	r2, #63	; 0x3f
 800320a:	409a      	lsls	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0216 	orr.w	r2, r2, #22
 800321e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0208 	orr.w	r2, r2, #8
 8003236:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	e005      	b.n	8003256 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003252:	2302      	movs	r3, #2
 8003254:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003256:	7dfb      	ldrb	r3, [r7, #23]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800326e:	f7ff f9ad 	bl	80025cc <HAL_GetTick>
 8003272:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d008      	beq.n	8003292 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2280      	movs	r2, #128	; 0x80
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e052      	b.n	8003338 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0216 	bic.w	r2, r2, #22
 80032a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d103      	bne.n	80032c2 <HAL_DMA_Abort+0x62>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0208 	bic.w	r2, r2, #8
 80032d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e2:	e013      	b.n	800330c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032e4:	f7ff f972 	bl	80025cc <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d90c      	bls.n	800330c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2203      	movs	r2, #3
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e015      	b.n	8003338 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e4      	bne.n	80032e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331e:	223f      	movs	r2, #63	; 0x3f
 8003320:	409a      	lsls	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d004      	beq.n	800335e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2280      	movs	r2, #128	; 0x80
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e00c      	b.n	8003378 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2205      	movs	r2, #5
 8003362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0201 	bic.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003390:	4b8e      	ldr	r3, [pc, #568]	; (80035cc <HAL_DMA_IRQHandler+0x248>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a8e      	ldr	r2, [pc, #568]	; (80035d0 <HAL_DMA_IRQHandler+0x24c>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	0a9b      	lsrs	r3, r3, #10
 800339c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ae:	2208      	movs	r2, #8
 80033b0:	409a      	lsls	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01a      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d013      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0204 	bic.w	r2, r2, #4
 80033d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	2208      	movs	r2, #8
 80033de:	409a      	lsls	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	2201      	movs	r2, #1
 80033f6:	409a      	lsls	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d012      	beq.n	8003426 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003412:	2201      	movs	r2, #1
 8003414:	409a      	lsls	r2, r3
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	f043 0202 	orr.w	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	2204      	movs	r2, #4
 800342c:	409a      	lsls	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d012      	beq.n	800345c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	2204      	movs	r2, #4
 800344a:	409a      	lsls	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	f043 0204 	orr.w	r2, r3, #4
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	2210      	movs	r2, #16
 8003462:	409a      	lsls	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d043      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d03c      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	2210      	movs	r2, #16
 8003480:	409a      	lsls	r2, r3
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d018      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d024      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
 80034b2:	e01f      	b.n	80034f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01b      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
 80034c4:	e016      	b.n	80034f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d107      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0208 	bic.w	r2, r2, #8
 80034e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f8:	2220      	movs	r2, #32
 80034fa:	409a      	lsls	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 808f 	beq.w	8003624 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8087 	beq.w	8003624 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	2220      	movs	r2, #32
 800351c:	409a      	lsls	r2, r3
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b05      	cmp	r3, #5
 800352c:	d136      	bne.n	800359c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0216 	bic.w	r2, r2, #22
 800353c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800354c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <HAL_DMA_IRQHandler+0x1da>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0208 	bic.w	r2, r2, #8
 800356c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003572:	223f      	movs	r2, #63	; 0x3f
 8003574:	409a      	lsls	r2, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358e:	2b00      	cmp	r3, #0
 8003590:	d07e      	beq.n	8003690 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
        }
        return;
 800359a:	e079      	b.n	8003690 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01d      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10d      	bne.n	80035d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d031      	beq.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
 80035c8:	e02c      	b.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
 80035ca:	bf00      	nop
 80035cc:	20000004 	.word	0x20000004
 80035d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d023      	beq.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4798      	blx	r3
 80035e4:	e01e      	b.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10f      	bne.n	8003614 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0210 	bic.w	r2, r2, #16
 8003602:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	2b00      	cmp	r3, #0
 800362a:	d032      	beq.n	8003692 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d022      	beq.n	800367e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2205      	movs	r2, #5
 800363c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3301      	adds	r3, #1
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	d307      	bcc.n	800366c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f2      	bne.n	8003650 <HAL_DMA_IRQHandler+0x2cc>
 800366a:	e000      	b.n	800366e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800366c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
 800368e:	e000      	b.n	8003692 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003690:	bf00      	nop
    }
  }
}
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	d108      	bne.n	80036d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036d6:	e007      	b.n	80036e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	60da      	str	r2, [r3, #12]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	3b10      	subs	r3, #16
 8003704:	4a14      	ldr	r2, [pc, #80]	; (8003758 <DMA_CalcBaseAndBitshift+0x64>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800370e:	4a13      	ldr	r2, [pc, #76]	; (800375c <DMA_CalcBaseAndBitshift+0x68>)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d909      	bls.n	8003736 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800372a:	f023 0303 	bic.w	r3, r3, #3
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	659a      	str	r2, [r3, #88]	; 0x58
 8003734:	e007      	b.n	8003746 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	aaaaaaab 	.word	0xaaaaaaab
 800375c:	080072e8 	.word	0x080072e8

08003760 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d11f      	bne.n	80037ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d856      	bhi.n	800382e <DMA_CheckFifoParam+0xce>
 8003780:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <DMA_CheckFifoParam+0x28>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	08003799 	.word	0x08003799
 800378c:	080037ab 	.word	0x080037ab
 8003790:	08003799 	.word	0x08003799
 8003794:	0800382f 	.word	0x0800382f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d046      	beq.n	8003832 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a8:	e043      	b.n	8003832 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037b2:	d140      	bne.n	8003836 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b8:	e03d      	b.n	8003836 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c2:	d121      	bne.n	8003808 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d837      	bhi.n	800383a <DMA_CheckFifoParam+0xda>
 80037ca:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <DMA_CheckFifoParam+0x70>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037e7 	.word	0x080037e7
 80037d8:	080037e1 	.word	0x080037e1
 80037dc:	080037f9 	.word	0x080037f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e030      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d025      	beq.n	800383e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f6:	e022      	b.n	800383e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003800:	d11f      	bne.n	8003842 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003806:	e01c      	b.n	8003842 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d903      	bls.n	8003816 <DMA_CheckFifoParam+0xb6>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d003      	beq.n	800381c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003814:	e018      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
      break;
 800381a:	e015      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00e      	beq.n	8003846 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      break;
 800382c:	e00b      	b.n	8003846 <DMA_CheckFifoParam+0xe6>
      break;
 800382e:	bf00      	nop
 8003830:	e00a      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 8003832:	bf00      	nop
 8003834:	e008      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 8003836:	bf00      	nop
 8003838:	e006      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 800383a:	bf00      	nop
 800383c:	e004      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 800383e:	bf00      	nop
 8003840:	e002      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;   
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <DMA_CheckFifoParam+0xe8>
      break;
 8003846:	bf00      	nop
    }
  } 
  
  return status; 
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop

08003858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003858:	b480      	push	{r7}
 800385a:	b089      	sub	sp, #36	; 0x24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	e159      	b.n	8003b28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003874:	2201      	movs	r2, #1
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	429a      	cmp	r2, r3
 800388e:	f040 8148 	bne.w	8003b22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d005      	beq.n	80038aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d130      	bne.n	800390c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	2203      	movs	r2, #3
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e0:	2201      	movs	r2, #1
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 0201 	and.w	r2, r3, #1
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	2b03      	cmp	r3, #3
 8003916:	d017      	beq.n	8003948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2203      	movs	r2, #3
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d123      	bne.n	800399c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	08da      	lsrs	r2, r3, #3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3208      	adds	r2, #8
 800395c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	220f      	movs	r2, #15
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	08da      	lsrs	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3208      	adds	r2, #8
 8003996:	69b9      	ldr	r1, [r7, #24]
 8003998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	2203      	movs	r2, #3
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 0203 	and.w	r2, r3, #3
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80a2 	beq.w	8003b22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	4b57      	ldr	r3, [pc, #348]	; (8003b40 <HAL_GPIO_Init+0x2e8>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	4a56      	ldr	r2, [pc, #344]	; (8003b40 <HAL_GPIO_Init+0x2e8>)
 80039e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039ec:	6453      	str	r3, [r2, #68]	; 0x44
 80039ee:	4b54      	ldr	r3, [pc, #336]	; (8003b40 <HAL_GPIO_Init+0x2e8>)
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039fa:	4a52      	ldr	r2, [pc, #328]	; (8003b44 <HAL_GPIO_Init+0x2ec>)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	089b      	lsrs	r3, r3, #2
 8003a00:	3302      	adds	r3, #2
 8003a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	220f      	movs	r2, #15
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a49      	ldr	r2, [pc, #292]	; (8003b48 <HAL_GPIO_Init+0x2f0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d019      	beq.n	8003a5a <HAL_GPIO_Init+0x202>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a48      	ldr	r2, [pc, #288]	; (8003b4c <HAL_GPIO_Init+0x2f4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <HAL_GPIO_Init+0x1fe>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a47      	ldr	r2, [pc, #284]	; (8003b50 <HAL_GPIO_Init+0x2f8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00d      	beq.n	8003a52 <HAL_GPIO_Init+0x1fa>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a46      	ldr	r2, [pc, #280]	; (8003b54 <HAL_GPIO_Init+0x2fc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d007      	beq.n	8003a4e <HAL_GPIO_Init+0x1f6>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a45      	ldr	r2, [pc, #276]	; (8003b58 <HAL_GPIO_Init+0x300>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_GPIO_Init+0x1f2>
 8003a46:	2304      	movs	r3, #4
 8003a48:	e008      	b.n	8003a5c <HAL_GPIO_Init+0x204>
 8003a4a:	2307      	movs	r3, #7
 8003a4c:	e006      	b.n	8003a5c <HAL_GPIO_Init+0x204>
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e004      	b.n	8003a5c <HAL_GPIO_Init+0x204>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e002      	b.n	8003a5c <HAL_GPIO_Init+0x204>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <HAL_GPIO_Init+0x204>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	f002 0203 	and.w	r2, r2, #3
 8003a62:	0092      	lsls	r2, r2, #2
 8003a64:	4093      	lsls	r3, r2
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a6c:	4935      	ldr	r1, [pc, #212]	; (8003b44 <HAL_GPIO_Init+0x2ec>)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	089b      	lsrs	r3, r3, #2
 8003a72:	3302      	adds	r3, #2
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a7a:	4b38      	ldr	r3, [pc, #224]	; (8003b5c <HAL_GPIO_Init+0x304>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a9e:	4a2f      	ldr	r2, [pc, #188]	; (8003b5c <HAL_GPIO_Init+0x304>)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aa4:	4b2d      	ldr	r3, [pc, #180]	; (8003b5c <HAL_GPIO_Init+0x304>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ac8:	4a24      	ldr	r2, [pc, #144]	; (8003b5c <HAL_GPIO_Init+0x304>)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ace:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <HAL_GPIO_Init+0x304>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003af2:	4a1a      	ldr	r2, [pc, #104]	; (8003b5c <HAL_GPIO_Init+0x304>)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003af8:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <HAL_GPIO_Init+0x304>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b1c:	4a0f      	ldr	r2, [pc, #60]	; (8003b5c <HAL_GPIO_Init+0x304>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3301      	adds	r3, #1
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b0f      	cmp	r3, #15
 8003b2c:	f67f aea2 	bls.w	8003874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	3724      	adds	r7, #36	; 0x24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40013800 	.word	0x40013800
 8003b48:	40020000 	.word	0x40020000
 8003b4c:	40020400 	.word	0x40020400
 8003b50:	40020800 	.word	0x40020800
 8003b54:	40020c00 	.word	0x40020c00
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40013c00 	.word	0x40013c00

08003b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	887b      	ldrh	r3, [r7, #2]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
 8003b7c:	e001      	b.n	8003b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba0:	787b      	ldrb	r3, [r7, #1]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bac:	e003      	b.n	8003bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bae:	887b      	ldrh	r3, [r7, #2]
 8003bb0:	041a      	lsls	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	619a      	str	r2, [r3, #24]
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d006      	beq.n	8003be8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bda:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe f9e0 	bl	8001fa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40013c00 	.word	0x40013c00

08003bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e267      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d075      	beq.n	8003cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c12:	4b88      	ldr	r3, [pc, #544]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d00c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1e:	4b85      	ldr	r3, [pc, #532]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d112      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2a:	4b82      	ldr	r3, [pc, #520]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c36:	d10b      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	4b7e      	ldr	r3, [pc, #504]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d05b      	beq.n	8003cfc <HAL_RCC_OscConfig+0x108>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d157      	bne.n	8003cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e242      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d106      	bne.n	8003c68 <HAL_RCC_OscConfig+0x74>
 8003c5a:	4b76      	ldr	r3, [pc, #472]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a75      	ldr	r2, [pc, #468]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xb0>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x98>
 8003c72:	4b70      	ldr	r3, [pc, #448]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a6f      	ldr	r2, [pc, #444]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b6d      	ldr	r3, [pc, #436]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a6c      	ldr	r2, [pc, #432]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xb0>
 8003c8c:	4b69      	ldr	r3, [pc, #420]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a68      	ldr	r2, [pc, #416]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b66      	ldr	r3, [pc, #408]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a65      	ldr	r2, [pc, #404]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe fc8e 	bl	80025cc <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe fc8a 	bl	80025cc <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e207      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b5b      	ldr	r3, [pc, #364]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xc0>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fc7a 	bl	80025cc <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fe fc76 	bl	80025cc <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e1f3      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b51      	ldr	r3, [pc, #324]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0xe8>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d063      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0a:	4b4a      	ldr	r3, [pc, #296]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d22:	4b44      	ldr	r3, [pc, #272]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b41      	ldr	r3, [pc, #260]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x152>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1c7      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4937      	ldr	r1, [pc, #220]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e03a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b34      	ldr	r3, [pc, #208]	; (8003e38 <HAL_RCC_OscConfig+0x244>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6a:	f7fe fc2f 	bl	80025cc <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d72:	f7fe fc2b 	bl	80025cc <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e1a8      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d84:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d90:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4925      	ldr	r1, [pc, #148]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
 8003da4:	e015      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCC_OscConfig+0x244>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fe fc0e 	bl	80025cc <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db4:	f7fe fc0a 	bl	80025cc <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e187      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d036      	beq.n	8003e4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d016      	beq.n	8003e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <HAL_RCC_OscConfig+0x248>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dec:	f7fe fbee 	bl	80025cc <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fe fbea 	bl	80025cc <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e167      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCC_OscConfig+0x240>)
 8003e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x200>
 8003e12:	e01b      	b.n	8003e4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e14:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_RCC_OscConfig+0x248>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1a:	f7fe fbd7 	bl	80025cc <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e20:	e00e      	b.n	8003e40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e22:	f7fe fbd3 	bl	80025cc <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d907      	bls.n	8003e40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e150      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
 8003e34:	40023800 	.word	0x40023800
 8003e38:	42470000 	.word	0x42470000
 8003e3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e40:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ea      	bne.n	8003e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8097 	beq.w	8003f88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5e:	4b81      	ldr	r3, [pc, #516]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10f      	bne.n	8003e8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	4b7d      	ldr	r3, [pc, #500]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	4a7c      	ldr	r2, [pc, #496]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e78:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7a:	4b7a      	ldr	r3, [pc, #488]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8a:	4b77      	ldr	r3, [pc, #476]	; (8004068 <HAL_RCC_OscConfig+0x474>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d118      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e96:	4b74      	ldr	r3, [pc, #464]	; (8004068 <HAL_RCC_OscConfig+0x474>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a73      	ldr	r2, [pc, #460]	; (8004068 <HAL_RCC_OscConfig+0x474>)
 8003e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea2:	f7fe fb93 	bl	80025cc <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eaa:	f7fe fb8f 	bl	80025cc <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e10c      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebc:	4b6a      	ldr	r3, [pc, #424]	; (8004068 <HAL_RCC_OscConfig+0x474>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d106      	bne.n	8003ede <HAL_RCC_OscConfig+0x2ea>
 8003ed0:	4b64      	ldr	r3, [pc, #400]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a63      	ldr	r2, [pc, #396]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
 8003edc:	e01c      	b.n	8003f18 <HAL_RCC_OscConfig+0x324>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x30c>
 8003ee6:	4b5f      	ldr	r3, [pc, #380]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a5e      	ldr	r2, [pc, #376]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003eec:	f043 0304 	orr.w	r3, r3, #4
 8003ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef2:	4b5c      	ldr	r3, [pc, #368]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	4a5b      	ldr	r2, [pc, #364]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6713      	str	r3, [r2, #112]	; 0x70
 8003efe:	e00b      	b.n	8003f18 <HAL_RCC_OscConfig+0x324>
 8003f00:	4b58      	ldr	r3, [pc, #352]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4a57      	ldr	r2, [pc, #348]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0c:	4b55      	ldr	r3, [pc, #340]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a54      	ldr	r2, [pc, #336]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f12:	f023 0304 	bic.w	r3, r3, #4
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d015      	beq.n	8003f4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fe fb54 	bl	80025cc <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fe fb50 	bl	80025cc <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0cb      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3e:	4b49      	ldr	r3, [pc, #292]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0ee      	beq.n	8003f28 <HAL_RCC_OscConfig+0x334>
 8003f4a:	e014      	b.n	8003f76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4c:	f7fe fb3e 	bl	80025cc <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f54:	f7fe fb3a 	bl	80025cc <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e0b5      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6a:	4b3e      	ldr	r3, [pc, #248]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ee      	bne.n	8003f54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7c:	4b39      	ldr	r3, [pc, #228]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	4a38      	ldr	r2, [pc, #224]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80a1 	beq.w	80040d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f92:	4b34      	ldr	r3, [pc, #208]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d05c      	beq.n	8004058 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d141      	bne.n	800402a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa6:	4b31      	ldr	r3, [pc, #196]	; (800406c <HAL_RCC_OscConfig+0x478>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fe fb0e 	bl	80025cc <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fe fb0a 	bl	80025cc <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e087      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	4b27      	ldr	r3, [pc, #156]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	019b      	lsls	r3, r3, #6
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	085b      	lsrs	r3, r3, #1
 8003fea:	3b01      	subs	r3, #1
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	491b      	ldr	r1, [pc, #108]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	; (800406c <HAL_RCC_OscConfig+0x478>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7fe fae3 	bl	80025cc <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400a:	f7fe fadf 	bl	80025cc <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e05c      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x416>
 8004028:	e054      	b.n	80040d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <HAL_RCC_OscConfig+0x478>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe facc 	bl	80025cc <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004038:	f7fe fac8 	bl	80025cc <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e045      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_RCC_OscConfig+0x470>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x444>
 8004056:	e03d      	b.n	80040d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d107      	bne.n	8004070 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e038      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
 8004064:	40023800 	.word	0x40023800
 8004068:	40007000 	.word	0x40007000
 800406c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_RCC_OscConfig+0x4ec>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d028      	beq.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d121      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d11a      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d111      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	3b01      	subs	r3, #1
 80040ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800

080040e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0cc      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b68      	ldr	r3, [pc, #416]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d90c      	bls.n	8004120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b65      	ldr	r3, [pc, #404]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b63      	ldr	r3, [pc, #396]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0b8      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004138:	4b59      	ldr	r3, [pc, #356]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a58      	ldr	r2, [pc, #352]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004150:	4b53      	ldr	r3, [pc, #332]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a52      	ldr	r2, [pc, #328]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800415a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415c:	4b50      	ldr	r3, [pc, #320]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	494d      	ldr	r1, [pc, #308]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d044      	beq.n	8004204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b47      	ldr	r3, [pc, #284]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d119      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e07f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d003      	beq.n	80041a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	4b3f      	ldr	r3, [pc, #252]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e06f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b2:	4b3b      	ldr	r3, [pc, #236]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e067      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c2:	4b37      	ldr	r3, [pc, #220]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 0203 	bic.w	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4934      	ldr	r1, [pc, #208]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d4:	f7fe f9fa 	bl	80025cc <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041dc:	f7fe f9f6 	bl	80025cc <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e04f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	4b2b      	ldr	r3, [pc, #172]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 020c 	and.w	r2, r3, #12
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	429a      	cmp	r2, r3
 8004202:	d1eb      	bne.n	80041dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004204:	4b25      	ldr	r3, [pc, #148]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d20c      	bcs.n	800422c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b22      	ldr	r3, [pc, #136]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421a:	4b20      	ldr	r3, [pc, #128]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e032      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004238:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4916      	ldr	r1, [pc, #88]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004256:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	490e      	ldr	r1, [pc, #56]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800426a:	f000 f821 	bl	80042b0 <HAL_RCC_GetSysClockFreq>
 800426e:	4602      	mov	r2, r0
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	490a      	ldr	r1, [pc, #40]	; (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	5ccb      	ldrb	r3, [r1, r3]
 800427e:	fa22 f303 	lsr.w	r3, r2, r3
 8004282:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004286:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe f95a 	bl	8002544 <HAL_InitTick>

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40023c00 	.word	0x40023c00
 80042a0:	40023800 	.word	0x40023800
 80042a4:	080072d0 	.word	0x080072d0
 80042a8:	20000004 	.word	0x20000004
 80042ac:	20000008 	.word	0x20000008

080042b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b4:	b090      	sub	sp, #64	; 0x40
 80042b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	637b      	str	r3, [r7, #52]	; 0x34
 80042bc:	2300      	movs	r3, #0
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c0:	2300      	movs	r3, #0
 80042c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c8:	4b59      	ldr	r3, [pc, #356]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d00d      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x40>
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	f200 80a1 	bhi.w	800441c <HAL_RCC_GetSysClockFreq+0x16c>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x34>
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d003      	beq.n	80042ea <HAL_RCC_GetSysClockFreq+0x3a>
 80042e2:	e09b      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b53      	ldr	r3, [pc, #332]	; (8004434 <HAL_RCC_GetSysClockFreq+0x184>)
 80042e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80042e8:	e09b      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ea:	4b53      	ldr	r3, [pc, #332]	; (8004438 <HAL_RCC_GetSysClockFreq+0x188>)
 80042ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042ee:	e098      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f0:	4b4f      	ldr	r3, [pc, #316]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042fa:	4b4d      	ldr	r3, [pc, #308]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d028      	beq.n	8004358 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004306:	4b4a      	ldr	r3, [pc, #296]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	099b      	lsrs	r3, r3, #6
 800430c:	2200      	movs	r2, #0
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	627a      	str	r2, [r7, #36]	; 0x24
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004318:	2100      	movs	r1, #0
 800431a:	4b47      	ldr	r3, [pc, #284]	; (8004438 <HAL_RCC_GetSysClockFreq+0x188>)
 800431c:	fb03 f201 	mul.w	r2, r3, r1
 8004320:	2300      	movs	r3, #0
 8004322:	fb00 f303 	mul.w	r3, r0, r3
 8004326:	4413      	add	r3, r2
 8004328:	4a43      	ldr	r2, [pc, #268]	; (8004438 <HAL_RCC_GetSysClockFreq+0x188>)
 800432a:	fba0 1202 	umull	r1, r2, r0, r2
 800432e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004330:	460a      	mov	r2, r1
 8004332:	62ba      	str	r2, [r7, #40]	; 0x28
 8004334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004336:	4413      	add	r3, r2
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800433a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433c:	2200      	movs	r2, #0
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	61fa      	str	r2, [r7, #28]
 8004342:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004346:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800434a:	f7fc fbd9 	bl	8000b00 <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4613      	mov	r3, r2
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004356:	e053      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004358:	4b35      	ldr	r3, [pc, #212]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	099b      	lsrs	r3, r3, #6
 800435e:	2200      	movs	r2, #0
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	617a      	str	r2, [r7, #20]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800436a:	f04f 0b00 	mov.w	fp, #0
 800436e:	4652      	mov	r2, sl
 8004370:	465b      	mov	r3, fp
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	0159      	lsls	r1, r3, #5
 800437c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004380:	0150      	lsls	r0, r2, #5
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	ebb2 080a 	subs.w	r8, r2, sl
 800438a:	eb63 090b 	sbc.w	r9, r3, fp
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800439a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800439e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043a2:	ebb2 0408 	subs.w	r4, r2, r8
 80043a6:	eb63 0509 	sbc.w	r5, r3, r9
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	00eb      	lsls	r3, r5, #3
 80043b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043b8:	00e2      	lsls	r2, r4, #3
 80043ba:	4614      	mov	r4, r2
 80043bc:	461d      	mov	r5, r3
 80043be:	eb14 030a 	adds.w	r3, r4, sl
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	eb45 030b 	adc.w	r3, r5, fp
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043d6:	4629      	mov	r1, r5
 80043d8:	028b      	lsls	r3, r1, #10
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e0:	4621      	mov	r1, r4
 80043e2:	028a      	lsls	r2, r1, #10
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	2200      	movs	r2, #0
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	60fa      	str	r2, [r7, #12]
 80043f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f4:	f7fc fb84 	bl	8000b00 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4613      	mov	r3, r2
 80043fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <HAL_RCC_GetSysClockFreq+0x180>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	3301      	adds	r3, #1
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800441a:	e002      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_RCC_GetSysClockFreq+0x184>)
 800441e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004424:	4618      	mov	r0, r3
 8004426:	3740      	adds	r7, #64	; 0x40
 8004428:	46bd      	mov	sp, r7
 800442a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	00f42400 	.word	0x00f42400
 8004438:	017d7840 	.word	0x017d7840

0800443c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004440:	4b03      	ldr	r3, [pc, #12]	; (8004450 <HAL_RCC_GetHCLKFreq+0x14>)
 8004442:	681b      	ldr	r3, [r3, #0]
}
 8004444:	4618      	mov	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20000004 	.word	0x20000004

08004454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004458:	f7ff fff0 	bl	800443c <HAL_RCC_GetHCLKFreq>
 800445c:	4602      	mov	r2, r0
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	0a9b      	lsrs	r3, r3, #10
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	4903      	ldr	r1, [pc, #12]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40023800 	.word	0x40023800
 8004478:	080072e0 	.word	0x080072e0

0800447c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004480:	f7ff ffdc 	bl	800443c <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0b5b      	lsrs	r3, r3, #13
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4903      	ldr	r1, [pc, #12]	; (80044a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40023800 	.word	0x40023800
 80044a0:	080072e0 	.word	0x080072e0

080044a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e07b      	b.n	80045ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d108      	bne.n	80044d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c6:	d009      	beq.n	80044dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	61da      	str	r2, [r3, #28]
 80044ce:	e005      	b.n	80044dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fd fdd8 	bl	80020ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004512:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004560:	ea42 0103 	orr.w	r1, r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	0c1b      	lsrs	r3, r3, #16
 800457a:	f003 0104 	and.w	r1, r3, #4
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	f003 0210 	and.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b088      	sub	sp, #32
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_SPI_Transmit+0x22>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e12d      	b.n	8004834 <HAL_SPI_Transmit+0x27e>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045e0:	f7fd fff4 	bl	80025cc <HAL_GetTick>
 80045e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d002      	beq.n	80045fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045f6:	2302      	movs	r3, #2
 80045f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045fa:	e116      	b.n	800482a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <HAL_SPI_Transmit+0x52>
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800460c:	e10d      	b.n	800482a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2203      	movs	r2, #3
 8004612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	88fa      	ldrh	r2, [r7, #6]
 800462c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004654:	d10f      	bne.n	8004676 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004664:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004674:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d007      	beq.n	8004694 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004692:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469c:	d14f      	bne.n	800473e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_SPI_Transmit+0xf6>
 80046a6:	8afb      	ldrh	r3, [r7, #22]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d142      	bne.n	8004732 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	881a      	ldrh	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	1c9a      	adds	r2, r3, #2
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046d0:	e02f      	b.n	8004732 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d112      	bne.n	8004706 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	881a      	ldrh	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	1c9a      	adds	r2, r3, #2
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	86da      	strh	r2, [r3, #54]	; 0x36
 8004704:	e015      	b.n	8004732 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004706:	f7fd ff61 	bl	80025cc <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d803      	bhi.n	800471e <HAL_SPI_Transmit+0x168>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d102      	bne.n	8004724 <HAL_SPI_Transmit+0x16e>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d106      	bne.n	8004732 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004730:	e07b      	b.n	800482a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1ca      	bne.n	80046d2 <HAL_SPI_Transmit+0x11c>
 800473c:	e050      	b.n	80047e0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_SPI_Transmit+0x196>
 8004746:	8afb      	ldrh	r3, [r7, #22]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d144      	bne.n	80047d6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004772:	e030      	b.n	80047d6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b02      	cmp	r3, #2
 8004780:	d113      	bne.n	80047aa <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	330c      	adds	r3, #12
 800478c:	7812      	ldrb	r2, [r2, #0]
 800478e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80047a8:	e015      	b.n	80047d6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047aa:	f7fd ff0f 	bl	80025cc <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d803      	bhi.n	80047c2 <HAL_SPI_Transmit+0x20c>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d102      	bne.n	80047c8 <HAL_SPI_Transmit+0x212>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80047d4:	e029      	b.n	800482a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1c9      	bne.n	8004774 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fb01 	bl	8004dec <SPI_EndRxTxTransaction>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047fe:	2300      	movs	r3, #0
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e003      	b.n	800482a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004832:	7ffb      	ldrb	r3, [r7, #31]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	4613      	mov	r3, r2
 8004848:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_SPI_Transmit_DMA+0x20>
 8004858:	2302      	movs	r3, #2
 800485a:	e097      	b.n	800498c <HAL_SPI_Transmit_DMA+0x150>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d002      	beq.n	8004876 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004870:	2302      	movs	r3, #2
 8004872:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004874:	e085      	b.n	8004982 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_SPI_Transmit_DMA+0x46>
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004886:	e07c      	b.n	8004982 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2203      	movs	r2, #3
 800488c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	88fa      	ldrh	r2, [r7, #6]
 80048a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	88fa      	ldrh	r2, [r7, #6]
 80048a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ce:	d10f      	bne.n	80048f0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f4:	4a27      	ldr	r2, [pc, #156]	; (8004994 <HAL_SPI_Transmit_DMA+0x158>)
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fc:	4a26      	ldr	r2, [pc, #152]	; (8004998 <HAL_SPI_Transmit_DMA+0x15c>)
 80048fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004904:	4a25      	ldr	r2, [pc, #148]	; (800499c <HAL_SPI_Transmit_DMA+0x160>)
 8004906:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490c:	2200      	movs	r2, #0
 800490e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	4619      	mov	r1, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004926:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004928:	f7fe fc42 	bl	80031b0 <HAL_DMA_Start_IT>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	f043 0210 	orr.w	r2, r3, #16
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004942:	e01e      	b.n	8004982 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b40      	cmp	r3, #64	; 0x40
 8004950:	d007      	beq.n	8004962 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004960:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0220 	orr.w	r2, r2, #32
 8004970:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0202 	orr.w	r2, r2, #2
 8004980:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	08004c59 	.word	0x08004c59
 8004998:	08004bb1 	.word	0x08004bb1
 800499c:	08004c75 	.word	0x08004c75

080049a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10e      	bne.n	80049e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d004      	beq.n	80049e0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	4798      	blx	r3
    return;
 80049de:	e0ce      	b.n	8004b7e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <HAL_SPI_IRQHandler+0x5e>
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d004      	beq.n	80049fe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
    return;
 80049fc:	e0bf      	b.n	8004b7e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <HAL_SPI_IRQHandler+0x7e>
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d105      	bne.n	8004a1e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80b0 	beq.w	8004b7e <HAL_SPI_IRQHandler+0x1de>
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80aa 	beq.w	8004b7e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d023      	beq.n	8004a7c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d011      	beq.n	8004a64 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a44:	f043 0204 	orr.w	r2, r3, #4
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	e00b      	b.n	8004a7c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	693b      	ldr	r3, [r7, #16]
        return;
 8004a7a:	e080      	b.n	8004b7e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d014      	beq.n	8004ab0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8a:	f043 0201 	orr.w	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00c      	beq.n	8004ad4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	f043 0208 	orr.w	r2, r3, #8
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d04f      	beq.n	8004b7c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004aea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d104      	bne.n	8004b08 <HAL_SPI_IRQHandler+0x168>
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d034      	beq.n	8004b72 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0203 	bic.w	r2, r2, #3
 8004b16:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d011      	beq.n	8004b44 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b24:	4a17      	ldr	r2, [pc, #92]	; (8004b84 <HAL_SPI_IRQHandler+0x1e4>)
 8004b26:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fe fc07 	bl	8003340 <HAL_DMA_Abort_IT>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d016      	beq.n	8004b7a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b50:	4a0c      	ldr	r2, [pc, #48]	; (8004b84 <HAL_SPI_IRQHandler+0x1e4>)
 8004b52:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fe fbf1 	bl	8003340 <HAL_DMA_Abort_IT>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004b70:	e003      	b.n	8004b7a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f812 	bl	8004b9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004b78:	e000      	b.n	8004b7c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004b7a:	bf00      	nop
    return;
 8004b7c:	bf00      	nop
  }
}
 8004b7e:	3720      	adds	r7, #32
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	08004cb5 	.word	0x08004cb5

08004b88 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bbe:	f7fd fd05 	bl	80025cc <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd2:	d03b      	beq.n	8004c4c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0220 	bic.w	r2, r2, #32
 8004be2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0202 	bic.w	r2, r2, #2
 8004bf2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	2164      	movs	r1, #100	; 0x64
 8004bf8:	6978      	ldr	r0, [r7, #20]
 8004bfa:	f000 f8f7 	bl	8004dec <SPI_EndRxTxTransaction>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c08:	f043 0220 	orr.w	r2, r3, #32
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10a      	bne.n	8004c2e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2200      	movs	r2, #0
 8004c32:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c44:	6978      	ldr	r0, [r7, #20]
 8004c46:	f7ff ffa9 	bl	8004b9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c4a:	e002      	b.n	8004c52 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004c4c:	6978      	ldr	r0, [r7, #20]
 8004c4e:	f7fc fa6b 	bl	8001128 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7ff ff8e 	bl	8004b88 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0203 	bic.w	r2, r2, #3
 8004c90:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f043 0210 	orr.w	r2, r3, #16
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff ff78 	bl	8004b9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f7ff ff64 	bl	8004b9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cec:	f7fd fc6e 	bl	80025cc <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cfc:	f7fd fc66 	bl	80025cc <HAL_GetTick>
 8004d00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d02:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	015b      	lsls	r3, r3, #5
 8004d08:	0d1b      	lsrs	r3, r3, #20
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	fb02 f303 	mul.w	r3, r2, r3
 8004d10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d12:	e054      	b.n	8004dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d050      	beq.n	8004dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d1c:	f7fd fc56 	bl	80025cc <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d902      	bls.n	8004d32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d13d      	bne.n	8004dae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d4a:	d111      	bne.n	8004d70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d54:	d004      	beq.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5e:	d107      	bne.n	8004d70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d78:	d10f      	bne.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e017      	b.n	8004dde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	bf0c      	ite	eq
 8004dce:	2301      	moveq	r3, #1
 8004dd0:	2300      	movne	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d19b      	bne.n	8004d14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000004 	.word	0x20000004

08004dec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	2102      	movs	r1, #2
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f7ff ff6a 	bl	8004cdc <SPI_WaitFlagStateUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e12:	f043 0220 	orr.w	r2, r3, #32
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e032      	b.n	8004e84 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <SPI_EndRxTxTransaction+0xa0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <SPI_EndRxTxTransaction+0xa4>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	0d5b      	lsrs	r3, r3, #21
 8004e2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e3c:	d112      	bne.n	8004e64 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2200      	movs	r2, #0
 8004e46:	2180      	movs	r1, #128	; 0x80
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7ff ff47 	bl	8004cdc <SPI_WaitFlagStateUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d016      	beq.n	8004e82 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e58:	f043 0220 	orr.w	r2, r3, #32
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e00f      	b.n	8004e84 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7a:	2b80      	cmp	r3, #128	; 0x80
 8004e7c:	d0f2      	beq.n	8004e64 <SPI_EndRxTxTransaction+0x78>
 8004e7e:	e000      	b.n	8004e82 <SPI_EndRxTxTransaction+0x96>
        break;
 8004e80:	bf00      	nop
  }

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20000004 	.word	0x20000004
 8004e90:	165e9f81 	.word	0x165e9f81

08004e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e042      	b.n	8004f2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fd fa6a 	bl	8002394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2224      	movs	r2, #36	; 0x24
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fd11 	bl	8005900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d121      	bne.n	8004f92 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_UART_Transmit_IT+0x26>
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e01a      	b.n	8004f94 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	88fa      	ldrh	r2, [r7, #6]
 8004f68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	88fa      	ldrh	r2, [r7, #6]
 8004f6e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2221      	movs	r2, #33	; 0x21
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f8c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	e000      	b.n	8004f94 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004f92:	2302      	movs	r3, #2
  }
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	4613      	mov	r3, r2
 8004fac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d112      	bne.n	8004fe0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <HAL_UART_Receive_IT+0x26>
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e00b      	b.n	8004fe2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 faba 	bl	8005550 <UART_Start_Receive_IT>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	e000      	b.n	8004fe2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
  }
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b0ba      	sub	sp, #232	; 0xe8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005012:	2300      	movs	r3, #0
 8005014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005018:	2300      	movs	r3, #0
 800501a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800501e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800502a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10f      	bne.n	8005052 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <HAL_UART_IRQHandler+0x66>
 800503e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fb99 	bl	8005782 <UART_Receive_IT>
      return;
 8005050:	e25b      	b.n	800550a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80de 	beq.w	8005218 <HAL_UART_IRQHandler+0x22c>
 800505c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80d1 	beq.w	8005218 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <HAL_UART_IRQHandler+0xae>
 8005082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	f043 0201 	orr.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800509a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_UART_IRQHandler+0xd2>
 80050a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	f043 0202 	orr.w	r2, r3, #2
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00b      	beq.n	80050e2 <HAL_UART_IRQHandler+0xf6>
 80050ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	f043 0204 	orr.w	r2, r3, #4
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d011      	beq.n	8005112 <HAL_UART_IRQHandler+0x126>
 80050ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d105      	bne.n	8005106 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	f043 0208 	orr.w	r2, r3, #8
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 81f2 	beq.w	8005500 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800511c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_UART_IRQHandler+0x14e>
 8005128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fb24 	bl	8005782 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b40      	cmp	r3, #64	; 0x40
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d103      	bne.n	8005166 <HAL_UART_IRQHandler+0x17a>
 800515e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005162:	2b00      	cmp	r3, #0
 8005164:	d04f      	beq.n	8005206 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fa2c 	bl	80055c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d141      	bne.n	80051fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3314      	adds	r3, #20
 80051a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1d9      	bne.n	800517a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d013      	beq.n	80051f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d2:	4a7e      	ldr	r2, [pc, #504]	; (80053cc <HAL_UART_IRQHandler+0x3e0>)
 80051d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe f8b0 	bl	8003340 <HAL_DMA_Abort_IT>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d016      	beq.n	8005214 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051f0:	4610      	mov	r0, r2
 80051f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f4:	e00e      	b.n	8005214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f994 	bl	8005524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fc:	e00a      	b.n	8005214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f990 	bl	8005524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005204:	e006      	b.n	8005214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f98c 	bl	8005524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005212:	e175      	b.n	8005500 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005214:	bf00      	nop
    return;
 8005216:	e173      	b.n	8005500 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	2b01      	cmp	r3, #1
 800521e:	f040 814f 	bne.w	80054c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005226:	f003 0310 	and.w	r3, r3, #16
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 8148 	beq.w	80054c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8141 	beq.w	80054c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800523e:	2300      	movs	r3, #0
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	f040 80b6 	bne.w	80053d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005270:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8145 	beq.w	8005504 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800527e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005282:	429a      	cmp	r2, r3
 8005284:	f080 813e 	bcs.w	8005504 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800528e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800529a:	f000 8088 	beq.w	80053ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	330c      	adds	r3, #12
 80052a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1d9      	bne.n	800529e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3314      	adds	r3, #20
 80052f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052fc:	f023 0301 	bic.w	r3, r3, #1
 8005300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3314      	adds	r3, #20
 800530a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800530e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005312:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005316:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e1      	bne.n	80052ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3314      	adds	r3, #20
 800532c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800533c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3314      	adds	r3, #20
 8005346:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800534a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800534c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005350:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e3      	bne.n	8005326 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800537c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800537e:	f023 0310 	bic.w	r3, r3, #16
 8005382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	330c      	adds	r3, #12
 800538c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005390:	65ba      	str	r2, [r7, #88]	; 0x58
 8005392:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800539e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e3      	bne.n	800536c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fd ff59 	bl	8003260 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f8b7 	bl	8005538 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053ca:	e09b      	b.n	8005504 <HAL_UART_IRQHandler+0x518>
 80053cc:	0800568b 	.word	0x0800568b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053d8:	b29b      	uxth	r3, r3
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 808e 	beq.w	8005508 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80053ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 8089 	beq.w	8005508 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	330c      	adds	r3, #12
 80053fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800540c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800541a:	647a      	str	r2, [r7, #68]	; 0x44
 800541c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005420:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e3      	bne.n	80053f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3314      	adds	r3, #20
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	623b      	str	r3, [r7, #32]
   return(result);
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005452:	633a      	str	r2, [r7, #48]	; 0x30
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e3      	bne.n	800542e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	60fb      	str	r3, [r7, #12]
   return(result);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0310 	bic.w	r3, r3, #16
 800548a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	330c      	adds	r3, #12
 8005494:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005498:	61fa      	str	r2, [r7, #28]
 800549a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549c:	69b9      	ldr	r1, [r7, #24]
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	e841 2300 	strex	r3, r2, [r1]
 80054a4:	617b      	str	r3, [r7, #20]
   return(result);
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e3      	bne.n	8005474 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f83d 	bl	8005538 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054be:	e023      	b.n	8005508 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <HAL_UART_IRQHandler+0x4f4>
 80054cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f8ea 	bl	80056b2 <UART_Transmit_IT>
    return;
 80054de:	e014      	b.n	800550a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00e      	beq.n	800550a <HAL_UART_IRQHandler+0x51e>
 80054ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d008      	beq.n	800550a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f92a 	bl	8005752 <UART_EndTransmit_IT>
    return;
 80054fe:	e004      	b.n	800550a <HAL_UART_IRQHandler+0x51e>
    return;
 8005500:	bf00      	nop
 8005502:	e002      	b.n	800550a <HAL_UART_IRQHandler+0x51e>
      return;
 8005504:	bf00      	nop
 8005506:	e000      	b.n	800550a <HAL_UART_IRQHandler+0x51e>
      return;
 8005508:	bf00      	nop
  }
}
 800550a:	37e8      	adds	r7, #232	; 0xe8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	4613      	mov	r3, r2
 800555c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	88fa      	ldrh	r2, [r7, #6]
 8005568:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	88fa      	ldrh	r2, [r7, #6]
 800556e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2222      	movs	r2, #34	; 0x22
 800557a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005594:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0201 	orr.w	r2, r2, #1
 80055a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f042 0220 	orr.w	r2, r2, #32
 80055b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b095      	sub	sp, #84	; 0x54
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	330c      	adds	r3, #12
 80055ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055ec:	643a      	str	r2, [r7, #64]	; 0x40
 80055ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3314      	adds	r3, #20
 8005606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	e853 3f00 	ldrex	r3, [r3]
 800560e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f023 0301 	bic.w	r3, r3, #1
 8005616:	64bb      	str	r3, [r7, #72]	; 0x48
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3314      	adds	r3, #20
 800561e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005628:	e841 2300 	strex	r3, r2, [r1]
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e5      	bne.n	8005600 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	2b01      	cmp	r3, #1
 800563a:	d119      	bne.n	8005670 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	330c      	adds	r3, #12
 8005642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	60bb      	str	r3, [r7, #8]
   return(result);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f023 0310 	bic.w	r3, r3, #16
 8005652:	647b      	str	r3, [r7, #68]	; 0x44
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	330c      	adds	r3, #12
 800565a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800565c:	61ba      	str	r2, [r7, #24]
 800565e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	6979      	ldr	r1, [r7, #20]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	613b      	str	r3, [r7, #16]
   return(result);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e5      	bne.n	800563c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800567e:	bf00      	nop
 8005680:	3754      	adds	r7, #84	; 0x54
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f7ff ff3d 	bl	8005524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b21      	cmp	r3, #33	; 0x21
 80056c4:	d13e      	bne.n	8005744 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ce:	d114      	bne.n	80056fa <UART_Transmit_IT+0x48>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d110      	bne.n	80056fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	1c9a      	adds	r2, r3, #2
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	621a      	str	r2, [r3, #32]
 80056f8:	e008      	b.n	800570c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	1c59      	adds	r1, r3, #1
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6211      	str	r1, [r2, #32]
 8005704:	781a      	ldrb	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29b      	uxth	r3, r3
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4619      	mov	r1, r3
 800571a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10f      	bne.n	8005740 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800572e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800573e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	e000      	b.n	8005746 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005744:	2302      	movs	r3, #2
  }
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b082      	sub	sp, #8
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005768:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff fecc 	bl	8005510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b08c      	sub	sp, #48	; 0x30
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b22      	cmp	r3, #34	; 0x22
 8005794:	f040 80ae 	bne.w	80058f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a0:	d117      	bne.n	80057d2 <UART_Receive_IT+0x50>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d113      	bne.n	80057d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	629a      	str	r2, [r3, #40]	; 0x28
 80057d0:	e026      	b.n	8005820 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057d8:	2300      	movs	r3, #0
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e4:	d007      	beq.n	80057f6 <UART_Receive_IT+0x74>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <UART_Receive_IT+0x82>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	e008      	b.n	8005816 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005810:	b2da      	uxtb	r2, r3
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005814:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29b      	uxth	r3, r3
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	4619      	mov	r1, r3
 800582e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005830:	2b00      	cmp	r3, #0
 8005832:	d15d      	bne.n	80058f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0220 	bic.w	r2, r2, #32
 8005842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695a      	ldr	r2, [r3, #20]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0201 	bic.w	r2, r2, #1
 8005862:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	2b01      	cmp	r3, #1
 8005878:	d135      	bne.n	80058e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	330c      	adds	r3, #12
 8005886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	613b      	str	r3, [r7, #16]
   return(result);
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f023 0310 	bic.w	r3, r3, #16
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a0:	623a      	str	r2, [r7, #32]
 80058a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	69f9      	ldr	r1, [r7, #28]
 80058a6:	6a3a      	ldr	r2, [r7, #32]
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e5      	bne.n	8005880 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	2b10      	cmp	r3, #16
 80058c0:	d10a      	bne.n	80058d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058dc:	4619      	mov	r1, r3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff fe2a 	bl	8005538 <HAL_UARTEx_RxEventCallback>
 80058e4:	e002      	b.n	80058ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fc fb2c 	bl	8001f44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e002      	b.n	80058f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	e000      	b.n	80058f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80058f4:	2302      	movs	r3, #2
  }
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3730      	adds	r7, #48	; 0x30
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005904:	b0c0      	sub	sp, #256	; 0x100
 8005906:	af00      	add	r7, sp, #0
 8005908:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591c:	68d9      	ldr	r1, [r3, #12]
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	ea40 0301 	orr.w	r3, r0, r1
 8005928:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	431a      	orrs	r2, r3
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	431a      	orrs	r2, r3
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005958:	f021 010c 	bic.w	r1, r1, #12
 800595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005966:	430b      	orrs	r3, r1
 8005968:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597a:	6999      	ldr	r1, [r3, #24]
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	ea40 0301 	orr.w	r3, r0, r1
 8005986:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	4b8f      	ldr	r3, [pc, #572]	; (8005bcc <UART_SetConfig+0x2cc>)
 8005990:	429a      	cmp	r2, r3
 8005992:	d005      	beq.n	80059a0 <UART_SetConfig+0xa0>
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4b8d      	ldr	r3, [pc, #564]	; (8005bd0 <UART_SetConfig+0x2d0>)
 800599c:	429a      	cmp	r2, r3
 800599e:	d104      	bne.n	80059aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059a0:	f7fe fd6c 	bl	800447c <HAL_RCC_GetPCLK2Freq>
 80059a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80059a8:	e003      	b.n	80059b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059aa:	f7fe fd53 	bl	8004454 <HAL_RCC_GetPCLK1Freq>
 80059ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059bc:	f040 810c 	bne.w	8005bd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80059ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80059d2:	4622      	mov	r2, r4
 80059d4:	462b      	mov	r3, r5
 80059d6:	1891      	adds	r1, r2, r2
 80059d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80059da:	415b      	adcs	r3, r3
 80059dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059e2:	4621      	mov	r1, r4
 80059e4:	eb12 0801 	adds.w	r8, r2, r1
 80059e8:	4629      	mov	r1, r5
 80059ea:	eb43 0901 	adc.w	r9, r3, r1
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a02:	4690      	mov	r8, r2
 8005a04:	4699      	mov	r9, r3
 8005a06:	4623      	mov	r3, r4
 8005a08:	eb18 0303 	adds.w	r3, r8, r3
 8005a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a10:	462b      	mov	r3, r5
 8005a12:	eb49 0303 	adc.w	r3, r9, r3
 8005a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a2e:	460b      	mov	r3, r1
 8005a30:	18db      	adds	r3, r3, r3
 8005a32:	653b      	str	r3, [r7, #80]	; 0x50
 8005a34:	4613      	mov	r3, r2
 8005a36:	eb42 0303 	adc.w	r3, r2, r3
 8005a3a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a44:	f7fb f85c 	bl	8000b00 <__aeabi_uldivmod>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4b61      	ldr	r3, [pc, #388]	; (8005bd4 <UART_SetConfig+0x2d4>)
 8005a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	011c      	lsls	r4, r3, #4
 8005a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a68:	4642      	mov	r2, r8
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	1891      	adds	r1, r2, r2
 8005a6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a70:	415b      	adcs	r3, r3
 8005a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a78:	4641      	mov	r1, r8
 8005a7a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a7e:	4649      	mov	r1, r9
 8005a80:	eb43 0b01 	adc.w	fp, r3, r1
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a98:	4692      	mov	sl, r2
 8005a9a:	469b      	mov	fp, r3
 8005a9c:	4643      	mov	r3, r8
 8005a9e:	eb1a 0303 	adds.w	r3, sl, r3
 8005aa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	eb4b 0303 	adc.w	r3, fp, r3
 8005aac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005abc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ac0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	18db      	adds	r3, r3, r3
 8005ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8005aca:	4613      	mov	r3, r2
 8005acc:	eb42 0303 	adc.w	r3, r2, r3
 8005ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ad6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ada:	f7fb f811 	bl	8000b00 <__aeabi_uldivmod>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4b3b      	ldr	r3, [pc, #236]	; (8005bd4 <UART_SetConfig+0x2d4>)
 8005ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	2264      	movs	r2, #100	; 0x64
 8005aee:	fb02 f303 	mul.w	r3, r2, r3
 8005af2:	1acb      	subs	r3, r1, r3
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005afa:	4b36      	ldr	r3, [pc, #216]	; (8005bd4 <UART_SetConfig+0x2d4>)
 8005afc:	fba3 2302 	umull	r2, r3, r3, r2
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b08:	441c      	add	r4, r3
 8005b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	464b      	mov	r3, r9
 8005b20:	1891      	adds	r1, r2, r2
 8005b22:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b24:	415b      	adcs	r3, r3
 8005b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b2c:	4641      	mov	r1, r8
 8005b2e:	1851      	adds	r1, r2, r1
 8005b30:	6339      	str	r1, [r7, #48]	; 0x30
 8005b32:	4649      	mov	r1, r9
 8005b34:	414b      	adcs	r3, r1
 8005b36:	637b      	str	r3, [r7, #52]	; 0x34
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b44:	4659      	mov	r1, fp
 8005b46:	00cb      	lsls	r3, r1, #3
 8005b48:	4651      	mov	r1, sl
 8005b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b4e:	4651      	mov	r1, sl
 8005b50:	00ca      	lsls	r2, r1, #3
 8005b52:	4610      	mov	r0, r2
 8005b54:	4619      	mov	r1, r3
 8005b56:	4603      	mov	r3, r0
 8005b58:	4642      	mov	r2, r8
 8005b5a:	189b      	adds	r3, r3, r2
 8005b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b60:	464b      	mov	r3, r9
 8005b62:	460a      	mov	r2, r1
 8005b64:	eb42 0303 	adc.w	r3, r2, r3
 8005b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b80:	460b      	mov	r3, r1
 8005b82:	18db      	adds	r3, r3, r3
 8005b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b86:	4613      	mov	r3, r2
 8005b88:	eb42 0303 	adc.w	r3, r2, r3
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b96:	f7fa ffb3 	bl	8000b00 <__aeabi_uldivmod>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <UART_SetConfig+0x2d4>)
 8005ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	2164      	movs	r1, #100	; 0x64
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	3332      	adds	r3, #50	; 0x32
 8005bb2:	4a08      	ldr	r2, [pc, #32]	; (8005bd4 <UART_SetConfig+0x2d4>)
 8005bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	f003 0207 	and.w	r2, r3, #7
 8005bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4422      	add	r2, r4
 8005bc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bc8:	e106      	b.n	8005dd8 <UART_SetConfig+0x4d8>
 8005bca:	bf00      	nop
 8005bcc:	40011000 	.word	0x40011000
 8005bd0:	40011400 	.word	0x40011400
 8005bd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005be2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005be6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005bea:	4642      	mov	r2, r8
 8005bec:	464b      	mov	r3, r9
 8005bee:	1891      	adds	r1, r2, r2
 8005bf0:	6239      	str	r1, [r7, #32]
 8005bf2:	415b      	adcs	r3, r3
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	1854      	adds	r4, r2, r1
 8005bfe:	4649      	mov	r1, r9
 8005c00:	eb43 0501 	adc.w	r5, r3, r1
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	00eb      	lsls	r3, r5, #3
 8005c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c12:	00e2      	lsls	r2, r4, #3
 8005c14:	4614      	mov	r4, r2
 8005c16:	461d      	mov	r5, r3
 8005c18:	4643      	mov	r3, r8
 8005c1a:	18e3      	adds	r3, r4, r3
 8005c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c20:	464b      	mov	r3, r9
 8005c22:	eb45 0303 	adc.w	r3, r5, r3
 8005c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c46:	4629      	mov	r1, r5
 8005c48:	008b      	lsls	r3, r1, #2
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c50:	4621      	mov	r1, r4
 8005c52:	008a      	lsls	r2, r1, #2
 8005c54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c58:	f7fa ff52 	bl	8000b00 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4b60      	ldr	r3, [pc, #384]	; (8005de4 <UART_SetConfig+0x4e4>)
 8005c62:	fba3 2302 	umull	r2, r3, r3, r2
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	011c      	lsls	r4, r3, #4
 8005c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	464b      	mov	r3, r9
 8005c80:	1891      	adds	r1, r2, r2
 8005c82:	61b9      	str	r1, [r7, #24]
 8005c84:	415b      	adcs	r3, r3
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	1851      	adds	r1, r2, r1
 8005c90:	6139      	str	r1, [r7, #16]
 8005c92:	4649      	mov	r1, r9
 8005c94:	414b      	adcs	r3, r1
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	00cb      	lsls	r3, r1, #3
 8005ca8:	4651      	mov	r1, sl
 8005caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cae:	4651      	mov	r1, sl
 8005cb0:	00ca      	lsls	r2, r1, #3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	4642      	mov	r2, r8
 8005cba:	189b      	adds	r3, r3, r2
 8005cbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	eb42 0303 	adc.w	r3, r2, r3
 8005cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	008b      	lsls	r3, r1, #2
 8005ce8:	4641      	mov	r1, r8
 8005cea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cee:	4641      	mov	r1, r8
 8005cf0:	008a      	lsls	r2, r1, #2
 8005cf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005cf6:	f7fa ff03 	bl	8000b00 <__aeabi_uldivmod>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4b38      	ldr	r3, [pc, #224]	; (8005de4 <UART_SetConfig+0x4e4>)
 8005d02:	fba3 2301 	umull	r2, r3, r3, r1
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	2264      	movs	r2, #100	; 0x64
 8005d0a:	fb02 f303 	mul.w	r3, r2, r3
 8005d0e:	1acb      	subs	r3, r1, r3
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	3332      	adds	r3, #50	; 0x32
 8005d14:	4a33      	ldr	r2, [pc, #204]	; (8005de4 <UART_SetConfig+0x4e4>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d20:	441c      	add	r4, r3
 8005d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d26:	2200      	movs	r2, #0
 8005d28:	673b      	str	r3, [r7, #112]	; 0x70
 8005d2a:	677a      	str	r2, [r7, #116]	; 0x74
 8005d2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d30:	4642      	mov	r2, r8
 8005d32:	464b      	mov	r3, r9
 8005d34:	1891      	adds	r1, r2, r2
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	415b      	adcs	r3, r3
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d40:	4641      	mov	r1, r8
 8005d42:	1851      	adds	r1, r2, r1
 8005d44:	6039      	str	r1, [r7, #0]
 8005d46:	4649      	mov	r1, r9
 8005d48:	414b      	adcs	r3, r1
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d58:	4659      	mov	r1, fp
 8005d5a:	00cb      	lsls	r3, r1, #3
 8005d5c:	4651      	mov	r1, sl
 8005d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d62:	4651      	mov	r1, sl
 8005d64:	00ca      	lsls	r2, r1, #3
 8005d66:	4610      	mov	r0, r2
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	189b      	adds	r3, r3, r2
 8005d70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d72:	464b      	mov	r3, r9
 8005d74:	460a      	mov	r2, r1
 8005d76:	eb42 0303 	adc.w	r3, r2, r3
 8005d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	663b      	str	r3, [r7, #96]	; 0x60
 8005d86:	667a      	str	r2, [r7, #100]	; 0x64
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d94:	4649      	mov	r1, r9
 8005d96:	008b      	lsls	r3, r1, #2
 8005d98:	4641      	mov	r1, r8
 8005d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d9e:	4641      	mov	r1, r8
 8005da0:	008a      	lsls	r2, r1, #2
 8005da2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005da6:	f7fa feab 	bl	8000b00 <__aeabi_uldivmod>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4b0d      	ldr	r3, [pc, #52]	; (8005de4 <UART_SetConfig+0x4e4>)
 8005db0:	fba3 1302 	umull	r1, r3, r3, r2
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	2164      	movs	r1, #100	; 0x64
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	3332      	adds	r3, #50	; 0x32
 8005dc2:	4a08      	ldr	r2, [pc, #32]	; (8005de4 <UART_SetConfig+0x4e4>)
 8005dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	f003 020f 	and.w	r2, r3, #15
 8005dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4422      	add	r2, r4
 8005dd6:	609a      	str	r2, [r3, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005dde:	46bd      	mov	sp, r7
 8005de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005de4:	51eb851f 	.word	0x51eb851f

08005de8 <__itoa>:
 8005de8:	1e93      	subs	r3, r2, #2
 8005dea:	2b22      	cmp	r3, #34	; 0x22
 8005dec:	b510      	push	{r4, lr}
 8005dee:	460c      	mov	r4, r1
 8005df0:	d904      	bls.n	8005dfc <__itoa+0x14>
 8005df2:	2300      	movs	r3, #0
 8005df4:	700b      	strb	r3, [r1, #0]
 8005df6:	461c      	mov	r4, r3
 8005df8:	4620      	mov	r0, r4
 8005dfa:	bd10      	pop	{r4, pc}
 8005dfc:	2a0a      	cmp	r2, #10
 8005dfe:	d109      	bne.n	8005e14 <__itoa+0x2c>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	da07      	bge.n	8005e14 <__itoa+0x2c>
 8005e04:	232d      	movs	r3, #45	; 0x2d
 8005e06:	700b      	strb	r3, [r1, #0]
 8005e08:	4240      	negs	r0, r0
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	4421      	add	r1, r4
 8005e0e:	f000 f805 	bl	8005e1c <__utoa>
 8005e12:	e7f1      	b.n	8005df8 <__itoa+0x10>
 8005e14:	2100      	movs	r1, #0
 8005e16:	e7f9      	b.n	8005e0c <__itoa+0x24>

08005e18 <itoa>:
 8005e18:	f7ff bfe6 	b.w	8005de8 <__itoa>

08005e1c <__utoa>:
 8005e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e1e:	4c1f      	ldr	r4, [pc, #124]	; (8005e9c <__utoa+0x80>)
 8005e20:	b08b      	sub	sp, #44	; 0x2c
 8005e22:	4605      	mov	r5, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	466e      	mov	r6, sp
 8005e28:	f104 0c20 	add.w	ip, r4, #32
 8005e2c:	6820      	ldr	r0, [r4, #0]
 8005e2e:	6861      	ldr	r1, [r4, #4]
 8005e30:	4637      	mov	r7, r6
 8005e32:	c703      	stmia	r7!, {r0, r1}
 8005e34:	3408      	adds	r4, #8
 8005e36:	4564      	cmp	r4, ip
 8005e38:	463e      	mov	r6, r7
 8005e3a:	d1f7      	bne.n	8005e2c <__utoa+0x10>
 8005e3c:	7921      	ldrb	r1, [r4, #4]
 8005e3e:	7139      	strb	r1, [r7, #4]
 8005e40:	1e91      	subs	r1, r2, #2
 8005e42:	6820      	ldr	r0, [r4, #0]
 8005e44:	6038      	str	r0, [r7, #0]
 8005e46:	2922      	cmp	r1, #34	; 0x22
 8005e48:	f04f 0100 	mov.w	r1, #0
 8005e4c:	d904      	bls.n	8005e58 <__utoa+0x3c>
 8005e4e:	7019      	strb	r1, [r3, #0]
 8005e50:	460b      	mov	r3, r1
 8005e52:	4618      	mov	r0, r3
 8005e54:	b00b      	add	sp, #44	; 0x2c
 8005e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e58:	1e58      	subs	r0, r3, #1
 8005e5a:	4684      	mov	ip, r0
 8005e5c:	fbb5 f7f2 	udiv	r7, r5, r2
 8005e60:	fb02 5617 	mls	r6, r2, r7, r5
 8005e64:	3628      	adds	r6, #40	; 0x28
 8005e66:	446e      	add	r6, sp
 8005e68:	460c      	mov	r4, r1
 8005e6a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005e6e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005e72:	462e      	mov	r6, r5
 8005e74:	42b2      	cmp	r2, r6
 8005e76:	f101 0101 	add.w	r1, r1, #1
 8005e7a:	463d      	mov	r5, r7
 8005e7c:	d9ee      	bls.n	8005e5c <__utoa+0x40>
 8005e7e:	2200      	movs	r2, #0
 8005e80:	545a      	strb	r2, [r3, r1]
 8005e82:	1919      	adds	r1, r3, r4
 8005e84:	1aa5      	subs	r5, r4, r2
 8005e86:	42aa      	cmp	r2, r5
 8005e88:	dae3      	bge.n	8005e52 <__utoa+0x36>
 8005e8a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005e8e:	780e      	ldrb	r6, [r1, #0]
 8005e90:	7006      	strb	r6, [r0, #0]
 8005e92:	3201      	adds	r2, #1
 8005e94:	f801 5901 	strb.w	r5, [r1], #-1
 8005e98:	e7f4      	b.n	8005e84 <__utoa+0x68>
 8005e9a:	bf00      	nop
 8005e9c:	080072f0 	.word	0x080072f0

08005ea0 <memset>:
 8005ea0:	4402      	add	r2, r0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d100      	bne.n	8005eaa <memset+0xa>
 8005ea8:	4770      	bx	lr
 8005eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8005eae:	e7f9      	b.n	8005ea4 <memset+0x4>

08005eb0 <__errno>:
 8005eb0:	4b01      	ldr	r3, [pc, #4]	; (8005eb8 <__errno+0x8>)
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	2000005c 	.word	0x2000005c

08005ebc <__libc_init_array>:
 8005ebc:	b570      	push	{r4, r5, r6, lr}
 8005ebe:	4d0d      	ldr	r5, [pc, #52]	; (8005ef4 <__libc_init_array+0x38>)
 8005ec0:	4c0d      	ldr	r4, [pc, #52]	; (8005ef8 <__libc_init_array+0x3c>)
 8005ec2:	1b64      	subs	r4, r4, r5
 8005ec4:	10a4      	asrs	r4, r4, #2
 8005ec6:	2600      	movs	r6, #0
 8005ec8:	42a6      	cmp	r6, r4
 8005eca:	d109      	bne.n	8005ee0 <__libc_init_array+0x24>
 8005ecc:	4d0b      	ldr	r5, [pc, #44]	; (8005efc <__libc_init_array+0x40>)
 8005ece:	4c0c      	ldr	r4, [pc, #48]	; (8005f00 <__libc_init_array+0x44>)
 8005ed0:	f000 f91e 	bl	8006110 <_init>
 8005ed4:	1b64      	subs	r4, r4, r5
 8005ed6:	10a4      	asrs	r4, r4, #2
 8005ed8:	2600      	movs	r6, #0
 8005eda:	42a6      	cmp	r6, r4
 8005edc:	d105      	bne.n	8005eea <__libc_init_array+0x2e>
 8005ede:	bd70      	pop	{r4, r5, r6, pc}
 8005ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee4:	4798      	blx	r3
 8005ee6:	3601      	adds	r6, #1
 8005ee8:	e7ee      	b.n	8005ec8 <__libc_init_array+0xc>
 8005eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eee:	4798      	blx	r3
 8005ef0:	3601      	adds	r6, #1
 8005ef2:	e7f2      	b.n	8005eda <__libc_init_array+0x1e>
 8005ef4:	08007320 	.word	0x08007320
 8005ef8:	08007320 	.word	0x08007320
 8005efc:	08007320 	.word	0x08007320
 8005f00:	08007324 	.word	0x08007324

08005f04 <sqrt>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	ed2d 8b02 	vpush	{d8}
 8005f0a:	ec55 4b10 	vmov	r4, r5, d0
 8005f0e:	f000 f825 	bl	8005f5c <__ieee754_sqrt>
 8005f12:	4622      	mov	r2, r4
 8005f14:	462b      	mov	r3, r5
 8005f16:	4620      	mov	r0, r4
 8005f18:	4629      	mov	r1, r5
 8005f1a:	eeb0 8a40 	vmov.f32	s16, s0
 8005f1e:	eef0 8a60 	vmov.f32	s17, s1
 8005f22:	f7fa fdaf 	bl	8000a84 <__aeabi_dcmpun>
 8005f26:	b990      	cbnz	r0, 8005f4e <sqrt+0x4a>
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	4629      	mov	r1, r5
 8005f30:	f7fa fd80 	bl	8000a34 <__aeabi_dcmplt>
 8005f34:	b158      	cbz	r0, 8005f4e <sqrt+0x4a>
 8005f36:	f7ff ffbb 	bl	8005eb0 <__errno>
 8005f3a:	2321      	movs	r3, #33	; 0x21
 8005f3c:	6003      	str	r3, [r0, #0]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2300      	movs	r3, #0
 8005f42:	4610      	mov	r0, r2
 8005f44:	4619      	mov	r1, r3
 8005f46:	f7fa fc2d 	bl	80007a4 <__aeabi_ddiv>
 8005f4a:	ec41 0b18 	vmov	d8, r0, r1
 8005f4e:	eeb0 0a48 	vmov.f32	s0, s16
 8005f52:	eef0 0a68 	vmov.f32	s1, s17
 8005f56:	ecbd 8b02 	vpop	{d8}
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}

08005f5c <__ieee754_sqrt>:
 8005f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f60:	ec55 4b10 	vmov	r4, r5, d0
 8005f64:	4e67      	ldr	r6, [pc, #412]	; (8006104 <__ieee754_sqrt+0x1a8>)
 8005f66:	43ae      	bics	r6, r5
 8005f68:	ee10 0a10 	vmov	r0, s0
 8005f6c:	ee10 2a10 	vmov	r2, s0
 8005f70:	4629      	mov	r1, r5
 8005f72:	462b      	mov	r3, r5
 8005f74:	d10d      	bne.n	8005f92 <__ieee754_sqrt+0x36>
 8005f76:	f7fa faeb 	bl	8000550 <__aeabi_dmul>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4620      	mov	r0, r4
 8005f80:	4629      	mov	r1, r5
 8005f82:	f7fa f92f 	bl	80001e4 <__adddf3>
 8005f86:	4604      	mov	r4, r0
 8005f88:	460d      	mov	r5, r1
 8005f8a:	ec45 4b10 	vmov	d0, r4, r5
 8005f8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f92:	2d00      	cmp	r5, #0
 8005f94:	dc0b      	bgt.n	8005fae <__ieee754_sqrt+0x52>
 8005f96:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005f9a:	4326      	orrs	r6, r4
 8005f9c:	d0f5      	beq.n	8005f8a <__ieee754_sqrt+0x2e>
 8005f9e:	b135      	cbz	r5, 8005fae <__ieee754_sqrt+0x52>
 8005fa0:	f7fa f91e 	bl	80001e0 <__aeabi_dsub>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	f7fa fbfc 	bl	80007a4 <__aeabi_ddiv>
 8005fac:	e7eb      	b.n	8005f86 <__ieee754_sqrt+0x2a>
 8005fae:	1509      	asrs	r1, r1, #20
 8005fb0:	f000 808d 	beq.w	80060ce <__ieee754_sqrt+0x172>
 8005fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fb8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8005fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fc0:	07c9      	lsls	r1, r1, #31
 8005fc2:	bf5c      	itt	pl
 8005fc4:	005b      	lslpl	r3, r3, #1
 8005fc6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8005fca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005fce:	bf58      	it	pl
 8005fd0:	0052      	lslpl	r2, r2, #1
 8005fd2:	2500      	movs	r5, #0
 8005fd4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005fd8:	1076      	asrs	r6, r6, #1
 8005fda:	0052      	lsls	r2, r2, #1
 8005fdc:	f04f 0e16 	mov.w	lr, #22
 8005fe0:	46ac      	mov	ip, r5
 8005fe2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fe6:	eb0c 0001 	add.w	r0, ip, r1
 8005fea:	4298      	cmp	r0, r3
 8005fec:	bfde      	ittt	le
 8005fee:	1a1b      	suble	r3, r3, r0
 8005ff0:	eb00 0c01 	addle.w	ip, r0, r1
 8005ff4:	186d      	addle	r5, r5, r1
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	f1be 0e01 	subs.w	lr, lr, #1
 8005ffc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006000:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006004:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006008:	d1ed      	bne.n	8005fe6 <__ieee754_sqrt+0x8a>
 800600a:	4674      	mov	r4, lr
 800600c:	2720      	movs	r7, #32
 800600e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006012:	4563      	cmp	r3, ip
 8006014:	eb01 000e 	add.w	r0, r1, lr
 8006018:	dc02      	bgt.n	8006020 <__ieee754_sqrt+0xc4>
 800601a:	d113      	bne.n	8006044 <__ieee754_sqrt+0xe8>
 800601c:	4290      	cmp	r0, r2
 800601e:	d811      	bhi.n	8006044 <__ieee754_sqrt+0xe8>
 8006020:	2800      	cmp	r0, #0
 8006022:	eb00 0e01 	add.w	lr, r0, r1
 8006026:	da57      	bge.n	80060d8 <__ieee754_sqrt+0x17c>
 8006028:	f1be 0f00 	cmp.w	lr, #0
 800602c:	db54      	blt.n	80060d8 <__ieee754_sqrt+0x17c>
 800602e:	f10c 0801 	add.w	r8, ip, #1
 8006032:	eba3 030c 	sub.w	r3, r3, ip
 8006036:	4290      	cmp	r0, r2
 8006038:	bf88      	it	hi
 800603a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800603e:	1a12      	subs	r2, r2, r0
 8006040:	440c      	add	r4, r1
 8006042:	46c4      	mov	ip, r8
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	3f01      	subs	r7, #1
 8006048:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800604c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006050:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006054:	d1dd      	bne.n	8006012 <__ieee754_sqrt+0xb6>
 8006056:	4313      	orrs	r3, r2
 8006058:	d01b      	beq.n	8006092 <__ieee754_sqrt+0x136>
 800605a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006108 <__ieee754_sqrt+0x1ac>
 800605e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800610c <__ieee754_sqrt+0x1b0>
 8006062:	e9da 0100 	ldrd	r0, r1, [sl]
 8006066:	e9db 2300 	ldrd	r2, r3, [fp]
 800606a:	f7fa f8b9 	bl	80001e0 <__aeabi_dsub>
 800606e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4640      	mov	r0, r8
 8006078:	4649      	mov	r1, r9
 800607a:	f7fa fce5 	bl	8000a48 <__aeabi_dcmple>
 800607e:	b140      	cbz	r0, 8006092 <__ieee754_sqrt+0x136>
 8006080:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006084:	e9da 0100 	ldrd	r0, r1, [sl]
 8006088:	e9db 2300 	ldrd	r2, r3, [fp]
 800608c:	d126      	bne.n	80060dc <__ieee754_sqrt+0x180>
 800608e:	3501      	adds	r5, #1
 8006090:	463c      	mov	r4, r7
 8006092:	106a      	asrs	r2, r5, #1
 8006094:	0863      	lsrs	r3, r4, #1
 8006096:	07e9      	lsls	r1, r5, #31
 8006098:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800609c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80060a0:	bf48      	it	mi
 80060a2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80060a6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80060aa:	461c      	mov	r4, r3
 80060ac:	e76d      	b.n	8005f8a <__ieee754_sqrt+0x2e>
 80060ae:	0ad3      	lsrs	r3, r2, #11
 80060b0:	3815      	subs	r0, #21
 80060b2:	0552      	lsls	r2, r2, #21
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0fa      	beq.n	80060ae <__ieee754_sqrt+0x152>
 80060b8:	02dc      	lsls	r4, r3, #11
 80060ba:	d50a      	bpl.n	80060d2 <__ieee754_sqrt+0x176>
 80060bc:	f1c1 0420 	rsb	r4, r1, #32
 80060c0:	fa22 f404 	lsr.w	r4, r2, r4
 80060c4:	1e4d      	subs	r5, r1, #1
 80060c6:	408a      	lsls	r2, r1
 80060c8:	4323      	orrs	r3, r4
 80060ca:	1b41      	subs	r1, r0, r5
 80060cc:	e772      	b.n	8005fb4 <__ieee754_sqrt+0x58>
 80060ce:	4608      	mov	r0, r1
 80060d0:	e7f0      	b.n	80060b4 <__ieee754_sqrt+0x158>
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	3101      	adds	r1, #1
 80060d6:	e7ef      	b.n	80060b8 <__ieee754_sqrt+0x15c>
 80060d8:	46e0      	mov	r8, ip
 80060da:	e7aa      	b.n	8006032 <__ieee754_sqrt+0xd6>
 80060dc:	f7fa f882 	bl	80001e4 <__adddf3>
 80060e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4640      	mov	r0, r8
 80060ea:	4649      	mov	r1, r9
 80060ec:	f7fa fca2 	bl	8000a34 <__aeabi_dcmplt>
 80060f0:	b120      	cbz	r0, 80060fc <__ieee754_sqrt+0x1a0>
 80060f2:	1ca0      	adds	r0, r4, #2
 80060f4:	bf08      	it	eq
 80060f6:	3501      	addeq	r5, #1
 80060f8:	3402      	adds	r4, #2
 80060fa:	e7ca      	b.n	8006092 <__ieee754_sqrt+0x136>
 80060fc:	3401      	adds	r4, #1
 80060fe:	f024 0401 	bic.w	r4, r4, #1
 8006102:	e7c6      	b.n	8006092 <__ieee754_sqrt+0x136>
 8006104:	7ff00000 	.word	0x7ff00000
 8006108:	20000060 	.word	0x20000060
 800610c:	20000068 	.word	0x20000068

08006110 <_init>:
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	bf00      	nop
 8006114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006116:	bc08      	pop	{r3}
 8006118:	469e      	mov	lr, r3
 800611a:	4770      	bx	lr

0800611c <_fini>:
 800611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611e:	bf00      	nop
 8006120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006122:	bc08      	pop	{r3}
 8006124:	469e      	mov	lr, r3
 8006126:	4770      	bx	lr
